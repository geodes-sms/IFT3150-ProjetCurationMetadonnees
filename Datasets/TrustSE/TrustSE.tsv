key	project	title	abstract	keywords	authors	venue	doi	references	pages	bibtex	screened_decision	final_decision	mode	inclusion_criteria	exclusion_criteria	reviewer_count	source	year	meta_title	link	publisher	metadata_missing
0	TrustSE	On the impact of security vulnerabilities in the npm package dependency network	Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues.	dependency network;  security vulnerability;  semantic versioning;  software ecosystem;  software repository mining; dependency network, security vulnerability, semantic versioning, software ecosystem, software repository mining	Decan, Alexandre; Mens, Tom; Constantinou, Eleni	MSR '18: Proceedings of the 15th International Conference on Mining Software Repositories	https://doi.org/10.1145/3196398.3196401		181-191	"""@inproceedings{10.1145/3196398.3196401,
    author = ""Decan, Alexandre and Mens, Tom and Constantinou, Eleni"",
    title = ""On the impact of security vulnerabilities in the npm package dependency network"",
    year = ""2018"",
    isbn = ""9781450357166"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3196398.3196401"",
    doi = ""10.1145/3196398.3196401"",
    abstract = ""Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues."",
    booktitle = ""Proceedings of the 15th International Conference on Mining Software Repositories"",
    pages = ""181-191"",
    numpages = ""11"",
    keywords = ""dependency network, security vulnerability, semantic versioning, software ecosystem, software repository mining"",
    location = ""Gothenburg, Sweden"",
    series = ""MSR '18""
}
"""	Included	Included				2	ACM		On the impact of security vulnerabilities in the npm package dependency network	https://doi.org/10.1145/3196398.3196401	Association for Computing Machinery	nan; References; Link
1	TrustSE	Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages	Package managers have become a vital part of the modern software development process. They allow developers to reuse third-party code, share their own code, minimize their codebase, and simplify the build process. However, recent reports showed that package managers have been abused by attackers to distribute malware, posing significant security risks to developers and end-users. For example, eslint-scope, a package with millions of weekly downloads in Npm, was compromised to steal credentials from developers. To understand the security gaps and the misplaced trust that make recent supply chain attacks possible, we propose a comparative framework to qualitatively assess the functional and security features of package managers for interpreted languages. Based on qualitative assessment, we apply well-known program analysis techniques such as metadata, static, and dynamic analysis to study registry abuse. Our initial efforts found 339 new malicious packages that we reported to the registries for removal. The package manager maintainers confirmed 278 (82\%) from the 339 reported packages where three of them had more than 100,000 downloads. For these packages we were issued official CVE numbers to help expedite the removal of these packages from infected victims. We outline the challenges of tailoring program analysis tools to interpreted languages and release our pipeline as a reference point for the community to build on and help in securing the software supply chain.		Duan, Ruian; Alrawi, Omar; Kasturi, Ranjita Pai; Elder, Ryan; Saltaformaggio, Brendan; Lee, Wenke	28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021)	https://doi.org/10.14722/ndss.2021.23055			"""@inproceedings{WOS:000680821200009,
    Author = ""Duan, Ruian and Alrawi, Omar and Kasturi, Ranjita Pai and Elder, Ryan and Saltaformaggio, Brendan and Lee, Wenke"",
    Book-Group-Author = ""Internet Soc"",
    Title = ""Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages"",
    Booktitle = ""28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021)"",
    Year = ""2021"",
    Note = ""28th Annual Network and Distributed System Security Symposium (NDSS), ELECTR NETWORK, FEB 21-25, 2021"",
    Abstract = ""Package managers have become a vital part of the modern software development process. They allow developers to reuse third-party code, share their own code, minimize their codebase, and simplify the build process. However, recent reports showed that package managers have been abused by attackers to distribute malware, posing significant security risks to developers and end-users. For example, eslint-scope, a package with millions of weekly downloads in Npm, was compromised to steal credentials from developers. To understand the security gaps and the misplaced trust that make recent supply chain attacks possible, we propose a comparative framework to qualitatively assess the functional and security features of package managers for interpreted languages. Based on qualitative assessment, we apply well-known program analysis techniques such as metadata, static, and dynamic analysis to study registry abuse. Our initial efforts found 339 new malicious packages that we reported to the registries for removal. The package manager maintainers confirmed 278 (82\\%) from the 339 reported packages where three of them had more than 100,000 downloads. For these packages we were issued official CVE numbers to help expedite the removal of these packages from infected victims. We outline the challenges of tailoring program analysis tools to interpreted languages and release our pipeline as a reference point for the community to build on and help in securing the software supply chain."",
    Publisher = ""INTERNET SOC"",
    Address = ""1775 WIEHLE AVE, STE 201, RESTON, VA, UNITED STATES"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Duan, R (Corresponding Author), Georgia Inst Technol, Atlanta, GA 30332 USA. Duan, Ruian; Alrawi, Omar; Kasturi, Ranjita Pai; Elder, Ryan; Saltaformaggio, Brendan; Lee, Wenke, Georgia Inst Technol, Atlanta, GA 30332 USA."",
    DOI = ""10.14722/ndss.2021.23055"",
    ISBN = ""1-891562-66-5"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Theory \\& Methods"",
    Affiliations = ""University System of Georgia; Georgia Institute of Technology"",
    ORCID-Numbers = ""Saltaformaggio, Brendan/0000-0001-5859-6925 Alrawi, Omar/0000-0002-4374-737X"",
    Funding-Acknowledgement = ""ONR {[}N00014-17-1-2895, N00014-15-1-2162, N00014-1-8-12662, N00014-19-1-2179]; NSF {[}1916550]; Cisco Systems; Division Of Computer and Network Systems; Direct For Computer \\& Info Scie \\& Enginr {[}1916550] Funding Source: National Science Foundation"",
    Funding-Text = ""The authors would like to thank the anonymous reviewers for their constructive comments and feedback. We also thank Professor William Enck for his guidance while shepherding this paper. This work was supported, in part, by ONR under grants N00014-17-1-2895, N00014-15-1-2162, N00014-1-8-12662 and N00014-19-1-2179, NSF under Award 1916550, and Cisco Systems under an unrestricted gift. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of our sponsors or collaborators."",
    Number-of-Cited-References = ""99"",
    Times-Cited = ""31"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""8"",
    Doc-Delivery-Number = ""BS0BG"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000680821200009"",
    OA = ""Bronze, Green Submitted"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages	https://www.webofscience.com/wos/woscc/full-record/WOS:000680821200009	INTERNET SOC	nan; Keywords; References; Pages
2	TrustSE	Toward an approach to measuring software trust	The authors have been involved in the development of an approach to measuring the trust of software, at some state in the software development life cycle. The primary emphasis has been on the use of well-known and generally accepted security and software engineering principles as a means for establishing software trust. A description of the critical issues related to software trust is provided here. A set of criteria classes consisting of various trust principle combinations is shown to provide a scale for measuring and comparing trust. The System V/MLS secure operating system development approach is used to demonstrate the effect of trust principles in a practical setting.	Software measurement; Programming; Security; Software engineering; Software testing; Books; Aerospace engineering; Operating systems; Counting circuits; Multilevel systems	E. Amoroso; T. Nguyen; J. Weiss; J. Watson; T. Starr	Proceedings. 1991 IEEE Computer Society Symposium on Research in Security and Privacy	https://doi.org/10.1109/RISP.1991.130788	"1.J. Watson and E. Amoroso, ""A Trusted Software Development Methodology"", Proceedings of the 13th National Computer Security Conference, 1990-October-1-4. Google Scholar; 2.""DoD 5200.28-STD"", Trusted Computer System Evaluation Criteria, 1983. Google Scholar; 3.C. Flink and J. Weiss, ""System V/MLS: Labeling and Mandatory Policy Alternatives"", AT Technical Journal, vol. 66, no. 3, May/June 1988. View Article  Google Scholar; 4.D. Parnas, ""Evaluation of Safety-Critical Software"", Communications of the ACM, vol. 33, no. 6, June 1990. CrossRef  Google Scholar; 5.P. G. Neumann, ""Computer Security Evaluation"", AFIPS Conference Proceedings, vol. 47, 1978. Google Scholar; 6.E. W. Dijkstra, ""Correctness Concerns and Among Other Things Why They Are Resented"" in Programming Methodology, Springer-Verlag, pp. 86, 1978. CrossRef  Google Scholar; 7.W. Turski, ""Software Engineering - Some Principles and Problems"" in Programming Methodology, Springer-Verlag, pp. 35, 1978. CrossRef  Google Scholar; 8.D. Gries, The Science of Programming, Springer-Verlag, pp. 163-165, 1981. CrossRef  Google Scholar; 9.K. Thompson, ""Reflections on Trusting Trust"", Communications of the ACM, vol. 27, no. 8, September 1984. CrossRef  Google Scholar; 10.E. W. Dijkstra, ""On the Cruelty of Really Teaching Computing Science"", Communications of the ACM, vol. 32, no. 12, December 1989. Google Scholar; 11.""Dod-STD-2167A"", Military Standard for Software Development, 1983. Google Scholar; 12.D. Gries, ""On Structured Programming"", Communications of the ACM, vol. 17, no. 11, November 1974. CrossRef  Google Scholar; 13.J. D. Musa, Software Reliability: Measurement Prediction and Application, McGraw-Hill, 1987. Google Scholar; 14.R Demillo, R. Lipton and A. Perlis, ""Social Processes and Proofs of Theorems"", Communications of the ACM, vol. 22, no. 5, May 1979. CrossRef  Google Scholar; 15.UNIX System V User Reference Manual, 1986. Google Scholar; 16.AT Sable System Users Guide, 1988. Google Scholar; 17.B. Smith-Thomas, Secure Multi-Level Windowing in a B1 Certifiable Secure UNIX Operating System, 1988. Google Scholar; 18.C. Dowell and P. Ramstedt, ""ComputerWatch"", Proceedings of the 13th National Computer Security Conference, 1990-October-1-4. Google Scholar; 19.C. Rubin, ""UNIX System V with B2 Security"", Proceedings of the 13th National Computer Security Conference, 1990-October-1-4. Google Scholar; 20.E. Amoroso and J. Weiss, ""Using Formal Specification as a Documentation Tool: A Case Study"", Proceedings of the Pacific Northwest Software Quality Conference, 1988-September. Google Scholar"			Included	Included				2	IEEE		Toward an approach to measuring software trust	https://ieeexplore.ieee.org/document/130788	IEEE	nan; Pages; Year; Bibtex
3	TrustSE	Selecting third-party libraries: the practitioners' perspective	The selection of third-party libraries is an essential element of virtually any software development project. However, deciding which libraries to choose is a challenging practical problem. Selecting the wrong library can severely impact a software project in terms of cost, time, and development effort, with the severity of the impact depending on the role of the library in the software architecture, among others. Despite the importance of following a careful library selection process, in practice, the selection of third-party libraries is still conducted in an ad-hoc manner, where dozens of factors play an influential role in the decision. In this paper, we study the factors that influence the selection process of libraries, as perceived by industry developers. To that aim, we perform a cross-sectional interview study with 16 developers from 11 different businesses and survey 115 developers that are involved in the selection of libraries. We systematically devised a comprehensive set of 26 technical, human, and economic factors that developers take into consideration when selecting a software library. Eight of these factors are new to the literature. We explain each of these factors and how they play a role in the decision. Finally, we discuss the implications of our work to library maintainers, potential library users, package manager developers, and empirical software engineering researchers.	software libraries;  library selection;  library adoption;  empirical software engineering;  APIs; software libraries, library selection, library adoption, empirical software engineering, APIs	Larios Vargas, Enrique; Aniche, Maur\'{\i}cio; Treude, Christoph; Bruntink, Magiel; Gousios, Georgios	ESEC/FSE 2020: Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering	https://doi.org/10.1145/3368089.3409711		245-256	"""@inproceedings{10.1145/3368089.3409711,
    author = ""Larios Vargas, Enrique and Aniche, Maur\'{\i}cio and Treude, Christoph and Bruntink, Magiel and Gousios, Georgios"",
    title = ""Selecting third-party libraries: the practitioners' perspective"",
    year = ""2020"",
    isbn = ""9781450370431"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3368089.3409711"",
    doi = ""10.1145/3368089.3409711"",
    abstract = ""The selection of third-party libraries is an essential element of virtually any software development project. However, deciding which libraries to choose is a challenging practical problem. Selecting the wrong library can severely impact a software project in terms of cost, time, and development effort, with the severity of the impact depending on the role of the library in the software architecture, among others. Despite the importance of following a careful library selection process, in practice, the selection of third-party libraries is still conducted in an ad-hoc manner, where dozens of factors play an influential role in the decision. In this paper, we study the factors that influence the selection process of libraries, as perceived by industry developers. To that aim, we perform a cross-sectional interview study with 16 developers from 11 different businesses and survey 115 developers that are involved in the selection of libraries. We systematically devised a comprehensive set of 26 technical, human, and economic factors that developers take into consideration when selecting a software library. Eight of these factors are new to the literature. We explain each of these factors and how they play a role in the decision. Finally, we discuss the implications of our work to library maintainers, potential library users, package manager developers, and empirical software engineering researchers."",
    booktitle = ""Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering"",
    pages = ""245-256"",
    numpages = ""12"",
    keywords = ""software libraries, library selection, library adoption, empirical software engineering, APIs"",
    location = ""Virtual Event, USA"",
    series = ""ESEC/FSE 2020""
}
"""	Included	Included				2	ACM		Selecting third-party libraries: The practitioners' perspective	https://dl.acm.org/doi/10.1145/3368089.3409711	Association for Computing Machinery	nan; References
4	TrustSE	Evaluating and selecting software packages: A review	Evaluating and selecting software packages that meet an organization's requirements is a difficult software engineering process. Selection of a wrong software package can turn out to be costly and adversely affect business processes. The aim of this paper is to provide a basis to improve the process of evaluation and selection of the software packages. This paper reports a systematic review of papers published in journals and conference proceedings. The review investigates methodologies for selecting software packages, software evaluation techniques, software evaluation criteria, and systems that support decision makers in evaluating software packages. The key findings of the review are: (1) analytic hierarchy process has been widely used for evaluation of the software packages, (2) there is lack of a common list of generic software evaluation criteria and its meaning, and (3) there is need to develop a framework comprising of software selection methodology, evaluation technique, evaluation criteria, and system to assist decision makers in software selection.	Evaluation criteria;; Software evaluation;; Software selection;; Software selection tools	Anil S. Jadhav; Rajendra M. Sonar	Information and Software Technology	https://doi.org/10.1016/j.infsof.2008.09.003	Adhikari, A., Lebow, M.I., Zhang, H.; Anderson, E.E., Chen, Y.-M.; Arditi, D., Singh, S.; Bandini, S., De Paoli, F., Manzoni, S., Mereghetti, P.; Bhuta, J., Boehm, B.; Blanc, L.A., Korn, W.M.A structured approach to the evaluation and selection of CASE tools(1992)ACM.Cited 2 times.; Le Blanc, L.A., Tawfik Jelassi, M.; Bozdag, C.E., Kahraman, C., Ruan, D.; Chau, P.Y.K.; Cochran, J.K., Chen, H.-N.; K. Collier, B. Carey, D. Sautter, C. Marjanierni, A methodology for evaluating and selecting data mining software, in: Proceedings of the 32nd Hawaii International Conference on System Sciences, 1999, pp. 1-11.; Colombo, E., Francalanci, C.Selecting CRM packages based on architectural, functional, and cost requirements: empirical validation of a hierarchical ranking model(2004)Requirements Engineering, 9, pp. 186-203.Cited 49 times.; Comella-Dorda, S., Dean, J.C., Morris, E., Oberndorf, P.; Davis, L., Williams, G.; Franch, X., Carvallo, J.P.; Franch, X., Carvallo, J.P.; Grau, G., Carvallo, J.P., Franch, X., Quer, C.; Hecht, B.; Hlupic, V., Paul, R.J.; Hlupic, Vlatka, Mann, Amardeep Singh; Ilia, X.B., Franch, X., Pastor, J.A.; Jarke, M., Vassiliou, Y.; Kathuria, R., Anandarajan, M., Igbaria, M.; Kim, J., Moon, J.Y.An AHP and survey for selecting workflow management systems(1997)International Journal of Intelligent Systems in Accounting, Finance, and Management, 6, pp. 141-161.Cited 13 times.; Kim, C.S., Yoon, Y.; Kiper, J.D., Howard, E., Ames, C.; Kitchenham, B., Linkman, S., Law, D.; B.A. Kitchenham, Evaluating software engineering methods and tools. Parts 5 to 8, ACM SIGSOFT notes, starting January 1996.; Kizzort, B.Selection of components for OTS component based systems(2001)IEEE.Cited 2 times.; J. Kontio, G. Caldiera, V.R. Basili, Defining factors, goals and criteria for reusable component evaluation, in: CASCON '96 Conference, Toronto, Canada, November 12-14, 1996.; Kontio, Jyrki; Kunda, D.; Lai, V.S., Trueblood, R.P., Wong, B.K.; Lawlis, P.K., Mark, K.E., Thomas, D.A., Courtheyn, T.A formal process for evaluating COTS software products(1997)IEEE Proceedings Software, 144 (3), pp. 149-192.; Lee, H.-S., Shen, P.-D., Chih, W.-L.; Leung, K.R.P.H, Leung, H.K.N; Lin, H.-Y., Hsu, P.-Y., Sheen, G.-J.A fuzzy-based decision making procedure for data warehouse system selection(2006)Expert Systems with Applications.Cited 5 times.; Misra, S.; Mohamed, A., Wanyama, T., Ruhe, G., Eberlein, A., Far, B.; Mohanty, R.P., Venkataraman, S.Use of analytic hierarchy process for selecting automated manufacturing systems(1993)International Journal of Operations and Production Management, 13 (8), pp. 45-57.Cited 64 times.; Mollaghasemi, M., Pet-Edwards, J.(1997)Technical Briefing: Making Multiple Objective Decisions.Cited 36 times.IEEE Computer Society Press, Los Alamitos, California; Morera, D.; Morisio, M., Tsoukias, A.; Nikoukaran, J., Paul, R.J.; Nikoukaran, J., Hlupic, V., Paul, R.J.; Nikoukaran, Jalal, Hlupic, Vlatka, Paul, Ray J.; Ngai, E.W.T., Chan, E.W.C.; Oh, K.S., Lee, N.Y., Rhew, S.Y.; Ossadnik, W., Lange, O.; Patel, N., Hlupic, V.; Perez, M., Rojas, T.; Phillips-Wren, G.E., Hahn, E.D., Forgionne, G.A.; du Plessis, A.L.; Reed, C.N.; Reimann, B.C., Waren, A.D.; Rincon, G., Alvarez, M., Perez, M., Hernandez, S.; Saaty, T.L.(1980)The Analytic Hierarchy Process.Cited 28047 times.McGraw-Hill, New York; Larry Sanders, G., Ghandforoush, P., Austin, L.M.; C.-D. Santiago, C. John, M. Edwin, O. Patricia, A process for COTS software product evaluation, ICCBSS 2002, LNCS 2255, 2002, pp. 86-96.; Sarkis, J., Talluri, S.; Shtub, A., Spiegler, I., Kapeliuk, A.; Stamelos, I., Tsoukias, A.; Stamelos, I., Vlahavas, I., Refanidis, I., Tsoukias, A.; Stylianou, A.C., Madey, G., Smith, R.D.Selection criteria for expert system shells: a socio-technical framework(1999)Communications of the ACM, 55 (10).; Teltumbde, A.; Tewoldeberhan, T.W., Verbraeck, A., Valentin, E., Bardonnet, G.; Toshtzar, M.; Triantaphyllou, E.(2000)Multi-Criteria Decision making Methods: A Comparative Study.Cited 2149 times.Springer; Verville, J., Halingten, A.; Vlahavas, I., Stamelos, I., Refanidis, I., Tsoukias, A.; Wei, C.-C., Chien, C.-F., Wang, M.-J.J.; Welzel, D., Hausen, H.-L.; De Wit, J., Herroelen, W.; Wright, P.; Yoon, K., Hwang, C.(1995)Multiple Attribute Decision-Making: An Introduction.Cited 1822 times.Sage Publisher; Zahedi, F.; Zahedi, F.			Included	Included				2	Scopus		Evaluating and selecting software packages: A review	https://www.scopus.com/record/display.uri?eid=2-s2.0-57849138244&origin=resultslist&sort=r-f&src=s&sid=e706bdd80c22493e930f4897ed70df8d&sot=b&sdt=b&s=TITLE%28evaluating+and+selecting+software+packages+a+review%29&sl=58&sessionSearchId=e706bdd80c22493e930f4897ed70df8d&relpos=0		nan; Venue; Authors; Pages; Year; Bibtex; Publisher
5	TrustSE	Framework for evaluation and selection of the software packages: A hybrid knowledge based system approach	Evaluation and selection of the software packages is complicated and time consuming decision making process. Selection of inappropriate software package can turn out to be costly and adversely affects business processes and functioning of the organization. In this paper we describe (i) generic methodology for software selection, (ii) software evaluation criteria, and (iii) hybrid knowledge based system (HKBS) approach to assist decision makers in evaluation and selection of the software packages. The proposed HKBS approach employs an integrated rule based and case based reasoning techniques. Rule based reasoning is used to capture user needs of the software package and formulate a problem case. Case based reasoning is used to retrieve and compare candidate software packages with the user needs of the package. This paper also evaluates and compares HKBS approach with the widely used existing software evaluation techniques such as analytic hierarchy process (AHP) and weighted scoring method (WSM).	Software evaluation; Software selection; Knowledge based system; Software evaluation;  Software selection;  Knowledge based system	Jadhav, Anil S.; Sonar, Rajendra M.	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2011.03.034		1394-1407	"""@article{WOS:000292227600011,
    Author = ""Jadhav, Anil S. and Sonar, Rajendra M."",
    Title = ""Framework for evaluation and selection of the software packages: A hybrid knowledge based system approach"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2011"",
    Volume = ""84"",
    Number = ""8"",
    Pages = ""1394-1407"",
    Month = ""AUG"",
    Abstract = ""Evaluation and selection of the software packages is complicated and time consuming decision making process. Selection of inappropriate software package can turn out to be costly and adversely affects business processes and functioning of the organization. In this paper we describe (i) generic methodology for software selection, (ii) software evaluation criteria, and (iii) hybrid knowledge based system (HKBS) approach to assist decision makers in evaluation and selection of the software packages. The proposed HKBS approach employs an integrated rule based and case based reasoning techniques. Rule based reasoning is used to capture user needs of the software package and formulate a problem case. Case based reasoning is used to retrieve and compare candidate software packages with the user needs of the package. This paper also evaluates and compares HKBS approach with the widely used existing software evaluation techniques such as analytic hierarchy process (AHP) and weighted scoring method (WSM). (C) 2011 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Jadhav, AS (Corresponding Author), Sinhgad Inst Management, Dept Comp, Pune 411041, Maharashtra, India. Jadhav, Anil S., Sinhgad Inst Management, Dept Comp, Pune 411041, Maharashtra, India. Sonar, Rajendra M., Indian Inst Technol, Shailesh J Mehta Sch Management, Bombay 400076, Maharashtra, India."",
    DOI = ""10.1016/j.jss.2011.03.034"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software evaluation; Software selection; Knowledge based system"",
    Keywords-Plus = ""SIMULATION SOFTWARE; EXPERT-SYSTEM; CRITERIA; QUALITY"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""a\\_s\\_jadhav74@yahoo.co.in rm\\_sonar@iitb.ac.in"",
    Affiliations = ""Indian Institute of Technology System (IIT System); Indian Institute of Technology (IIT) - Bombay"",
    ResearcherID-Numbers = ""Jadhav, Anil/D-6706-2018"",
    ORCID-Numbers = ""Jadhav, Anil/0000-0002-2684-1137"",
    Number-of-Cited-References = ""60"",
    Times-Cited = ""75"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""16"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""785KJ"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000292227600011"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Framework for evaluation and selection of the software packages: A hybrid knowledge based system approach	https://www.webofscience.com/wos/woscc/full-record/WOS:000292227600011	ELSEVIER SCIENCE INC	nan; References
6	TrustSE	Assessing Software Service Quality and Trustworthiness at Selection Time	The integration of external software in project development is challenging and risky, notably because the execution quality of the software and the trustworthiness of the software provider may be unknown at integration time. This is a timely problem and of increasing importance with the advent of the SaaS model of service delivery. Therefore, in choosing the SaaS service to utilize, project managers must identify and evaluate the level of risk associated with each candidate. Trust is commonly assessed through reputation systems; however, existing systems rely on ratings provided by consumers. This raises numerous issues involving the subjectivity and unfairness of the service ratings. This paper describes a framework for reputation-aware software service selection and rating. A selection algorithm is devised for service recommendation, providing SaaS consumers with the best possible choices based on quality, cost, and trust. An automated rating model, based on the expectancy-disconfirmation theory from market science, is also defined to overcome feedback subjectivity issues. The proposed rating and selection models are validated through simulations, demonstrating that the system can effectively capture service behavior and recommend the best possible choices.	Software quality; Risk management; Software maintenance; Costs; Software performance; Project management; Feedback; Monitoring; Business; Computer industry; Service Quality; Package Of Services; Selection Algorithm; Service Rate; Selection Framework; External Software; Service Recommendation; Reputation System; Service Behavior; Impact Of Variables; Decision Support; Quality Parameters; Future Behavior; Cost Of Services; Utility Value; User Satisfaction; Service Performance; Maximum Curvature; Provider Behavior; Utilization Variables; Forecasting Techniques; Quality Constraints; Service Offerings; Selection Of Metrics; Exponential Smoothing; Feedback Function; False Reports; Tangent Angle; Evaluation Rules; User Requirements; Software as a service (SaaS); software selection; service utility; review and rating; trust and reputation; risk management; SLA monitoring.	Noura Limam; Raouf Boutaba	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2010.2	"1.2008.; 2.2008.; 3.2007.; 4.2008.; 5.H. Ludwig, R.P. King and A. Keller, ""Web Service Level Agreements"", 2002. Google Scholar; 6.Y. Wang and J. Vassileva, ""A Review on Trust and Reputation for Web Service Selection"", Proc. 27th Intl Conf. Distributed Computing Systems Workshops, 2007. View Article  Google Scholar; 7.T. SaaS, ""Trust Saas: Putting the Trust in Software as a Service (SaaS)"", 2008. Google Scholar; 8.R.L. Oliver, ""A Cognitive Model of the Antecedents and Consequences of Satisfaction Decisions"", J. Marketing Research, vol. 17, pp. 460-469, Nov. 1980. CrossRef  Google Scholar; 9.J. Xiao and R. Boutaba, ""Assessing Network Service Profitability: Modeling from Market Science Perspective"", IEEE/ACM Trans. Networking, vol. 15, no. 6, pp. 1307-1320, Dec. 2007. View Article  Google Scholar; 10.V. Poladian, J.P. Sousa, D. Garlan and M. Shaw, ""Dynamic Configuration of Resource-Aware Services"", Proc. 26th Intl Conf. Software Eng., 2004. View Article  Google Scholar; 11.P. Brockwell and R. Davis, Introduction to Time Series and Forecasting., 2002. CrossRef  Google Scholar; 12.V. Tosic, K. Patel and B. Pagurek, ""WsolWeb Service Offerings Language"", Proc. Workshop Web Services e-Business and the Semantic Web, 2002. CrossRef  Google Scholar; 13.A. Keller and H. Ludwig, ""The WSLA Framework: Specifying and Monitoring Service Level Agreements for Web Services"", J. Network and System Management, vol. 11, no. 1, pp. 57-81, 2003. Google Scholar; 14.C. Zhou, L.-T. Chia and B.-S. Lee, ""DAML-QoS Ontology for Web Services"", Proc. IEEE Intl Conf. Web Services, 2004. View Article  Google Scholar; 15.M. Burstein, J. Hobbs, O. Lassila, D. Mcdermott, S. Mcilraith, S. Narayanan, et al., ""OWL-S: Semantic Markup for Web Services"", 2004. Google Scholar; 16.K. Kyriakos and P. Dimitris, ""A Semantic QoS-Based Web Service Discovery Algorithm for Over-Constrained Demands"", Proc. Third Intl Conf. Next Generation Web Services Practices, 2007. View Article  Google Scholar; 17.N. Limam and R. Boutaba, ""Assessing Service Quality and Trustworthiness at Selection Time"", Proc. 11th IEEE/IFIP Network Operations and Management Symp., 2008. View Article  Google Scholar; 18.T. Yu, Y. Zhang and K.-J. Lin, ""Efficient Algorithms for Web Services Selection with End-to-End QoS Constraints"", ACM Trans. Web, vol. 1, no. 1, 2007. CrossRef  Google Scholar; 19.G. Wu, J. Wei, X. Qiao and L. Li, ""A Bayesian Network Based QoS Assessment Model for Web Services"", Proc. IEEE Intl Conf. Services Computin, 2007. View Article  Google Scholar; 20.S.J.H. Yang, J.S.F. Hsieh, B.C.W. Lan and J.-Y. Chung, ""Composition and Evaluation of Trustworthy Web Services"", Proc. IEEE Intl Workshop Business Services Networks, 2005. CrossRef  Google Scholar; 21.A.S. Ali, S. Majithia, O.F. Rana and D.W. Walker, ""Reputation-Based Semantic Service Discovery"", Proc. 13th IEEE Intl Workshops Enabling Technologies: Infrastructure for Collaborative Enterprises, 2004. View Article  Google Scholar; 22.R. Wishart, R. Robinson, J. Indulska and A. Josang, ""Superstringrep: Reputation-Enhanced Service Discovery"", Proc. 28th Australasian Conf. Computer Science, 2005. Google Scholar; 23.F. Raimondi, J. Skene and W. Emmerich, ""Efficient Online Monitoring of Web-Service SLAs"", Proc. 16th ACM SIGSOFT Intl Symp. Foundations of Software Eng., pp. 170-180, 2008. CrossRef  Google Scholar; 24.J. Li, R. Conradi, O.P. Slyngstad, M. Torchiano, M. Morisio and C. Bunse, ""A State-of-the-Practice Survey of Risk Management in Development with Off-the-Shelf Software Components"", IEEE Trans. Software Eng., vol. 34, no. 2, pp. 271-286, Mar./Apr. 2008. View Article  Google Scholar; 25.J. Anselmi, D. Ardagna and P. Cremonesi, ""A QoS-Based Selection Approach of Autonomic Grid Services"", Proc. Workshop Service-Oriented Computing Performance: Aspects Issues and Approaches, 2007. CrossRef  Google Scholar; 26.L. Zeng, B. Benatallah, A.H. Ngu, M. Dumas, J. Kalagnanam and H. Chang, ""QoS-Aware Middleware for Web Services Composition"", IEEE Trans. Software Eng., vol. 30, no. 5, pp. 311-327, May 2004. View Article  Google Scholar; 27.L.-H. Vu, M. Hauswirth and K. Aberer, ""QoS-Based Service Selection and Ranking with Trust and Reputation Management"", Proc. 13th Conf. Cooperative Information Systems, 2005. CrossRef  Google Scholar; 28.J. Skene, F. Raimondi and W. Emmerich, ""Service-Level Agreements for Electronic Services"", IEEE Trans. Software Eng., vol. 36, no. 2, pp. 288-304, Mar./Apr. 2010. View Article  Google Scholar; 29.J.R. Douceur, ""The Sybil Attack"", Proc. First Intl Workshop Peer-to-Peer Systems, 2002. CrossRef  Google Scholar; 30.J. Skene, A. Skene, J. Crampton and W. Emmerich, ""The Monitorability of Service-Level Agreements for Application-Service Provision"", Proc. Sixth Intl Workshop Software and Performanc, pp. 3-14, 2007. CrossRef  Google Scholar"	559- 574		Included	Included				2	IEEE		Assessing software service quality and trustworthiness at selection time	https://ieeexplore.ieee.org/document/5383370	IEEE	nan; Year; Bibtex
7	TrustSE	The importance of trust in software engineers' assessment and choice of information sources	Engineers such as systems developers get most of their information from colleagues and internal reports. In the literature on engineers' information-seeking practices the generally agreed-upon explanation of this preference for close-by, internal information sources is that engineers follow a principle of least effort by choosing their information sources on the basis of ease of access rather than quality of contents. This study argues that engineers' preference for internal sources such as their colleagues is just as much a preference for sources with a known or easily determinable trustworthiness as it is a preference for information that is easily accessible. Trust is of central importance because quality is a perceived property and, thus, assessing the quality of an information source is essentially a matter of establishing to what extent one is willing to place trust in it. This can be done with greater ease and precision for familiar sources. A field study of the meetings in a software design project shows that in discussing and selecting information sources the software engineers devote significantly more attention to quality-related factors than to cost-related factors. It is also normal conversational practice at the meetings to accompany the mentioning of information sources that may be unknown to some project participants by information that puts them in context. Systems for managing knowledge and sharing expertise must recognise these rich means of forming a perception of the credibility of individual pieces of information.	Communication by engineers;; Information seeking;; Information sources;; Trust	Morten Hertzum	Information and Organization	https://doi.org/10.1016/S1471-7727(01)00007-0	Allen, T.J.(1977)Managing the Flow of Technology: Technology Transfer and the Dissemination of Technological Information Within the R&D Organization.Cited 2990 times.Cambridge, MA: MIT Press; Bichteler, J., Ward, D.Information-seeking behavior of geoscientists(1989)Special Libraries, 79 (3), pp. 169-178.Cited 50 times.; Bishop, A.P.; Chakrabarti, Alok K., Feineman, Stephen, Fuentevilla, William; GERSTBERGER, P.G., ALLEN, T.J.; Hertzum, M.Six roles of documents in professionals' work(1999)ECSCW'99: Proceedings of the Sixth European Conference on Computer Supported Cooperative Work, pp. 41-60.Cited 38 times.S. Bodker, M. Kyng, & K. Schmidt (Eds.). Dordrecht: Kluwer; Hertzum, M., Pejtersen, A.M.; Kidd, Alison; King, D.W., Casto, J., Jones, H.(1994)Communication by Engineers: A Literature Review of Engineers' Information Needs, Seeking Processes, and Use.Cited 62 times.Washington, DC: Council on Library Resources; Mintzberg, H.The manager's job: Folklore and fact(1975)Harvard Business Review, 53 (4), pp. 49-61.Cited 979 times.; Moenaert, R.K., Deschoolmeester, D., De Meyer, A., Souder, W.E.; Nochui, K.S., Allen, T.J.; Orr, R.H.The scientist as an information processor: A conceptual model illustrated with data on variables related to library utilization(1970)Communication among Scientists and Engineers, pp. 143-189.Cited 37 times.C. E. Nelson, & D. K. Pollock (Eds.). Lexington, MA: Heath Lexington Books; Pinelli, T.E., Bishop, A.P., Barclay, R.O., Kennedy, J.M.The information-seeking behavior of engineers(1993)Encyclopedia of Library and Information Science, 52, pp. 167-201.Cited 41 times.A. Kent, & C. M. Hall (Eds.). New York: Marcel Dekker; Rosenberg, V.; Shuchman, H.L.Information technology and the technologist: A report on a national study of American engineers(1982)International Forum on Information and Documentation, 7 (1), pp. 3-8.Cited 9 times.; Siemieniuch, C.E., Sinclair, M.A.; Symon, G., Long, K., Ellis, J.; Tseng, S., Fogg, B.J.; Valley, K.L., Moag, J., Bazerman, M.H.; Van House, Nancy A., Butler, Mark H., Schiff, Lisa R.; Von Seggern, M., Jourdain, J.M.Technical communications in engineering and science: The practices within a government defense laboratory(1996)Special Libraries, 87 (2), pp. 98-119.Cited 11 times.; Zipf, G.K.(1949)Human Behavior and the Principle of Least Effort.Cited 7896 times.Cambridge, MA: Addison-Wesley; Zucker, L.G., Darby, M.R., Brewer, M.B., Peng, Y.Collaboration structure and information dilemmas in biotechnology: Organizational boundaries as trust production(1996)Trust in Organizations: Frontiers of Theory and Research, pp. 90-113.Cited 106 times.R. M. Kramer, & T. R. Tyler (Eds.). Thousand Oaks, CA: Sage			Excluded	Excluded				2	Scopus		The importance of trust in software engineers' assessment and choice of information sources	https://www.scopus.com/record/display.uri?eid=2-s2.0-0003226090&origin=resultslist&sort=r-f&src=s&sid=edd72f68f81004dd4d942b783b875c9d&sot=b&sdt=b&s=TITLE%28the+importance+of+trust+in+software+engineers+assessment+and+choice+of+information+sources%29&sl=97&sessionSearchId=edd72f68f81004dd4d942b783b875c9d&relpos=0		nan; Venue; Authors; Pages; Year; Bibtex; Publisher
8	TrustSE	Quality Process-Oriented Software Credibility Measurement and Assessment	This paper discusses the measurement methods of the software credibility in three dimensions-management, process and the final product for quality process. And the software credibility is classified into different levels. The each level degree of membership of the software is got through calculating the each level degree of membership of each metric according to the membership function, and combining them based on Dempster-Shafer theory. Ultimately the comprehensive assessment of the software credibility is completed.	Software quality; Software measurement; Software testing; Project management; Programming; Software safety; Particle measurements; Stability; Computer science; Software development management; Credibility Assessment; Membership Function; Fuzzy Set; Evidence Theory; Value Of Level; Cybersecurity; Project Management; Access Control; Weight Levels; Software Defect; Software Product; Matching Degree; Specific Formula; Pressure Test; Safety Indicators; Software Requirements; Test Plan; Software Level; Software Reliability; Mean Time To Failure; Credibility Measure; Design Documents	Hongbing Qian; Xiaojie Zhu; Juan Ma; XiZhen Cao	2009 International Conference on Computational Intelligence and Software Engineering	https://doi.org/10.1109/CISE.2009.5364824	"1.""A Discussion of Basic Concepts and Terminology ACM SIGSOFT Software Engineering Notes page"", Trustworthy Software Systems, vol. 31, no. 6, November 2006. Google Scholar; 2.Reith Mark, Niu Jianwei and William H. Winsborough, ""Engineering Trust Management into Software Models"", IEEE, 2007. Google Scholar; 3.Kassem Saleh and Maryam Habil, ""The Security Requirements Behavior Model for Trustworthy Software"", International MCETECH Conference on e-Technologies, 2008. View Article  Google Scholar; 4.Li Meng, ""Research on the Software Safety Assessment of Safety Critical Systems"", COMPUTER ENGINEERING & SCIENCE, vol. 1.24, no. 2, 2002. Google Scholar; 5.zhu lei, ""Reasearch on the selection of software reliability model based on BP neural network"", Master paper, vol. 10, 2006. Google Scholar; 6.Liang Shengjie and Zhang Zhihua, ""Influence Research on Operational Profile to Credibility of the Software Reliability estimated Result"", COMPUTER ENGINEERING & SCIENCE, vol. 14, 2006. Google Scholar; 7.Shi Zhu, Xincheng Yuan, Weihua Ma and You Yi, ""Reliability Metrics Suitable for Aerospace Software Development"", Aerospace Control, vol. 22, no. 3, Jun. 2004. Google Scholar; 8.Shiping Yang, Guangze Xiong, Sang Nan and Xinyong Wu, ""Research on safety evaluation of high dependable software"", vol. 25, no. 2, Feb. 2004. Google Scholar; 9.Norman F. Schneidewind, ""Reliability Modeling for Safety-Critical Software"", IEEE TRANSACTIONS ON RELIABILITY, vol. 46, no. 1, MARCH 1997. View Article  Google Scholar; 10.Shiping Yang, Guangze Xiong and Sang Nan, ""Research on Safety Technology of Safety Critical Systems"", Journal of UEST of China, vol. 32, no. 2, Apr. 2003. Google Scholar; 11.Qin Zhidong, ""Research on Testing and Evaluating Theory of Reliability and Safety for High Dependability Software"", Dr. Paper, vol. 9, 2005. Google Scholar; 12.Zheng Yan, ""Predicting Trustworthiness for Component Software"", IEEE, 2007. CrossRef  Google Scholar; 13.Zhengping Liang, Xiaoli Liu, Guoqing Wu, Yang Min and Zhang Fan, ""A formal Framework for Trust management of Service-oriented Systems"", IEEE, 2007. Google Scholar; 14.Liu Fei, MA Ping, YANG Ming and WANG Zicai, ""Research on credibility quantification of complex simulation systems"", JOURNAL OF HARB IN INSTITUTE OF TECHNOLOGY, vol. 39, no. 11, Jan. 2007. Google Scholar; 15.SMETS Philippe, what is D-S. Google Scholar; 16.Laboratory for Internet Technology Institute of Software. Google Scholar"			Included	Included				2	IEEE		Quality Process-Oriented Software Credibility Measurement and Assessment	https://ieeexplore.ieee.org/document/5364824	IEEE	nan; Pages; Year; Bibtex
9	TrustSE	A Survey on Open Source Software Trustworthiness	Trustworthiness is a crucial characteristic when it comes to evaluating any product, even more so for open source software, which is now becoming widely used. The authors conducted a survey to identify the reasons and motivations that lead software companies to adopt or reject open source software; they then ranked, according to importance, the specific trust factors used when selecting an open source software component or product. The motivations and importance ranking of factors might be useful for both developers of open source software (to make their products and components more useful for other stakeholders) and to future prospective open source software users.	Open source software; Software reliability; Reliability; Software engineering; Open-source Software; Software Product; Software Companies; Ranking Of Factors; Development Process; Product Quality; Public Administration; Economic Factors; Important Group; Modularity; Project Management; Interoperability; Proprietary Software; Customer Requirements; Standard Architecture; Piece Of Software; Upper Management; Standard Compliance; open source software; trustworthiness; internal software qualities; external software qualities; pragmatic software engineering	Vieri del Bianco; Luigi Lavazza; Sandro Morasca; Davide Taibi	IEEE Software	https://doi.org/10.1109/MS.2011.93	"1.E. Amoroso, ""A Process-Oriented Methodology for Assessing and Improving Software Trustworthiness"", Proc. 2nd ACM Conf. Computer and Communications Security, pp. 39-50, 1994. CrossRef  Google Scholar; 2.L. Bernstein, ""Trustworthy Software Systems"", SIGSOFT Software Eng. Notes, vol. 30, no. 1, pp. 4-5, 2005. CrossRef  Google Scholar; 3.M. Hertzum, ""The Importance of Trust in Software Engineers' Assessment and Choice of Information Sources"", Information and Organization, vol. 12, no. 1, pp. 1-18, 2002. CrossRef  Google Scholar; 4.V. del Bianco, ""How European Software Industry Perceives OSS Trustworthiness and What Are the Specific Criteria to Establish Trust in OSS"", project official deliverable D5.1.1 QualiPSo Quality Platform for Open Source Software IST-FP6-IP-034763, 2008,  [online]  Available: www.qualipso.org/sites/default/files/A5.D1.5.1%20v2.pdf. Google Scholar; 5.N.E. Fenton and S.L. Pfleeger, ""Software Metrics: A Rigorous and Practical Approach"" in , PWS Publishing, 1998. Google Scholar; 6.D. Taibi, L. Lavazza and S. Morasca, ""Open-BQR: A Framework for the Assessment of OSS"", Open Source Development Adoption and Innovation, vol. 234, pp. 173-186, 2007. CrossRef  Google Scholar; 7.J. Li, ""Development with Off-the-Shelf Components: 10 Facts"", IEEE Software, vol. 26, no. 2, pp. 80-87, 2009. View Article  Google Scholar; 8.K. Ven, J. Verelst and H. Mannaert, ""Should You Adopt Open Source Software?"", IEEE Software, vol. 25, no. 3, pp. 54-59, 2008. View Article  Google Scholar; 9.K. Ven and J. Verelst, ""The Importance of External Support in the Adoption of Open Source Server Software"", Proc. Int'l Conf. Open Source Systems (OSS 2009), pp. 116-128, 2009. CrossRef  Google Scholar"	67- 75		Included	Included				2	IEEE		A survey on open source software trustworthiness	https://ieeexplore.ieee.org/document/5984797	IEEE	nan; Year; Bibtex
10	TrustSE	Software ecosystem call graph for dependency management	A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application.		Hejderup, Joseph; van Deursen, Arie; Gousios, Georgios	ICSE-NIER '18: Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results	https://doi.org/10.1145/3183399.3183417		101-104	"""@inproceedings{10.1145/3183399.3183417,
    author = ""Hejderup, Joseph and van Deursen, Arie and Gousios, Georgios"",
    title = ""Software ecosystem call graph for dependency management"",
    year = ""2018"",
    isbn = ""9781450356626"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3183399.3183417"",
    doi = ""10.1145/3183399.3183417"",
    abstract = ""A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application."",
    booktitle = ""Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results"",
    pages = ""101-104"",
    numpages = ""4"",
    location = ""Gothenburg, Sweden"",
    series = ""ICSE-NIER '18""
}
"""	Included	Included				2	ACM		Software ecosystem call graph for dependency management	https://doi.org/10.1145/3183399.3183417	Association for Computing Machinery	nan; Keywords; References; Link
11	TrustSE	Control, trust, power, and the dynamics of information system outsourcing relationships: A process study of contractual software development	This paper provides a longitudinal description and analysis of the evolving relationships between a university and vendors contracted to develop software systems. A contextualised social process model is developed and employed using data gathered over the decade-long process, focussing on the early years. The right levels of control and trust are conceptualised to lead to confidence that the development process is set on the right course. The study gives unique insights into the contractual software development process from a client's perspective together with pointers for more general applications of the findings related to control, trust, and bargaining power in customised information system development. The analysis of the data reveals how the client's actions oscillated between trust and control in three areas: performance, price level, and observed behaviour.	Information systems outsourcing; Relationship management; Power; Control; Trust; Reflective information system practitioner research; Information systems outsourcing;  Relationship management;  Power;  Control;  Trust;  Reflective information system practitioner research	Heiskanen, Ari; Newman, Mike; Eklin, Merja	JOURNAL OF STRATEGIC INFORMATION SYSTEMS	https://doi.org/10.1016/j.jsis.2008.10.001		268-286	"""@article{WOS:000261870900003,
    Author = ""Heiskanen, Ari and Newman, Mike and Eklin, Merja"",
    Title = ""Control, trust, power, and the dynamics of information system outsourcing relationships: A process study of contractual software development"",
    Journal = ""JOURNAL OF STRATEGIC INFORMATION SYSTEMS"",
    Year = ""2008"",
    Volume = ""17"",
    Number = ""4"",
    Pages = ""268-286"",
    Month = ""DEC"",
    Abstract = ""This paper provides a longitudinal description and analysis of the evolving relationships between a university and vendors contracted to develop software systems. A contextualised social process model is developed and employed using data gathered over the decade-long process, focussing on the early years. The right levels of control and trust are conceptualised to lead to confidence that the development process is set on the right course. The study gives unique insights into the contractual software development process from a client's perspective together with pointers for more general applications of the findings related to control, trust, and bargaining power in customised information system development. The analysis of the data reveals how the client's actions oscillated between trust and control in three areas: performance, price level, and observed behaviour. (C) 2008 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Heiskanen, A (Corresponding Author), Univ Oulu, Dept Informat Proc Sci, Kajaani Unit, POB 51, FIN-87101 Kajaani, Finland. Heiskanen, Ari, Univ Oulu, Dept Informat Proc Sci, Kajaani Unit, FIN-87101 Kajaani, Finland. Newman, Mike, Norwegian Sch Econ \\& Business Adm, N-5035 Bergen, Norway. Newman, Mike, Manchester Business Sch, Bergen, Norway. Eklin, Merja, Univ Helsinki, Informat Syst Serv, FIN-00014 Helsinki, Finland."",
    DOI = ""10.1016/j.jsis.2008.10.001"",
    ISSN = ""0963-8687"",
    EISSN = ""1873-1198"",
    Keywords = ""Information systems outsourcing; Relationship management; Power; Control; Trust; Reflective information system practitioner research"",
    Keywords-Plus = ""TRANSACTION COST THEORY; SOCIAL-PROCESS MODEL; DEVELOPMENT-PROJECTS; DESIGN SCIENCE; MIS RESEARCH; TECHNOLOGY; GOVERNANCE; LESSONS; PARTNERSHIPS; ORGANIZATION"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""Ari.Heiskanen@Oulu.Fi mike.newman@manchester.ac.uk merja.eklin@helsinki.fi"",
    Affiliations = ""University of Oulu; Norwegian School of Economics (NHH); University of Helsinki"",
    ORCID-Numbers = ""Newman, Michael/0000-0002-9305-5742"",
    Number-of-Cited-References = ""100"",
    Times-Cited = ""68"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""54"",
    Journal-ISO = ""J. Strateg. Inf. Syst."",
    Doc-Delivery-Number = ""386GS"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000261870900003"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Control, trust, power, and the dynamics of information system outsourcing relationships: A process study of contractual software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000261870900003	ELSEVIER SCIENCE BV	nan; References
12	TrustSE	Trusting a library: A study of the latency to adopt the latest Maven release	With the popularity of open source library (re)use in both industrial and open source settings, `trust' plays vital role in third-party library adoption. Trust involves the assumption of both functional and non-functional correctness. Even with the aid of dependency management build tools such as Maven and Gradle, research have still found a latency to trust the latest release of a library. In this paper, we investigate the trust of OSS libraries. Our study of 6,374 systems in Maven Super Repository suggests that 82% of systems are more trusting of adopting the latest library release to existing systems. We uncover the impact of maven on latent and trusted library adoptions.	Libraries; Software systems; Market research; Java; Data mining; Classification algorithms; Popularity; Salbutamol; Latest Release; Third-party Libraries; System Software; Latest Version; Informant Interviews; Software Engineering; Software Libraries; Release Version; Incompatibility Issues; Successful Release; Types Of Trust	Raula Gaikovina Kula; Daniel M. German; Takashi Ishio; Katsuro Inoue	2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)	https://doi.org/10.1109/SANER.2015.7081869	"1.M. Jang, ""Linux annoyances for geeks"", 2009. Google Scholar; 2.S. Raemaekers, A. van Deursen and J. Visser, ""Measuring software library stability through historical version analysis"", Proc. of Intl. Comf. Soft. Main. (ICSM), pp. 378-387, Sept 2012. CrossRef  Google Scholar; 3.S. Raemaekers, G. Nane, A. van Deursen and J. Visser, ""Testing principles current practices and effects of change localization"", Mining Soft. Repo. (MSR), pp. 257-266, May 2013. View Article  Google Scholar; 4.R. G. Kula, C. D. Roover, D. M. German, T. Ishio and K. Inoue, ""Visualizing the evolution of systems and their library dependencies"", Proc. of IEEE Work. Conf. on Soft. Viz. (VISSOFT), 2014. View Article  Google Scholar; 5.N. Kawamitsu, T. Ishio, T. Kanda, R. G. Kula, C. D. Roover and K. Inoue, ""Identifying source code reuse across repositories using lcs-based source code similarity"", Proc. of SCAM, 2014. View Article  Google Scholar; 6.S. Raemaekers, A. van Deursen and J. Visser, ""Semantic versioning versus breaking changes: A study of the maven repository"", Proc. of SCAM, pp. 215-224, Sept 2014. View Article  Google Scholar; 7.Z. Yan and C. Prehofer, ""Autonomic trust management for a component-based software system"", IEEE Transactions on Dependable and Secure Computing, vol. 8, no. 6, pp. 810-823, 2011. View Article  Google Scholar; 8.W. Hasselbring and R. Reussner, ""Toward trustworthy software systems"", Computer, vol. 39, no. 4, pp. 91-92, April 2006. View Article  Google Scholar; 9.R. V. Guha, R. Kumar, P. Raghavan and A. Tomkins, ""Propagation of trust and distrust"", WWW'04, pp. 403-412. CrossRef  Google Scholar; 10.R. Holmes and R. J. Walker, ""Informing Eclipse API production and consumption"", OOPSLA2007, pp. 70-74, 2007. CrossRef  Google Scholar; 11.C. De Roover, R. Lammel and E. Pek, ""Multi-dimensional exploration of api usage"", Proc. of Int. Conf. on Prog. Comp.(ICPC), 2013. CrossRef  Google Scholar; 12.Y. M. Mileva, V. Dallmeier, M. Burger and A. Zeller, ""Mining trends of library usage"", ERCIM Workshops, pp. 57-62, 2009. CrossRef  Google Scholar; 13.C. Teyton, J.-R. Falleri, M. Palyart and X. Blanc, ""A study of library migrations in java"", Journal of Software: Evolution and Process, vol. 26, no. 11, 2014. CrossRef  Google Scholar; 14.B. E. Cossette and R. J. Walker, ""Seeking the ground truth: a retroactive study on the evolution and migration of software libraries"", Proceedings of ACM SIGSOFT Int. Symp. on the Found. of Soft. Eng. (FSE), 2012. CrossRef  Google Scholar"			Included	Included				2	IEEE		Trusting a library: A study of the latency to adopt the latest maven release	https://ieeexplore.ieee.org/document/7081869	IEEE	nan; Pages; Year; Bibtex
13	TrustSE	Requirements engineering for trust management: Model, methodology, and reasoning	A number of recent proposals aim to incorporate security engineering into mainstream software engineering. Yet, capturing trust and security requirements at an organizational level, as opposed to an IT system level, and mapping these into security and trust management policies is still an open problem. This paper proposes a set of concepts founded on the notions of ownership, permission, and trust and intended for requirements modeling. It also extends Tropos, an agent-oriented software engineering methodology, to support security requirements engineering. These concepts are formalized and are shown to support the automatic verification of security and trust requirements using Datalog. To make the discussion more concrete, we illustrate the proposal with a Health Care case study.	Agent-oriented software;; Privilege management;; Requirements Engineering;; Security Engineering;; Trust models for business and organizations;; Verification and validation of software	Giorgini, Paolo; Massacci, Fabio; Mylopoulos, John; Zannone, Nicola	International Journal of Information Security	https://doi.org/10.1007/s10207-006-0005-7		257 - 274	"""@ARTICLE{Giorgini2006257,
    author = ""Giorgini, Paolo and Massacci, Fabio and Mylopoulos, John and Zannone, Nicola"",
    title = ""Requirements engineering for trust management: Model, methodology, and reasoning"",
    year = ""2006"",
    journal = ""International Journal of Information Security"",
    volume = ""5"",
    number = ""4"",
    pages = ""257 - 274"",
    doi = ""10.1007/s10207-006-0005-7"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33749035450\&doi=10.1007\%2fs10207-006-0005-7\&partnerID=40\&md5=d4850aa83d04ed643b58a32d8eb42b37"",
    affiliations = ""Department of Information and Communication Technology, University of Trento, Trento, Italy"",
    abstract = ""A number of recent proposals aim to incorporate security engineering into mainstream software engineering. Yet, capturing trust and security requirements at an organizational level, as opposed to an IT system level, and mapping these into security and trust management policies is still an open problem. This paper proposes a set of concepts founded on the notions of ownership, permission, and trust and intended for requirements modeling. It also extends Tropos, an agent-oriented software engineering methodology, to support security requirements engineering. These concepts are formalized and are shown to support the automatic verification of security and trust requirements using Datalog. To make the discussion more concrete, we illustrate the proposal with a Health Care case study. (c) Springer-Verlag 2006."",
    author_keywords = ""Agent-oriented software; Privilege management; Requirements Engineering; Security Engineering; Trust models for business and organizations; Verification and validation of software"",
    correspondence_address = ""N. Zannone; Department of Information and Communication Technology, University of Trento, Trento, Italy; email: zannone@dit.unitn.it"",
    issn = ""16155270"",
    language = ""English"",
    abbrev_source_title = ""Int. J. Inf. Secur."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 74""
}
"""	Excluded	Excluded				2	Scopus Signed In		Requirements engineering for trust management: model, methodology, and reasoning	https://www.scopus.com/record/display.uri?eid=2-s2.0-33749035450&origin=resultslist&sort=r-f&src=s&sid=6009114563a26a73f985c78f1303c603&sot=b&sdt=b&s=TITLE%28requirements+engineering+for+trust+management+model+methodology+and+reasoning%29&sl=84&sessionSearchId=6009114563a26a73f985c78f1303c603&relpos=0		nan; References; Publisher
14	TrustSE	FESR - Framework to evaluate Software Reliability based on software metrics	Evaluating reliability of software is hot concern for decision makers and software engineers seeing as if we assess, it cannot be mastered. It is common that reliability of system stratum could be employed for evaluating growth of testing of system with help of comparison of failure of currently implemented software with required system. It is also generic that reliability of system echelon assures improved utilization by the user consequently enhanced contentment of customers. In this paper, our goal is to put forward a meticulously analysis of reliability measurement process. As the existing approaches still lack software reliability, quality and its growth, successful generation of test cases, scalability with large software systems, cost and customer satisfaction. we have projected a new framework of software reliability measurement process based on software metrics. Our model is evaluated by comparing it with an existing model and a published case study. The control experiment is used to evaluate FESR Framework.	Mean Time to Failure;  Reliability Growth Metrics;  Service Level Objectives;  Software Quality; Mean Time to Failure, Reliability Growth Metrics, Service Level Objectives, Software Quality	Fahad, Hurriya; Ahmed, Irfan; Mahmood, Jabar; Saman, .; Batool, Khadija; Ali, Qasim	HP3C '24: Proceedings of the 2024 8th International Conference on High Performance Compilation, Computing and Communications	https://doi.org/10.1145/3675018.3675030		139-145	"""@inproceedings{10.1145/3675018.3675030,
    author = ""Fahad, Hurriya and Ahmed, Irfan and Mahmood, Jabar and Saman, . and Batool, Khadija and Ali, Qasim"",
    title = ""FESR - Framework to evaluate Software Reliability based on software metrics"",
    year = ""2024"",
    isbn = ""9798400716904"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3675018.3675030"",
    doi = ""10.1145/3675018.3675030"",
    abstract = ""Evaluating reliability of software is hot concern for decision makers and software engineers seeing as if we assess, it cannot be mastered. It is common that reliability of system stratum could be employed for evaluating growth of testing of system with help of comparison of failure of currently implemented software with required system. It is also generic that reliability of system echelon assures improved utilization by the user consequently enhanced contentment of customers. In this paper, our goal is to put forward a meticulously analysis of reliability measurement process. As the existing approaches still lack software reliability, quality and its growth, successful generation of test cases, scalability with large software systems, cost and customer satisfaction. we have projected a new framework of software reliability measurement process based on software metrics. Our model is evaluated by comparing it with an existing model and a published case study. The control experiment is used to evaluate FESR Framework."",
    booktitle = ""Proceedings of the 2024 8th International Conference on High Performance Compilation, Computing and Communications"",
    pages = ""139-145"",
    numpages = ""7"",
    keywords = ""Mean Time to Failure, Reliability Growth Metrics, Service Level Objectives, Software Quality"",
    location = ""Guangzhou, China"",
    series = ""HP3C '24""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Software reliability	https://doi.org/10.1145/3675018.3675030	Association for Computing Machinery	nan; References; Link
15	TrustSE	On the topology of package dependency networks: a comparison of three programming language ecosystems	Package-based software ecosystems are composed of thousands of interdependent software packages. Many empirical studies have focused on software packages belonging to a single software ecosystem, and suggest to generalise the results to more ecosystems. We claim that such a generalisation is not always possible, because the technical structure of software ecosystems can be very different, even if these ecosystems belong to the same domain. We confirm this claim through a study of three big and popular package-based programming language ecosystems: R's CRAN archive network, Python's PyPI distribution, and JavaScript's NPM package manager. We study and compare the structure of their package dependency graphs and reveal some important differences that may make it difficult to generalise the findings of one ecosystem to another one.	JavaScript;  Python;  R;  component dependency graph;  software distribution;  software ecosystem; JavaScript, Python, R, component dependency graph, software distribution, software ecosystem	Decan, Alexandre; Mens, Tom; Claes, Maelick	ECSAW '16: Proccedings of the 10th European Conference on Software Architecture Workshops	https://doi.org/10.1145/2993412.3003382		1-4	"""@inproceedings{10.1145/2993412.3003382,
    author = ""Decan, Alexandre and Mens, Tom and Claes, Maelick"",
    title = ""On the topology of package dependency networks: a comparison of three programming language ecosystems"",
    year = ""2016"",
    isbn = ""9781450347815"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2993412.3003382"",
    doi = ""10.1145/2993412.3003382"",
    abstract = ""Package-based software ecosystems are composed of thousands of interdependent software packages. Many empirical studies have focused on software packages belonging to a single software ecosystem, and suggest to generalise the results to more ecosystems. We claim that such a generalisation is not always possible, because the technical structure of software ecosystems can be very different, even if these ecosystems belong to the same domain. We confirm this claim through a study of three big and popular package-based programming language ecosystems: R's CRAN archive network, Python's PyPI distribution, and JavaScript's NPM package manager. We study and compare the structure of their package dependency graphs and reveal some important differences that may make it difficult to generalise the findings of one ecosystem to another one."",
    booktitle = ""Proccedings of the 10th European Conference on Software Architecture Workshops"",
    articleno = ""21"",
    numpages = ""4"",
    keywords = ""JavaScript, Python, R, component dependency graph, software distribution, software ecosystem"",
    location = ""Copenhagen, Denmark"",
    series = ""ECSAW '16""
}
"""	Excluded	Excluded				2	ACM		On the topology of package dependency networks: A comparison of three programming language ecosystems	https://doi.org/10.1145/2993412.3003382	Association for Computing Machinery	nan; References; Link
16	TrustSE	When GitHub Meets CRAN: An Analysis of Inter-Repository Package Dependency Problems	When developing software packages in a software ecosystem, an important and well-known challenge is how to deal with dependencies to other packages. In presence of multiple package repositories, dependency management tends to become even more problematic. For the R ecosystem of statistical computing, dependency management is currently insufficient to deal with multiple package versions and inter-repository package dependencies. We explore how the use of GitHub influences the R ecosystem, both for the distribution of R packages and for inter-repository package dependency management. We also discuss how these problems could be addressed.	Ecosystems; Metadata; Electronic mail; Data mining; Writing; Software packages; Dependency Problem; R Package; Popularity; Null Hypothesis; Metadata; Bioconductor; Development Of Platforms; Constraint Satisfaction; Continuous Integration; Software Installation; Distribution Platforms; Package Manager; Stack Overflow; Neotoma; Email Interviews; Description File; GitHub Projects; GitHub Repository; software repository mining; software ecosystem; package dependency management; software evolution; software distribution; GitHub; CRAN	Alexandre Decan; Tom Mens; Maelick Claes; Philippe Grosjean	2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)	https://doi.org/10.1109/SANER.2016.12	"1.R. A. Muenchen, ""The popularity of data analysis software"", Tech. Rep. 2015, April 2015,  [online]  Available: http://r4stats.com/articles/popularity/. Google Scholar; 2.K. Hornik, ""Are there too many R packages?"", Austrian Journal of Statistics, vol. 41, no. 1, pp. 59-66, 2012. Google Scholar; 3.J. Ooms, ""Possible directions for improving dependency versioning in R"", R Journal, vol. 5, no. 1, pp. 197-206, Jun. 2013. CrossRef  Google Scholar; 4.J. Leek, ""How i decide when to trust an R package"", November 2015,  [online]  Available: http://simplystatistics.org/?p=4409. Google Scholar; 5.A. Decan, T. Mens, M. Claes, N. Tabout and P. Grosjean, ""On the development and distribution of R packages: An empirical analysis of the R ecosystem"", Intl Workshop on Software Ecosystems (IWSECO 2015). Co-located with ECSAW 15, 2015. CrossRef  Google Scholar; 6.M. Claes, T. Mens and P. Grosjean, ""On the maintainability of CRAN packages"", Intl Conf. on Software Maintenance Reengineering and Reverse Engineering, pp. 308-312, 2014. View Article  Google Scholar; 7.M. Claes, ""maintaineR: A web-based dashboard for maintainers of CRAN packages"", Intl Conf. Software Maintenance and Evolution, 2014. View Article  Google Scholar; 8.D. M. German, B. Adams and A. E. Hassan, ""The evolution of the R software ecosystem"", European Conf. Software Maintenance and Reengineering, pp. 243-252, 2013. View Article  Google Scholar; 9.L. A. Dabbish, H. C. Stuart, J. Tsay and J. D. Herbsleb, ""Social coding in GitHub: transparency and collaboration in an open software repository"", Intl Conf. Computer Supported Cooperative Work, pp. 1277-1286, 2012. CrossRef  Google Scholar; 10.K. Blincoe, F. Harrison and D. Damian, ""Ecosystems in GitHub and a method for ecosystem identification using reference coupling"", 12th Working Conference on Mining Software Repositories, pp. 202-211, 2015. View Article  Google Scholar; 11.B. Vasilescu, V. Filkov and A. Serebrenik, ""StackOverflow and GitHub: Associations between software development and crowdsourced knowledge"", SocialCom. IEEE, pp. 188-195, 2013. View Article  Google Scholar; 12.B. Vasilescu, S. Van Schuylenburg, J. Wulms, A. Serebrenik and M. van den Brand, ""Continuous integration in a social-coding world: Empirical evidence from GitHub"", Intl Conf. Software Maintenance and Evolution, pp. 401-405, Sept 2014. View Article  Google Scholar; 13.F. Thung, T. F. Bissyande, D. Lo and L. Jiang, Network structure of social coding in GitHub, CSMR, pp. 323-326, 2013. Google Scholar; 14.Y. Yu, G. Yin, H. Wang and T. Wang, ""Exploring the patterns of social behavior in GitHub"", Intl Workshop on Crowd-based Software Development Methods and Technologies, pp. 31-36, 2014. CrossRef  Google Scholar; 15.F. W. Santana and C. M. L. Werner, ""Towards the analysis of software projects dependencies: An exploratory visual study of software ecosystems"", Intl Workshop on Software Ecosystems (IWSECO), vol. 987, pp. 7-18, 2013. Google Scholar; 16.J. M. Gonzalez-Barahona, G. Robles, M. Michlmayr, J. J. Amor and D. M. German, ""Macro-level software evolution: a case study of a large software compilation"", Empirical Software Engineering, vol. 14, no. 3, pp. 262-285, Mar. 2009. CrossRef  Google Scholar; 17.D. M. German, J. M. Gonzalez-Barahona and G. Robles, ""A model to understand the building and running interdependencies of software"", Working Conf. Reverse Engineering, pp. 140-149, 2007. Google Scholar; 18.G. Bavota, G. Canfora, M. Di Penta, R. Oliveto and S. Panichella, ""The evolution of project inter-dependencies in a software ecosystem: the case of Apache"", Intl Conf. Software Maintenance, pp. 280-289, 2013. View Article  Google Scholar; 19.P. Abate, R. D. Cosmo, R. Treinen and S. Zacchiroli, ""Dependency solving: A separate concern in component evolution management"", Journal of Systems and Software, vol. 85, no. 10, pp. 2228-2240, 2012. CrossRef  Google Scholar; 20.P. Abate, ""A modular package manager architecture"", Information  Software Technology, vol. 55, no. 2, pp. 459-474, 2013. CrossRef  Google Scholar; 21.T. Mens, ""Anonymized e-mail interviews with R package maintainers active on CRAN and GitHub"", Tech. Rep., 2016. Google Scholar; 22.K. Broman, ""R package primer - a minimal tutorial"", 2015,  [online]  Available: http://kbroman.org/pkg_primer/. Google Scholar; 23.""R package dependency issues when namespace is not attached"", 2015,  [online]  Available: http://r.789695.n4.nabble.com/R-tt4629828.html. Google Scholar; 24.""ANTsR: towards CRAN  standardization of development"", 2015,  [online]  Available: https://github.com/stnava/ANTsRlissues/8. Google Scholar; 25.I. Samoladas, L. Angelis and I. Stamelos, ""Survival analysis on the duration of open source projects"", Information  Software Technology, vol. 52, no. 9, pp. 902-922, 2010. CrossRef  Google Scholar; 26.""Writing robust R code: namespaces masking and using the '::' operator"", 2015,  [online]  Available: http://stackoverfiow.com/questions/10947159/writing-robust-r-code-namespaces-masking-and-using-the-operator. Google Scholar; 27.C. Bird, P. C. Rigby, E. T. Barr, D. J. Hamilton, D. M. German and P. T. Devanbu, ""The promises and perils of mining Git"", Working Conf. Mining Software Repositories. IEEE Computer Society, pp. 1-10, 2009. View Article  Google Scholar; 28.E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer, D. M. German and D. Damian, ""The promises and perils of mining GitHub"", Working Conf. Mining Software Repositories, pp. 92-101, 2014. CrossRef  Google Scholar; 29.J. D. Hunter, ""Matplotlib: A 2D graphics environment"", Computing In Science  Engineering, vol. 9, no. 3, pp. 90-95, 2007. View Article  Google Scholar"			Excluded	Excluded				2	IEEE		When GitHub meets CRAN: An analysis of inter-repository package dependency problems	https://ieeexplore.ieee.org/document/7476669	IEEE	nan; Pages; Year; Bibtex
17	TrustSE	A comprehensive approach for software dependency resolution	Software reuse is prevalent in software development. It is not uncommon that one software product may depend on numerous libraries/products in order to build, install, or run. Software reuse is difficult due to the complex interdependency relationships between software packages. In this work, we presented four approaches to retrieve such dependency information, each technique focuses on retrieving software dependency from a specific source, including source code, build scripts, binary files, and Debian spec. The presented techniques were realized by a prototype tool, DEx, which is applied to a large collection of Debian projects in a comprehensive evaluation. Through the comprehensive analysis, we evaluate the presented techniques, and compare them from various aspects.	software dependency; software reuse; free and open source software; Debian	Zhang, Hanyu	Electronic Theses and Dissertations (ETD)	https://dspace.library.uvic.ca/items/813ef826-f57f-4d9c-a4d8-3bfaa26e1786			"""nan"""	Excluded	Excluded				2	Google Scholar		A comprehensive approach for software dependency resolution	https://dspace.library.uvic.ca/items/813ef826-f57f-4d9c-a4d8-3bfaa26e1786	University of Victoria	
18	TrustSE	Security and trust requirements engineering	Integrating security concerns throughout the whole software development process is one of today's challenges in software and requirements engineering research. A challenge that so far has proved difficult to meet. The major difficulty is that providing security does not only require to solve technical problems but also to reason on the organization as a whole. This makes the usage of traditional software engineering methologies difficult or unsatisfactory: most proposals focus on protection aspects of security and explicitly deal with low level protection mechanisms and only an handful of them show the ability of capturing the high-level organizational security requirements, without getting suddenly bogged down into security protocols or cryptography algorithms. In this paper we critically review the state of the art in security requirements engineering and discuss the motivations that led us to propose the Secure Tropos methodology, a formal framework for modelling and analyzing security, that enhances the agent-oriented software development methodology i{*}/Tropos. We illustrate the Secure Tropos approach, a comprehensive case study, and discuss some later refinements of the Secure Tropos methodology to address some of its shortcomings. Finally, we introduce the ST-Tool, a CASE tool that supports our methodology.		Giorgini, P; Massacci, F; Zannone, N	FOUNDATIONS OF SECURITY ANALYSIS AND DESIGN III	https://www.webofscience.com/wos/woscc/full-record/WOS:000233993600008		237-272	"""@incollection{WOS:000233993600008,
    Author = ""Giorgini, P and Massacci, F and Zannone, N"",
    Editor = ""Aldini, A and Gorrieri, R and Martinelli, F"",
    Title = ""Security and trust requirements engineering"",
    Booktitle = ""FOUNDATIONS OF SECURITY ANALYSIS AND DESIGN III"",
    Series = ""Lecture Notes in Computer Science"",
    Year = ""2005"",
    Volume = ""3655"",
    Pages = ""237-272"",
    Abstract = ""Integrating security concerns throughout the whole software development process is one of today's challenges in software and requirements engineering research. A challenge that so far has proved difficult to meet. The major difficulty is that providing security does not only require to solve technical problems but also to reason on the organization as a whole. This makes the usage of traditional software engineering methologies difficult or unsatisfactory: most proposals focus on protection aspects of security and explicitly deal with low level protection mechanisms and only an handful of them show the ability of capturing the high-level organizational security requirements, without getting suddenly bogged down into security protocols or cryptography algorithms. In this paper we critically review the state of the art in security requirements engineering and discuss the motivations that led us to propose the Secure Tropos methodology, a formal framework for modelling and analyzing security, that enhances the agent-oriented software development methodology i{*}/Tropos. We illustrate the Secure Tropos approach, a comprehensive case study, and discuss some later refinements of the Secure Tropos methodology to address some of its shortcomings. Finally, we introduce the ST-Tool, a CASE tool that supports our methodology."",
    Publisher = ""SPRINGER-VERLAG BERLIN"",
    Address = ""HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Univ Trent, Dept Informat \\& Commun Technol, Trento, Italy. Univ Trent, Dept Informat \\& Commun Technol, Trento, Italy."",
    ISSN = ""0302-9743"",
    EISSN = ""1611-3349"",
    ISBN = ""3-540-28955-0"",
    Keywords-Plus = ""MANAGEMENT; METHODOLOGY"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""giorgini@dit.unitn.it massacci@dit.unitn.it zannone@dit.unitn.it"",
    Affiliations = ""Fondazione Bruno Kessler; FBK-ICT - Center for Information \\& Communication Technology; University of Trento"",
    ResearcherID-Numbers = ""Massacci, Fabio/C-2662-2012 Giorgini, Paolo/G-7886-2012 Zannone, Nicola/H-1318-2012"",
    ORCID-Numbers = ""Zannone, Nicola/0000-0002-9081-5996 Massacci, Fabio/0000-0002-1091-8486 Giorgini, Paolo/0000-0003-4152-9683"",
    Number-of-Cited-References = ""61"",
    Times-Cited = ""35"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""6"",
    Doc-Delivery-Number = ""BDK55"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000233993600008"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Security and trust requirements engineering	https://www.webofscience.com/wos/woscc/full-record/WOS:000233993600008	SPRINGER-VERLAG BERLIN	nan; Keywords; References
19	TrustSE	A process-oriented methodology for assessing and improving software trustworthiness	A high-level, technical summary of the Trusted Software Methodology (TSM) is provided in this paper. The trust principles and trust classes that comprise the TSM are presented and several engineering investigations and case studies surrounding the TSM are outlined. Appendices are included that highlight important areas of the TSM.		Amoroso, Edward; Taylor, Carol; Watson, John; Weiss, Jonathan	CCS '94: Proceedings of the 2nd ACM Conference on Computer and communications security	https://doi.org/10.1145/191177.191188		39-50	"""@inproceedings{10.1145/191177.191188,
    author = ""Amoroso, Edward and Taylor, Carol and Watson, John and Weiss, Jonathan"",
    title = ""A process-oriented methodology for assessing and improving software trustworthiness"",
    year = ""1994"",
    isbn = ""0897917324"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/191177.191188"",
    doi = ""10.1145/191177.191188"",
    abstract = ""A high-level, technical summary of the Trusted Software Methodology (TSM) is provided in this paper. The trust principles and trust classes that comprise the TSM are presented and several engineering investigations and case studies surrounding the TSM are outlined. Appendices are included that highlight important areas of the TSM."",
    booktitle = ""Proceedings of the 2nd ACM Conference on Computer and Communications Security"",
    pages = ""39-50"",
    numpages = ""12"",
    location = ""Fairfax, Virginia, USA"",
    series = ""CCS '94""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	ACM		A process-oriented methodology for assessing and improving software trustworthiness	https://doi.org/10.1145/191177.191188	Association for Computing Machinery	nan; Keywords; References; Link
20	TrustSE	Enhancing functionality in an enterprise software package	Although enterprise resource planning (ERP) packages strive to integrate all the major processes of a firm, customers typically discover that some essential functionality is lacking. To address this issue and to complement their capabilities, both ERP vendors and customers increasingly recognize the importance of collaboration. Using a grounded theory approach, this study's objective is to derive a theoretical understanding of how customers collaborated on enhancements to an ERP module. The main contribution is, therefore, a theoretical model that relates the two processes - selection of participants, and interorganizational collaboration - to share knowledge of a subsystem's best practices. Important findings are that `swift trust' from the occupational community, conflict resolution, reciprocity, and informal networks impact functionality enhancement. The implication from these findings is that a deeper understanding of the functionality enhancement process benefits not only team members, but also ERP customers and collaborators overall.	Computer supported cooperative work; Data structures; Decision support systems; Decision theory; Groupware; Resource allocation; Strategic planning; User interfaces; Value engineering; Enterprise resource planning (ERP); Functionality enhancement process; Information management; Computer supported cooperative work;  Data structures;  Decision support systems;  Decision theory;  Groupware;  Resource allocation;  Strategic planning;  User interfaces;  Value engineering;  Enterprise resource planning (ERP);  Functionality enhancement process;  Information management	Scott, Judy E.; Kaindl, Lisa	Information & management	https://doi.org/10.1016/S0378-7206(99)00040-3		111 - 122	"""@ARTICLE{Scott2000111,
    author = ""Scott, Judy E. and Kaindl, Lisa"",
    title = ""Enhancing functionality in an enterprise software package"",
    year = ""2000"",
    journal = ""Information \& management"",
    volume = ""37"",
    number = ""3"",
    pages = ""111 - 122"",
    doi = ""10.1016/S0378-7206(99)00040-3"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0033896397\&doi=10.1016\%2fS0378-7206\%2899\%2900040-3\&partnerID=40\&md5=2bda7eb512ccfd47b0e0e3ec642e0990"",
    affiliations = ""Graduate School of Business, The University of Texas at Austin, Austin, TX 78712-1175, United States; Dell Computer Corporation, 2214 West Braker Lane, Suite D, Austin, TX 78758-4053, United States"",
    abstract = ""Although enterprise resource planning (ERP) packages strive to integrate all the major processes of a firm, customers typically discover that some essential functionality is lacking. To address this issue and to complement their capabilities, both ERP vendors and customers increasingly recognize the importance of collaboration. Using a grounded theory approach, this study's objective is to derive a theoretical understanding of how customers collaborated on enhancements to an ERP module. The main contribution is, therefore, a theoretical model that relates the two processes - selection of participants, and interorganizational collaboration - to share knowledge of a subsystem's best practices. Important findings are that `swift trust' from the occupational community, conflict resolution, reciprocity, and informal networks impact functionality enhancement. The implication from these findings is that a deeper understanding of the functionality enhancement process benefits not only team members, but also ERP customers and collaborators overall."",
    keywords = ""Computer supported cooperative work; Data structures; Decision support systems; Decision theory; Groupware; Resource allocation; Strategic planning; User interfaces; Value engineering; Enterprise resource planning (ERP); Functionality enhancement process; Information management"",
    publisher = ""Elsevier Science Publishers B.V."",
    issn = ""03787206"",
    coden = ""IMAND"",
    language = ""English"",
    abbrev_source_title = ""Inf Manage"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 110""
}
"""	Excluded	Excluded				2	Scopus Signed In		Enhancing functionality in an enterprise software package	https://www.scopus.com/record/display.uri?eid=2-s2.0-0033896397&origin=resultslist&sort=r-f&src=s&sid=5be8e22d99304ea4f30ea0837581f399&sot=b&sdt=b&s=TITLE%28enhancing+functionality+in+an+enterprise+software+package%29&sl=64&sessionSearchId=5be8e22d99304ea4f30ea0837581f399&relpos=0	Elsevier Science Publishers B.V	nan; References
21	TrustSE	Validation of Ultra-High Dependability for Software-based Systems	Modern society depends on computers for a number of critical tasks in which failure can have very high costs. As a consequence, high levels of dependability (reliability, safety, etc.) are required from such computers, including their software. Whenever a quantitative approach to risk is adopted, these requirements must be stated in quantitative terms, and a rigorous demonstration of their being attained is necessary. For software used in the most critical roles, such demonstrations are not usually supplied. The fact is that the dependability requirements often lie near the limit of the current state of the art, or beyond, in terms not only of the ability to satisfy them, but also, and more often, of the ability to demonstrate that they are satisfied in the individual operational products (validation). We discuss reasons why such demonstrations cannot usually be provided with the means available: reliability growth models, testing with stable reliability, structural dependability modelling, as well as more informal arguments based on good engineering practice. We state some rigorous arguments about the limits of what can be validated with each of such means. Combining evidence from these different sources would seem to raise the levels that can be validated; yet this improvement is not such as to solve the problem. It appears that engineering practice must take into account the fact that no solution exists, at present, for the validation of ultra-high dependability in systems relying on complex software.		Littlewood, Bev; Strigini, Lorenzo	Predictably Dependable Computing Systems	https://doi.org/10.1007/978-3-642-79789-7_27		473--493	"""@InProceedings{10.1007/978-3-642-79789-7_27,
    author = ""Littlewood, Bev and Strigini, Lorenzo"",
    editor = ""Randell, Brian and Laprie, Jean-Claude and Kopetz, Hermann and Littlewood, Bev"",
    title = ""Validation of Ultra-High Dependability for Software-based Systems"",
    booktitle = ""Predictably Dependable Computing Systems"",
    year = ""1995"",
    publisher = ""Springer Berlin Heidelberg"",
    address = ""Berlin, Heidelberg"",
    pages = ""473--493"",
    abstract = ""Modern society depends on computers for a number of critical tasks in which failure can have very high costs. As a consequence, high levels of dependability (reliability, safety, etc.) are required from such computers, including their software. Whenever a quantitative approach to risk is adopted, these requirements must be stated in quantitative terms, and a rigorous demonstration of their being attained is necessary. For software used in the most critical roles, such demonstrations are not usually supplied. The fact is that the dependability requirements often lie near the limit of the current state of the art, or beyond, in terms not only of the ability to satisfy them, but also, and more often, of the ability to demonstrate that they are satisfied in the individual operational products (validation). We discuss reasons why such demonstrations cannot usually be provided with the means available: reliability growth models, testing with stable reliability, structural dependability modelling, as well as more informal arguments based on good engineering practice. We state some rigorous arguments about the limits of what can be validated with each of such means. Combining evidence from these different sources would seem to raise the levels that can be validated; yet this improvement is not such as to solve the problem. It appears that engineering practice must take into account the fact that no solution exists, at present, for the validation of ultra-high dependability in systems relying on complex software."",
    isbn = ""978-3-642-79789-7""
}
"""	Excluded	Excluded				2	Springer Link		Validation of ultra-high dependability for software-based systems	https://link.springer.com/chapter/10.1007/978-3-642-79789-7_27	Springer Berlin Heidelberg	nan; Keywords; References
22	TrustSE	Competition and collaboration in requirements engineering: A case study of an emerging software ecosystem	Increasingly, small to medium software producing organisations are working together in collaboration networks to supply complex compositions of their products and services to customers. In this paper, we present a case study of two software companies that are evolving their partnership towards the creation of a software ecosystem. We investigate the impacts of their tightening partnership on software product management, with a focus on requirements engineering practices. We observe that the requirements definition and negotiation processes are directly affected by their fluid collaborative and competitive relationships. Power disputes, volatile roles and mismatches in release synchronisation are also aspects observed in the studied software ecosystem.We extract several observations from the case study that support small to medium software firms in making decisions within their software ecosystem.	Companies; Software; Ecosystems; Interviews; Collaboration; Planning; Requirements Engineering; Software Ecosystems; Software Product; Software Companies; Product Development; Main Product; Business Model; Product Characteristics; Project Management; Development Team; Literature In The Field; Product Release; New Product Development; Market Segmentation; Retail Market; Software Quality; Customer Requirements; Integration Project; Technical Team; Case Company; Integration Requirements; Partner Companies; Coopetition; Future Release; Alliance	George Valenca; Carina Alves; Virginia Heimann; Slinger Jansen; Sjaak Brinkkemper	2014 IEEE 22nd International Requirements Engineering Conference (RE)	https://doi.org/10.1109/RE.2014.6912289	"1.G. Hanssen and T. Dyba, ""Theoretical foundations of software ecosystems,"" in Proc. 3rd International Workshop on Software Ecosystems, 2012, pp. 6-17. Google Scholar; 2.S. Jansen, A. Finkelstein, and S. Brinkkemper, ""A sense of community: A research agenda for software ecosystems,"" presented at the ICSE Companion, 2009, pp. 187-190. View Article  Google Scholar; 3.G. Hanssen, ""A longitudinal case study of an emerging software ecosystem: Implications for practice and theory,"" Journal of Systems and Software, vol. 85, no. 7, pp. 1455-1466, 2012. CrossRef  Google Scholar; 4.L. Yu, ""The market-driven software ecosystem,"" IT Professional, vol. 15, no. 5, pp. 46-50, 2013. View Article  Google Scholar; 5.M. Khalil, P. Dominic, H. Kazemian, and U. Habib, ""A study to examine if integration of technology acceptance model's (tam) features help in building a hybrid digital business ecosystem framework for small and medium enterprises (smes),"" in Proc. of Frontiers of Information Technology. FIT'11, 2011, pp. 161-166. View Article  Google Scholar; 6.J. Bosch, ""From software product lines to software ecosystems,"" in Proc. 13th International Software Product Line Conference, 2009, pp. 111-119. Google Scholar; 7.O. Barbosa, R. Pereira, C. Alves, C. Werner, and S. Jansen, ""A systematic mapping study on software ecosystems from a three-dimensional perspective,"" in Software Ecosystems-Analyzing and Managing Business Networks in the Software Industry, S. Jansen, S. Brinkkemper, and M. Cusumano, Eds. Edward Elgar Pub. Ltd., 2013, ch. 3, pp. 59-83. CrossRef  Google Scholar; 8.F. Santana and C. Werner, ""Towards the analysis of software projects dependencies: An exploratory visual study of software ecosystems,"" in Proc. 5th International Workshop on Software Ecosystems, 2013, pp. 7-18. Google Scholar; 9.K. Manikas and G. Hansen, ""Software ecosystems-a systematic literature review,"" J. Syst. Softw., vol. 86, no. 5, pp. 1294-1306, 2013. CrossRef  Google Scholar; 10.T. Mens and M. Goeminne, ""Analysing the evolution of social aspects of open source software ecosystems,"" in Proc. Third International Workshop on Software Ecosystems, CEUR-WS, 2011, pp. 1-14. Google Scholar; 11.M. Anvaari and S. Jansen, ""Evaluating architectural openness in mobile software platforms,"" in Proc. Fourth European Conference on Software Architecture: Companion Volume, 2010, p. 8592. CrossRef  Google Scholar; 12.S. Draxler, A. Jung, and G. Stevens, ""Managing software portfolios: A comparative study,"" in End-User Development, M. Costabile, Y. Dittrich, G. Fischer, and A. Piccinno, Eds. Springer Berlin Heidelberg, 2011, pp. 337-342. Google Scholar; 13.P. Runeson and M. Host, ""Guidelines for conducting and reporting case study research in software engineering,"" Empirical Software Engineering, vol. 14, pp. 131-164, 2009. CrossRef  Google Scholar; 14.(2013) Weft qda. [Online]. Available: http://www.pressure.to/qda/ Google Scholar; 15.(2014) Mps.br. [Online]. Available: http://www.softex.br/mpsbr/ Google Scholar; 16.J. Moore, ""Predators and prey: a new ecology of competition,"" Harvard Business Review, vol. 3, no. 71, pp. 75-86, 1993. Google Scholar; 17.M. Iansiti and R. Levien, ""Strategy as ecology,"" Harvard Business Review, vol. 3, no. 82, pp. 68-78, 2004. Google Scholar; 18.J. van Angeren, V. Blijleven, and S. Jansen, ""Relationship intimacy in software ecosystems: A survey of the dutch software industry,"" in Proc. International Conference on Management of Emergent Digital EcoSystems, 2011, pp. 68-75. CrossRef  Google Scholar; 19.T. Isckia and D. Lescop, ""Open innovation within business ecosystems: A tale from amazon.com,"" Communications & Strategies, vol. 2, no. 74, pp. 37-54, 2009. Google Scholar; 20.M. Levy, C. Lobbecke, and P. Powell, ""Smes co-opetition and knowledge sharing: The is role,"" in Proc. 9th European Conference on Information Systems, 2001, pp. 640-652. Google Scholar; 21.A. Baars and S. Jansen, ""A framework for software ecosystem governance,"" in Proc. Third International Conference on Software Business, 2012, pp. 168-180. CrossRef  Google Scholar; 22.S. Jansen, S. Brinkkemper, J. Souer, and L. Luinenburg, ""Shades of gray: Opening up a software producing organization with the open software enterprise model,"" Journal of Systems and Software, vol. 85, no. 7, pp. 1495-1510, 2012. CrossRef  Google Scholar; 23.P. E. Harland and S. Wst, ""Strategic, brand and platform requirements for an interactive innovation process in business ecosystems,"" in Proc. 18th International Conference on Engineering, Technology and Innovation, 2012, pp. 1-9. View Article  Google Scholar; 24.A. Gawer and M. Cusumano, Platform Leadership: How Intel, Microsoft, and Cisco Drive Industry Innovation. Harvard Business School Press, 2002. Google Scholar; 25.P. Artz, I. van de Weerd, S. Brinkkemper, and J. Fieggen, ""Productization: Transforming from developing customer-specific software to product software,"" in Proc. First International Conference on Software Business, 2010, pp. 90-102. CrossRef  Google Scholar; 26.T. Suomalainen, O. Saloi, P. Abrahamsson, and J. Simil ""Software product roadmapping in a volatile business environment."" CrossRef  Google Scholar; 27.K. Vlaanderen, S. Jansen, S. Brinkkemper, and E. Jaspers, ""The agile requirements refinery: Applying scrum principles to software product management,"" Information & Software Technology, vol. 53, no. 1, pp. 58-70, 2011. CrossRef  Google Scholar; 28.A. Milne and N. A. M. Maiden, ""Power and politics in requirements engineering: Embracing the dark side?"" Requir. Eng., vol. 17, no. 2, pp. 83-98, 2012. CrossRef  Google Scholar; 29.S. Fricker and M. Glinz, ""Comparison of requirements hand-off, analysis, and negotiation: Case study,"" in Proc. 18th IEEE International Conference on Requirements Engineering, 2010, p. 167. View Article  Google Scholar"			Excluded	Excluded				2	IEEE		Competition and collaboration in requirements engineering: A case study of an emerging software ecosystem	https://ieeexplore.ieee.org/document/6912289	IEEE	nan; Pages; Year; Bibtex
23	TrustSE	Managing the unmanageable: Integrating the supply chain with new developments in software	Unlike management in a traditional organization, supply chain management is a collaborative effort among various organizations or entities whose well being relies on dependency relationships within a value chain. As such, shared information and the ability to analyze it effectively are crucial to the effort. Supply chain management software is evolving rapidly in three major areas: supply chain planning and execution, warehouse management, and transportation management systems. Emerging trends, which include third party software systems, collaborative technology, increased optimization, and use of expert systems, provide the potential for considerable adjustment and improvement in supply chain strategies.	Customer satisfaction; Decision support systems; Expert systems; Industrial management; Information technology; Logistics; Optimization; Resource allocation; Societies and institutions; Strategic planning; Warehouses; Enterprise resource planning (ERP); Supply chain management; Supply chain planning; Warehouse management; Software engineering; Customer satisfaction;  Decision support systems;  Expert systems;  Industrial management;  Information technology;  Logistics;  Optimization;  Resource allocation;  Societies and institutions;  Strategic planning;  Warehouses;  Enterprise resource planning (ERP);  Supply chain management;  Supply chain planning;  Warehouse management;  Software engineering	Green, Forrest B.	Supply Chain Management	https://doi.org/10.1108/13598540110407741	Atkinson, H.Shippers search for seamless solution(1998)Journal of Commerce and Commercial, 418, p. 16A.4 November; Carey, W.Choosing the right system for your company(2001)APICS PresentationRoanoke, VA, 13 February; Handfield, R.B., Nichols Jr., E.L.(1999)Introduction to Supply Chain Management.Cited 1093 times.Prentice-Hall, Upper Saddle River, NJ; Hazan, E.ERP applications gain popularity(1999)Transmission & Distribution World, pp. 36-38.Cited 2 times.April; Leibs, S.; McKendrick, J.Next-generation supply chain management(2001)Enterprise Systems Journal, 16 (7), pp. 62-65.July; Materials handling and the supply chain(1997)Modern Materials Handling, 52 (14 DECEMBER), pp. 16-17.Modern Materials Handling; Rogers, A.Supply chain software vendor aims to generate more revenue through existing partnerships(2001)Computer Reseller News, 2, p. 62.July 2; Shtub, A.(1999)Enterprise Resource Planning (ERP).Cited 47 times.Kluwer Academic Publishers, Norwell, MA; Walker, W.T., Alber, K.L.Understanding supply chain management(1999)APICS the Performance Advantage, 9 (1 JANUARY), pp. 38-43.Cited 12 times.	208 - 211	"""@ARTICLE{Green2001208,
    author = ""Green, Forrest B."",
    title = ""Managing the unmanageable: Integrating the supply chain with new developments in software"",
    year = ""2001"",
    journal = ""Supply Chain Management"",
    volume = ""6"",
    number = ""5"",
    pages = ""208 - 211"",
    doi = ""10.1108/13598540110407741"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-3843059064\&doi=10.1108\%2f13598540110407741\&partnerID=40\&md5=49ab14c4570c1dd191ddc20118f4b4d3"",
    affiliations = ""Department of Management, Radford University, Radford, VA, United States"",
    abstract = ""Unlike management in a traditional organization, supply chain management is a collaborative effort among various organizations or entities whose well being relies on dependency relationships within a value chain. As such, shared information and the ability to analyze it effectively are crucial to the effort. Supply chain management software is evolving rapidly in three major areas: supply chain planning and execution, warehouse management, and transportation management systems. Emerging trends, which include third party software systems, collaborative technology, increased optimization, and use of expert systems, provide the potential for considerable adjustment and improvement in supply chain strategies."",
    author_keywords = ""Expert systems; Logistics; Optimization; Planning; Software development; Supply-chain management"",
    keywords = ""Customer satisfaction; Decision support systems; Expert systems; Industrial management; Information technology; Logistics; Optimization; Resource allocation; Societies and institutions; Strategic planning; Warehouses; Enterprise resource planning (ERP); Supply chain management; Supply chain planning; Warehouse management; Software engineering"",
    issn = ""13598546"",
    language = ""English"",
    abbrev_source_title = ""Supply Chain Manage."",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 22""
}
"""	Excluded	Excluded				2	Scopus Signed In		Managing the unmanageable: integrating the supply chain with new developments in software	https://www.scopus.com/record/display.uri?eid=2-s2.0-3843059064&origin=resultslist&sort=r-f&src=s&sid=6800396742d2aa42c82ae0b909e47844&sot=b&sdt=b&s=TITLE%28managing+the+unmanageable+integrating+the+supply+chain+with+new+developments+in+software%29&sl=95&sessionSearchId=6800396742d2aa42c82ae0b909e47844&relpos=0		nan; Publisher
24	TrustSE	Human factors in information security: The insider threat - Who can you trust these days?	This paper examines some of the key issues relating to insider threats to information security and the nature of loyalty and betrayal in the context of organisational, cultural factors and changing economic and social factors. It is recognised that insiders pose security risks due to their legitimate access to facilities and information, knowledge of the organisation and the location of valuable assets. Insiders will know how to achieve the greatest impact whilst leaving little evidence. However, organisations may not have employed effective risk management regimes to deal with the speed and scale of change, for example the rise of outsourcing. Outsourcing can lead to the fragmentation of protection barriers and controls and increase the number of people treated as full time employees. Regional and cultural differences will manifest themselves in differing security threat and risk profiles. At the same time, the recession is causing significant individual (and organisational) uncertainty and may prompt an increase in abnormal behaviour in long-term employees and managers - those traditionally most trusted - including members of the security community. In this environment, how can organisations know who to trust and how to maintain this trust? The paper describes a practitioner's view of the issue and the approaches used by BT to assess and address insider threats and risks. Proactive measures need to be taken to mitigate against insider attacks rather than reactive measures after the event. A key priority is to include a focus on insiders within security risk assessments and compliance regimes. The application of technology alone will not provide solutions. Security controls need to be workable in a variety of environments and designed, implemented and maintained with people's behaviour in mind. Solutions need to be agile and build and maintain trust and secure relationships over time. This requires a focus on human factors, education and awareness and greater attention on the security 'aftercare' of employees and third parties.	Human engineering; Outsourcing; Risk analysis; Risk assessment; Risk management; Cultural difference; Cultural factors; Full-time employees; Human factors; Information security; Insider attack; Insider Threat; Key issues; Know-how; Management regime; Proactive measures; Protection barrier; Risk profile; Security community; Security controls; Security risk assessments; Security risks; Security threats; Social factor; Third parties; Security of data; Human engineering;  Outsourcing;  Risk analysis;  Risk assessment;  Risk management;  Cultural difference;  Cultural factors;  Full-time employees;  Human factors;  Information security;  Insider attack;  Insider Threat;  Key issues;  Know-how;  Management regime;  Proactive measures;  Protection barrier;  Risk profile;  Security community;  Security controls;  Security risk assessments;  Security risks;  Security threats;  Social factor;  Third parties;  Security of data	Colwill, Carl	Information Security Technical Report	https://doi.org/10.1016/j.istr.2010.04.004		186 - 196	"""@ARTICLE{Colwill2009186,
    author = ""Colwill, Carl"",
    title = ""Human factors in information security: The insider threat - Who can you trust these days?"",
    year = ""2009"",
    journal = ""Information Security Technical Report"",
    volume = ""14"",
    number = ""4"",
    pages = ""186 - 196"",
    doi = ""10.1016/j.istr.2010.04.004"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956652072\&doi=10.1016\%2fj.istr.2010.04.004\&partnerID=40\&md5=16df3905647b1f840e9fc1268206e62e"",
    affiliations = ""BT Security, United Kingdom"",
    abstract = ""This paper examines some of the key issues relating to insider threats to information security and the nature of loyalty and betrayal in the context of organisational, cultural factors and changing economic and social factors. It is recognised that insiders pose security risks due to their legitimate access to facilities and information, knowledge of the organisation and the location of valuable assets. Insiders will know how to achieve the greatest impact whilst leaving little evidence. However, organisations may not have employed effective risk management regimes to deal with the speed and scale of change, for example the rise of outsourcing. Outsourcing can lead to the fragmentation of protection barriers and controls and increase the number of people treated as full time employees. Regional and cultural differences will manifest themselves in differing security threat and risk profiles. At the same time, the recession is causing significant individual (and organisational) uncertainty and may prompt an increase in abnormal behaviour in long-term employees and managers - those traditionally most trusted - including members of the security community. In this environment, how can organisations know who to trust and how to maintain this trust? The paper describes a practitioner's view of the issue and the approaches used by BT to assess and address insider threats and risks. Proactive measures need to be taken to mitigate against insider attacks rather than reactive measures after the event. A key priority is to include a focus on insiders within security risk assessments and compliance regimes. The application of technology alone will not provide solutions. Security controls need to be workable in a variety of environments and designed, implemented and maintained with people's behaviour in mind. Solutions need to be agile and build and maintain trust and secure relationships over time. This requires a focus on human factors, education and awareness and greater attention on the security 'aftercare' of employees and third parties. (c) 2010 Elsevier Ltd. All rights reserved."",
    author_keywords = ""Human factors; Insider threat; Outsourcing; Security risk management"",
    keywords = ""Human engineering; Outsourcing; Risk analysis; Risk assessment; Risk management; Cultural difference; Cultural factors; Full-time employees; Human factors; Information security; Insider attack; Insider Threat; Key issues; Know-how; Management regime; Proactive measures; Protection barrier; Risk profile; Security community; Security controls; Security risk assessments; Security risks; Security threats; Social factor; Third parties; Security of data"",
    correspondence_address = ""C. Colwill; BT Security, United Kingdom; email: carl.colwill@bt.com"",
    issn = ""13634127"",
    language = ""English"",
    abbrev_source_title = ""Inf Secur Tech Rep"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 202""
}
"""	Excluded	Excluded				2	Scopus Signed In		Human factors in information security: The insider threat–Who can you trust these days?	https://doi.org/10.1016/j.istr.2010.04.004		nan; References; Link; Publisher
25	TrustSE	Software ecosystems: a software ecosystem strategy assessment model	Software companies and organizations increasingly open up their business to other software companies and as a consequence they find themselves in an ecosystem of software companies, developers and partners. These actors, and especially the software organization that is at the core of this ecosystem, are having difficulties in getting insight into this ecosystem and how their actions influence its performance. In this paper a model is presented that describes the key characteristics of a Software Ecosystem. The central hub of a Software Ecosystem can use data on these characteristics to its strategic advantage. This is demonstrated by the use of the model in a case study of a hub in a software ecosystem.	software ecosystems;  business ecosystems; software ecosystems, business ecosystems	van den Berk, Ivo; Jansen, Slinger; Luinenburg, L\'{u}tzen	ECSA '10: Proceedings of the Fourth European Conference on Software Architecture: Companion Volume	https://doi.org/10.1145/1842752.1842781		127-134	"""@inproceedings{10.1145/1842752.1842781,
    author = ""van den Berk, Ivo and Jansen, Slinger and Luinenburg, L\'{u}tzen"",
    title = ""Software ecosystems: a software ecosystem strategy assessment model"",
    year = ""2010"",
    isbn = ""9781450301794"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1842752.1842781"",
    doi = ""10.1145/1842752.1842781"",
    abstract = ""Software companies and organizations increasingly open up their business to other software companies and as a consequence they find themselves in an ecosystem of software companies, developers and partners. These actors, and especially the software organization that is at the core of this ecosystem, are having difficulties in getting insight into this ecosystem and how their actions influence its performance. In this paper a model is presented that describes the key characteristics of a Software Ecosystem. The central hub of a Software Ecosystem can use data on these characteristics to its strategic advantage. This is demonstrated by the use of the model in a case study of a hub in a software ecosystem."",
    booktitle = ""Proceedings of the Fourth European Conference on Software Architecture: Companion Volume"",
    pages = ""127-134"",
    numpages = ""8"",
    keywords = ""software ecosystems, business ecosystems"",
    location = ""Copenhagen, Denmark"",
    series = ""ECSA '10""
}
"""	Included	Included				2	ACM		Software ecosystems: a software ecosystem strategy assessment model	https://doi.org/10.1145/1842752.1842781	Association for Computing Machinery	nan; References; Link
26	TrustSE	Trust, partner selection and innovation outcome in collaborative new product development	A key feature of collaboration in general and collaboration for innovation in particular is the existence of trust. Trust is important because it reduces the costs and risks involved in collaboration, while also increasing the overall performance. This article explores the role that trust plays during the selection of suppliers in new product development (NPD), and the outcome that reliance on trust has on the innovation effort. The research involves a case study of two organisations following contrasting approaches to NPD sourcing, but both relying on collaborative, long-term relationships. In both cases, we find goodwill trust as the key variable explaining the reliance on collaboration. We also find that over-reliance on goodwill trust and geographical proximity in selecting NPD suppliers leads to an emphasis on incremental innovation which hampers the ability of both organisations to engage in radical NPD.	new product development; innovation; trust; collaboration; new product development;  innovation;  trust;  collaboration	Bunduchi, Raluca	PRODUCTION PLANNING \& CONTROL	https://doi.org/10.1080/09537287.2011.647868		145-157	"""@article{WOS:000322753700002,
    Author = ""Bunduchi, Raluca"",
    Title = ""Trust, partner selection and innovation outcome in collaborative new product development"",
    Journal = ""PRODUCTION PLANNING \\& CONTROL"",
    Year = ""2013"",
    Volume = ""24"",
    Number = ""2-3, SI"",
    Pages = ""145-157"",
    Month = ""MAR 1"",
    Abstract = ""A key feature of collaboration in general and collaboration for innovation in particular is the existence of trust. Trust is important because it reduces the costs and risks involved in collaboration, while also increasing the overall performance. This article explores the role that trust plays during the selection of suppliers in new product development (NPD), and the outcome that reliance on trust has on the innovation effort. The research involves a case study of two organisations following contrasting approaches to NPD sourcing, but both relying on collaborative, long-term relationships. In both cases, we find goodwill trust as the key variable explaining the reliance on collaboration. We also find that over-reliance on goodwill trust and geographical proximity in selecting NPD suppliers leads to an emphasis on incremental innovation which hampers the ability of both organisations to engage in radical NPD."",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Bunduchi, R (Corresponding Author), Univ Aberdeen, Sch Business, Edward Wright Bldg,Dunbar St, Aberdeen AB24 3QY, Scotland. Univ Aberdeen, Sch Business, Aberdeen AB24 3QY, Scotland."",
    DOI = ""10.1080/09537287.2011.647868"",
    ISSN = ""0953-7287"",
    EISSN = ""1366-5871"",
    Keywords = ""new product development; innovation; trust; collaboration"",
    Keywords-Plus = ""OPERATIONS MANAGEMENT; SUPPLIER INVOLVEMENT; TRANSACTION COSTS; SOCIAL-STRUCTURE; GOVERNANCE; NETWORKS; CUSTOMER; SUCCESS; MATTER; MODEL"",
    Research-Areas = ""Engineering; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Engineering, Industrial; Engineering, Manufacturing; Operations Research \\& Management Science"",
    Author-Email = ""r.bunduchi@abdn.ac.uk"",
    Affiliations = ""University of Aberdeen"",
    ResearcherID-Numbers = ""Bunduchi, Raluca/AFS-1240-2022"",
    ORCID-Numbers = ""Bunduchi, Raluca/0000-0001-8157-9197"",
    Funding-Acknowledgement = ""British Academy {[}SG-46759]; Carnegie Trust"",
    Funding-Text = ""This research was sponsored by British Academy grant no SG-46759 and funding provided by the Carnegie Trust."",
    Number-of-Cited-References = ""50"",
    Times-Cited = ""56"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""117"",
    Journal-ISO = ""Prod. Plan. Control"",
    Doc-Delivery-Number = ""196DN"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000322753700002"",
    OA = ""Green Accepted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Trust, partner selection and innovation outcome in collaborative new product development	https://www.webofscience.com/wos/woscc/full-record/WOS:000322753700002	TAYLOR \& FRANCIS LTD	nan; References
27	TrustSE	From ratings to trust: an empirical study of implicit trust in recommender systems	Trust has been extensively studied and its effectiveness demonstrated in recommender systems. Due to the lack of explicit trust information in most systems, many trust metric approaches have been proposed to infer implicit trust from user ratings. However, previous works have not compared these different approaches, and oftentimes focus only on the performance of predictive item ratings. In this paper, we first analyse five kinds of trust metrics in light of the properties of trust. We conduct an empirical study to explore the ability of trust metrics to distinguish explicit trust from implicit trust and to generate accurate predictions. Experimental results on two real-world data sets show that existing trust metrics cannot provide satisfying performance, and indicate that future metrics should be designed more carefully.	trust metrics;  similarity;  recommender systems;  ratings; trust metrics, similarity, recommender systems, ratings	Guo, Guibing; Zhang, Jie; Thalmann, Daniel; Basu, Anirban; Yorke-Smith, Neil	SAC '14: Proceedings of the 29th Annual ACM Symposium on Applied Computing	https://doi.org/10.1145/2554850.2554878		248-253	"""@inproceedings{10.1145/2554850.2554878,
    author = ""Guo, Guibing and Zhang, Jie and Thalmann, Daniel and Basu, Anirban and Yorke-Smith, Neil"",
    title = ""From ratings to trust: an empirical study of implicit trust in recommender systems"",
    year = ""2014"",
    isbn = ""9781450324694"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2554850.2554878"",
    doi = ""10.1145/2554850.2554878"",
    abstract = ""Trust has been extensively studied and its effectiveness demonstrated in recommender systems. Due to the lack of explicit trust information in most systems, many trust metric approaches have been proposed to infer implicit trust from user ratings. However, previous works have not compared these different approaches, and oftentimes focus only on the performance of predictive item ratings. In this paper, we first analyse five kinds of trust metrics in light of the properties of trust. We conduct an empirical study to explore the ability of trust metrics to distinguish explicit trust from implicit trust and to generate accurate predictions. Experimental results on two real-world data sets show that existing trust metrics cannot provide satisfying performance, and indicate that future metrics should be designed more carefully."",
    booktitle = ""Proceedings of the 29th Annual ACM Symposium on Applied Computing"",
    pages = ""248-253"",
    numpages = ""6"",
    keywords = ""trust metrics, similarity, recommender systems, ratings"",
    location = ""Gyeongju, Republic of Korea"",
    series = ""SAC '14""
}
"""	Included	Included				2	ACM		From ratings to trust: an empirical study of implicit trust in recommender systems	https://doi.org/10.1145/2554850.2554878	Association for Computing Machinery	nan; References; Link
28	TrustSE	A Survey on Trust Modeling	The concept of trust and/or trust management has received considerable attention in engineering research communities as trust is perceived as the basis for decision making in many contexts and the motivation for maintaining long-term relationships based on cooperation and collaboration. Even if substantial research effort has been dedicated to addressing trust-based mechanisms or trust metrics (or computation) in diverse contexts, prior work has not clearly solved the issue of how to model and quantify trust with sufficient detail and context-based adequateness. The issue of trust quantification has become more complicated as we have the need to derive trust from complex, composite networks that may involve four distinct layers of communication protocols, information exchange, social interactions, and cognitive motivations. In addition, the diverse application domains require different aspects of trust for decision making such as emotional, logical, and relational trust. This survey aims to outline the foundations of trust models for applications in these contexts in terms of the concept of trust, trust assessment, trust constructs, trust scales, trust properties, trust formulation, and applications of trust. We discuss how different components of trust can be mapped to different layers of a complex, composite network; applicability of trust metrics and models; research challenges; and future work directions.	trustor;  trustee;  trust;  decision making;  composite trust;  Trust modeling; trustor, trustee, trust, decision making, composite trust, Trust modeling	Cho, Jin-Hee; Chan, Kevin; Adali, Sibel	ACM Comput. Surv.	https://doi.org/10.1145/2815595			"""@article{10.1145/2815595,
    author = ""Cho, Jin-Hee and Chan, Kevin and Adali, Sibel"",
    title = ""A Survey on Trust Modeling"",
    year = ""2015"",
    issue_date = ""November 2015"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""48"",
    number = ""2"",
    issn = ""0360-0300"",
    url = ""https://doi.org/10.1145/2815595"",
    doi = ""10.1145/2815595"",
    abstract = ""The concept of trust and/or trust management has received considerable attention in engineering research communities as trust is perceived as the basis for decision making in many contexts and the motivation for maintaining long-term relationships based on cooperation and collaboration. Even if substantial research effort has been dedicated to addressing trust-based mechanisms or trust metrics (or computation) in diverse contexts, prior work has not clearly solved the issue of how to model and quantify trust with sufficient detail and context-based adequateness. The issue of trust quantification has become more complicated as we have the need to derive trust from complex, composite networks that may involve four distinct layers of communication protocols, information exchange, social interactions, and cognitive motivations. In addition, the diverse application domains require different aspects of trust for decision making such as emotional, logical, and relational trust. This survey aims to outline the foundations of trust models for applications in these contexts in terms of the concept of trust, trust assessment, trust constructs, trust scales, trust properties, trust formulation, and applications of trust. We discuss how different components of trust can be mapped to different layers of a complex, composite network; applicability of trust metrics and models; research challenges; and future work directions."",
    journal = ""ACM Comput. Surv."",
    month = ""October"",
    articleno = ""28"",
    numpages = ""40"",
    keywords = ""trustor, trustee, trust, decision making, composite trust, Trust modeling""
}
"""	Included	Included				2	ACM		A survey on trust modeling	https://doi.org/10.1145/2815595	Association for Computing Machinery	nan; References; Pages; Link
29	TrustSE	Enabling trusted software integrity	Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications.		Kirovski, Darko; Drini\'{c}, Milenko; Potkonjak, Miodrag	ASPLOS X: Proceedings of the 10th international conference on Architectural support for programming languages and operating systems	https://doi.org/10.1145/605397.605409		108-120	"""@inproceedings{10.1145/605397.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    isbn = ""1581135742"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/605397.605409"",
    doi = ""10.1145/605397.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    booktitle = ""Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems"",
    pages = ""108-120"",
    numpages = ""13"",
    location = ""San Jose, California"",
    series = ""ASPLOS X""
}

@article{10.1145/605432.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    issue_date = ""October 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""37"",
    number = ""10"",
    issn = ""0362-1340"",
    url = ""https://doi.org/10.1145/605432.605409"",
    doi = ""10.1145/605432.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    journal = ""SIGPLAN Not."",
    month = ""October"",
    pages = ""108-120"",
    numpages = ""13""
}

@article{10.1145/635508.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    issue_date = ""December 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""36"",
    number = ""5"",
    issn = ""0163-5980"",
    url = ""https://doi.org/10.1145/635508.605409"",
    doi = ""10.1145/635508.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    journal = ""SIGOPS Oper. Syst. Rev."",
    month = ""October"",
    pages = ""108-120"",
    numpages = ""13""
}

@article{10.1145/635506.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    issue_date = ""December 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""30"",
    number = ""5"",
    issn = ""0163-5964"",
    url = ""https://doi.org/10.1145/635506.605409"",
    doi = ""10.1145/635506.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    journal = ""SIGARCH Comput. Archit. News"",
    month = ""October"",
    pages = ""108-120"",
    numpages = ""13""
}
"""	Excluded	Excluded				2	ACM		Enabling trusted software integrity	https://doi.org/10.1145/605397.605409	Association for Computing Machinery	nan; Keywords; References; Link
30	TrustSE	A software-based Trusted Platform Module emulator	When developing and researching new trusted computing technologies, appropriate tools to investigate their behavior and to evaluate their performance are of paramount importance. In this paper, we present, an efficient and portable TPM emulator for Unix. Our emulator enables not only the implementation of flexible and low-cost test-beds and simulators but, in addition, provides programmers of trusted systems with a powerful testing and debugging tool that can also be used for educational purposes. Thanks to its portability and interoperability, the TPM emulator runs on a variety of platforms and is compatible with the most relevant software packages and interfaces.		Strasser, Mario; Stamer, Heiko	TRUSTED COMPUTING - CHALLENGES AND APPLICATIONS, PROCEEDINGS	https://www.webofscience.com/wos/woscc/full-record/WOS:000258852400003		33+	"""@inproceedings{WOS:000258852400003,
    Author = ""Strasser, Mario and Stamer, Heiko"",
    Editor = ""Lipp, P and Sadeghi, AR and Koch, KM"",
    Title = ""A software-based Trusted Platform Module emulator"",
    Booktitle = ""TRUSTED COMPUTING - CHALLENGES AND APPLICATIONS, PROCEEDINGS"",
    Series = ""Lecture Notes in Computer Science"",
    Year = ""2008"",
    Volume = ""4968"",
    Pages = ""33+"",
    Note = ""1st International Conference on Trusted Computing and Trust in Information Technologies (TRUST 2008), Villach, AUSTRIA, MAR 11-12, 2008"",
    Abstract = ""When developing and researching new trusted computing technologies, appropriate tools to investigate their behavior and to evaluate their performance are of paramount importance. In this paper, we present, an efficient and portable TPM emulator for Unix. Our emulator enables not only the implementation of flexible and low-cost test-beds and simulators but, in addition, provides programmers of trusted systems with a powerful testing and debugging tool that can also be used for educational purposes. Thanks to its portability and interoperability, the TPM emulator runs on a variety of platforms and is compatible with the most relevant software packages and interfaces."",
    Publisher = ""SPRINGER-VERLAG BERLIN"",
    Address = ""HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Strasser, M (Corresponding Author), ETH, Zurich, Switzerland. Strasser, Mario, ETH, Zurich, Switzerland. Stamer, Heiko, Univ Kassel, Fac Elektrotech Informat, D-34109 Kassel, Germany."",
    ISSN = ""0302-9743"",
    EISSN = ""1611-3349"",
    ISBN = ""978-3-540-68978-2"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Hardware \\& Architecture; Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""strasser@tik.ee.ethz.ch stamer@theory.informatik.uni-kassel.de"",
    Affiliations = ""Swiss Federal Institutes of Technology Domain; ETH Zurich; Universitat Kassel"",
    Number-of-Cited-References = ""15"",
    Times-Cited = ""24"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""5"",
    Doc-Delivery-Number = ""BID95"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000258852400003"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Web of Science		A software-based trusted platform module emulator	https://www.webofscience.com/wos/woscc/full-record/WOS:000258852400003	SPRINGER-VERLAG BERLIN	nan; Keywords; References
31	TrustSE	From trust to dependability through risk analysis	The importance of critical systems has been widely recognized and several efforts are devoted to integrate dependability requirements in their development process. Such efforts result in a number of models, frameworks, and methodologies that have been proposed to model and assess the dependability of critical systems. Among them, risk analysis considers the likelihood and severity of failures for evaluating the risk affecting the system. In our previous work, we introduced the Tropos GoalRisk framework, a formal framework for modeling, assessing, and treating risks on the basis of the likelihood and severity of failures. In this paper, we refine this framework introducing the notion of trust for assessing risks on the basis of the organizational setting of the system. The assessment process is also enhanced to analyze risks along trust relations among actors. To make the discussion more concrete, we illustrate the framework with a case study on partial airspace delegation in Air Traffic Management system.	Air traffic control; Mathematical models; Risk analysis; Societies and institutions; Air Traffic Management; Critical systems; Organizational setting; Security of data; Air traffic control;  Mathematical models;  Risk analysis;  Societies and institutions;  Air Traffic Management;  Critical systems;  Organizational setting;  Security of data	Asnar, Yudistira; Giorgini, Paolo; Massacci, Fabio; Zannone, Nicola	Proceedings - Second International Conference on Availability, Reliability and Security, ARES 2007	https://doi.org/10.1109/ARES.2007.93	1.Y. Asnar and P. Giorgini. Modelling risk and identifying countermeasures in organizations. In Proc. of CRITIS06, 2006. CrossRef  Google Scholar; 2.Y. Asnar, P. Giorgini, and J. Mylopoulos. Risk Modelling and Reasoning in Goal Models. Technical Report DIT-06-008, University of Trento, 2006. Google Scholar; 3.A. Avizienis, J.-C. Laprie, B. Randell, and C. E. Landwehr. Basic Concepts and Taxonomy of Dependable and Secure Computing. TDSC, 1(1):11-33, 2004. View Article  Google Scholar; 4.T. Bedford and R. Cooke. Probabilistic Risk Analysis: Foundations and Methods. Cambridge University Press, 2001. CrossRef  Google Scholar; 5.R. Butler, J. Maddalon, A. Geser, and C. Munoz. Simulation and Verification I: Formal Analysis of Air Traffic Management Systems: The Case of Conflict Resolution and Recovery. In Proc. of WSC03, pages 906-914. IEEE Press, 2003. Google Scholar; 6.S. A. Butler. Security Attribute and Evaluation Method. PhD thesis, Carnegie Mellon University, 2003. Google Scholar; 7.S. Campadello, L. Compagna, D. Gidoin, P. Giorgini, S. Holtmanns, J. Latanicki, V. Meduri, J.-C. Pazzaglia, M. Seguran, R. Thomas, and N. Zannone. S Requirements Specification. Research report A7.D2.1, SERENITY consortium, 2006.; 8.S. Cox, B. Jones, and D. Collinson. Trust Relations in High-Reliability Organizations. Risk Analysis, 26(5): 1123-1138, 2006. CrossRef  Google Scholar; 9.DoD. Department of Defense Information Technolgoy Security Certification and Accreditation Process (DITSCAP) Application Manual. US-Department of Defense, July 2000. Google Scholar; 10.R. Falcone and C. Castelfranchi. Social Trust: A Cognitive Approach. In Trust and Deception in Virtual Societibes, pages 55-90. Kluwer Academic Publishers, 2001. CrossRef  Google Scholar; 11.M. S. Feather. Towards a Unified Approach to the Representation of, and Reasoning with, Probabilistic Risk Information about Software and its System Interface. In Proc. of ISSRE04, pages 391-402. IEEE Press, 2004. View Article  Google Scholar; 12.M. S. Feather, S. L. Cornford, K. A. Hicks, and K. R. Johnson. Applications of tool support for risk-informed requirements reasoning. Computer Systems Science  Engineering, 20(1):5-17, 2005. Google Scholar; 13.R. Fredriksen, M. Kristiansenand, B. A. Granand, K. Stolen, T. A. Opperud, and T. Dimitrakos. The CORAS framework for a model-based risk management process. In Proc. of SAFECOMP02, LNCS 2434, pages 94-105. Springer-Verlag, 2002. CrossRef  Google Scholar; 14.P. Giorgini, F. Massacci, J. Mylopoulos, and N. Zannone. Modeling Security Requirements Through Ownership, Permission and Delegation. In Proc. of RE05, pages 167-176. IEEE Press, 2005. View Article  Google Scholar; 15.P. Giorgini, F. Massacci, J. Mylopoulos, and N. Zannone. Modelling Social and Individual Trust in Requirements Engineering Methodologies. In Proc. of iTrust05, LNCS 3477, pages 161-176. Springer-Verlag, 2005. CrossRef  Google Scholar; 16.P. Giorgini, J. Mylopoulos, E. Nicchiarelli, and R. Sebastiani. Formal Reasoning Techniques for Goal Models. Journal of Data Semantics, 1(1): 1-20, 2003. CrossRef  Google Scholar; 17.J. Jacobson. Safety Validation of Dependable Transportation Systems. In Proc. of ITSC05, pages 1-6, 2005. CrossRef  Google Scholar; 18.S. Jajodia, P. Samarati, V. S. Subrahmanian, and E. Bertino. A unified framework for enforcing multiple access control policies. In Proc. of PODS97, pages 474-485. ACM Press, 1997. CrossRef  Google Scholar; 19.A. Josang and S. Presti. Analysing the Relationship Between Risk and Trust. In Proc. of iTrust 04, LNCS 2995, pages 135-145. Springer-Verlag, 2004. CrossRef  Google Scholar; 20.S. Lee, R. Gandhi, and G. Ahn. Security Requirements Driven Risk Assessment for Critical Infrastructure Information Systems. In Proc. of SREIS05, 2005. Google Scholar; 21.D. Manchala. Trust Metrics, Models and Protocols for Electronic Commerce Transactions. In Proc. of ICDCS98, pages 312-321. IEEE Press, 1998. Google Scholar; 22.N. Mayer, A. Rifaut, and E. Dubois. Towards a Risk-Based Security Requirements Engineering Framework. In Proc. of REFSQ 05, 2005. Google Scholar; 23.D. M. Nicol, W. H. Sanders, and K. S. Trivedi. Model-Based Evaluation: From Dependability to Security. TDSC, 1(1):48-65, 2004. View Article  Google Scholar; 24.D. Shapiro and R. Shachter. User-Agent Value Alignment. In Proc. of The 18th Nat. Conf. on Artif. Intell AAAI, 2002. Google Scholar; 25.I. Sommerville. Software Engineering. Addison Wesley, 7th edition, 2004. Google Scholar; 26.M. Stamatelatos, W. Vesely, J. Dugan, J. Fragola, J. Minarick, and J. Railsback. Fault Tree Handbook with Aerospace Applications. NASA, 2002. Google Scholar; 27.E. Yu. Modelling strategic relationships for process reengineering. PhD thesis, University of Toronto, 1996. Google Scholar	19 - 26	"""@CONFERENCE{Asnar200719,
    author = ""Asnar, Yudistira and Giorgini, Paolo and Massacci, Fabio and Zannone, Nicola"",
    title = ""From trust to dependability through risk analysis"",
    year = ""2007"",
    journal = ""Proceedings - Second International Conference on Availability, Reliability and Security, ARES 2007"",
    pages = ""19 - 26"",
    doi = ""10.1109/ARES.2007.93"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548171255\&doi=10.1109\%2fARES.2007.93\&partnerID=40\&md5=f197026b12577254a6916fccfde3ce97"",
    affiliations = ""University of Trento"",
    abstract = ""The importance of critical systems has been widely recognized and several efforts are devoted to integrate dependability requirements in their development process. Such efforts result in a number of models, frameworks, and methodologies that have been proposed to model and assess the dependability of critical systems. Among them, risk analysis considers the likelihood and severity of failures for evaluating the risk affecting the system. In our previous work, we introduced the Tropos GoalRisk framework, a formal framework for modeling, assessing, and treating risks on the basis of the likelihood and severity of failures. In this paper, we refine this framework introducing the notion of trust for assessing risks on the basis of the organizational setting of the system. The assessment process is also enhanced to analyze risks along trust relations among actors. To make the discussion more concrete, we illustrate the framework with a case study on partial airspace delegation in Air Traffic Management system. (c) 2007 IEEE."",
    keywords = ""Air traffic control; Mathematical models; Risk analysis; Societies and institutions; Air Traffic Management; Critical systems; Organizational setting; Security of data"",
    correspondence_address = ""Y. Asnar; University of Trento; email: yudis@dit.unitn.it"",
    isbn = ""0769527752; 978-076952775-8"",
    language = ""English"",
    abbrev_source_title = ""Proc. Second Int. Conf. Availab. Reliab. Secur."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 56; Conference name: 2nd International Conference on Availability, Reliability and Security, ARES 2007; Conference date: 10 April 2007 through 13 April 2007; Conference code: 70129; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		From trust to dependability through risk analysis	https://ieeexplore.ieee.org/document/4159783	IEEE	
32	TrustSE	Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers	Despite the conceptual importance of security perceptions in contributing to client satisfaction, no study has yet provided empirical evidence of the link. We argue that because security perceptions are highly subjective and depend on the client's experiences, it is necessary to identify the perceived value of security in order to explain its effect on security. We adapt a recent model of SaaS satisfaction to include security and perceived value, and test the model on a sample of 135 SaaS clients. We find a significant positive relationship between security and satisfaction when mediated by perceived value. We also present an unmediated model in which security is not significant.	Software-as-a-Service; Security; Satisfaction; Perceived Value; Software-as-a-Service;  Security;  Satisfaction;  Perceived Value	Goode, Sigi; Lin, Chinho; Tsai, Jacob C.; Jiang, James J.	DECISION SUPPORT SYSTEMS	https://doi.org/10.1016/j.dss.2014.12.005		73-85	"""@article{WOS:000349498900006,
    Author = ""Goode, Sigi and Lin, Chinho and Tsai, Jacob C. and Jiang, James J."",
    Title = ""Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers"",
    Journal = ""DECISION SUPPORT SYSTEMS"",
    Year = ""2015"",
    Volume = ""70"",
    Pages = ""73-85"",
    Month = ""FEB"",
    Abstract = ""Despite the conceptual importance of security perceptions in contributing to client satisfaction, no study has yet provided empirical evidence of the link. We argue that because security perceptions are highly subjective and depend on the client's experiences, it is necessary to identify the perceived value of security in order to explain its effect on security. We adapt a recent model of SaaS satisfaction to include security and perceived value, and test the model on a sample of 135 SaaS clients. We find a significant positive relationship between security and satisfaction when mediated by perceived value. We also present an unmediated model in which security is not significant. (C) 2014 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Jiang, JJ (Corresponding Author), Natl Taiwan Univ, Coll Management, Taipei 106, Taiwan. Goode, Sigi, Australian Natl Univ, ANU Coll Business \\& Econ, Canberra, ACT 0200, Australia. Lin, Chinho, Natl Cheng Kung Univ, Dept Ind \\& Informat Management, Tainan 70101, Taiwan. Lin, Chinho, Natl Cheng Kung Univ, Inst Informat Management, Coll Management, Tainan 70101, Taiwan. Tsai, Jacob C.; Jiang, James J., Natl Taiwan Univ, Coll Management, Taipei 106, Taiwan."",
    DOI = ""10.1016/j.dss.2014.12.005"",
    ISSN = ""0167-9236"",
    EISSN = ""1873-5797"",
    Keywords = ""Software-as-a-Service; Security; Satisfaction; Perceived Value"",
    Keywords-Plus = ""CUSTOMER PERCEIVED VALUE; LEVEL AGREEMENTS; QUALITY; LOYALTY; MODEL; DETERMINANTS; ADOPTION; PERCEPTIONS; PERSPECTIVE; SYSTEMS"",
    Research-Areas = ""Computer Science; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Computer Science, Artificial Intelligence; Computer Science, Information Systems; Operations Research \\& Management Science"",
    Author-Email = ""Sigi.Goode@anu.edu.au linn@mail.ncku.edu.tw Jacob.c.tsai@gmail.com jjjiang@ntu.edu.tw"",
    Affiliations = ""Australian National University; National Cheng Kung University; National Cheng Kung University; National Taiwan University"",
    ResearcherID-Numbers = ""Jiang, James/JPK-7730-2023"",
    ORCID-Numbers = ""Goode, Sigi/0000-0001-5260-746X"",
    Number-of-Cited-References = ""95"",
    Times-Cited = ""32"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""54"",
    Journal-ISO = ""Decis. Support Syst."",
    Doc-Delivery-Number = ""CB3AC"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000349498900006"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers	https://www.webofscience.com/wos/woscc/full-record/WOS:000349498900006	ELSEVIER	nan; References
33	TrustSE	A Cognitive Theory of Trust			Hill, Claire A.; O'Hara, Erin Ann	Washington University Law Review	https://heinonline.org/HOL/Page?collection=journals&handle=hein.journals/walq84&id=1733&men_tab=srchresults		1717-1796	"""nan"""	Excluded	Excluded				2	Google Scholar		A cognitive theory of trust	https://heinonline.org/HOL/Page?collection=journals&handle=hein.journals/walq84&id=1733&men_tab=srchresults	Hein Online	
34	TrustSE	Trust factors influencing the adoption of internet-based interorganizational systems	This study aims to empirically examine the trust factors that affect the adoption of Internet-based interorganizational systems (IIOS). A trust model with five trust factors is constructed. The model is tested using data gathered from 295 practitioners. Confirmatory factor analysis is used to validate the model, and structural equation modelling is used for data analysis. The adoption of IIOS is influenced by trust factors including usability, reliability and availability, audit and verification mechanisms, and interoperability, while security is insignificant in this case. The generalization of the findings is currently limited, as the subjects were all Chinese people living in Hong Kong. Future studies could study individuals belonging to other types of professions, industries, and cultures to test the generalizability of the model. The study provides a trust model to facilitate practitioners for the effective adoption of IIOS. It also adds a trust model to the literature of IIOS in the electronic supply chain context.	Factor analysis; Information systems; Security of data; Supply chain management; Confirmatory factor analysis; Electronic supply; Electronic supply chain management; Inter-organizational systems; Internet based; Reliability and availability; Structural equation modelling; Trust; Information management; Factor analysis;  Information systems;  Security of data;  Supply chain management;  Confirmatory factor analysis;  Electronic supply;  Electronic supply chain management;  Inter-organizational systems;  Internet based;  Reliability and availability;  Structural equation modelling;  Trust;  Information management	Lai, Ivan K.W.; Tong, Viny W.L.; Lai, Donny C.F.	Electronic Commerce Research and Applications	https://doi.org/10.1016/j.elerap.2010.07.001		85 - 93	"""@ARTICLE{Lai201185,
    author = ""Lai, Ivan K.W. and Tong, Viny W.L. and Lai, Donny C.F."",
    title = ""Trust factors influencing the adoption of internet-based interorganizational systems"",
    year = ""2011"",
    journal = ""Electronic Commerce Research and Applications"",
    volume = ""10"",
    number = ""1"",
    pages = ""85 - 93"",
    doi = ""10.1016/j.elerap.2010.07.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951948094\&doi=10.1016\%2fj.elerap.2010.07.001\&partnerID=40\&md5=51c30acdb2d9abae07ec5c15752eacea"",
    affiliations = ""Faculty of Management and Administration, Macau University of Science and Technology, Taipa, Macau, Avenida Wai Long, Macao; International Graduate School of Business, University of South Australia, Adelaide, SA, Australia; Department of Computer Science, City University of Hong Kong, Kowloon Tong, Hong Kong"",
    abstract = ""This study aims to empirically examine the trust factors that affect the adoption of Internet-based interorganizational systems (IIOS). A trust model with five trust factors is constructed. The model is tested using data gathered from 295 practitioners. Confirmatory factor analysis is used to validate the model, and structural equation modelling is used for data analysis. The adoption of IIOS is influenced by trust factors including usability, reliability and availability, audit and verification mechanisms, and interoperability, while security is insignificant in this case. The generalization of the findings is currently limited, as the subjects were all Chinese people living in Hong Kong. Future studies could study individuals belonging to other types of professions, industries, and cultures to test the generalizability of the model. The study provides a trust model to facilitate practitioners for the effective adoption of IIOS. It also adds a trust model to the literature of IIOS in the electronic supply chain context. (c) 2010 Elsevier B.V. All rights reserved."",
    author_keywords = ""Electronic supply chain management; Information systems; Internet-based interorganizational systems; Trust"",
    keywords = ""Factor analysis; Information systems; Security of data; Supply chain management; Confirmatory factor analysis; Electronic supply; Electronic supply chain management; Inter-organizational systems; Internet based; Reliability and availability; Structural equation modelling; Trust; Information management"",
    correspondence_address = ""I. K. W. Lai; Faculty of Management and Administration, Macau University of Science and Technology, Taipa, Macau, Avenida Wai Long, Macao; email: kwlai@must.edu.mo"",
    publisher = ""Elsevier B.V."",
    issn = ""15674223"",
    language = ""English"",
    abbrev_source_title = ""Elect. Commer. Res. Appl."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 64""
}
"""	Included	Included				2	Scopus Signed In		Trust factors influencing the adoption of internet-based interorganizational systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-79951948094&origin=resultslist&sort=r-f&src=s&sid=940b35c267fa5b48cdc65d851bf12941&sot=b&sdt=b&s=TITLE%28trust+factors+influencing+the+adoption+of+internet+based+interorganizational+systems%29&sl=91&sessionSearchId=940b35c267fa5b48cdc65d851bf12941&relpos=0	Elsevier B.V	nan; References
35	TrustSE	Trust based service optimization selection for cloud computing	We present an approach for privacy preservation in cloud computing environment in which we propose to use information entropy and rough set theory with the goal of personalized privacy protection in cloud users during service selection based on trust. In the approach, cloud server is as an active service provider to personalize the cloud user privacy, cloud user selects the service which is quantified by trust for multi-tenant personalized privacy protection needs. We descript user privacy information by the service and trust attributes, design a multi-attribute service quantization algorithm using information entropy and rough set theory for the quality of service. The approach can achieve the purpose of quantitative service and dynamically adjust the supply relationship service based on multi-attribute, analysis shows which can effectively protect user privacy and personalization by quantifying the cloud service.	Cloud computing; Computation theory; Information use; Quality of service; Set theory; Cloud computing environments; Information entropy; Privacy preservation; Privacy protection; Quantization algorithms; Service optimization; Service selection; Trust; Rough set theory; Cloud computing;  Computation theory;  Information use;  Quality of service;  Set theory;  Cloud computing environments;  Information entropy;  Privacy preservation;  Privacy protection;  Quantization algorithms;  Service optimization;  Service selection;  Trust;  Rough set theory	Li, Xiaohui; He, Jingsha; Du, Ying	International Journal of Multimedia and Ubiquitous Engineering	https://doi.org/10.14257/ijmue.2015.10.5.20	Li, D.(2013)Technology of Cloud Computing Development Report [M]Science Press references, Beijing; Liuy, Q., Wangy, G., Wuz, J.; Huang, D., Zhang, X., Kang, M., Luo, J.; Wei, H., Gui, X.Cloud environment supports privacy protection computable encryption methods(2011)Journal of Computers, 34, pp. 2391-2402.; Wu, E., Madden, S., Zhang, Y., Jones, E., Curino, C.(2010)Relational Cloud:The Case for a Database Service.Cited 23 times.; Muntes-Mulero, V., Nin, J.; Feng, D., Zhang, M., Zhang, Y., Xu, Z.Cloud computing Safety Research(2011)Journal of Software; Yang, X.-C., Wang, Y.-Z., Wang, B., Yu, G.; Ciriani, V., De Capitani Di Vimercati, S., Foresti, S., Jajodia, S., Paraboschi, S., Samarati, P.; Ciriani, V., De Capitani Di Vimercati, S., Foresti, S., Jajodia, S., Paraboschi, S., Samarati, P.; Rivest, R.L., Shamir, A., Adleman, L.; Haykin, S.(2002)Adaptive Filter Theory, Fourth Edition [M].Cited 259 times.New Jersey: Pearson Hall; Pawlak, Z.(1991)Rough Sets: Theoretical Aspects of Reasoning about Data [M].Cited 8111 times.Boston: Kluwer Academic Publishers; Zadeh, L.A.; Gottwald, S.; Bandemer, H.Fuzzy Local Inference in Fuzzy Knowledge BasesFuzzy Approach to Reasoning and Decision-Making, pp. 47-48.V. Novak, J. Ramik, M. Mares, M. Cerny, J. Nekola (eds.), 1990, Bechyne, Czechoslovakia; Alseda, L., ye, X.; Khambatti, M., Dasgupta, P., Ryu, K.D.; Khambatti, M., Dasgupta, P., Ryu, K.D.; Moharrum, M.A., Eltoweissy, M.	221 - 230	"""@ARTICLE{Li2015221,
    author = ""Li, Xiaohui and He, Jingsha and Du, Ying"",
    title = ""Trust based service optimization selection for cloud computing"",
    year = ""2015"",
    journal = ""International Journal of Multimedia and Ubiquitous Engineering"",
    volume = ""10"",
    number = ""5"",
    pages = ""221 - 230"",
    doi = ""10.14257/ijmue.2015.10.5.20"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84932155228\&doi=10.14257\%2fijmue.2015.10.5.20\&partnerID=40\&md5=98e2b47f737ab9528291911eb9142b4c"",
    affiliations = ""Computer Science and Technology, Beijing University of Technology, Beijing, 100124, China; School of Software Engineering, Beijing University of Technology, Beijing, 100124, China; College of Electrical and Information Engineer, Liaoning University of Technology, Jinzhou, 121001, Liaoning, China"",
    abstract = ""We present an approach for privacy preservation in cloud computing environment in which we propose to use information entropy and rough set theory with the goal of personalized privacy protection in cloud users during service selection based on trust. In the approach, cloud server is as an active service provider to personalize the cloud user privacy, cloud user selects the service which is quantified by trust for multi-tenant personalized privacy protection needs. We descript user privacy information by the service and trust attributes, design a multi-attribute service quantization algorithm using information entropy and rough set theory for the quality of service. The approach can achieve the purpose of quantitative service and dynamically adjust the supply relationship service based on multi-attribute, analysis shows which can effectively protect user privacy and personalization by quantifying the cloud service. (c) 2015 SERSC."",
    author_keywords = ""Cloud computing; Information entropy; Privacy protection; Trust"",
    keywords = ""Cloud computing; Computation theory; Information use; Quality of service; Set theory; Cloud computing environments; Information entropy; Privacy preservation; Privacy protection; Quantization algorithms; Service optimization; Service selection; Trust; Rough set theory"",
    publisher = ""Science and Engineering Research Support Society"",
    issn = ""19750080"",
    language = ""English"",
    abbrev_source_title = ""Int. J. Multimedia Ubiquitous Eng."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 16""
}
"""	Excluded	Excluded				2	Scopus Signed In		Trust based service optimization selection for cloud computing	https://www.scopus.com/record/display.uri?eid=2-s2.0-84932155228&origin=resultslist&sort=r-f&src=s&sid=9135483231458ec21d22b05ab94c9062&sot=b&sdt=b&s=TITLE%28trust+based+service+optimization+selection+for+cloud+computing%29&sl=69&sessionSearchId=9135483231458ec21d22b05ab94c9062&relpos=0	Science and Engineering Research Support Society	
36	TrustSE	Project governance: Balancing control and trust in dealing with risk	Organizational performance can be enhanced by effective project benefit generation. Although it identifies the project owner as the single point of accountability for the realization of project benefits, the literature does not comprehensively discuss this role in the project governance model, nor the management approaches that can support this role. Based on principal-agent theory and a control-trust-risk approach, we have conducted an empirical study across various managerial contexts. Results suggest that trust of the project owner in the project manager is more effective in a turbulent environment, whereas more control by the project owner of the project management process is a superior management approach in a more stable project setting. Finally, a project governance model is introduced and the management role of the project owner is discussed.	Information management; Project management; Agency theory; Balancing controls; Organizational performance; Principal-agent theory; Project governance; Project management process; Project risk; Turbulent environments; empirical analysis; modeling; project management; risk assessment; Managers; Information management;  Project management;  Agency theory;  Balancing controls;  Organizational performance;  Principal-agent theory;  Project governance;  Project management process;  Project risk;  Turbulent environments;  empirical analysis;  modeling;  project management;  risk assessment;  Managers	Zwikael, Ofer; Smyrk, John	International Journal of Project Management	https://doi.org/10.1016/j.ijproman.2014.10.012		852 - 862	"""@ARTICLE{Zwikael2015852,
    author = ""Zwikael, Ofer and Smyrk, John"",
    title = ""Project governance: Balancing control and trust in dealing with risk"",
    year = ""2015"",
    journal = ""International Journal of Project Management"",
    volume = ""33"",
    number = ""4"",
    pages = ""852 - 862"",
    doi = ""10.1016/j.ijproman.2014.10.012"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84925202310\&doi=10.1016\%2fj.ijproman.2014.10.012\&partnerID=40\&md5=580cb3ff5df148309529b49ed5f91f0d"",
    affiliations = ""The Australian National University, Canberra, ACT, Australia; UNSW, Canberra, ACT, Australia"",
    abstract = ""Organizational performance can be enhanced by effective project benefit generation. Although it identifies the project owner as the single point of accountability for the realization of project benefits, the literature does not comprehensively discuss this role in the project governance model, nor the management approaches that can support this role. Based on principal-agent theory and a control-trust-risk approach, we have conducted an empirical study across various managerial contexts. Results suggest that trust of the project owner in the project manager is more effective in a turbulent environment, whereas more control by the project owner of the project management process is a superior management approach in a more stable project setting. Finally, a project governance model is introduced and the management role of the project owner is discussed. (c) 2014 Elsevier Ltd. APM and IPMA."",
    author_keywords = ""Agency theory; Project governance; Project risk"",
    keywords = ""Information management; Project management; Agency theory; Balancing controls; Organizational performance; Principal-agent theory; Project governance; Project management process; Project risk; Turbulent environments; empirical analysis; modeling; project management; risk assessment; Managers"",
    correspondence_address = ""O. Zwikael; ANU College of Business and Economics, The Australian National University, Canberra, Kingsley St., LF Crisp Building \#26, 2601, Australia; email: ofer.zwikael@anu.edu.au"",
    publisher = ""Elsevier Ltd"",
    issn = ""02637863"",
    language = ""English"",
    abbrev_source_title = ""Int. J. Proj. Manage."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 125""
}
"""	Excluded	Excluded				2	Scopus Signed In		Project governance: Balancing control and trust in dealing with risk	https://www.scopus.com/record/display.uri?eid=2-s2.0-84925202310&origin=resultslist&sort=r-f&src=s&sid=f81119e6a15127b20798142ac3f15032&sot=b&sdt=b&s=TITLE%28project+governance+balancing+control+and+trust+in+dealing+with+risk%29&sl=74&sessionSearchId=f81119e6a15127b20798142ac3f15032&relpos=0	Elsevier Ltd	nan; References
37	TrustSE	Retention of IT professionals: Examining the influence of empowerment, social exchange, and trust	Given the importance of information technology professionals in today's high-technology-driven business environment, the issue of how to retain these professionals has received relatively little attention. Hence, using data from IT professionals employed in private companies in Turkey, this study explores the role of psychological empowerment, leader-member exchange, perceived organizational support and organizational trust in reducing turnover intentions of IT professionals. The results indicate that perceived organizational support fully mediates the relationship between psychological empowerment and turnover intentions, whereas leader-member exchange has a partial mediating effect on this relationship. In addition, results also yield that organizational trust moderates the mediated relationship between psychological empowerment and turnover intentions, in such a way that trust in organization moderates the mediating influence of perceived organizational support, whereas trust in supervisor moderates the mediating effect of leader-member exchange.	Psychological empowerment; Leader-member exchange; Perceived organizational support; Organizational trust; Turnover intentions; IT professionals; Psychological empowerment;  Leader-member exchange;  Perceived organizational support;  Organizational trust;  Turnover intentions;  IT professionals	Erturk, Alper; Vurgun, Levent	JOURNAL OF BUSINESS RESEARCH	https://doi.org/10.1016/j.jbusres.2014.05.010		34-46	"""@article{WOS:000346893000005,
    Author = ""Erturk, Alper and Vurgun, Levent"",
    Title = ""Retention of IT professionals: Examining the influence of empowerment, social exchange, and trust"",
    Journal = ""JOURNAL OF BUSINESS RESEARCH"",
    Year = ""2015"",
    Volume = ""68"",
    Number = ""1"",
    Pages = ""34-46"",
    Month = ""JAN"",
    Abstract = ""Given the importance of information technology professionals in today's high-technology-driven business environment, the issue of how to retain these professionals has received relatively little attention. Hence, using data from IT professionals employed in private companies in Turkey, this study explores the role of psychological empowerment, leader-member exchange, perceived organizational support and organizational trust in reducing turnover intentions of IT professionals. The results indicate that perceived organizational support fully mediates the relationship between psychological empowerment and turnover intentions, whereas leader-member exchange has a partial mediating effect on this relationship. In addition, results also yield that organizational trust moderates the mediated relationship between psychological empowerment and turnover intentions, in such a way that trust in organization moderates the mediating influence of perceived organizational support, whereas trust in supervisor moderates the mediating effect of leader-member exchange. (C) 2014 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Erturk, A (Corresponding Author), Gebze Inst Technol, Inst Social Sci, Kocaeli, Turkey. Erturk, Alper, Gebze Inst Technol, Inst Social Sci, Kocaeli, Turkey. Vurgun, Levent, Turgut Ozal Univ, Fac Business Adm, Ankara, Turkey."",
    DOI = ""10.1016/j.jbusres.2014.05.010"",
    ISSN = ""0148-2963"",
    EISSN = ""1873-7978"",
    Keywords = ""Psychological empowerment; Leader-member exchange; Perceived organizational support; Organizational trust; Turnover intentions; IT professionals"",
    Keywords-Plus = ""LEADER-MEMBER EXCHANGE; PERCEIVED ORGANIZATIONAL SUPPORT; FACTORS AFFECTING INTENTION; CITIZENSHIP BEHAVIOR; TURNOVER INTENTIONS; SUPERVISOR SUPPORT; EMPLOYEE OUTCOMES; STATE GOVERNMENT; MODERATING ROLE; COMMITMENT"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Business"",
    Author-Email = ""draerturk@gmail.com lvurgun@turgutozal.edu.tr"",
    Affiliations = ""Gebze Technical University; Turgut Ozal University"",
    ResearcherID-Numbers = ""Vurgun, Levent/ABB-8720-2020"",
    Number-of-Cited-References = ""102"",
    Times-Cited = ""69"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""75"",
    Journal-ISO = ""J. Bus. Res."",
    Doc-Delivery-Number = ""AX4HB"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000346893000005"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Retention of IT professionals: Examining the influence of empowerment, social exchange, and trust	https://www.webofscience.com/wos/woscc/full-record/WOS:000346893000005	ELSEVIER SCIENCE INC	nan; References
38	TrustSE	Establishing and maintaining trust in software outsourcing relationships: An empirical investigation	Our research objective is to understand software outsourcing practitioners' perceptions of the role of trust in managing client-vendor relationships and the factors that are critical to trust in off-shore software outsourcing relationships. Participants were 12 Vietnamese software development practitioners developing software for Far Eastern, European, and American clients. They identified that cultural understanding, creditability, capabilities, and personal visits are important factors in gaining the initial trust of a client, while cultural understanding, communication strategies, contract conformance, and timely delivery are vital factors in maintaining that trust. We contrast Vietnamese and Indian practitioners' views on factors affecting trust relationships.	software outsourcing; Global software development; trust in outsourcing relationship; Software development in Vietnam; empirical software engineering; software process improvement; software outsourcing;  Global software development;  trust in outsourcing relationship;  Software development in Vietnam;  empirical software engineering;  software process improvement	Babar, Muhammad Ali; Verner, June M.; Nguyen, Phong Thanh	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2006.12.038		1438-1449	"""@article{WOS:000249472200003,
    Author = ""Babar, Muhammad Ali and Verner, June M. and Nguyen, Phong Thanh"",
    Title = ""Establishing and maintaining trust in software outsourcing relationships: An empirical investigation"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2007"",
    Volume = ""80"",
    Number = ""9"",
    Pages = ""1438-1449"",
    Month = ""SEP"",
    Note = ""10th International Conference on Evaluation and Assessment in Software Engineering (EASE), Keele Univ, Keele, ENGLAND, 2006"",
    Abstract = ""Our research objective is to understand software outsourcing practitioners' perceptions of the role of trust in managing client-vendor relationships and the factors that are critical to trust in off-shore software outsourcing relationships. Participants were 12 Vietnamese software development practitioners developing software for Far Eastern, European, and American clients. They identified that cultural understanding, creditability, capabilities, and personal visits are important factors in gaining the initial trust of a client, while cultural understanding, communication strategies, contract conformance, and timely delivery are vital factors in maintaining that trust. We contrast Vietnamese and Indian practitioners' views on factors affecting trust relationships. (C) 2006 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Babar, MA (Corresponding Author), Natl ICT Australia, Locked Bag 9013, Alexandria, NSW 1435, Australia. Natl ICT Australia, Alexandria, NSW 1435, Australia. Univ New S Wales, Alexandria, NSW 1435, Australia."",
    DOI = ""10.1016/j.jss.2006.12.038"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""software outsourcing; Global software development; trust in outsourcing relationship; Software development in Vietnam; empirical software engineering; software process improvement"",
    Keywords-Plus = ""DEVELOPMENT-PROJECTS; MODEL; VIEW"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""malibaba@nicta.com.au phong.nguyeny@nicta.com.au"",
    Affiliations = ""NICTA; University of New South Wales Sydney"",
    ResearcherID-Numbers = ""BABAR, A/A-4187-2009"",
    Number-of-Cited-References = ""42"",
    Times-Cited = ""92"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""20"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""210RB"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000249472200003"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Establishing and maintaining trust in software outsourcing relationships: An empirical investigation	https://www.webofscience.com/wos/woscc/full-record/WOS:000249472200003	ELSEVIER SCIENCE INC	nan; References
39	TrustSE	Trust in Information Technology			D. Harrison McKnight	The Blackwell Encyclopedia of Management. Vol. 7 Management Information Systems	https://www.researchgate.net/profile/D-Mcknight-2/publication/297731446_Trust_in_Information_Technology/links/6093b72c458515d315fc3690/Trust-in-Information-Technology		329-331	"""nan"""	Included	Included				2	Google Scholar		Trust in information technology	https://www.researchgate.net/profile/D-Mcknight-2/publication/297731446_Trust_in_Information_Technology/links/6093b72c458515d315fc3690/Trust-in-Information-Technology	G. B. Davis (Ed.)	
40	TrustSE	Can i trust this software package? An exercise in validation of computational results	A systematic approach for identification of causes for a failure in an ODE integration algorithm used to reach a correct solution of a particular problem is presented. The procedure checks that whether a similar algorithm in a different package yields the same solution and whether the default algorithm parameters are appropriate. The stiffness of the problem is assessed and a comparison of solutions obtained by stiff and non-stiff algorithms was carried out. Numerical software was used to solve ODEs and demonstrated that the results of ODE solvers must be verified and the reduction of error tolerances and problem solution by different packages are very efficient in detecting accurate solutions. The Polymath package was found to be most suitable for such tests as it enabled the export of model equations to other packages and can be used when difficulties are encountered during numerical problem solving.		Shacham, Mordechai; Brauner, Neima; Ashurst, W. Robert; Cutlip, Michael B.	Chemical Engineering Education	https://www.scopus.com/record/display.uri?eid=2-s2.0-40749083164&origin=resultslist&sort=r-f&src=s&sid=f87445ba30a3f200e9b34f77baac08a3&sot=b&sdt=b&s=TITLE%28can+i+trust+this+software+package%29&sl=40&sessionSearchId=f87445ba30a3f200e9b34f77baac08a3&relpos=0	Cutlip, M.B., Hwalek, J.J., Nuttall, H.E., Shacham, M., Brule, J., Widmann, J., Han, T., (...), Taylor, R.; Enright, W.H.; Brauner, N., Shacham, M., Cutlip, M.B.; Ashurst, W.R., Edwards, R.J.(2006)personal communications; Rice, R.G., Do, D.D.(1995)Applied Mathematics and Modeling for Chemical Engineers.Cited 445 times.John Wiley	53 - 59	"""@ARTICLE{Shacham200853,
    author = ""Shacham, Mordechai and Brauner, Neima and Ashurst, W. Robert and Cutlip, Michael B."",
    title = ""Can i trust this software package? An exercise in validation of computational results"",
    year = ""2008"",
    journal = ""Chemical Engineering Education"",
    volume = ""42"",
    number = ""1"",
    pages = ""53 - 59"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-40749083164\&partnerID=40\&md5=6f2691dd00dc90fbde152176dc96cb43"",
    affiliations = ""Ben-Gurion University of the Negev, Beer-Sheva 84105, Israel; Tel-Aviv University, Tel-Aviv 69978, Israel; Auburn University, Auburn, AL 36849, United States; University of Connecticut, Storrs, CT 06269, United States"",
    abstract = ""A systematic approach for identification of causes for a failure in an ODE integration algorithm used to reach a correct solution of a particular problem is presented. The procedure checks that whether a similar algorithm in a different package yields the same solution and whether the default algorithm parameters are appropriate. The stiffness of the problem is assessed and a comparison of solutions obtained by stiff and non-stiff algorithms was carried out. Numerical software was used to solve ODEs and demonstrated that the results of ODE solvers must be verified and the reduction of error tolerances and problem solution by different packages are very efficient in detecting accurate solutions. The Polymath package was found to be most suitable for such tests as it enabled the export of model equations to other packages and can be used when difficulties are encountered during numerical problem solving."",
    issn = ""00092479"",
    coden = ""CHEDA"",
    language = ""English"",
    abbrev_source_title = ""Chem Eng Educ"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 5""
}
"""	Excluded	Excluded				2	Scopus Signed In		CAN I TRUST THIS SOFTWARE PACKAGE?	https://www.scopus.com/record/display.uri?eid=2-s2.0-40749083164&origin=resultslist&sort=r-f&src=s&sid=f87445ba30a3f200e9b34f77baac08a3&sot=b&sdt=b&s=TITLE%28can+i+trust+this+software+package%29&sl=40&sessionSearchId=f87445ba30a3f200e9b34f77baac08a3&relpos=0		nan; Keywords; Publisher
41	TrustSE	Software reliability and dependability: a roadmap		reliability engineering;  diversity;  dependability modelling and assessment;  COTS reliability; reliability engineering, diversity, dependability modelling and assessment, COTS reliability	Littlewood, Bev; Strigini, Lorenzo	ICSE '00: Proceedings of the Conference on The Future of Software Engineering	https://doi.org/10.1145/336512.336551		175-188	"""@inproceedings{10.1145/336512.336551,
    author = ""Littlewood, Bev and Strigini, Lorenzo"",
    title = ""Software reliability and dependability: a roadmap"",
    year = ""2000"",
    isbn = ""1581132530"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/336512.336551"",
    doi = ""10.1145/336512.336551"",
    booktitle = ""Proceedings of the Conference on The Future of Software Engineering"",
    pages = ""175-188"",
    numpages = ""14"",
    keywords = ""reliability engineering, diversity, dependability modelling and assessment, COTS reliability"",
    location = ""Limerick, Ireland"",
    series = ""ICSE '00""
}
"""	Included	Included				2	ACM		Software reliability and dependability: a roadmap	https://doi.org/10.1145/336512.336551	Association for Computing Machinery	nan; Abstract; References; Link
42	TrustSE	Service-based software: the future for flexible software	For the past 40 years, the techniques, processes and methods of software development have been dominated by supply-side issues, giving rise to a software industry oriented towards developers rather than users. To achieve the levels of functionality, flexibility and time-to-market required by users, a radical shift is required in the development of software, with a more demand-centric view, leading to software which will be delivered as a service within the framework of an open marketplace. Already, there are some signs that this approach is being adopted by industry, but in a very limited way. We summarise research and a research method which has resulted in a long-term strategic view of software engineering innovation. Based on this foundation, we describe more recent work, which has resulted in an innovative demand-side model for the future of software. We propose a service architecture in which components may be bound instantly, just at the time they are needed, and then the binding may be discarded. A major benefit of this approach is that it leads to highly flexible and agile software that should be able to meet rapidly changing business needs.	Programming; Software engineering; Computer science; Computer architecture; Software quality; Computer industry; Time to market; Marine vehicles; Technological innovation; Failure analysis	K. Bennett; P. Layzell; D. Budgen; P. Brereton; L. Macaulay; M. Munro	Proceedings Seventh Asia-Pacific Software Engeering Conference. APSEC 2000	https://doi.org/10.1109/APSEC.2000.896702	"1.P. Brereton, D. Budgen, K. Bennett, M. Munro, P. Layzell, L. Macaulay, et al., ""The Future of Software: Defining the Research Agenda"", Comm. ACM, vol. 42, no. 12, December 1999. CrossRef  Google Scholar; 2.D. Truex, R. Baskeville and H. Klein, ""Growing Systems in Emergent Organizations"", Comm.ACM, vol. 42, no. 8, August 1999. CrossRef  Google Scholar; 3.M. Cusumano and D. Yoffe, Competing on Internet Time - Lessons from Netscape and its Battle with Microsoft, Free Press (Simon & Schuster, 1998. Google Scholar; 4.C. Lovelock, S. Vandermerwe and B. Lewis, Services Marketing, Prentice Hall Europe, 1996. Google Scholar; 5.Software Rentals to Increase, pp. 8, April 2000. Google Scholar; 6.E. Yourdon and L. Constantine, Structured Design, Yourdon Press, 1978. Google Scholar; 7.S. Shapiro, ""Splitting the Difference: The Historical Necessity of Synthesis in Software Engineering"", IEEE Annals of the History of Computing, vol. 19, no. 1, pp. 20-54, January 1997. View Article  Google Scholar; 8.C. Szyperski, Component Software - Beyond object-oriented programming, Addison-Wesley, 1998. Google Scholar; 9.O.P. Brereton and D. Budgen, ""Component Based Systems: A Classification of Issues"", IEEE Computer. View Article  Google Scholar"			Included	Included				2	IEEE		Service-based software: the future for flexible software	https://ieeexplore.ieee.org/document/896702	IEEE	nan; Pages; Year; Bibtex
44	TrustSE	Structure and evolution of package dependency networks	Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the JavaScript, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for JavaScript has grown 60\% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools.		Kikas, Riivo; Gousios, Georgios; Dumas, Marlon; Pfahl, Dietmar	MSR '17: Proceedings of the 14th International Conference on Mining Software Repositories	https://doi.org/10.1109/MSR.2017.55		102-112	"""@inproceedings{10.1109/MSR.2017.55,
    author = ""Kikas, Riivo and Gousios, Georgios and Dumas, Marlon and Pfahl, Dietmar"",
    title = ""Structure and evolution of package dependency networks"",
    year = ""2017"",
    isbn = ""9781538615447"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/MSR.2017.55"",
    doi = ""10.1109/MSR.2017.55"",
    abstract = ""Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the JavaScript, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for JavaScript has grown 60\\% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools."",
    booktitle = ""Proceedings of the 14th International Conference on Mining Software Repositories"",
    pages = ""102-112"",
    numpages = ""11"",
    location = ""Buenos Aires, Argentina"",
    series = ""MSR '17""
}
"""	Included	Included				2	ACM		Structure and evolution of package dependency networks	https://doi.org/10.1109/MSR.2017.55	IEEE Press	nan; Keywords; References; Link
45	TrustSE	The Development and Evaluation of an Online Master's Module Using an Open-Source Software Package			Eduardo, Feliciana	ProQuest Dissertations & Theses	https://www.proquest.com/openview/f6bd433f7dd0be74a835915432ce9728/1?cbl=2026366&diss=y&pq-origsite=gscholar		24	"""nan"""	Excluded	Excluded				2	Google Scholar		The development and evaluation of an online master's module using an open-source software package	https://www.proquest.com/openview/f6bd433f7dd0be74a835915432ce9728/1?cbl=2026366&diss=y&pq-origsite=gscholar	University of Pretoria	
46	TrustSE	Trust in a specific technology: An investigation of its components and measures	Trust plays an important role in many Information Systems (IS)-enabled situations. Most IS research employs trust as a measure of interpersonal or person-to-firm relations, such as trust in a Web vendor or a virtual team member. Although trust in other people is important, this article suggests that trust in the Information Technology (IT) itself also plays a role in shaping IT-related beliefs and behavior. To advance trust and technology research, this article presents a set of trust in technology construct definitions and measures. We also empirically examine these construct measures using tests of convergent, discriminant, and nomological validity. This study contributes to the literature by providing: (a) a framework that differentiates trust in technology from trust in people, (b) a theory-based set of definitions necessary for investigating different kinds of trust in technology, and	trust in technology;  construct development;  Trust; trust in technology, construct development, Trust	Mcknight, D. Harrison; Carter, Michelle; Thatcher, Jason Bennett; Clay, Paul F.	ACM Trans. Manage. Inf. Syst.	https://doi.org/10.1145/1985347.1985353			"""@article{10.1145/1985347.1985353,
    author = ""Mcknight, D. Harrison and Carter, Michelle and Thatcher, Jason Bennett and Clay, Paul F."",
    title = ""Trust in a specific technology: An investigation of its components and measures"",
    year = ""2011"",
    issue_date = ""June 2011"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""2"",
    number = ""2"",
    issn = ""2158-656X"",
    url = ""https://doi.org/10.1145/1985347.1985353"",
    doi = ""10.1145/1985347.1985353"",
    abstract = ""Trust plays an important role in many Information Systems (IS)-enabled situations. Most IS research employs trust as a measure of interpersonal or person-to-firm relations, such as trust in a Web vendor or a virtual team member. Although trust in other people is important, this article suggests that trust in the Information Technology (IT) itself also plays a role in shaping IT-related beliefs and behavior. To advance trust and technology research, this article presents a set of trust in technology construct definitions and measures. We also empirically examine these construct measures using tests of convergent, discriminant, and nomological validity. This study contributes to the literature by providing: (a) a framework that differentiates trust in technology from trust in people, (b) a theory-based set of definitions necessary for investigating different kinds of trust in technology, and (c) validated trust in technology measures useful to research and practice."",
    journal = ""ACM Trans. Manage. Inf. Syst."",
    month = ""July"",
    articleno = ""12"",
    numpages = ""25"",
    keywords = ""trust in technology, construct development, Trust""
}
"""	Included	Included				2	ACM		Trust in a specific technology: An investigation of its components and measures	https://doi.org/10.1145/1985347.1985353	Association for Computing Machinery	nan; References; Pages; Link
47	TrustSE	Estimating Security Risk in Open Source Package Repositories: An Empirical Analysis and Predictive Model of Software Vulnerabilities	The scope, frequency, and severity of software vulnerabilities are increasing along with breaches related to insecure systems, while system security improvement methods have remained largely stagnant. Though research has examined large Free/Libre Open Source Software (F/LOSS) for patterns of security defects, a gap remains in the collection, analysis, and correlation of latent security defects across smaller projects and libraries reused by developers as references in their projects. Most studies identifying defects for vulnerability analysis and development of predictive models have relied on post-hoc mining of security defects identified by the community or external systems, rather than direct measurement. This quantitative, non- experimental, explanatory/predictive theory and model building research sequentially collected, processed, and analyzed source and project characteristics to evaluate an objective risk model for reuse of components hosted on GitHub. This study extends prior studies of relationships between software metrics, vulnerability frequency, and the corresponding level of security risk by expanding on vulnerability prediction techniques. A simplified implementation of the risk level estimation model (RLEM) was used to provide a quantitative measure that is easily generated and/or gathered by automated systems. Custom data collection software was developed to parse GitHub archives for all commits and to retrieve supporting repository information from publicly available API feeds for storage in a relational database. After retrieving project information and sizing data, the latest version of the code in the master branch was downloaded using git. Each project was compiled and processed using Fortify static code analysis (SCA). Of the 156 projects scanned, 28 failed during the build process and were replaced with new random selections. Once complete, the resulting dataset contained a total of 26,222 files for analysis using SCA. The results of the SCA process identified a total of 91,405 defects which were filtered to only those matching a vulnerability rule from the common weakness enumeration definitions published by the National Institute of Science and Technology, leaving a total of 24,597 detected vulnerabilities. A composite variable for estimated security risk (ESR) was computed from the output of SCA against projects collected from GitHub and analyzed in the context of the Common Vulnerability Scoring System version 2 to calculate ESR in a method that could be easily adopted by development teams. Multiple linear regression against the composite variable showed that the model was statistically significant and explained 80% of the observed ESR, which demonstrates potential usefulness in the development lifecycle.		Smith, Levii J	ProQuest Dissertations & Theses	https://www.proquest.com/docview/2290797881?pq-origsite=gscholar&fromopenview=true&sourcetype=Dissertations%20&%20Theses		154	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Estimating Security Risk in Open Source Package Repositories: An Empirical Analysis and Predictive Model of Software Vulnerabilities	https://www.proquest.com/docview/2290797881?pq-origsite=gscholar&fromopenview=true&sourcetype=Dissertations%20&%20Theses	Capella University	
48	TrustSE	Small business preference for software package	Until late 2016, the majority of small business uses QuickBooks and Excel to do their accounting work. However, the functions of these accounting tools are insufficient, and also the demands of companies are increasing. It has become inefficient and antiquated to use the software. A small business looked for new accounting software, but found that choosing an accounting software system is not straightforward, as every software package consists of different functions for users. The aim of this research was to analyse small business' perceptions and preferences for accounting software systems in New Zealand. This is followed by an analysis of why users might want to replace their previous accounting software systems. In addition, the requirements for selecting accounting software were analysed. The main method used was qualitative research. Three people were interviewed regarding the reason for replacing their previous accounting software system. The first interviewee had not changed their accounting software system previously, but their reason for replacing their current accounting software system was that their previous accounting software system lacked the functionality he wanted. The second interviewee said e she disliked that the system frequently crashed and that it lacked the features she wanted. The reason why the last interviewee changed her previous accounting software system was that MYOB system could not improve her work efficiency.		Shuwen Li	Proceedings of the Applied Management Conference	https://researcharchive.wintec.ac.nz/id/eprint/6442/			"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Small business preference for software package	https://researcharchive.wintec.ac.nz/id/eprint/6442/	Waikato Institute of Technology	
49	TrustSE	DEFINING OPEN SOURCE SOFTWARE PROJECT SUCCESS	Information systems success is one of the most widely used dependent variables in information systems research. In this paper, we identify a range of measures that can be used to assess the success of open source software (OSS) projects. We identify measures based on a review of the literature, a consideration of the OSS development process and an analysis of the opinions of OSS developers. For each measure, we provide examples of how they might be used in a study of OSS development.	Information systems; Information use; Open systems; Software design; Dependent variables; Information system research; Information systems success; Open source software projects; Open-source software development; Open-source softwares; Project success; Software developer; Software development process; System success; Open source software; Information systems;  Information use;  Open systems;  Software design;  Dependent variables;  Information system research;  Information systems success;  Open source software projects;  Open-source software development;  Open-source softwares;  Project success;  Software developer;  Software development process;  System success;  Open source software	Crowston, Kevin; Annabi, Hala; Howison, James	Proceedings of the International Conference on Information Systems, ICIS 2003	https://www.scopus.com/record/display.uri?eid=2-s2.0-85134942598&origin=resultslist&sort=r-f&src=s&sid=e166b0f8039f09d459fe5939ae3dfe1b&sot=b&sdt=b&s=TITLE%28defining+open+source+software+project+success%29&sl=52&sessionSearchId=e166b0f8039f09d459fe5939ae3dfe1b&relpos=0		327 - 340	"""@CONFERENCE{Crowston2003327,
    author = ""Crowston, Kevin and Annabi, Hala and Howison, James"",
    title = ""DEFINING OPEN SOURCE SOFTWARE PROJECT SUCCESS"",
    year = ""2003"",
    journal = ""Proceedings of the International Conference on Information Systems, ICIS 2003"",
    pages = ""327 - 340"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85134942598\&partnerID=40\&md5=12739c2bb292ae093bc68bd523be6843"",
    affiliations = ""School of Information Studies, Syracuse University, Syracuse, NY, United States"",
    abstract = ""Information systems success is one of the most widely used dependent variables in information systems research. In this paper, we identify a range of measures that can be used to assess the success of open source software (OSS) projects. We identify measures based on a review of the literature, a consideration of the OSS development process and an analysis of the opinions of OSS developers. For each measure, we provide examples of how they might be used in a study of OSS development. (c) 2003, Association for Information Systems. All rights reserved."",
    author_keywords = ""Open source software; software development; system success"",
    keywords = ""Information systems; Information use; Open systems; Software design; Dependent variables; Information system research; Information systems success; Open source software projects; Open-source software development; Open-source softwares; Project success; Software developer; Software development process; System success; Open source software"",
    publisher = ""Association for Information Systems"",
    language = ""English"",
    abbrev_source_title = ""Proc. Int. Conf. Inform. Sys."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 232; Conference name: International Conference on Information Systems, ICIS 2003; Conference date: 14 December 2003 through 17 December 2003; Conference code: 280869""
}
"""	Included	Included				2	Scopus Signed In		Defining open source software project success	https://www.scopus.com/record/display.uri?eid=2-s2.0-85134942598&origin=resultslist&sort=r-f&src=s&sid=e166b0f8039f09d459fe5939ae3dfe1b&sot=b&sdt=b&s=TITLE%28defining+open+source+software+project+success%29&sl=52&sessionSearchId=e166b0f8039f09d459fe5939ae3dfe1b&relpos=0	Association for Information Systems	nan; References
50	TrustSE	Toward Decentralized Package Management	The mutation of the software economy toward crowdsourcing, the explosion of the number of de- vices and the increasing need for quickly-released software call for revisiting the way software are deployed and managed. The current approach adopted by most software package management sys- tems is to rely on a single distributor, who collects packages from upstream sources, tests, releases and distributes them through a centralized channel, called repository. In this paper, we identify the major downsides of this centralized architecture and promote a distributed approach for software de- ployment. That is, in a network consisting of interconnected symmetric peers, all the developers are allowed to release and distribute software asynchronously. The discovery and retrieval of software is achieved through the communication among peers. We highlight the impacts of using such an approach and define a specific format of metadata that supports distributed package release		Fabien Dagnat; Gwendal Simon; Xu Zhang	workshop on logics for component configuration	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=f58969041a5bb371b0c48ed49948d91a26d874c7		7	"""nan"""	Excluded	Excluded				2	Google Scholar		Toward Decentralized Package Management	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=f58969041a5bb371b0c48ed49948d91a26d874c7	Lococo	
52	TrustSE	Self-organization of teams for free/libre open source software development	This paper provides empirical evidence about how free/libre open source software development teams self-organize their work, specifically, how tasks are assigned to project team members. Following a case study methodology, we examined developer interaction data from three active and successful FLOSS projects using qualitative research methods, specifically inductive content analysis, to identify the task-assignment mechanisms used by the participants. We found that `self-assignment' was the most common mechanism across three FLOSS projects. This mechanism is consistent with expectations for distributed and largely volunteer teams. We conclude by discussing whether these emergent practices can be usefully transferred to mainstream practice and indicating directions for future research.	free/libre open source software development; task assignment; self-organizing teams; distributed teams; qualitative research methods; coordination; free/libre open source software development;  task assignment;  self-organizing teams;  distributed teams;  qualitative research methods;  coordination	Crowston, Kevin; Li, Qing; Wei, Kangning; Eseryel, U. Yeliz; Howison, James	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2007.02.004		564-575	"""@article{WOS:000246599700004,
    Author = ""Crowston, Kevin and Li, Qing and Wei, Kangning and Eseryel, U. Yeliz and Howison, James"",
    Title = ""Self-organization of teams for free/libre open source software development"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2007"",
    Volume = ""49"",
    Number = ""6"",
    Pages = ""564-575"",
    Month = ""JUN"",
    Abstract = ""This paper provides empirical evidence about how free/libre open source software development teams self-organize their work, specifically, how tasks are assigned to project team members. Following a case study methodology, we examined developer interaction data from three active and successful FLOSS projects using qualitative research methods, specifically inductive content analysis, to identify the task-assignment mechanisms used by the participants. We found that `self-assignment' was the most common mechanism across three FLOSS projects. This mechanism is consistent with expectations for distributed and largely volunteer teams. We conclude by discussing whether these emergent practices can be usefully transferred to mainstream practice and indicating directions for future research. (C) 2007 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Crowston, K (Corresponding Author), Syracuse Univ, Sch Informat Studies, 348 Hinds Hall, Syracuse, NY 13244 USA. Syracuse Univ, Sch Informat Studies, Syracuse, NY 13244 USA."",
    DOI = ""10.1016/j.infsof.2007.02.004"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""free/libre open source software development; task assignment; self-organizing teams; distributed teams; qualitative research methods; coordination"",
    Keywords-Plus = ""DESIGN; COORDINATION; INTERNET; SYSTEMS; WORK"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""crowston@syr.edu qli03@syr.edu kwei@syr.edu uyeserye@syr.edu jhowison@syr.edu"",
    Affiliations = ""Syracuse University"",
    ResearcherID-Numbers = ""Eseryel, Yeliz/AAE-3379-2021 Crowston, Kevin/C-6068-2008"",
    ORCID-Numbers = ""Crowston, Kevin/0000-0003-1996-3600"",
    Number-of-Cited-References = ""59"",
    Times-Cited = ""111"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""21"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""169NU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000246599700004"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Self-organization of teams for free/libre open source software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000246599700004	ELSEVIER SCIENCE BV	nan; References
53	TrustSE	Why Free-Libre / Open Source Software (FLOSS)? Look at the Numbers!			David A. Wheeler		https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=0902474713fbbe229b9406d5df5f118b28160a8e		40	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Why Free-Libre/Open Source Software (FLOSS)? Look at the Numbers!	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=0902474713fbbe229b9406d5df5f118b28160a8e		
54	TrustSE	The role of trust management in distributed systems security	"Existing authorization mechanisms fail to provide powerful and robust tools for handling security at the scale necessary for today's Internet. These mechanisms are coming under increasing strain from the development and deployment of systems that increase the programmability of the Internet. Moreover, this ""increased flexibility through programmability"" trend seems to be accelerating with the advent of proposals such as Active Networking and Mobile Agents. The trust-management approach to distributed-system security was developed as an answer to the inadequacy of traditional authorization mechanisms. Trust-management engines avoid the need to resolve ""identities"" in an authorization decision. Instead, they express privileges and restrictions in a programming language. This allows for increased flexibility and expressibility, as well as standardization of modern, scalable security mechanisms. Further advantages of the trust-management approach include proofs that requested transactions comply with local policies and system architectures that encourage developers and administrators to consider an application's security policy carefully and specify it explicitly. In this paper, we examine existing authorization mechanisms and their inadequacies. We introduce the concept of trust management, explain its basic principles, and describe some existing trust-management engines, including PoHcyMaker and KeyNote. We also report on our experience using trust-management engines in several distributed-system applications."	Engines; Mobile agents; Network security; Object oriented programming; Active networking; Authorization decision; Distributed system security; Distributed systems; Distributed systems security; Increased flexibility; Scalable securities; System architectures; Distributed computer systems; Engines;  Mobile agents;  Network security;  Object oriented programming;  Active networking;  Authorization decision;  Distributed system security;  Distributed systems;  Distributed systems security;  Increased flexibility;  Scalable securities;  System architectures;  Distributed computer systems	Blaze, Matt; Feigenbaum, Joan; Ioannidis, John; Keromytis, Angelos D.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/3-540-48749-2_8		185 - 210	"""@ARTICLE{Blaze1999185,
    author = ""Blaze, Matt and Feigenbaum, Joan and Ioannidis, John and Keromytis, Angelos D."",
    editor = ""J., Vitek and C.D., Jensen"",
    title = ""The role of trust management in distributed systems security"",
    year = ""1999"",
    journal = ""Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)"",
    volume = ""1603"",
    pages = ""185 - 210"",
    doi = ""10.1007/3-540-48749-2\_8"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84982899264\&doi=10.1007\%2f3-540-48749-2\_8\&partnerID=40\&md5=595641d40f213f02c4f7fd1a91a62056"",
    affiliations = ""AT \& T Labs - research, 180 Park Avenue, Florham Park, 07932, NJ, United States; Distributed Systems Lab, CIS Department University of Pennsylvania, 200 S. 33rd Str., Philadelphia, 19104, PA, United States"",
    abstract = {Existing authorization mechanisms fail to provide powerful and robust tools for handling security at the scale necessary for today's Internet. These mechanisms are coming under increasing strain from the development and deployment of systems that increase the programmability of the Internet. Moreover, this ""increased flexibility through programmability"" trend seems to be accelerating with the advent of proposals such as Active Networking and Mobile Agents. The trust-management approach to distributed-system security was developed as an answer to the inadequacy of traditional authorization mechanisms. Trust-management engines avoid the need to resolve ""identities"" in an authorization decision. Instead, they express privileges and restrictions in a programming language. This allows for increased flexibility and expressibility, as well as standardization of modern, scalable security mechanisms. Further advantages of the trust-management approach include proofs that requested transactions comply with local policies and system architectures that encourage developers and administrators to consider an application's security policy carefully and specify it explicitly. In this paper, we examine existing authorization mechanisms and their inadequacies. We introduce the concept of trust management, explain its basic principles, and describe some existing trust-management engines, including PoHcyMaker and KeyNote. We also report on our experience using trust-management engines in several distributed-system applications. (c) Springer-Verlag Berlin Heidelberg 1999.},
    keywords = ""Engines; Mobile agents; Network security; Object oriented programming; Active networking; Authorization decision; Distributed system security; Distributed systems; Distributed systems security; Increased flexibility; Scalable securities; System architectures; Distributed computer systems"",
    publisher = ""Springer Verlag"",
    issn = ""03029743"",
    isbn = ""978-354066130-6"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 307; Conference name: European Workshop on Distributed Object Security, EWDOS 1998 and Workshop on Mobile Object Systems: Secure Internet Mobile Computations, MOS 1998 held in conjunction with European Conference on Object-Oriented Programming, ECOOP 1998; Conference date: 21 July 1998 through 21 July 1998; Conference code: 179229""
}
"""	Excluded	Excluded				2	Scopus Signed In		The role of trust management in distributed systems security	https://www.scopus.com/record/display.uri?eid=2-s2.0-84982899264&origin=resultslist&sort=r-f&src=s&sid=21eaf6eced994256b7dea02c7518ff7f&sot=b&sdt=b&s=TITLE%28the+role+of+trust+management+in+distributed+systems+security%29&sl=67&sessionSearchId=21eaf6eced994256b7dea02c7518ff7f&relpos=0	Springer Verlag	nan; References
55	TrustSE	Open source software: perspectives for development	"This report intends to help information technology decision-makers in developing countries understand the dynam- ics associated with implementing open source software solutions. We present information on the forces shaping the open source market in both the public and private sectors. Case studies, in Part II, illustrate ways in which Open Source Software is used or adapted to meet needs in developing regions. Perspectives from some who have exam- ined the market are also presented to encourage the exchange of information and promote discussion of this important topic.  Interest in Open Source Software (OSS) is increasing globally. Technology providers are broadening their support, deployments are increasing, investors are taking notice, new open source projects are appearing, and competitors and lobbyists are marketing against it. While the strength of these dynamics can be difficult to gauge, the trends are positive for OSS. However, concerns of an unproven business proposition, beliefs that the software is unreliable, along with technology terms, acronyms, and products that are unfamiliar to decision- makers necessitate continuing education and awareness building.  OSS is about choice. While initial OSS interest is brought about by the potential for lower cost, a longer-term benefit may be increased choice to consumers of Information and Communication Technology (ICT). The emer- gence of OSS creates more options to address ICT needs. Solutions can mix both proprietary and OSS compo- nents. New development models emphasize collaboration and community. Market competition increases. Projects, when coupled with a focus on interoperability and open standards, should benefit from a greater emphasis on process/business needs and less on technical underpinnings.  Government leaders have a key role to play. As software use expands into more areas of human endeavor, consideration should be given to improving access to the market for all software providers. The software market is dominated by a few proprietary providers who spend over $6.5 billion annually to communicate their message. There is a need to assist OSS initiatives in accessing market opportunities.  There is opportunity for local capacity development. The nature of OSS lends itself to providing an ICT environment based on local ownership and autonomy. Software can be adapted to address localization, while introducing more flexibility and independence to the software development process. With OSS growth in an early stage for development, business opportunities exist for various complementary solutions and services.  The debate: ""open"" versus ""proprietary"" software. The OSS debate is multifaceted and the rhetoric is increas- ing. Some organizations position the debate on the merits of commercial versus non-commercial software. With commercial interest in OSS increasing, the discourse should be centered on the merits of OSS versus propri- etary solutions.  OSS is but one part of an ICT strategy. Traditional development methodologies are still required to deliver high quality, usable and functional applications. OSS should be evaluated and deployed using the same methodologies and disciplined care as any other ICT solution. While some challenges related to open source use in developing countries may be unique because of the social and economic landscape, most dynamics are global, requiring consideration by decision-makers in all countries."		Paul Dravis	Information for Development Program	https://documents1.worldbank.org/curated/en/199011468779102922/pdf/276800Open0Sou1re0nov0200301public1.pdf		44	"""nan"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Google Scholar		Open source software: perspectives for development	https://documents1.worldbank.org/curated/en/199011468779102922/pdf/276800Open0Sou1re0nov0200301public1.pdf	The World Bank	
56	TrustSE	A look in the mirror: attacks on package managers	This work studies the security of ten popular package managers. These package managers use different security mechanisms that provide varying levels of usability and resilience to attack. We find that, despite their existing security mechanisms, all of these package managers have vulnerabilities that can be exploited by a man-in-the-middle or a malicious mirror. While all current package managers suffer from vulnerabilities, their security is also positively or negatively impacted by the distribution's security practices. Weaknesses in package managers are more easily exploited when distributions use third-party mirrors as official mirrors. We were successful in using false credentials to obtain an official mirror on all five of the distributions we attempted. We also found that some security mechanisms that control where a client obtains metadata and packages from may actually decrease security. We analyze current package managers to show that by exploiting vulnerabilities, an attacker with a mirror can compromise or crash hundreds to thousands of clients weekly. The problems we disclose are now being corrected by many different package manager maintainers.	mirrors;  package management;  replay attack; mirrors, package management, replay attack	Cappos, Justin; Samuel, Justin; Baker, Scott; Hartman, John H.	CCS '08: Proceedings of the 15th ACM conference on Computer and communications security	https://doi.org/10.1145/1455770.1455841		565-574	"""@inproceedings{10.1145/1455770.1455841,
    author = ""Cappos, Justin and Samuel, Justin and Baker, Scott and Hartman, John H."",
    title = ""A look in the mirror: attacks on package managers"",
    year = ""2008"",
    isbn = ""9781595938107"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1455770.1455841"",
    doi = ""10.1145/1455770.1455841"",
    abstract = ""This work studies the security of ten popular package managers. These package managers use different security mechanisms that provide varying levels of usability and resilience to attack. We find that, despite their existing security mechanisms, all of these package managers have vulnerabilities that can be exploited by a man-in-the-middle or a malicious mirror. While all current package managers suffer from vulnerabilities, their security is also positively or negatively impacted by the distribution's security practices. Weaknesses in package managers are more easily exploited when distributions use third-party mirrors as official mirrors. We were successful in using false credentials to obtain an official mirror on all five of the distributions we attempted. We also found that some security mechanisms that control where a client obtains metadata and packages from may actually decrease security. We analyze current package managers to show that by exploiting vulnerabilities, an attacker with a mirror can compromise or crash hundreds to thousands of clients weekly. The problems we disclose are now being corrected by many different package manager maintainers."",
    booktitle = ""Proceedings of the 15th ACM Conference on Computer and Communications Security"",
    pages = ""565-574"",
    numpages = ""10"",
    keywords = ""mirrors, package management, replay attack"",
    location = ""Alexandria, Virginia, USA"",
    series = ""CCS '08""
}
"""	Excluded	Excluded				2	ACM		Attacks on Package Managers	https://doi.org/10.1145/1455770.1455841	Association for Computing Machinery	nan; References; Link
57	TrustSE	Entering the circle of trust: developer initiation as committers in open-source projects	The success of an open-source project depends to a large degree on the proactive and constructive participation by the developer community. An important role that developers play in a project is that of a code committer. However, code-commit privilege is typically restricted to the core group of a project. In this paper, we study the phenomenon of the induction of external developers as code committers. The trustworthiness of an external developer is one of the key factors that determines the granting of commit privileges. Therefore, we formulate different hypotheses to explain how the trust is established in practice. To investigate our hypotheses, we developed an automated approach based on mining code repositories and bug-tracking systems. We implemented the approach and performed an empirical study, using the Eclipse projects, to test the hypotheses. Our results indicate that, most frequently, developers establish trust and credibility in a project by contributing to the project in a non-committer role. Moreover, the employing organization of a developer is another factor--although a less significant one--that influences trust.	code committer;  developer roles;  mining bug repository;  mining code repository;  open-source software; code committer, developer roles, mining bug repository, mining code repository, open-source software	Sinha, Vibha Singhal; Mani, Senthil; Sinha, Saurabh	MSR '11: Proceedings of the 8th Working Conference on Mining Software Repositories	https://doi.org/10.1145/1985441.1985462		133-142	"""@inproceedings{10.1145/1985441.1985462,
    author = ""Sinha, Vibha Singhal and Mani, Senthil and Sinha, Saurabh"",
    title = ""Entering the circle of trust: developer initiation as committers in open-source projects"",
    year = ""2011"",
    isbn = ""9781450305747"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1985441.1985462"",
    doi = ""10.1145/1985441.1985462"",
    abstract = ""The success of an open-source project depends to a large degree on the proactive and constructive participation by the developer community. An important role that developers play in a project is that of a code committer. However, code-commit privilege is typically restricted to the core group of a project. In this paper, we study the phenomenon of the induction of external developers as code committers. The trustworthiness of an external developer is one of the key factors that determines the granting of commit privileges. Therefore, we formulate different hypotheses to explain how the trust is established in practice. To investigate our hypotheses, we developed an automated approach based on mining code repositories and bug-tracking systems. We implemented the approach and performed an empirical study, using the Eclipse projects, to test the hypotheses. Our results indicate that, most frequently, developers establish trust and credibility in a project by contributing to the project in a non-committer role. Moreover, the employing organization of a developer is another factor--although a less significant one--that influences trust."",
    booktitle = ""Proceedings of the 8th Working Conference on Mining Software Repositories"",
    pages = ""133-142"",
    numpages = ""10"",
    keywords = ""code committer, developer roles, mining bug repository, mining code repository, open-source software"",
    location = ""Waikiki, Honolulu, HI, USA"",
    series = ""MSR '11""
}
"""	Excluded	Excluded				2	ACM		Entering the circle of trust: developer initiation as committers in open-source projects	https://doi.org/10.1145/1985441.1985462	Association for Computing Machinery	nan; References; Link
58	TrustSE	Striking a balance between trust and control in a virtual organization: A content analysis of open source software case studies	Many organization theorists have predicted the emergence of the networked or virtual firm as a model for the design of future organizations. Researchers have also emphasized the importance of trust as a necessary condition for ensuring the success of virtual organizations. This paper examines the open source software (OSS) 'movement' as an example of a virtual organization and proposes a model that runs contrary to the belief that trust is critical for virtual organizations. Instead, I argue that various control mechanisms can ensure the effective performance of autonomous agents who participate in virtual organizations. Borrowing from the theory of the 'McDonaldization' of society, I argue that, given a set of practices to ensure the control, efficiency, predictability and calculability of processes and outcomes in virtual organizations, effective performance may occur in the absence of trust. As support for my argument, I employ content analysis to examine a set of published case studies of OSS projects. My results show that, although that trust is rarely mentioned, ensuring control is an important criterion for effective performance within OSS projects. The case studies feature few references to other dimensions of McDonaldization (efficiency, predictability and calculability), however, and I conclude that the OSS movement relies on many other forms of social control and self-control, which are often unacknowledged in OSS projects. Through these implicit forms of control, OSS projects are able to secure the cooperation of the autonomous agents that participate in project teams. I conclude by extrapolating from these case studies to other virtual organizations.	Control;; McDonaldization;; Networked organization;; Rationalization;; Trust;; Virtual organization	Gallivan, Michael J.	Information Systems Journal	https://doi.org/10.1046/j.1365-2575.2001.00108.x		277 - 304	"""@ARTICLE{Gallivan2001277,
    author = ""Gallivan, Michael J."",
    title = ""Striking a balance between trust and control in a virtual organization: A content analysis of open source software case studies"",
    year = ""2001"",
    journal = ""Information Systems Journal"",
    volume = ""11"",
    number = ""4"",
    pages = ""277 - 304"",
    doi = ""10.1046/j.1365-2575.2001.00108.x"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0035643160\&doi=10.1046\%2fj.1365-2575.2001.00108.x\&partnerID=40\&md5=f3d05247e671d6222c55e784a85b055c"",
    affiliations = ""Georgia State University, Robinson College of Business, Atlanta, GA 30302-4015, United States; CIS Department, Georgia State Univ. Robinson C., Atlanta, GA, United States"",
    abstract = ""Many organization theorists have predicted the emergence of the networked or virtual firm as a model for the design of future organizations. Researchers have also emphasized the importance of trust as a necessary condition for ensuring the success of virtual organizations. This paper examines the open source software (OSS) 'movement' as an example of a virtual organization and proposes a model that runs contrary to the belief that trust is critical for virtual organizations. Instead, I argue that various control mechanisms can ensure the effective performance of autonomous agents who participate in virtual organizations. Borrowing from the theory of the 'McDonaldization' of society, I argue that, given a set of practices to ensure the control, efficiency, predictability and calculability of processes and outcomes in virtual organizations, effective performance may occur in the absence of trust. As support for my argument, I employ content analysis to examine a set of published case studies of OSS projects. My results show that, although that trust is rarely mentioned, ensuring control is an important criterion for effective performance within OSS projects. The case studies feature few references to other dimensions of McDonaldization (efficiency, predictability and calculability), however, and I conclude that the OSS movement relies on many other forms of social control and self-control, which are often unacknowledged in OSS projects. Through these implicit forms of control, OSS projects are able to secure the cooperation of the autonomous agents that participate in project teams. I conclude by extrapolating from these case studies to other virtual organizations."",
    author_keywords = ""Control; McDonaldization; Networked organization; Rationalization; Trust; Virtual organization"",
    correspondence_address = ""M.J. Gallivan; Georgia State University, Robinson College of Business, Atlanta, GA 30302-4015, United States; email: mgallivan@gsu.edu"",
    issn = ""13501917"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. J."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 209""
}
"""	Excluded	Excluded				2	Scopus Signed In		Striking a balance between trust and control in a virtual organization: a content analysis of open source software case studies	https://www.scopus.com/record/display.uri?eid=2-s2.0-0035643160&origin=resultslist&sort=r-f&src=s&sid=84a60a12269642758563b55a6388b0ab&sot=b&sdt=b&s=TITLE%28striking+a+balance+between+trust+and+control+in+a+virtual+organization+a+content+analysis+of+open+source+software+case+studies%29&sl=133&sessionSearchId=84a60a12269642758563b55a6388b0ab&relpos=0		nan; References; Publisher
59	TrustSE	What do we know about developer motivation?	Software engineers will do better work and stay with a company if they are motivated - as a result the success of software projects is likely to improve. The authors use the findings from their in-depth review of the 92 studies published in the last 25 years on software engineer motivation to give an overview of what managers need to know to improve motivation among their employees.	Health risks; Software engineers; Software Engineers; Software projects; Motivation; Health risks;  Software engineers;  Software Engineers;  Software projects;  Motivation	Hall, Tracy; Sharp, Helen; Beecham, Sarah; Baddoo, Nathan; Robinson, Hugh	IEEE Software	https://doi.org/10.1109/MS.2008.105	"1.J. Procaccino and J.M. Verner, ""What Do Software Practitioners Really Think about Project Success: An Exploratory Study"", J. Systems and Software, vol. 78, no. 2, pp. 194-203, 2005. CrossRef  Google Scholar; 2.B.W. Boehm, Software Engineering Economics, 1981. Google Scholar; 3.S.A. Frangos, ""Motivated Humans for Reliable Software Products"", Microprocessors and Microsystems, vol. 21, no. 10, pp. 605-610, 1997. CrossRef  Google Scholar; 4.S. Beecham, ""Motivation in Software Engineering: A Systematic Literature Review"", Information and Software Technology J., 2008. CrossRef  Google Scholar; 5.J.R. Hackman and G.R. Oldman, Motivation through the Design of Work: Test of a Theory, 1976. Google Scholar; 6.D.J. Couger and R.A. Zawacki, Motivating and Managing Computer Personnel, 1980. Google Scholar; 7.A. Maslow, Motivation and Personality, 1954. Google Scholar; 8.H. Sharp, ""Models of Motivation in Software Engineering"", Information and Software Technology J., 2008. CrossRef  Google Scholar; 9.T. Hall, ""A Systematic Review of Theory Use in Studies Investigating the Motivations of Software Engineers"", ACM Trans. Software Eng. and Methodology, 2008. CrossRef  Google Scholar; 10.F. Herzberg, The Motivation to Work, 1959. Google Scholar"	92 - 94	"""@ARTICLE{Hall200892,
    author = ""Hall, Tracy and Sharp, Helen and Beecham, Sarah and Baddoo, Nathan and Robinson, Hugh"",
    title = ""What do we know about developer motivation?"",
    year = ""2008"",
    journal = ""IEEE Software"",
    volume = ""25"",
    number = ""4"",
    pages = ""92 - 94"",
    doi = ""10.1109/MS.2008.105"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-47149112933\&doi=10.1109\%2fMS.2008.105\&partnerID=40\&md5=c3ddd00eadaec63a49003a71b4e9c599"",
    affiliations = ""Brunel University, Uxbridge, United Kingdom; Open University, London, United Kingdom; University of Hertfordshire, Hertfordshire, United Kingdom"",
    abstract = ""Software engineers will do better work and stay with a company if they are motivated - as a result the success of software projects is likely to improve. The authors use the findings from their in-depth review of the 92 studies published in the last 25 years on software engineer motivation to give an overview of what managers need to know to improve motivation among their employees. (c) 2008 IEEE."",
    author_keywords = ""Management; Motivation; Software developers"",
    keywords = ""Health risks; Software engineers; Software Engineers; Software projects; Motivation"",
    correspondence_address = ""T. Hall; Brunel University, Uxbridge, United Kingdom; email: tracy.hall@brunel.ac.uk"",
    issn = ""07407459"",
    coden = ""IESOE"",
    language = ""English"",
    abbrev_source_title = ""IEEE Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 52""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Scopus Signed In		What do we know about developer motivation?	https://ieeexplore.ieee.org/document/4548414	IEEE	
60	TrustSE	A Quantitative Analysis of Developer Information Needs in Software Ecosystems	We present the results of an investigation into the nature of information needs of software developers who work in projects that are part of larger ecosystems. This work is based on a quantitative survey of 75 professional software developers. We corroborate the results identified in the survey with needs and motivations proposed in a previous survey and discover that tool support for developers working in an ecosystem context is even more meager than we thought: mailing lists and internet search are the most popular tools developers use to satisfy their ecosystem-related information needs.	Software ecosystems;  frameworks and libraries;  open source software;  program comprehension;  programmer needs; Software ecosystems, frameworks and libraries, open source software, program comprehension, programmer needs	Haenni, Nicole; Lungu, Mircea; Schwarz, Niko; Nierstrasz, Oscar	ECSAW '14: Proceedings of the 2014 European Conference on Software Architecture Workshops	https://doi.org/10.1145/2642803.2642815		1-6	"""@inproceedings{10.1145/2642803.2642815,
    author = ""Haenni, Nicole and Lungu, Mircea and Schwarz, Niko and Nierstrasz, Oscar"",
    title = ""A Quantitative Analysis of Developer Information Needs in Software Ecosystems"",
    year = ""2014"",
    isbn = ""9781450327787"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2642803.2642815"",
    doi = ""10.1145/2642803.2642815"",
    abstract = ""We present the results of an investigation into the nature of information needs of software developers who work in projects that are part of larger ecosystems. This work is based on a quantitative survey of 75 professional software developers. We corroborate the results identified in the survey with needs and motivations proposed in a previous survey and discover that tool support for developers working in an ecosystem context is even more meager than we thought: mailing lists and internet search are the most popular tools developers use to satisfy their ecosystem-related information needs."",
    booktitle = ""Proceedings of the 2014 European Conference on Software Architecture Workshops"",
    articleno = ""12"",
    numpages = ""6"",
    keywords = ""Software ecosystems, frameworks and libraries, open source software, program comprehension, programmer needs"",
    location = ""Vienna, Austria"",
    series = ""ECSAW '14""
}
"""	Included	Included				2	ACM		A quantitative analysis of developer information needs in software ecosystems	https://doi.org/10.1145/2642803.2642815	Association for Computing Machinery	nan; References; Link
61	TrustSE	Trust (and mistrust) in secure applications			Viega, John; Kohno, Tadayoshi; Potter, Bruce	Commun. ACM	https://doi.org/10.1145/359205.359223		31-36	"""@article{10.1145/359205.359223,
    author = ""Viega, John and Kohno, Tadayoshi and Potter, Bruce"",
    title = ""Trust (and mistrust) in secure applications"",
    year = ""2001"",
    issue_date = ""Feb. 2001"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""44"",
    number = ""2"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/359205.359223"",
    doi = ""10.1145/359205.359223"",
    journal = ""Commun. ACM"",
    month = ""February"",
    pages = ""31-36"",
    numpages = ""6""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	ACM		Trust (and mistrust) in secure applications	https://doi.org/10.1145/359205.359223	Association for Computing Machinery	nan; Abstract; Keywords; References; Link
62	TrustSE	The moderating role of development stage in free/open source software project performance	The main thesis developed and tested in this article is that development stage plays an important moderating role in determining both objective and subjective performance outcomes in free/open source software (F/OSS) projects. This contention is supported by an empirical study of 67 F/OSS projects, with results indicating that subjective performance assessments are calibrated to different objective performance indicators across early and later development stages. The role of team climate variables (trust and shared ideology) in determining both objective and subjective performance also varies across stages. The findings have implications for improving software development processes through appropriate human resource management interventions over the course of F/OSS software projects.	Computer applications; Computer operating systems; Information technology; Personnel; Project management; Software engineering; Free/open source software projects; Shared ideology: software development stage; Software project performance; Trust; Open systems; Computer applications;  Computer operating systems;  Information technology;  Personnel;  Project management;  Software engineering;  Free/open source software projects;  Shared ideology: software development stage;  Software project performance;  Trust;  Open systems	Stewart, Katherine J.; Gosain, Sanjay	Software Process Improvement and Practice	https://doi.org/10.1002/spip.258		177 - 191	"""@ARTICLE{Stewart2006177,
    author = ""Stewart, Katherine J. and Gosain, Sanjay"",
    title = ""The moderating role of development stage in free/open source software project performance"",
    year = ""2006"",
    journal = ""Software Process Improvement and Practice"",
    volume = ""11"",
    number = ""2"",
    pages = ""177 - 191"",
    doi = ""10.1002/spip.258"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33744827742\&doi=10.1002\%2fspip.258\&partnerID=40\&md5=0991a382c05314f28aeeda06b0ce1dc8"",
    affiliations = ""Department of Decision and Information Technologies, R. H. Smith School of Business, University of Maryland, United States"",
    abstract = ""The main thesis developed and tested in this article is that development stage plays an important moderating role in determining both objective and subjective performance outcomes in free/open source software (F/OSS) projects. This contention is supported by an empirical study of 67 F/OSS projects, with results indicating that subjective performance assessments are calibrated to different objective performance indicators across early and later development stages. The role of team climate variables (trust and shared ideology) in determining both objective and subjective performance also varies across stages. The findings have implications for improving software development processes through appropriate human resource management interventions over the course of F/OSS software projects. Copyright (c) 2006 John Wiley \& Sons, Ltd."",
    author_keywords = ""Free/open source software projects; Shared ideology: software development stage; Software project performance; Trust"",
    keywords = ""Computer applications; Computer operating systems; Information technology; Personnel; Project management; Software engineering; Free/open source software projects; Shared ideology: software development stage; Software project performance; Trust; Open systems"",
    correspondence_address = ""K.J. Stewart; Department of Decision and Information Technologies, R. H. Smith School of Business, University of Maryland, United States; email: kstewart@rhsmith.umd.edu"",
    issn = ""10991670"",
    language = ""English"",
    abbrev_source_title = ""Softw. Process Improv. Pract."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 36""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		The moderating role of development stage in free/open source software project performance	https://www.scopus.com/record/display.uri?eid=2-s2.0-33744827742&origin=resultslist&sort=r-f&src=s&sid=250df9b2145d5269f28356f4d956afc3&sot=b&sdt=b&s=TITLE%28the+moderating+role+of+development+stage+in+free+open+source+software+project+performance%29&sl=96&sessionSearchId=250df9b2145d5269f28356f4d956afc3&relpos=0		nan; References; Publisher
63	TrustSE	The open source software development phenomenon: An analysis based on social network theory	The OSS movement is a phenomenon that challenges many traditional theories in economics, software engineering, business strategy, and IT management. Thousands of software programmers are spending tremendous amounts of time and effort writing and debugging software, most often with no direct monetary compensation. The programs, some of which are extremely large and complex, are written without the benefit of traditional project management, change tracking, or error checking techniques. Since the programmers are working outside of a traditional organizational reward structure, accountability is an issue as well. A significant portion of internet e-commerce runs on OSS, and thus many firms have little choice but to trust mission-critical e-commerce systems to run on such software, requiring IT management to deal with new types of socio-technical problems. A better understanding of how the OSS community functions may help IT planners make more informed decisions and develop more effective strategies for using OSS software. We hypothesize that open source software development can be modeled as self-organizing, collaboration, social networks. We analyze structural data on over 39,000 open source projects hosted at SourceForge.net involving over 33,000 developers. We define two software developers to be connected o part of a collaboration social network o if they are members of the same project, or are connected by a chain of connected developers. Project sizes, developer project participation, and clusters of connected developers are analyzed. We find evidence to support our hypothesis, primarily in the presence of power-law relationships on project sizes (number of developers per project), project membership (number of projects joined by a developer), and cluster sizes. Potential implications for IT researchers, IT managers, and governmental policy makers are discussed	Open source software; social networks	Gregory Madey; Vincent Freeh; Renee Tynan	Americas Conference on Information Systems	https://aisel.aisnet.org/cgi/viewcontent.cgi?article=1606&context=amcis2002		9	"""nan"""	Excluded	Excluded				2	Google Scholar		The open source software development phenomenon: An analysis based on social network theory	https://aisel.aisnet.org/cgi/viewcontent.cgi?article=1606&context=amcis2002	Association for Information Systems Electronic Library	
64	TrustSE	Determinants of open source software project success: A longitudinal study	In this paper, we investigate open source software (OSS) success using longitudinal data on OSS projects. We find that restrictive OSS licenses have an adverse impact on OSS success. On further analysis, restrictive OSS license is found to be negatively associated with developer interest, but is positively associated with the interest of non-developer users and project administrators. We also show that developer and non-developer interest in the OSS project and the project activity levels in any time period significantly affect the project success measures in subsequent time period. The implications of our findings for OSS research and practice are discussed.	Open systems; Longitudinal datums; Longitudinal study; Open source project; Open source software projects; Open source softwares; OSS; OSS projects; Project activities; Project successes; Software project success; Time periods; Computer software; Open systems;  Longitudinal datums;  Longitudinal study;  Open source project;  Open source software projects;  Open source softwares;  OSS;  OSS projects;  Project activities;  Project successes;  Software project success;  Time periods;  Computer software	Subramaniam, Chandrasekar; Sen, Ravi; Nelson, Matthew L.	Decision Support Systems	https://doi.org/10.1016/j.dss.2008.10.005		576 - 585	"""@ARTICLE{Subramaniam2009576,
    author = ""Subramaniam, Chandrasekar and Sen, Ravi and Nelson, Matthew L."",
    title = ""Determinants of open source software project success: A longitudinal study"",
    year = ""2009"",
    journal = ""Decision Support Systems"",
    volume = ""46"",
    number = ""2"",
    pages = ""576 - 585"",
    doi = ""10.1016/j.dss.2008.10.005"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-57749120274\&doi=10.1016\%2fj.dss.2008.10.005\&partnerID=40\&md5=4fd2540d278a2f0802d72f31c12894cb"",
    affiliations = ""Department of Business Information Systems and Operations Management, Belk College of Business, University of North Carolina -, Charlotte, United States; Department of Information and Operations Management, Mays Business School, Texas A and M University, United States; Department of Accounting and Business Information Systems, College of Business, Illinois State University, United States"",
    abstract = ""In this paper, we investigate open source software (OSS) success using longitudinal data on OSS projects. We find that restrictive OSS licenses have an adverse impact on OSS success. On further analysis, restrictive OSS license is found to be negatively associated with developer interest, but is positively associated with the interest of non-developer users and project administrators. We also show that developer and non-developer interest in the OSS project and the project activity levels in any time period significantly affect the project success measures in subsequent time period. The implications of our findings for OSS research and practice are discussed. (c) 2008 Elsevier B.V. All rights reserved."",
    author_keywords = ""Longitudinal study; Open source project; OSS; Software project success"",
    keywords = ""Open systems; Longitudinal datums; Longitudinal study; Open source project; Open source software projects; Open source softwares; OSS; OSS projects; Project activities; Project successes; Software project success; Time periods; Computer software"",
    correspondence_address = ""C. Subramaniam; Department of Business Information Systems and Operations Management, Belk College of Business, University of North Carolina -, Charlotte, United States; email: csubrama@uncc.edu"",
    issn = ""01679236"",
    coden = ""DSSYD"",
    language = ""English"",
    abbrev_source_title = ""Decis Support Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 189""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Determinants of open source software project success: A longitudinal study	https://www.scopus.com/record/display.uri?eid=2-s2.0-57749120274&origin=resultslist&sort=r-f&src=s&sid=81f36384a014d2370d900bdc321219a4&sot=b&sdt=b&s=TITLE%28determinants+of+open+source+software+project+success+a+longitudinal+study%29&sl=80&sessionSearchId=81f36384a014d2370d900bdc321219a4&relpos=0		nan; References; Publisher
65	TrustSE	From software product lines to software ecosystems	Software product line companies increasingly expand their platform outside their organizational boundaries, in effect transitioning to a software ecosystem approach. In this paper, we discuss the emerging trend of software ecosystems and provide a overview of the key concepts and implications of adopting a software ecosystem approach. We define the notion of software ecosystems and introduce a taxonomy. Finally, we explore the implications of software ecosystems to the way companies build software.		Bosch, Jan	SPLC '09: Proceedings of the 13th International Software Product Line Conference	https://doi.org/10.5555/1753235.1753251		111-119	"""@inproceedings{10.5555/1753235.1753251,
    author = ""Bosch, Jan"",
    title = ""From software product lines to software ecosystems"",
    year = ""2009"",
    publisher = ""Carnegie Mellon University"",
    address = ""USA"",
    abstract = ""Software product line companies increasingly expand their platform outside their organizational boundaries, in effect transitioning to a software ecosystem approach. In this paper, we discuss the emerging trend of software ecosystems and provide a overview of the key concepts and implications of adopting a software ecosystem approach. We define the notion of software ecosystems and introduce a taxonomy. Finally, we explore the implications of software ecosystems to the way companies build software."",
    booktitle = ""Proceedings of the 13th International Software Product Line Conference"",
    pages = ""111-119"",
    numpages = ""9"",
    location = ""San Francisco, California, USA"",
    series = ""SPLC '09""
}
"""	Excluded	Excluded				2	ACM		From software product lines to software ecosystems.	https://doi.org/10.5555/1753235.1753251	Carnegie Mellon University	nan; Keywords; References; Link
66	TrustSE	Open source interface politics: identity, acceptance, trust, and lobbying	A study of the Drupal open source project shows the problematic status of usability designers with respect to the larger developer community. Issues of power, trust, and identity arise and affect the way that usability recommendations are acted on or ignored. Making a straightforward case for a particular interface design can be insufficient to convince developers. Instead various additional lobbying strategies may be employed to build up support for the design.	lobbying;  open source;  politics;  usability; lobbying, open source, politics, usability	Zilouchian Moghaddam, Roshanak; Twidale, Michael; Bongen, Kora	CHI EA '11: CHI '11 Extended Abstracts on Human Factors in Computing Systems	https://doi.org/10.1145/1979742.1979835		1723-1728	"""@inproceedings{10.1145/1979742.1979835,
    author = ""Zilouchian Moghaddam, Roshanak and Twidale, Michael and Bongen, Kora"",
    title = ""Open source interface politics: identity, acceptance, trust, and lobbying"",
    year = ""2011"",
    isbn = ""9781450302685"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1979742.1979835"",
    doi = ""10.1145/1979742.1979835"",
    abstract = ""A study of the Drupal open source project shows the problematic status of usability designers with respect to the larger developer community. Issues of power, trust, and identity arise and affect the way that usability recommendations are acted on or ignored. Making a straightforward case for a particular interface design can be insufficient to convince developers. Instead various additional lobbying strategies may be employed to build up support for the design."",
    booktitle = ""CHI '11 Extended Abstracts on Human Factors in Computing Systems"",
    pages = ""1723-1728"",
    numpages = ""6"",
    keywords = ""lobbying, open source, politics, usability"",
    location = ""Vancouver, BC, Canada"",
    series = ""CHI EA '11""
}
"""	Excluded	Excluded				2	ACM		Open source interface politics: identity, acceptance, trust, and lobbying	https://doi.org/10.1145/1979742.1979835	Association for Computing Machinery	nan; References; Link
67	TrustSE	Multi-dimensions of Developer Trustworthiness Assessment in OSS Community	With the prosperity of the Open Source Software, various software communities are formed and they attract huge amounts of developers to participate in distributed software development. For such software development paradigm, how to evaluate the skills of the developers comprehensively and automatically is critical. However, most of the existing researches assess the developers based on the Implementation aspects, such as the artifacts they created or edited. They ignore the developers' contributions in Social collaboration aspects, such as answering questions, giving advices, making comments or creating social connections. In this paper, we propose a novel model which evaluate the individuals' skills from both Implementation and Social collaboration aspects. Our model defines four metrics from muti-dimensions, including collaboration index, technical skill, community influence and development contribution. We carry out experiments on a real-world online software community. The results show that our approach can make more comprehensive measurement than the previous work.	Communities; Software; Collaboration; Equations; Mathematical model; Educational institutions; Indexes; Developer assessment; trustworthiness; OSS community; multi-Dimensions contribution	Yu Bai; Gang Yin; Huaimin Wang	2014 IEEE 13th International Conference on Trust, Security and Privacy in Computing and Communications	https://doi.org/10.1109/TrustCom.2014.14	"1.J. D. Herbsleb, ""Global software engineering: The future of sociotechnical coordination,"" in 2007 Future of Software Engineering. IEEE Computer Society, 2007, pp. 188-198. Google Scholar; 2.N. Ducheneaut, ""Socialization in an open source software community: A socio-technical analysis,"" Computer Supported Cooperative Work (CSCW), vol. 14, no. 4, pp. 323-368, 2005. CrossRef  Google Scholar; 3.J. R. Nurse, I. Agrafiotis, S. Creese, M. Goldsmith, and K. Lamberts, ""Building confidence in information-trustworthiness metrics for decision support,"" in Trust, Security and Privacy in Computing and Communications (TrustCom), 2013 12th IEEE International Conference on. IEEE, 2013, pp. 535-543. View Article  Google Scholar; 4.R. Cheng and J. Vassileva, ""User motivation and persuasion strategy for peer-to-peer communities,"" in System Sciences, 2005. HICSS05. Proceedings of the 38th Annual Hawaii International Conference on. IEEE, 2005, pp. 193a-193a. View Article  Google Scholar; 5.Cheng R. Vassileva J. Adaptive reward mechanism for sustainable online learning community AIED 2005 152-159 Google Scholar; 6.F. M. Harper, S. X. Li, Y. Chen, and J. A. Konstan, ""Social comparisons to motivate contributions to an online community,"" in Persuasive Technology. Springer, 2007, pp. 148-159. CrossRef  Google Scholar; 7.R. Klamma, M. A. Chatti, E. Duval, H. Hummel, E. T. Hvannberg, M. Kravcik, E. Law, A. Naeve, and P. Scott, ""Social software for lifelong learning."" Journal of Educational Technology , vol. 10, no. 3, 2007. Google Scholar; 8.A. M. Rashid, K. Ling, R. D. Tassone, P. Resnick, R. Kraut, and J. Riedl, ""Motivating participation by displaying the value of contribution,"" in Proceedings of the SIGCHI conference on Human Factors in computing systems. ACM, 2006, pp. 955-958. CrossRef  Google Scholar; 9.A. J. Albrecht, ""Measuring application development productivity,"" in Proceedings of the Joint SHARE/GUIDE/IBM Application Development Symposium, vol. 10, 1979, pp. 83-92. Google Scholar; 10.S. Chulani, ""Results of delphi for the defect introduction model, submodel of the cost/quality model extension to cocomo ii,"" Technical Report, USC-CSE-97-504, 1997, Computer Science Department, University of Southern California, Center for Software Engineering, Los Angeles, CA 90089-0781, Tech. Rep., 1997. Google Scholar; 11.B. W. Boehm, ""Software engineering economics,"" 1981. Google Scholar; 12.A. Minkiewicz, ""Measuring object oriented software with predictive object points,"" PRICE Systems, LLC, 1997. Google Scholar; 13.S. A. Whitmire, ""3d function points: Scientific and real-time extensions to function points,"" in Pacific Northwest Software Quality Conference, 1992. Google Scholar; 14.T. DeMarco, Controlling software projects: Management, measurement, and estimates. Prentice Hall PTR Upper Saddle River, NJ, USA, 1986. Google Scholar; 15.A. Gray and S. Macdonell, ""Applications of fuzzy logic to software metric models for development effort estimation,"" in Fuzzy Information Processing Society, 1997. NAFIPS97., 1997 Annual Meeting of the North American. IEEE, 1997, pp. 394-399. View Article  Google Scholar; 16.L. H. Putnam and A. Fitzsimmons, ""Estimating software costs,"" Datamation, vol. 25, no. 10, p. 189, 1979. View Article  Google Scholar; 17.G. Gousios, E. Kalliamvakou, and D. Spinellis, ""Measuring developer contribution from software repository data,"" in Proceedings of the 2008 international working conference on Mining software repositories. ACM, 2008, pp. 129-132 CrossRef  Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Multi-dimensions of Developer Trustworthiness Assessment in OSS Community	https://ieeexplore.ieee.org/document/7011236	IEEE	nan; Pages; Year; Bibtex
68	TrustSE	Theory of software reliability based on components	We present a foundational theory of software system reliability based on components. The theory describes how component developers can design and test their components to produce measurements that are later used by system designers to calculate composite system reliability -- without implementation and test of the system being designed. The theory describes how to make component measurements that are independent of operational profiles, and how to incorporate the overall system-level operational profile into the system reliability calculations. In principle, the theory resolves the central problem of assessing a component, which is: a component developer cannot know how the component will be used and so cannot certify it for an arbitrary use; but if the component buyer must certify each component before using it, component-based development loses much of its appeal. This dilemma is resolved if the component developer does the certification and provides the results in such a way that the component buyer can factor in the usage information later, without repeating the certification. Our theory addresses the basic technical problems inherent in certifying components to be released for later use in an arbitrary system.Most component research has been directed at functional specification of software components; our theory addresses the other, equally important, side of the coin: component quality.	CBSE;  COTS;  foundational theory;  reliability composition;  software components; CBSE, COTS, foundational theory, reliability composition, software components	Hamlet, Dick; Mason, Dave; Woit, Denise	ICSE '01: Proceedings of the 23rd International Conference on Software Engineering	https://doi.org/10.5555/381473.381511		361-370	"""@inproceedings{10.5555/381473.381511,
    author = ""Hamlet, Dick and Mason, Dave and Woit, Denise"",
    title = ""Theory of software reliability based on components"",
    year = ""2001"",
    isbn = ""0769510507"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    abstract = ""We present a foundational theory of software system reliability based on components. The theory describes how component developers can design and test their components to produce measurements that are later used by system designers to calculate composite system reliability -- without implementation and test of the system being designed. The theory describes how to make component measurements that are independent of operational profiles, and how to incorporate the overall system-level operational profile into the system reliability calculations. In principle, the theory resolves the central problem of assessing a component, which is: a component developer cannot know how the component will be used and so cannot certify it for an arbitrary use; but if the component buyer must certify each component before using it, component-based development loses much of its appeal. This dilemma is resolved if the component developer does the certification and provides the results in such a way that the component buyer can factor in the usage information later, without repeating the certification. Our theory addresses the basic technical problems inherent in certifying components to be released for later use in an arbitrary system.Most component research has been directed at functional specification of software components; our theory addresses the other, equally important, side of the coin: component quality."",
    booktitle = ""Proceedings of the 23rd International Conference on Software Engineering"",
    pages = ""361-370"",
    numpages = ""10"",
    keywords = ""CBSE, COTS, foundational theory, reliability composition, software components"",
    location = ""Toronto, Ontario, Canada"",
    series = ""ICSE '01""
}
"""	Excluded	Excluded				2	ACM		Theory of software reliability based on components	https://doi.org/10.5555/381473.381511	IEEE Computer Society	nan; References; Link
69	TrustSE	An Empirical Study of Developer Quality	Human factors have attracted more and more attention in software engineering. Of many kinds of developer metrics proposed, developer quality is important. Recently, some researchers measure a developer's quality as the rate of his/hernon bug-introducing commits. In this paper, we conduct an empirical study of this developer quality metric. We use the data of six open source software projects and get the following conclusions: (1) the values of developer quality in a project are uniformly distributed in a certain range, (2) developer quality tends to increase with software evolution, (3) developers with more contribution are more likely to have higher developer quality, (4) ownership does not have a consistent and significant correlation with developer quality. These results can provide project leaders and team members with some guides to improve developer quality, and thus improve software quality.	Measurement; Correlation; Software quality; Computer bugs; Software reliability; High-quality; Human Factor; Software Development; Quality Value; Project Team; Quality Metrics; Software Engineering; Project Leader; Software Quality; Open Projects; Software Projects; Open Source Software Projects; Evolution Of Distribution; Software Defect; Network Metrics; Part Of Code; Complementary Cumulative Distribution Function; Defect Prediction; Developer quality; human factors; developer metrics; developer experience; developer contribution; ownership	Yilin Qiu; Weiqiang Zhang; Weiqin Zou; Jia Liu; Qin Liu	2015 IEEE International Conference on Software Quality, Reliability and Security - Companion	https://doi.org/10.1109/QRS-C.2015.33	"1.A. Begel, ""From program comprehension to people comprehension"", Program Comprehension (ICPC) 2010 IEEE 18th International Conference on, pp. 190-191, 2010. CrossRef  Google Scholar; 2.T. J. Ostrand, E. J. Weyuker and R. M. Bell, ""Programmer-based fault prediction"", Proceedings of the 6th International Conference on Predictive Models in Software Engineering, pp. 19, 2010. CrossRef  Google Scholar; 3.M. Cataldo, J. D. Herbsleb and K. M. Carley, ""Socio-technical congruence: a framework for assessing the impact of technical and work dependencies on software development productivity"", Proceedings of the Second ACM-IEEE international symposium on Empirical software engineering and measurement, pp. 2-11, 2008. CrossRef  Google Scholar; 4.F. P. Brooks, ""No silver bullet"", Software state-of-the-art, pp. 14-29, 1975. Google Scholar; 5.M. Zhou and A. Mockus, ""Mining micro-practices from operational data"", Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 845-848, 2014. CrossRef  Google Scholar; 6.T. D. LaToza, G. Venolia and R. DeLine, ""Maintaining mental models: a study of developer work habits"", Proceedings of the 28th international conference on Software engineering, pp. 492-501, 2006. CrossRef  Google Scholar; 7.S. Matsumoto, Y. Kamei, A. Monden, K.I. Matsumoto and M. Nakamura, ""An analysis of developer metrics for fault prediction"", Proceedings of the 6th International Conference on Predictive Models in Software Engineering, pp. 18, 2010. CrossRef  Google Scholar; 8.Y. Wu, Y. Yang, Y. Zhao, H. Lu, Y. Zhou and B. Xu, ""The influence of developer quality on software fault-proneness prediction"", Software Security and Reliability 2014 Eighth International Conference on, pp. 11-19, 2014. CrossRef  Google Scholar; 9.G. Gousios, E. Kalliamvakou and D. Spinellis, ""Measuring developer contribution from software repository data"", Proceedings of the 2008 international working conference on Mining software repositories, pp. 129-132, 2008. CrossRef  Google Scholar; 10.C. Bird, N. Nagappan, B. Murphy, H. Gall and P. Devanbu, ""Don't touch my code!: examining the effects of ownership on software quality"", Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering, pp. 4-14, 2011. CrossRef  Google Scholar; 11.C. Bird, A. Gourley, P. Devanbu, M. Gertz and A. Swaminathan, ""Mining email social networks"", Proceedings of the 2006 international workshop on Mining software repositories, pp. 137-143, 2006. CrossRef  Google Scholar; 12.J. Eyolfson, L. Tan and P. Lam, ""Do time of day and developer experience affect commit bugginess?"", Proceedings of the 8th Working Conference on Mining Software Repositories, pp. 153-162, 2011. CrossRef  Google Scholar; 13.F. Rahman and P. Devanbu, ""Ownership experience and defects: a fine-grained study of authorship"", Proceedings of the 33rd International Conference on Software Engineering, pp. 491-500, 2011. CrossRef  Google Scholar; 14.W. Fong Boh, S. A. Slaughter and J. A. Espinosa, ""Learning from experience in software development: A multilevel analysis"", Management Science, vol. 53, no. 8, pp. 1315-1331, 2007. CrossRef  Google Scholar; 15.F. Fagerholm and J. Munch, ""Developer experience: Concept and definition"", Proceedings of the International Conference on Software and System Process, pp. 73-77, 2012. CrossRef  Google Scholar; 16.W. Zhang, S. Wang, Y. Yang and Q. Wang, ""Heterogeneous network analysis of developer contribution in bug repositories"", Cloud and Service Computing (CSC) 2013 International Conference on, pp. 98-105, 2013. CrossRef  Google Scholar; 17.F. Rahman and P. Devanbu, ""How and why process metrics are better"", Proceedings of the 2013 International Conference on Software Engineering, pp. 432-441, 2013. CrossRef  Google Scholar; 18.A. Mockus, ""Succession: Measuring transfer of code and developer productivity"", Proceedings of the 31st International Conference on Software Engineering, pp. 67-77, 2009. CrossRef  Google Scholar; 19.J. L. Krein, A. C. MacLean, C. D. Knutson, D. P. Delorey and D. L. Eggett, ""Impact of programming language fragmentation on developer productivity: a sourceforge empirical study"", International Journal of Open Source Software and Processes (IJOSSP), vol. 2, no. 2, pp. 41-61, 2010. CrossRef  Google Scholar; 20.D. Posnett, R. D'Souza, P. Devanbu and V. Filkov, ""Dual ecological measures of focus in software development"", Software Engineering (ICSE) 2013 35th International Conference on, pp. 452-461, 2013. View Article  Google Scholar; 21.M. Zhou and A. Mockus, ""Developer fluency: Achieving true mastery in software projects"", Proceedings of the eighteenth ACM SIGSOFT international symposium on Foundations of software engineering, pp. 137-146, 2010. CrossRef  Google Scholar; 22.M. Zhou and A. Mockus, ""Does the initial environment impact the future of developers?"", Proceedings of the 33rd International Conference on Software Engineering, pp. 271-280, 2011. CrossRef  Google Scholar; 23.W. Zhang, L. Nie, H. Jiang, Z. Chen and J. Liu, ""Developer social networks in software engineering: construction analysis and applications"", Science China Information Sciences, vol. 57, no. 12, pp. 1-23, 2014. CrossRef  Google Scholar; 24.A. Meneely, L. Williams, W. Snipes and J. Osborne, ""Predicting failures with developer networks and social network analysis"", Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of software engineering, pp. 13-23, 2008. CrossRef  Google Scholar; 25.M. Pinzger, N. Nagappan and B. Murphy, ""Can developer-module networks predict failures?"", Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of software engineering, pp. 2-12, 2008. CrossRef  Google Scholar; 26.C. Bird, N. Nagappan, H. Gall, B. Murphy and P. Devanbu, ""Putting it all together: Using socio-technical networks to predict failures"", Software Reliability Engineering 2009. ISSRE'09. 20th International Symposium on, pp. 109-119, 2009. CrossRef  Google Scholar; 27.N. Bettenburg and A. E. Hassan, ""Studying the impact of social structures on software quality"", Program Comprehension (ICPC) 2010 IEEE 18th International Conference on, pp. 124-133, 2010. CrossRef  Google Scholar; 28.M. S. Zanetti, I. Scholtes, C. J. Tessone and F. Schweitzer, ""Categorizing bugs with social networks: a case study on four open source software communities"", Proceedings of the 2013 International Conference on Software Engineering, pp. 1032-1041, 2013. CrossRef  Google Scholar; 29.Q. Hong, S. Kim, S. Cheung and C. Bird, ""Understanding a developer social network and its evolution"", Software Maintenance (ICSM) 2011 27th IEEE International Conference on, pp. 323-332, 2011. CrossRef  Google Scholar; 30.N. Nagappan, B. Murphy and V. Basili, ""The influence of organizational structure on software quality: an empirical case study"", Proceedings of the 30th international conference on Software engineering, pp. 521-530, 2008. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		An empirical study of developer quality	https://ieeexplore.ieee.org/document/7322148	IEEE	nan; Pages; Year; Bibtex
70	TrustSE	Sustainability of Open Source software communities beyond a fork: How and why has the LibreOffice project evolved?	Many organisations are dependent upon long-term sustainable software systems and associated communities. In this paper we consider long-term sustainability of Open Source software communities in Open Source software projects involving a fork. There is currently a lack of studies in the literature that address how specific Open Source software communities are affected by a fork. We report from a study aiming to investigate the developer community around the LibreOffice project, which is a fork from the OpenOffice.org project. In so doing, our analysis also covers the OpenOffice.org project and the related Apache OpenOffice project. The results strongly suggest a long-term sustainable LibreOffice community and that there are no signs of stagnation in the LibreOffice project 33 months after the fork. Our analysis provides details on developer communities for the LibreOffice and Apache OpenOffice projects and specifically concerning how they have evolved from the OpenOffice.org community with respect to project activity, developer commitment, and retention of committers over time. Further, we present results from an analysis of first hand experiences from contributors in the LibreOffice community. Findings from our analysis show that Open Source software communities can outlive Open Source software projects and that LibreOffice is perceived by its community as supportive, diversified, and independent. The study contributes new insights concerning challenges related to long-term sustainability of Open Source software communities.	Open Source software; Fork; Community evolution; Open Source software;  Fork;  Community evolution	Gamalielsson, Jonas; Lundell, Bjorn	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2013.11.1077		128-145	"""@article{WOS:000331432600011,
    Author = ""Gamalielsson, Jonas and Lundell, Bjorn"",
    Title = ""Sustainability of Open Source software communities beyond a fork: How and why has the LibreOffice project evolved?"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2014"",
    Volume = ""89"",
    Number = ""SI"",
    Pages = ""128-145"",
    Month = ""MAR"",
    Abstract = ""Many organisations are dependent upon long-term sustainable software systems and associated communities. In this paper we consider long-term sustainability of Open Source software communities in Open Source software projects involving a fork. There is currently a lack of studies in the literature that address how specific Open Source software communities are affected by a fork. We report from a study aiming to investigate the developer community around the LibreOffice project, which is a fork from the OpenOffice.org project. In so doing, our analysis also covers the OpenOffice.org project and the related Apache OpenOffice project. The results strongly suggest a long-term sustainable LibreOffice community and that there are no signs of stagnation in the LibreOffice project 33 months after the fork. Our analysis provides details on developer communities for the LibreOffice and Apache OpenOffice projects and specifically concerning how they have evolved from the OpenOffice.org community with respect to project activity, developer commitment, and retention of committers over time. Further, we present results from an analysis of first hand experiences from contributors in the LibreOffice community. Findings from our analysis show that Open Source software communities can outlive Open Source software projects and that LibreOffice is perceived by its community as supportive, diversified, and independent. The study contributes new insights concerning challenges related to long-term sustainability of Open Source software communities. (C) 2013 The Authors. Published by Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Gamalielsson, J (Corresponding Author), Univ Skovde, POB 408, SE-54128 Skovde, Sweden. Gamalielsson, Jonas; Lundell, Bjorn, Univ Skovde, SE-54128 Skovde, Sweden."",
    DOI = ""10.1016/j.jss.2013.11.1077"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Open Source software; Fork; Community evolution"",
    Keywords-Plus = ""NETWORK ANALYSIS TECHNIQUES; LINUX KERNEL; SUCCESS; MOTIVATIONS; MODEL"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""jonas.gamalielsson@his.se bjorn.lundell@his.se"",
    Affiliations = ""University of Skovde"",
    Number-of-Cited-References = ""82"",
    Times-Cited = ""76"",
    Usage-Count-Last-180-days = ""4"",
    Usage-Count-Since-2013 = ""28"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""AA9SG"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000331432600011"",
    OA = ""hybrid"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Sustainability of Open Source software communities beyond a fork: How and why has the LibreOffice project evolved?	https://www.webofscience.com/wos/woscc/full-record/WOS:000331432600011	ELSEVIER SCIENCE INC	nan; References
71	TrustSE	Understanding Sustained Participation in Open Source Software Projects	Prior research into open source software (OSS) developer participation has emphasized individuals' motivations for joining these volunteer communities, but it has failed to explain why people stay or leave in the long run. Building upon Lave and Wenger's theory of legitimate peripheral participation (LPP), this paper offers a longitudinal investigation of one OSS community in which sustained participation is hypothesized to be associated with the coevolution of two major elements of LPP theory: ``situated learning{''} (the process of acting knowledgeably and purposefully in the world) and ``identity construction{''} (the process of being identified within the community). To test this hypothesis, data were collected from multiple sources, including online public project documents, electronic mail messages, tracker messages, and log files. Results from qualitative analyses revealed that initial conditions to participate did not effectively predict long-term participation, but that situated learning and identity construction behaviors were positively linked to sustained participation. Furthermore, this study reveals that sustained participants distinguished themselves by consistently engaging in situated learning that both made conceptual (advising others) and practical contributions (improving the code). Implications and future research are discussed.	communities of practice; legitimate peripheral participation; open source projects; open source software community; qualitative study; communities of practice;  legitimate peripheral participation;  open source projects;  open source software community;  qualitative study	Fang, Yulin; Neufeld, Derrick	JOURNAL OF MANAGEMENT INFORMATION SYSTEMS	https://doi.org/10.2753/MIS0742-1222250401		9-50	"""@article{WOS:000266257100002,
    Author = ""Fang, Yulin and Neufeld, Derrick"",
    Title = ""Understanding Sustained Participation in Open Source Software Projects"",
    Journal = ""JOURNAL OF MANAGEMENT INFORMATION SYSTEMS"",
    Year = ""2009"",
    Volume = ""25"",
    Number = ""4"",
    Pages = ""9-50"",
    Month = ""SPR"",
    Note = ""39th Hawaii International Conference of System Sciences (HICSS-39), Kauai, HI, JAN 04-07, 2006"",
    Abstract = ""Prior research into open source software (OSS) developer participation has emphasized individuals' motivations for joining these volunteer communities, but it has failed to explain why people stay or leave in the long run. Building upon Lave and Wenger's theory of legitimate peripheral participation (LPP), this paper offers a longitudinal investigation of one OSS community in which sustained participation is hypothesized to be associated with the coevolution of two major elements of LPP theory: ``situated learning{''} (the process of acting knowledgeably and purposefully in the world) and ``identity construction{''} (the process of being identified within the community). To test this hypothesis, data were collected from multiple sources, including online public project documents, electronic mail messages, tracker messages, and log files. Results from qualitative analyses revealed that initial conditions to participate did not effectively predict long-term participation, but that situated learning and identity construction behaviors were positively linked to sustained participation. Furthermore, this study reveals that sustained participants distinguished themselves by consistently engaging in situated learning that both made conceptual (advising others) and practical contributions (improving the code). Implications and future research are discussed."",
    Publisher = ""ROUTLEDGE JOURNALS, TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OX14 4RN, OXON, ENGLAND"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Fang, YL (Corresponding Author), City Univ Hong Kong, Dept Informat Syst, Hong Kong, Hong Kong, Peoples R China. Fang, Yulin, City Univ Hong Kong, Dept Informat Syst, Hong Kong, Hong Kong, Peoples R China. Neufeld, Derrick, Univ Western Ontario, Richard Ivey Sch Business, London, ON, Canada."",
    DOI = ""10.2753/MIS0742-1222250401"",
    ISSN = ""0742-1222"",
    EISSN = ""1557-928X"",
    Keywords = ""communities of practice; legitimate peripheral participation; open source projects; open source software community; qualitative study"",
    Keywords-Plus = ""USER COMMUNITIES; INNOVATION; LINUX; ORGANIZATION; DEVELOPERS; KNOWLEDGE; MOTIVATIONS; STRATEGIES; GOVERNANCE; IDENTITY"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Affiliations = ""City University of Hong Kong; Western University (University of Western Ontario)"",
    ResearcherID-Numbers = ""Neufeld, Derrick/KHE-4815-2024"",
    ORCID-Numbers = ""Neufeld, Derrick/0000-0002-5455-0687 FANG, Yulin/0000-0002-7595-5261"",
    Number-of-Cited-References = ""66"",
    Times-Cited = ""236"",
    Usage-Count-Last-180-days = ""10"",
    Usage-Count-Since-2013 = ""139"",
    Journal-ISO = ""J. Manage. Inform. Syst."",
    Doc-Delivery-Number = ""448IU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Social Science \&amp; Humanities (CPCI-SSH); Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000266257100002"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Understanding sustained participation in open source software projects	https://www.webofscience.com/wos/woscc/full-record/WOS:000266257100002	ROUTLEDGE JOURNALS, TAYLOR \& FRANCIS LTD	nan; References
72	TrustSE	Mission-critical development with open source software: lessons learned	Using open source software components in a mission-critical project not only can keep the project within budget but can also result in a more robust and flexible tool. When considering an open source component, prospective users should evaluate the project for several characteristics: maturity, longevity, and flexibility. For greatest benefit, the users should also build and maintain a strong working relationship with the component's developers. We compiled our experiences developing SAP into a developer's guide for those considering using open source in their mission-critical application. In addition to discussing how to evaluate open source components suitability for inclusion in a mission-critical application, the guide suggests strategies for working with open source development teams.	Mission critical systems; Open source software; Instruments; Mars; Propulsion; Laboratories; Data analysis; Downlink; Data visualization; Planets; Open-source; Open-source Software; Development Team; Software Components; Jet Propulsion Laboratory; Suitability For Inclusion; Mission-critical Applications; Source Code; Mailing Lists; Interesting Way; Technology Program; Open-source Projects; Data Synchronization; Unit Tests; Piece Of Software; Test Plan; Open-source Community; Bug Reports; Commercial Components	J.S. Norris	IEEE Software	https://doi.org/10.1109/MS.2004.1259211	"1.P.G. Backes, ""The Science Activity Planner for the Mars Exploration Rover Mission: FIDO Field Test Results"", Proc. 2003 IEEE Aerospace Conf., vol. 8, pp. 3525-3540, 2003. View Article  Google Scholar; 2.M. Morisio, ""Investigating and Improving a COTS-Based Software Development Process"", Proc. 22nd Int'l Conf. Software Eng., 2000. View Article  Google Scholar; 3.P. Moran, Developing an Open Source Option for Nasa Software, Apr. 2003. Google Scholar; 4.""Nearly Two Million Active Sites Running FreeBSD"", Netcraft ews, July 2003. Google Scholar; 5.S. Reier, ""Five Years Later Greenspan's 'Irrational Exuberance' Alert Rings True"", Int'l Herald Tribune, Dec. 2001. Google Scholar"	42- 49		Included	Included				2	IEEE		Mission-critical development with open source software: Lessons learned	https://ieeexplore.ieee.org/document/1259211	IEEE	nan; Year; Bibtex
73	TrustSE	Developer Motivations, Social Aspects and Challenges of Open Source Software	The software industry has long used a proprietary approach (i.e. where a firm keeps its software source code protected from public). Open Source Software (OSS), which emerged as an alternative to the proprietary software, has seen a steady growth in the last decade. OSS is developed predominantly by volunteer developers participating in collaborative projects. The developers are the driving force behind OSS. It is therefore important for any firm engaged in OSS, to find out what motivates the developers to participate in OSS projects. Some pervious literature refers to the OSS community as a social movement. If so, this poses a challenge to firms, as a social movement consists of collective actions by its members, i.e. developers of OSS. The purpose of this study was to identify the motivations of OSS developers using a qualitative interview approach. The results were further analysed using existing social science theories, to determine whether the contribution of developers display aspects of volunteer participation in a social movement. Purposeful selection method was used to define the sample for the study, from an OSS development project from called Axis C++. The developers displayed a wide range of extrinsic motivations; however the intrinsic motivations seemed to be stronger as they were shared by many developers. Developers were committed to develop better software and maintain its quality and enjoyed writing software programs. A few developers seemed to be motivated by the opportunity to develop their reputation by participating in OSS projects. Some developers were motivated by the ability to develop their technical and personal skills by participating in an OSS project. This behaviour was associated with the belief that it would bring future career benefits. A significant finding is that the developers were motivated to protect software freedom (i.e. preserve the idea of open source), and to that end take action against proprietary software monopolies. The analysis revealed that the OSS community as displaying aspects of social movement participation. Overall the study highlighted a number of opportunities and threats to firms arising from the motivations of OSS developers.		Athukorale, Iranga Supun	ProQuest Dissertations & Theses	https://www.proquest.com/docview/2281200032?pq-origsite=gscholar&fromopenview=true&sourcetype=Dissertations%20&%20Theses		108	"""nan"""	Excluded	Excluded				2	Google Scholar		Developer Motivations, Social Aspects and Challenges of Open Source Software.	https://www.proquest.com/docview/2281200032?pq-origsite=gscholar&fromopenview=true&sourcetype=Dissertations%20&%20Theses	University of Surrey	
74	TrustSE	Social coding in GitHub: transparency and collaboration in an open software repository	Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral GitHub users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in GitHub, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation.	awareness;  collaboration;  coordination;  open source software development;  social computing;  transparency; awareness, collaboration, coordination, open source software development, social computing, transparency	Dabbish, Laura; Stuart, Colleen; Tsay, Jason; Herbsleb, Jim	CSCW '12: Proceedings of the ACM 2012 conference on Computer Supported Cooperative Work	https://doi.org/10.1145/2145204.2145396		1277-1286	"""@inproceedings{10.1145/2145204.2145396,
    author = ""Dabbish, Laura and Stuart, Colleen and Tsay, Jason and Herbsleb, Jim"",
    title = ""Social coding in GitHub: transparency and collaboration in an open software repository"",
    year = ""2012"",
    isbn = ""9781450310864"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2145204.2145396"",
    doi = ""10.1145/2145204.2145396"",
    abstract = ""Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral GitHub users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in GitHub, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation."",
    booktitle = ""Proceedings of the ACM 2012 Conference on Computer Supported Cooperative Work"",
    pages = ""1277-1286"",
    numpages = ""10"",
    keywords = ""awareness, collaboration, coordination, open source software development, social computing, transparency"",
    location = ""Seattle, Washington, USA"",
    series = ""CSCW '12""
}
"""	Excluded	Excluded				2	ACM		Social coding in GitHub: transparency and collaboration in an open software repository	https://doi.org/10.1145/2145204.2145396	Association for Computing Machinery	nan; References; Link
75	TrustSE	Techniques for trusted software engineering			Devanbu, Premkumar T.; Fong, Philip W-L; Stubblebine, Stuart G.	ICSE '98: Proceedings of the 20th international conference on Software engineering	https://doi.org/10.5555/302163.302176		126-135	"""@inproceedings{10.5555/302163.302176,
    author = ""Devanbu, Premkumar T. and Fong, Philip W-L and Stubblebine, Stuart G."",
    title = ""Techniques for trusted software engineering"",
    year = ""1998"",
    isbn = ""0818683686"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    booktitle = ""Proceedings of the 20th International Conference on Software Engineering"",
    pages = ""126-135"",
    numpages = ""10"",
    location = ""Kyoto, Japan"",
    series = ""ICSE '98""
}
"""	Excluded	Excluded				2	ACM		Techniques for trusted software engineering	https://doi.org/10.5555/302163.302176	IEEE Computer Society	nan; Abstract; Keywords; References; Link
76	TrustSE	Understanding the requirements for developing open source software systems	This study presents an initial set of findings from an empirical study of social processes, technical system configurations, organisational contexts and interrelationships that give rise to open software. The focus is directed at understanding the requirements for open software development efforts, and how the development of these requirements differs from those traditional to software engineering and requirements engineering. Four open software development communities are described, examined and compared to help discover what these differences may be. Eight kinds of software informalisms are found to play a critical role in the elicitation, analysis, specification, validation and management of requirements for developing open software systems. Subsequently, understanding the roles these software informalisms take in a new formulation of the requirements development process for open source software is the focus of this study. This focus enables the consideration of a reformulation of the requirements engineering process and its associated artefacts, or (in)formalisms, to better account for the requirements for developing open source software systems.	Computer software; Open systems; Requirements engineering; Research and development management; Systems analysis; Systems engineering; Open source software systems; Software engineering; Computer software;  Open systems;  Requirements engineering;  Research and development management;  Systems analysis;  Systems engineering;  Open source software systems;  Software engineering	Scacchi, W.	IEE Proceedings: Software	https://doi.org/10.1049/ip-sen:20020202		24 - 39	"""@ARTICLE{Scacchi200224,
    author = ""Scacchi, W."",
    title = ""Understanding the requirements for developing open source software systems"",
    year = ""2002"",
    journal = ""IEE Proceedings: Software"",
    volume = ""149"",
    number = ""1"",
    pages = ""24 - 39"",
    doi = ""10.1049/ip-sen:20020202"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036477216\&doi=10.1049\%2fip-sen\%3a20020202\&partnerID=40\&md5=d4b80d8f029c27b7f1798f97a3cf3f2b"",
    affiliations = ""Institute for Software Research, University of California, Irvine, CA 92697-3425, United States"",
    abstract = ""This study presents an initial set of findings from an empirical study of social processes, technical system configurations, organisational contexts and interrelationships that give rise to open software. The focus is directed at understanding the requirements for open software development efforts, and how the development of these requirements differs from those traditional to software engineering and requirements engineering. Four open software development communities are described, examined and compared to help discover what these differences may be. Eight kinds of software informalisms are found to play a critical role in the elicitation, analysis, specification, validation and management of requirements for developing open software systems. Subsequently, understanding the roles these software informalisms take in a new formulation of the requirements development process for open source software is the focus of this study. This focus enables the consideration of a reformulation of the requirements engineering process and its associated artefacts, or (in)formalisms, to better account for the requirements for developing open source software systems."",
    keywords = ""Computer software; Open systems; Requirements engineering; Research and development management; Systems analysis; Systems engineering; Open source software systems; Software engineering"",
    issn = ""14625970"",
    coden = ""IPSEF"",
    language = ""English"",
    abbrev_source_title = ""IEE Proc Software"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 287; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Understanding the requirements for developing open source software systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-0036477216&origin=resultslist&sort=r-f&src=s&sid=8006034e2de4e1db75c3d886d01fb923&sot=b&sdt=b&s=TITLE%28understanding+the+requirements+for+developing+open+source+software+systems%29&sl=81&sessionSearchId=8006034e2de4e1db75c3d886d01fb923&relpos=0		nan; References; Publisher
77	TrustSE	Trust case: Justifying trust in an IT solution	In the paper we present an approach to the trust case development for DRIVE, the IT infrastructure supporting the processes of drugs distribution and application. The objectives of DRIVE included safer and cheaper drugs distribution and application. The trust case represents an argument supporting the trustworthiness of the DRIVE solution. It is decomposed into claims that postulate some trust related properties. Claims differ concerning their abstraction level and scope. To express a claim we need a language and a conceptual model. We used the Unified Modeling Language (UML) to represent claim models and the related context models of the trust case. To specify claims we introduced Claim Definition Language - CDL. The paper gives a detailed description of the above concepts and illustrates how they were applied in practice.	Computer software; Information management; Information theory; Optimization; Research and development management; Security systems; E-health; IT infrastructure; Security management; Trust case; Information technology; Computer software;  Information management;  Information theory;  Optimization;  Research and development management;  Security systems;  E-health;  IT infrastructure;  Security management;  Trust case;  Information technology	Gorski, J.; Jarzbowicz, A.; Leszczyna, R.; Miler, J.; Olszewski, M.	Reliability Engineering and System Safety	https://doi.org/10.1016/j.ress.2004.08.005	Defence Standard 00-56.Cited 2 times.http://wheelie.tees.ac.uk/hazop/html/56.htm; SHIP - Assessment of the Safety of Hazardous Industrial Processes in the Presence of Design Faultshttp://www.adelard.co.uk/research/ship.htm; 2000 Information Technology - Code of Practice for Information Security Management.Cited 223 times.ISO/IEC 17799; (1999)Common Criteria for Information Technology Security Evaluation Version 2.1, (PARTS 1 AND 2 AND 3).; (1999)Common Methodology for Information Technology Security Evaluation, Version 1.0.Cited 4 times.; Gorski, J., Jarzebowicz, A., Leszczyna, R., Miler, J., Olszewski, M.; (1998)Adelard Safety Case Development Manual.Cited 91 times.Adelard, Adelard, London; Bishop, P.G., Bloomfield, R.E.A methodology for safety case development(1998)Proceedings of Safety-Critical Systems Symposium, Birmingham, UK, 1998.Cited 34 times.; Kelly, T.(1998)Arguing Safety - A Systematic Approach to Managing Safety Cases.Cited 449 times.PhD thesis, University of York, UK, YCST 99/05http://www.cs.york.ac.uk/ftpdir/reports/YCST-99-05.ps.gz; ASCE (Adelard Safety Case Editor) Homepagehttp://www.adelard.com/software/asce; Unified Modeling Language (UML), Version 1.5.Cited 39 times.http://www.omg.org/technology/; IST-DRIVE Sitehttp://www.sanraffaele.org/Drive/; Wilikens, M., Feriti, S., Sanna, A., Masera, M.; Gorski, J.A Framework for Analyzing Trust in IT Systems(2004)Probabilistic Safety Assessment and Management, 3, pp. 1609-1614.C. Spitzer, U. Schmocker and V.N. Dang (Eds.) Springer; (2002)Microsoft Visio 2002 Professional.Cited 2 times.http://www.microsoft.com/office/visio/; Eriksson, H.-E., Penker, M.(2000)Business Modeling with UML.Cited 835 times.Wiley London; (2003)DRIVE D11.1-3 - Trust Case for DRIVE, D11.1-3, Version 1.1.Cited 2 times.January; Gorski, J., Jarzbowicz, A.Detecting defects in object-oriented diagrams using UML-HAZOP(2002)Found Comp Decis Sci, 27 (4).Cited 3 times.; Gorski, J.How can we justify trust in software basded systems?(2003)Proceedings of the International Conference on Advanced Computer Systems (ACS' 2003)20-22 October Miedzyzdroje, Poland; Wilson, S.P., Kelly, T.P., McDermid, J.A.Safety case development: Current practice, future prospects(1995)Proceedings of First ENCRESS/12th CSR Workshop.Cited 6 times.Springer Berlin; (2003)DRIVE D11.4 - UML-HAZOP, D11.4, Version 1.1.Cited 2 times.January	33 - 47	"""@ARTICLE{Gorski200533,
    author = ""Gorski, J. and Jarzbowicz, A. and Leszczyna, R. and Miler, J. and Olszewski, M."",
    title = ""Trust case: Justifying trust in an IT solution"",
    year = ""2005"",
    journal = ""Reliability Engineering and System Safety"",
    volume = ""89"",
    number = ""1"",
    pages = ""33 - 47"",
    doi = ""10.1016/j.ress.2004.08.005"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-17844375958\&doi=10.1016\%2fj.ress.2004.08.005\&partnerID=40\&md5=85d34bc64f6d9e4c2d89e6c89ef8dd22"",
    affiliations = ""Department of Software Engineering, Gdansk Univ. of Technology, 80-952 Gdansk, G. Narutowicza 11/12, Poland; EC Joint Research Centre, IPSC, I-21020 Ispra (VA), Italy"",
    abstract = ""In the paper we present an approach to the trust case development for DRIVE, the IT infrastructure supporting the processes of drugs distribution and application. The objectives of DRIVE included safer and cheaper drugs distribution and application. The trust case represents an argument supporting the trustworthiness of the DRIVE solution. It is decomposed into claims that postulate some trust related properties. Claims differ concerning their abstraction level and scope. To express a claim we need a language and a conceptual model. We used the Unified Modeling Language (UML) to represent claim models and the related context models of the trust case. To specify claims we introduced Claim Definition Language - CDL. The paper gives a detailed description of the above concepts and illustrates how they were applied in practice. (c) 2004 Elsevier Ltd. All rights reserved."",
    author_keywords = ""E-health; IT infrastructure; Safety; Security; Trust case"",
    keywords = ""Computer software; Information management; Information theory; Optimization; Research and development management; Security systems; E-health; IT infrastructure; Security management; Trust case; Information technology"",
    correspondence_address = ""J. Gorski; Department of Software Engineering, Gdansk Univ. of Technology, 80-952 Gdansk, G. Narutowicza 11/12, Poland; email: jango@pg.gda.pl"",
    issn = ""09518320"",
    coden = ""RESSE"",
    language = ""English"",
    abbrev_source_title = ""Reliab Eng Syst Saf"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 34""
}
"""	Excluded	Excluded				2	Scopus Signed In		Trust case: Justifying trust in an IT solution	https://www.scopus.com/record/display.uri?eid=2-s2.0-17844375958&origin=resultslist&sort=r-f&src=s&sid=687e9044e9dc89b7c7b4993708489436&sot=b&sdt=b&s=TITLE%28trust+case+justifying+trust+in+an+it+solution%29&sl=52&sessionSearchId=687e9044e9dc89b7c7b4993708489436&relpos=0		nan; Publisher
78	TrustSE	Factors affecting the success of Open Source Software	With the rapid rise in the use of Open Source Software (OSS) in all types of applications, it is important to know which factors can lead to OSS success. OSS projects evolve and transform over time; therefore success must be examined longitudinally over a period of time. In this research, we examine two measures of project success: project popularity and developer activity, of 283 OSS projects over a span of 3 years, in order to observe changes over time. A comprehensive research model of OSS success is developed which includes both extrinsic and intrinsic attributes. Results show that while many of the hypothesized relationships are supported, there were marked differences in some of the relationships at different points in time lending support to the notion that different factors need to be emphasized as the OSS project unfolds over time.	Hardware; Software engineering; Extrinsic cues; Intrinsic cues; Longitudinal effect; Open Source Software; System success; Computer software; Hardware;  Software engineering;  Extrinsic cues;  Intrinsic cues;  Longitudinal effect;  Open Source Software;  System success;  Computer software	Midha, Vishal; Palvia, Prashant	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2011.11.010		895 - 905	"""@ARTICLE{Midha2012895,
    author = ""Midha, Vishal and Palvia, Prashant"",
    title = ""Factors affecting the success of Open Source Software"",
    year = ""2012"",
    journal = ""Journal of Systems and Software"",
    volume = ""85"",
    number = ""4"",
    pages = ""895 - 905"",
    doi = ""10.1016/j.jss.2011.11.010"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84857365211\&doi=10.1016\%2fj.jss.2011.11.010\&partnerID=40\&md5=ef2152279f14c5db384892fe9cc048e1"",
    affiliations = ""University of Texas - Pan American, Edinburg, TX 78539, 1201 W. University Drive, United States; University of North Carolina at Greensboro, Greensboro, NC 27402, 1000 Spring Garden St., United States"",
    abstract = ""With the rapid rise in the use of Open Source Software (OSS) in all types of applications, it is important to know which factors can lead to OSS success. OSS projects evolve and transform over time; therefore success must be examined longitudinally over a period of time. In this research, we examine two measures of project success: project popularity and developer activity, of 283 OSS projects over a span of 3 years, in order to observe changes over time. A comprehensive research model of OSS success is developed which includes both extrinsic and intrinsic attributes. Results show that while many of the hypothesized relationships are supported, there were marked differences in some of the relationships at different points in time lending support to the notion that different factors need to be emphasized as the OSS project unfolds over time. (c) 2011 Elsevier Inc. All rights reserved."",
    author_keywords = ""Extrinsic cues; Intrinsic cues; Longitudinal effects; Open Source Software; System success"",
    keywords = ""Hardware; Software engineering; Extrinsic cues; Intrinsic cues; Longitudinal effect; Open Source Software; System success; Computer software"",
    correspondence_address = ""V. Midha; University of Texas - Pan American, Edinburg, TX 78539, 1201 W. University Drive, United States; email: vmidha@utpa.edu"",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 93; All Open Access, Green Open Access""
}
"""	Included	Included				2	Scopus Signed In		Factors affecting the success of Open Source Software	https://www.scopus.com/record/display.uri?eid=2-s2.0-84857365211&origin=resultslist&sort=r-f&src=s&sid=30043185f9894f3c2027dd12409e9566&sot=b&sdt=b&s=TITLE%28factors+affecting+the+success+of+open+source+software%29&sl=60&sessionSearchId=30043185f9894f3c2027dd12409e9566&relpos=0		nan; References; Publisher
79	TrustSE	The promise of research on open source software	Breaking with many established assumptions about how innovation ought to work, open source software projects offer eye-opening examples of novel innovation practices for students and practitioners in many fields. In this article we briefly review existing research on the open source phenomenon and discuss the utility of open source software research findings for many other fields. We categorize the research into three areas: motivations of open source software contributors; governance, organization, and the process of innovation in open source software projects; and competitive dynamics enforced by open source software. We introduce the articles in this special issue of Management Science on open source software, and show how each contributes insights to one or more of these areas.	Computer software; Motivation; Project management; Societies and institutions; Students; Competition; Innovation; Open source software; User-innovation; Management science; Computer software;  Motivation;  Project management;  Societies and institutions;  Students;  Competition;  Innovation;  Open source software;  User-innovation;  Management science	Von Krogh, Georg; Von Hippel, Eric	Management Science	https://doi.org/10.1287/mnsc.1060.0560		975 - 983	"""@ARTICLE{VonKrogh2006975,
    author = ""Von Krogh, Georg and Von Hippel, Eric"",
    title = ""The promise of research on open source software"",
    year = ""2006"",
    journal = ""Management Science"",
    volume = ""52"",
    number = ""7"",
    pages = ""975 - 983"",
    doi = ""10.1287/mnsc.1060.0560"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745600580\&doi=10.1287\%2fmnsc.1060.0560\&partnerID=40\&md5=f6a8bad88f32f79e3e3476d1483ae916"",
    affiliations = ""Department of Management, Technology, and Economics, ETH Zurich, 8000 Zurich, Kreuzplatz 5, Switzerland; Sloan School of Management, Massachusetts Institute of Technology, Cambridge, MA 02139, 50 Memorial Drive, United States"",
    abstract = ""Breaking with many established assumptions about how innovation ought to work, open source software projects offer eye-opening examples of novel innovation practices for students and practitioners in many fields. In this article we briefly review existing research on the open source phenomenon and discuss the utility of open source software research findings for many other fields. We categorize the research into three areas: motivations of open source software contributors; governance, organization, and the process of innovation in open source software projects; and competitive dynamics enforced by open source software. We introduce the articles in this special issue of Management Science on open source software, and show how each contributes insights to one or more of these areas. (c) 2006 INFORMS."",
    author_keywords = ""Competition; Innovation; Motivation; Open source software; Organization; User-innovation"",
    keywords = ""Computer software; Motivation; Project management; Societies and institutions; Students; Competition; Innovation; Open source software; User-innovation; Management science"",
    correspondence_address = ""G. Von Krogh; Department of Management, Technology, and Economics, ETH Zurich, 8000 Zurich, Kreuzplatz 5, Switzerland; email: gvkrogh@ethz.ch"",
    issn = ""15265501"",
    coden = ""MSCIA"",
    language = ""English"",
    abbrev_source_title = ""Manage Sci"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 445""
}
"""	Excluded	Excluded				2	Scopus Signed In		The promise of research on open source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-33745600580&origin=resultslist&sort=r-f&src=s&sid=5198b61d664f43a79717163b75985ad7&sot=b&sdt=b&s=TITLE%28the+promise+of+research+on+open+source+software%29&sl=54&sessionSearchId=5198b61d664f43a79717163b75985ad7&relpos=0		nan; References; Publisher
80	TrustSE	Information Needs in Collocated Software Development Teams	Previous research has documented the fragmented nature of software development work. To explain this in more detail, we analyzed software developers' day-to-day information needs. We observed seventeen developers at a large software company and transcribed their activities in 90-minute sessions. We analyzed these logs for the information that developers sought, the sources that they used, and the situations that prevented information from being acquired. We identified twenty-one information types and cataloged the outcome and source when each type of information was sought. The most frequently sought information included awareness about artifacts and coworkers. The most often deferred searches included knowledge about design and program behavior, such as why code was written a particular way, what a program was supposed to do, and the cause of a program state. Developers often had to defer tasks because the only source of knowledge was unavailable coworkers.		Ko, Andrew J.; DeLine, Robert; Venolia, Gina	ICSE '07: Proceedings of the 29th international conference on Software Engineering	https://doi.org/10.1109/ICSE.2007.45		344-353	"""@inproceedings{10.1109/ICSE.2007.45,
    author = ""Ko, Andrew J. and DeLine, Robert and Venolia, Gina"",
    title = ""Information Needs in Collocated Software Development Teams"",
    year = ""2007"",
    isbn = ""0769528287"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    url = ""https://doi.org/10.1109/ICSE.2007.45"",
    doi = ""10.1109/ICSE.2007.45"",
    abstract = ""Previous research has documented the fragmented nature of software development work. To explain this in more detail, we analyzed software developers' day-to-day information needs. We observed seventeen developers at a large software company and transcribed their activities in 90-minute sessions. We analyzed these logs for the information that developers sought, the sources that they used, and the situations that prevented information from being acquired. We identified twenty-one information types and cataloged the outcome and source when each type of information was sought. The most frequently sought information included awareness about artifacts and coworkers. The most often deferred searches included knowledge about design and program behavior, such as why code was written a particular way, what a program was supposed to do, and the cause of a program state. Developers often had to defer tasks because the only source of knowledge was unavailable coworkers."",
    booktitle = ""Proceedings of the 29th International Conference on Software Engineering"",
    pages = ""344-353"",
    numpages = ""10"",
    series = ""ICSE '07""
}
"""	Excluded	Excluded				2	ACM		Information needs in collocated software development teams	https://doi.org/10.1109/ICSE.2007.45	IEEE Computer Society	nan; Keywords; References; Link
81	TrustSE	Governance of open source software: State of the art	In this overview of governance mechanisms developed within open source software (OSS) circles, three types of governance are studied: 'spontaneous' governance, internal governance, and governance towards outside parties. Moreover, two main ways in which lessons from OSS can be applied elsewhere are explored: peer production of products other than software, and embedding 'peer-produced' products and peer processes into existing institutions ('coupling').	Commons;; Configurations;; Governance;; Institutionalization;; Open source software;; Peer production	De Laat, Paul B.	Journal of Management and Governance	https://doi.org/10.1007/s10997-007-9022-9		165 - 177	"""@ARTICLE{DeLaat2007165,
    author = ""De Laat, Paul B."",
    title = ""Governance of open source software: State of the art"",
    year = ""2007"",
    journal = ""Journal of Management and Governance"",
    volume = ""11"",
    number = ""2"",
    pages = ""165 - 177"",
    doi = ""10.1007/s10997-007-9022-9"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547375892\&doi=10.1007\%2fs10997-007-9022-9\&partnerID=40\&md5=43ab14825aebb057ac7cc68ae1cdc754"",
    affiliations = ""Faculty of Philosophy, University of Groningen, 9712 GL Groningen, Oude Boteringestraat 52, Netherlands"",
    abstract = ""In this overview of governance mechanisms developed within open source software (OSS) circles, three types of governance are studied: 'spontaneous' governance, internal governance, and governance towards outside parties. Moreover, two main ways in which lessons from OSS can be applied elsewhere are explored: peer production of products other than software, and embedding 'peer-produced' products and peer processes into existing institutions ('coupling'). (c) Springer Science+Business Media, LLC 2007."",
    author_keywords = ""Commons; Configurations; Governance; Institutionalization; Open source software; Peer production"",
    correspondence_address = ""P.B. De Laat; Faculty of Philosophy, University of Groningen, 9712 GL Groningen, Oude Boteringestraat 52, Netherlands; email: P.B.de.Laat@rug.nl"",
    issn = ""13853457"",
    language = ""English"",
    abbrev_source_title = ""J. Manage. Gov."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 110; All Open Access, Hybrid Gold Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Governance of open source software: state of the art	https://www.scopus.com/record/display.uri?eid=2-s2.0-34547375892&origin=resultslist&sort=r-f&src=s&sid=d3e7c42ee33ce641c76413f5abbfa09d&sot=b&sdt=b&s=TITLE%28governance+of+open+source+software+state+of+the+art%29&sl=58&sessionSearchId=d3e7c42ee33ce641c76413f5abbfa09d&relpos=0		nan; References; Publisher
82	TrustSE	The Effect of License Type and Status Hierarchy on Developer Motivation in Open Source Communities.	The motivational drivers of open source software developers have been identified and catalogued by various investigators since about 2000. Open source licenses range in restrictiveness between those that allow developers to mingle their code freely with proprietary code to those which prohibit such commingling In addition to formal rules, meritocracies emerge to reward effort and performance, and also to direct, coordinate, and punish other participants. We show how these variables are related to motivations.		Allyn, Mark; Misra, Ram; Kozyreva, Ana	Proceedings of the Northeast Business & Economics Association	https://openurl.ebsco.com/EPDB%3Agcd%3A8%3A28859848/detailv2?sid=ebsco%3Aplink%3Ascholar&id=ebsco%3Agcd%3A48108443&crl=c&link_origin=scholar.google.com		p76	"""nan"""	Excluded	Excluded			Studies that were books or gray literature	2	Google Scholar		The Effect of License Type and Status Hierarchy on Developer Motivation in Open Source Communities.	https://openurl.ebsco.com/EPDB%3Agcd%3A8%3A28859848/detailv2?sid=ebsco%3Aplink%3Ascholar&id=ebsco%3Agcd%3A48108443&crl=c&link_origin=scholar.google.com	EBSCO	
83	TrustSE	Open-source versus proprietary software: Is one more reliable and secure than the other?	One of the most powerful movements in the information technology community today is the widespread adoption of free and open-source software (FOSS). What was once an idealistic fringe movement conceived and formalized by MacArthur award laureate Richard Stallman has now become one of the most powerful influences in the world of information technology. As FOSS systems grow in popularity, questions of the reliability and security of these systems emerge, especially in comparison with proprietary systems. This paper surveys the arguments presented by proponents of each type of software in published reports and discusses the deployment and reliability figures for both FOSS and proprietary systems as well.	Computer software selection and evaluation; Information technology; Internet; Open systems; Reliability; Security of data; Systems analysis; Systems engineering; UNIX; Free and open source software (FOSS); Open source software; Proprietary software; Software defect levels; Source code; Software engineering; Computer software selection and evaluation;  Information technology;  Internet;  Open systems;  Reliability;  Security of data;  Systems analysis;  Systems engineering;  UNIX;  Free and open source software (FOSS);  Open source software;  Proprietary software;  Software defect levels;  Source code;  Software engineering	Boulanger, Alan	IBM Systems Journal	https://doi.org/10.1147/sj.442.0239		239 - 248	"""@ARTICLE{Boulanger2005239,
    author = ""Boulanger, Alan"",
    title = ""Open-source versus proprietary software: Is one more reliable and secure than the other?"",
    year = ""2005"",
    journal = ""IBM Systems Journal"",
    volume = ""44"",
    number = ""2"",
    pages = ""239 - 248"",
    doi = ""10.1147/sj.442.0239"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-20444381993\&doi=10.1147\%2fsj.442.0239\&partnerID=40\&md5=fbf2a314abbdfa33ed624b0e726d565e"",
    affiliations = ""IBM Research Division, Thomas J. Watson Research Center, Hawthorne, NY 10532, 19 Skyline Drive, United States"",
    abstract = ""One of the most powerful movements in the information technology community today is the widespread adoption of free and open-source software (FOSS). What was once an idealistic fringe movement conceived and formalized by MacArthur award laureate Richard Stallman has now become one of the most powerful influences in the world of information technology. As FOSS systems grow in popularity, questions of the reliability and security of these systems emerge, especially in comparison with proprietary systems. This paper surveys the arguments presented by proponents of each type of software in published reports and discusses the deployment and reliability figures for both FOSS and proprietary systems as well. (c) Copyright 2005 by International Business Machines Corporation."",
    keywords = ""Computer software selection and evaluation; Information technology; Internet; Open systems; Reliability; Security of data; Systems analysis; Systems engineering; UNIX; Free and open source software (FOSS); Open source software; Proprietary software; Software defect levels; Source code; Software engineering"",
    correspondence_address = ""A. Boulanger; IBM Research Division, Thomas J. Watson Research Center, Hawthorne, NY 10532, 19 Skyline Drive, United States; email: boulange@us.ibm.com"",
    publisher = ""IBM Corporation"",
    issn = ""00188670"",
    coden = ""IBMSA"",
    language = ""English"",
    abbrev_source_title = ""IBM Syst J"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 70""
}
"""	Included	Included				2	Scopus Signed In		Open-source versus proprietary software: Is one more reliable and secure than the other?	https://ieeexplore.ieee.org/document/5386727	IBM Corporation	nan; References
84	TrustSE	The secret life of bugs: Going past the errors and omissions in software repositories	Every bug has a story behind it. The people that discover and resolve it need to coordinate, to get information from documents, tools, or other people, and to navigate through issues of accountability, ownership, and organizational structure. This paper reports on a field study of coordination activities around bug fixing that used a combination of case study research and a survey of software professionals. Results show that the histories of even simple bugs are strongly dependent on social, organizational, and technical knowledge that cannot be solely extracted through automation of electronic repositories, and that such automation provides incomplete and often erroneous accounts of coordination. The paper uses rich bug histories and survey results to identify common bug fixing coordination patterns and to provide implications for tool designers and researchers of coordination in software development.		Aranda, Jorge; Venolia, Gina	ICSE '09: Proceedings of the 31st International Conference on Software Engineering	https://doi.org/10.1109/ICSE.2009.5070530		298-308	"""@inproceedings{10.1109/ICSE.2009.5070530,
    author = ""Aranda, Jorge and Venolia, Gina"",
    title = ""The secret life of bugs: Going past the errors and omissions in software repositories"",
    year = ""2009"",
    isbn = ""9781424434534"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    url = ""https://doi.org/10.1109/ICSE.2009.5070530"",
    doi = ""10.1109/ICSE.2009.5070530"",
    abstract = ""Every bug has a story behind it. The people that discover and resolve it need to coordinate, to get information from documents, tools, or other people, and to navigate through issues of accountability, ownership, and organizational structure. This paper reports on a field study of coordination activities around bug fixing that used a combination of case study research and a survey of software professionals. Results show that the histories of even simple bugs are strongly dependent on social, organizational, and technical knowledge that cannot be solely extracted through automation of electronic repositories, and that such automation provides incomplete and often erroneous accounts of coordination. The paper uses rich bug histories and survey results to identify common bug fixing coordination patterns and to provide implications for tool designers and researchers of coordination in software development."",
    booktitle = ""Proceedings of the 31st International Conference on Software Engineering"",
    pages = ""298-308"",
    numpages = ""11"",
    series = ""ICSE '09""
}
"""	Excluded	Excluded				2	ACM		The secret life of bugs: Going past the errors and omissions in software repositories	https://doi.org/10.1109/ICSE.2009.5070530	IEEE Computer Society	nan; Keywords; References; Link
85	TrustSE	Scalable architectural support for trusted software	We present Bastion, a new hardware-software architecture for protecting security-critical software modules in an untrusted software stack. Our architecture is composed of enhanced microprocessor hardware and enhanced hypervisor software. Each trusted software module is provided with a secure, fine-grained memory compartment and its own secure persistent storage area. Bastion is the first architecture to provide direct hardware protection of the hypervisor from both software and physical attacks, before employing the hypervisor to provide the same protection to security-critical OS and application modules. Our implementation demonstrates the feasibility of bypassing an untrusted commodity OS to provide application security and shows better security with higher performance when compared to the Trusted Platform Module (TPM), the current industry state-of-the-art security chip. We provide a proof-of-concept implementation on the OpenSPARC platform.	Hardware; Protection; Application software; Virtual machine monitors; Computer architecture; Virtual machining; Information security; Operating systems; Scalability; Microprocessors; Scalable; Storage Area; Software Module; Physical Attacks; Memory Compartment; Software Stack; Operating System; Data Privacy; Virtual Machines; Denial Of Service; Memory Space; Threat Model; Critical Modulator; Replay Attacks; Flash Memory; Secure Storage; Physical Memory; Execution Environment; Cryptographic Hash; L2 Cache; Passive Attacks; Merkle Tree; On-chip Memory; Code Space; Processing Hardware; Storage Capability; Side-channel; Root Of The Tree; Encryption Key	David Champagne; Ruby B. Lee	HPCA - 16 2010 The Sixteenth International Symposium on High-Performance Computer Architecture	https://doi.org/10.1109/HPCA.2010.5416657	"1.K. Adams et al., ""A comparison of software and hardware techniques for x 86 virtualization"", Proc. of ASPLOS06, Oct. 2006. Google Scholar; 2.""Industry Leading Virtualization Platform Efficiency"", 2008. Google Scholar; 3.""AMD-V Nested Paging"", AMD Whitepaper Revision 1.0, July 2008. Google Scholar; 4.M.J. Anderson et al., ""Towards Trustworthy Virtualisation Environments"", Technical Report HPL-2007-69 Hewlett Packard Development Company L.P., April 2007. Google Scholar; 5.T. Alves et al., ""Trustzone: Integrated hardware and software security"", ARM white paper, July 2004. Google Scholar; 6.P. Barham et al., ""Xen and the Art of Virtualization"", Proc. of Symposium on OS Principles (SOSP), Oct 2003. CrossRef  Google Scholar; 7.S. Bratus et al., ""TOCTOU Traps and Trusted Computing"", Proc. of the TRUST 2008 Conference, March 2008. CrossRef  Google Scholar; 8.D. Champagne et al., ""The Reduced Address Space (RAS) for Application Memory Authentication"", Proc. of the 11th ISC08, Sept. 2008. CrossRef  Google Scholar; 9.X. Chen et al., ""Overshadow: A Virtualization-Based Approach to Retrofitting Protection in Commodity Operating Systems"", Proc. of ASPLOS08, March 2008. CrossRef  Google Scholar; 10.Y. Chen and R.B. Lee, ""Hardware-Assisted Application Level Access Control"", Proc. of Information Security Conference, Sep. 2009. CrossRef  Google Scholar; 11.P. Dewan et al., ""A Hypervisor-Based System for Protecting Software Runtime Memory and Persistent Storage"", SSSS08, April 2008. Google Scholar; 12.J. Dwoskin and R.B. Lee, ""Hardware-rooted Trust for Secure Key Management and Transient Trust"", Proc. of ACM CCS07, Oct. 2007. Google Scholar; 13.J.G. Dyer et al., ""Building the IBM 4758 Secure Coprocessor Computer"", vol. 34n, no. 10, pp. 57-66, October 2001. Google Scholar; 14.P. England et al., ""A Trusted Open Platform Computer"", vol. 36n, no. 7, pp. 55-62, July 2003. Google Scholar; 15.T. Garfinkel et al., ""Terra: A virtual machine-based platform for trusted computing"", Proc. of SOSP, Oct. 2003. CrossRef  Google Scholar; 16.B. Gassend et al., ""Caches and Merkle Trees for Efficient Memory Authentication"", Proc. of HPCA 2003, Feb. 2003. Google Scholar; 17.J. A. Halderman et al., ""Lest We Remember: Cold Boot Attacks on Encryption Keys"", Proc. of USENIX Security, July/August 2008. Google Scholar; 18.""Intel Virtualization Technology: Hardware Support for Efficient Virtualization"", Intel Technology Journal, Aug. 2006. Google Scholar; 19.B. Kauer, ""OSLO: Improving the Security of Trusted Computing"", Proc. of USENIX Security, Aug. 2007. Google Scholar; 20.P. Kwan et al., ""Vault: Practical Uses of Virtual Machines for Protection of Sensitive User Data"", Proc. of ISPEC 2007, May 2007. CrossRef  Google Scholar; 21.J. Laudon, ""UltraSPARC Tl: Architecture and Physical Design of a 32-threaded General Purpose CPU"", Proc. of IEEE ISSCC, Feb. 2006. Google Scholar; 22.R. B. Lee et al., ""Architecture for Protecting Critical Secrets in Microprocessors"", Proc. of ISCA 2005, June 2005. View Article  Google Scholar; 23.D. Lie et al., ""Architectural Support for Copy and Tamper Resistant Software"", Proc. of ASPLOS IX, 2000. CrossRef  Google Scholar; 24.P. Loscocco et al., ""Integrating Flexible Support for Security Policies into the Linux Operating System"", Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference, June 2001. Google Scholar; 25.J. Marchesini et al., ""Open-Source Applications of TCPA Hardware"", Proc. of ACSAC04, December 2004. View Article  Google Scholar; 26.J.M. McCune et al., ""Flicker: An Execution Infrastructure for TCB Minimization"", Proc. of EuroSys2008, March 2008. CrossRef  Google Scholar; 27.A. Menon et al., ""Diagnosing performance overheads in the Xen virtual machine environment"", Proc. of the 1st ACM/USENIX international conference on Virtual execution environments, June 11-12 2005. CrossRef  Google Scholar; 28.R.C. Merkle, ""Protocols for Public Key Cryptosystems"", IEEE Symposium on Security and Privacy, 1980. View Article  Google Scholar; 29.2008.; 30.B. Rogers et al., ""Using Address Independent Seed Encryption and Bonsai Merkle Trees to Make Secure Processors OS- and Performance-Friendly"", Proc. of Intl Symp. on Microarchitecture (MICR0 2007), Dec. 2007. View Article  Google Scholar"			Excluded	Excluded				2	IEEE		Scalable architectural support for trusted software	https://ieeexplore.ieee.org/document/5416657	IEEE	nan; Pages; Year; Bibtex
86	TrustSE	Software development governance and its concerns	In this paper, we start with a discussion of Software Development Governance (SDG), and clarify its relationships to management and process. We discuss how these organizational components are related and present our view on SDG and its concerns. Throughout the paper, we use the Linux open source development project where we show how SDG is used to achieve productive development in an environment which is often considered to have anarchic characteristics.	management;  software development governance;  software development organizations;  software processes; management, software development governance, software development organizations, software processes	Chulani, Sunita; Williams, Clay; Yaeli, Avi	SDG '08: Proceedings of the 1st international workshop on Software development governance	https://doi.org/10.1145/1370720.1370723		3-6	"""@inproceedings{10.1145/1370720.1370723,
    author = ""Chulani, Sunita and Williams, Clay and Yaeli, Avi"",
    title = ""Software development governance and its concerns"",
    year = ""2008"",
    isbn = ""9781605580357"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1370720.1370723"",
    doi = ""10.1145/1370720.1370723"",
    abstract = ""In this paper, we start with a discussion of Software Development Governance (SDG), and clarify its relationships to management and process. We discuss how these organizational components are related and present our view on SDG and its concerns. Throughout the paper, we use the Linux open source development project where we show how SDG is used to achieve productive development in an environment which is often considered to have anarchic characteristics."",
    booktitle = ""Proceedings of the 1st International Workshop on Software Development Governance"",
    pages = ""3-6"",
    numpages = ""4"",
    keywords = ""management, software development governance, software development organizations, software processes"",
    location = ""Leipzig, Germany"",
    series = ""SDG '08""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Software development governance and its concerns	https://doi.org/10.1145/1370720.1370723	Association for Computing Machinery	nan; References; Link
87	TrustSE	Technology, humanness, and trust: Rethinking trust in technology	"Information systems (IS) research has demonstrated that humans can and do trust technology. The current trust in technology literature employs two different types of trust in technology constructs. Some researchers use human-like trust constructs (e.g., benevolence, integrity, and ability), while other researchers use system-like trust constructs (e.g., helpfulness, reliability, and functionality). Interestingly, past research shows that both sets of measures influence important dependent variables, but the literature does not explain when one type should be used instead of the other type. In this paper, we use trust, social presence, and affordance theories to shed light on this research problem. We report on two studies. In study 1, we argue first that technologies vary in their perceived ""humanness"". Second, we argue that, because users perceive two technologies to differ in humanness, they will develop trust in each technology differently (i.e., along more human-like criteria or more system-like criteria). We study two technologies that vary in humanness to explore these differences theoretically and empirically. We demonstrate that, when the trust construct used aligns well with how human the technology is, it produces stronger effects on selected outcome variables than does a misaligned trust construct. In study 2, we assess whether these technologies differ in humanness based on social presence, social affordances, and affordances for sociality. We find that these factors do distinguish whether technology is more human-like or system-like. We provide implications for trust-in-technology research."	Information systems; Affordance theories; Human like; Response theory; Social presence; System-like trust; Trust in technologies; Information systems;  Affordance theories;  Human like;  Response theory;  Social presence;  System-like trust;  Trust in technologies	Lankton, Nancy K.; Harrison Mcknight, D.; Tripp, John	Journal of the Association for Information Systems	https://doi.org/10.17705/1jais.00411		880 - 918	"""@ARTICLE{Lankton2015880,
    author = ""Lankton, Nancy K. and Harrison Mcknight, D. and Tripp, John"",
    title = ""Technology, humanness, and trust: Rethinking trust in technology"",
    year = ""2015"",
    journal = ""Journal of the Association for Information Systems"",
    volume = ""16"",
    number = ""10"",
    pages = ""880 - 918"",
    doi = ""10.17705/1jais.00411"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84945279836\&doi=10.17705\%2f1jais.00411\&partnerID=40\&md5=957983c5c50ac5bc1dd122984b6bda5c"",
    affiliations = ""Marshall University, United States; Michigan State University, United States; Baylor University, United States"",
    abstract = ""Information systems (IS) research has demonstrated that humans can and do trust technology. The current trust in technology literature employs two different types of trust in technology constructs. Some researchers use human-like trust constructs (e.g., benevolence, integrity, and ability), while other researchers use system-like trust constructs (e.g., helpfulness, reliability, and functionality). Interestingly, past research shows that both sets of measures influence important dependent variables, but the literature does not explain when one type should be used instead of the other type. In this paper, we use trust, social presence, and affordance theories to shed light on this research problem. We report on two studies. In study 1, we argue first that technologies vary in their perceived ""humanness"". Second, we argue that, because users perceive two technologies to differ in humanness, they will develop trust in each technology differently (i.e., along more human-like criteria or more system-like criteria). We study two technologies that vary in humanness to explore these differences theoretically and empirically. We demonstrate that, when the trust construct used aligns well with how human the technology is, it produces stronger effects on selected outcome variables than does a misaligned trust construct. In study 2, we assess whether these technologies differ in humanness based on social presence, social affordances, and affordances for sociality. We find that these factors do distinguish whether technology is more human-like or system-like. We provide implications for trust-in-technology research. (c) 2015, Association for Information Systems. All rights reserved."",
    author_keywords = ""Affordance theory; Human-like trust; Social presence theory; Social response theory; System-like trust; Trust in technology"",
    keywords = ""Information systems; Affordance theories; Human like; Response theory; Social presence; System-like trust; Trust in technologies"",
    publisher = ""Association for Information Systems"",
    issn = ""15369323"",
    language = ""English"",
    abbrev_source_title = ""J. Assoc. Inf. Syst."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 340; All Open Access, Bronze Open Access""
}
"""	Included	Included				2	Scopus Signed In		Technology, humanness, and trust: Rethinking trust in technology	https://www.scopus.com/record/display.uri?eid=2-s2.0-84945279836&origin=resultslist&sort=r-f&src=s&sid=bc1c831df439979cdce0bec5b94b4c99&sot=b&sdt=b&s=TITLE%28technology+humanness+and+trust+rethinking+trust+in+technology%29&sl=68&sessionSearchId=bc1c831df439979cdce0bec5b94b4c99&relpos=0	Association for Information Systems	nan; References
88	TrustSE	A direct path to dependable software	Who could fault an approach that offers greater credibility at reduced cost?		Jackson, Daniel	Commun. ACM	https://doi.org/10.1145/1498765.1498787		78-88	"""@article{10.1145/1498765.1498787,
    author = ""Jackson, Daniel"",
    title = ""A direct path to dependable software"",
    year = ""2009"",
    issue_date = ""April 2009"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""52"",
    number = ""4"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1498765.1498787"",
    doi = ""10.1145/1498765.1498787"",
    abstract = ""Who could fault an approach that offers greater credibility at reduced cost?"",
    journal = ""Commun. ACM"",
    month = ""April"",
    pages = ""78-88"",
    numpages = ""11""
}
"""	Included	Included				2	ACM		A direct path to dependable software	https://doi.org/10.1145/1498765.1498787	Association for Computing Machinery	nan; Keywords; References; Link
89	TrustSE	AN EXPLORATORY STUDY OF FACTORS INFLUENCING THE LEVEL OF VITALITY AND POPULARITY OF OPEN SOURCE PROJECTS	In this research, we ask the question: What differentiates successful from unsuccessful open source software projects? Using a sample of 240 open source projects, we examine how organizational sponsorship, target audience (developer versus end user), license choice, and development status interact over time to influence the extent to which open source software projects attract user attention and developer activity.	Information use; Open systems; Developer activities; Development status; End-users; Exploratory studies; Open source projects; Open source software projects; Organizational sponsorships; Target audience; User attention; Open source software; Information use;  Open systems;  Developer activities;  Development status;  End-users;  Exploratory studies;  Open source projects;  Open source software projects;  Organizational sponsorships;  Target audience;  User attention;  Open source software	Stewart, Katherine J.; Ammeter, Tony	Proceedings of the International Conference on Information Systems, ICIS 2002	https://www.scopus.com/record/display.uri?eid=2-s2.0-85138730650&origin=resultslist&sort=r-f&src=s&sid=e915590b07c7a53357103cd72ad0119d&sot=b&sdt=b&s=TITLE%28an+exploratory+study+of+factors+influencing+the+level+of+vitality+and+popularity+of+open+source+projects%29&sl=111&sessionSearchId=e915590b07c7a53357103cd72ad0119d&relpos=0	Behlendorf, B.Open Source as a Business Strategy(1999)Open Sources: Voices from the Open Source Revolution.Cited 51 times.in C. DiBona, S. Ockman, and M. Stone (eds.), Sebastopol, CA: O'Reilly; Dibona, C., Ockman, S., Stone, M.(1999)Open Sources: Voices from the Open Source Revolution.Cited 369 times.Sebastopol, CA: O'Reilly; Feller, J., Fitzgerald, B.(2002)Understanding Open Source Software Development.Cited 370 times.London: Addison-Wesley; Gallivan, M.J.; Markus, M.L., Manville, B., Agres, C.E.; Raymond, E.S.The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental RevolutionarySebstapol, CA: O'Reill, p. 2001.Cited 7 times.	853 - 857	"""@CONFERENCE{Stewart2002853,
    author = ""Stewart, Katherine J. and Ammeter, Tony"",
    title = ""AN EXPLORATORY STUDY OF FACTORS INFLUENCING THE LEVEL OF VITALITY AND POPULARITY OF OPEN SOURCE PROJECTS"",
    year = ""2002"",
    journal = ""Proceedings of the International Conference on Information Systems, ICIS 2002"",
    pages = ""853 - 857"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85138730650\&partnerID=40\&md5=9b1114c5177d4e3db1a19d6ad74f1952"",
    affiliations = ""R. H. Smith School of Business, University of Maryland, College Park, MD, United States; University of Mississippi University, MS, United States"",
    abstract = ""In this research, we ask the question: What differentiates successful from unsuccessful open source software projects? Using a sample of 240 open source projects, we examine how organizational sponsorship, target audience (developer versus end user), license choice, and development status interact over time to influence the extent to which open source software projects attract user attention and developer activity. (c) 2002, Association for Information Systems. All rights reserved."",
    keywords = ""Information use; Open systems; Developer activities; Development status; End-users; Exploratory studies; Open source projects; Open source software projects; Organizational sponsorships; Target audience; User attention; Open source software"",
    publisher = ""Association for Information Systems"",
    language = ""English"",
    abbrev_source_title = ""Proc. Int. Conf. Inform. Sys."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 32; Conference name: International Conference on Information Systems, ICIS 2002; Conference date: 15 December 2002 through 18 December 2002; Conference code: 281059""
}
"""	Included	Included				2	Scopus Signed In		An exploratory study of factors influencing the level of vitality and popularity of open source projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-85138730650&origin=resultslist&sort=r-f&src=s&sid=e915590b07c7a53357103cd72ad0119d&sot=b&sdt=b&s=TITLE%28an+exploratory+study+of+factors+influencing+the+level+of+vitality+and+popularity+of+open+source+projects%29&sl=111&sessionSearchId=e915590b07c7a53357103cd72ad0119d&relpos=0	Association for Information Systems	
90	TrustSE	The institutions of open source software: Examining the Debian community	Free and open source software activities involve and, perhaps, evolve institutions (rules, norms and standards) that influence the formation, growth, and demise of communities. Community institutions are attractors for some individuals while discouraging other individuals from entering or continuing to participate. Their suitability may change as a community grows. This paper examines the institutions of the Debian community where issues of community identity, distribution of authority, and decentralisation have facilitated growth and development. These same institutions have also resulted in conflicts regarding community purposes and the quality and delivery of the community's output. We examine the institutional redesign undertaken to address these problems and derive implications for F/LOS communities and companies.	Open source software; Debian; Institutions; Open source software;  Debian;  Institutions	Mateos-Garcia, Juan; Steinmueller, W. Edward	INFORMATION ECONOMICS AND POLICY	https://doi.org/10.1016/j.infoecopol.2008.06.001		333-344	"""@article{WOS:000261859400005,
    Author = ""Mateos-Garcia, Juan and Steinmueller, W. Edward"",
    Title = ""The institutions of open source software: Examining the Debian community"",
    Journal = ""INFORMATION ECONOMICS AND POLICY"",
    Year = ""2008"",
    Volume = ""20"",
    Number = ""4, SI"",
    Pages = ""333-344"",
    Month = ""DEC"",
    Abstract = ""Free and open source software activities involve and, perhaps, evolve institutions (rules, norms and standards) that influence the formation, growth, and demise of communities. Community institutions are attractors for some individuals while discouraging other individuals from entering or continuing to participate. Their suitability may change as a community grows. This paper examines the institutions of the Debian community where issues of community identity, distribution of authority, and decentralisation have facilitated growth and development. These same institutions have also resulted in conflicts regarding community purposes and the quality and delivery of the community's output. We examine the institutional redesign undertaken to address these problems and derive implications for F/LOS communities and companies. (C) 2008 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Mateos-Garcia, J (Corresponding Author), Univ Sussex, Brighton Univ Freeman Ctr, CENTRIM, Falmer Brighton BN1 9QE, E Sussex, England. Mateos-Garcia, Juan, Univ Sussex, Brighton Univ Freeman Ctr, CENTRIM, Falmer Brighton BN1 9QE, E Sussex, England. Steinmueller, W. Edward, Univ Sussex, Freeman Ctr, SPRU Sci \\& Technol Policy Res, Falmer Brighton BN1 9QE, E Sussex, England."",
    DOI = ""10.1016/j.infoecopol.2008.06.001"",
    ISSN = ""0167-6245"",
    EISSN = ""1873-5975"",
    Keywords = ""Open source software; Debian; Institutions"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Economics"",
    Author-Email = ""J.Mateos-Garcia@brighton.ac.uk w.e.steinmueller@sussex.ac.uk"",
    Affiliations = ""University of Sussex; University of Sussex"",
    Number-of-Cited-References = ""35"",
    Times-Cited = ""36"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""18"",
    Journal-ISO = ""Inf. Econ. Policy"",
    Doc-Delivery-Number = ""386CH"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000261859400005"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		The institutions of open source software: Examining the Debian community	https://www.webofscience.com/wos/woscc/full-record/WOS:000261859400005	ELSEVIER SCIENCE BV	nan; References
91	TrustSE	Technology choice and its performance: Towards a sociology of software package procurement	Technology acquisition is an important but neglected issue within the social science analysis of technology. The limited number of studies undertaken reproduce a schism between rationalist (e.g., economic) forms of analysis, where the assumption is that choice is the outcome of formal assessment, and cultural sociological approaches which see choice as driven by the micro-politics of the organisational setting, interests, prevalent rhetorics, fads, etc. While sympathetic to the latter critical view, we are dissatisfied with the relativist portrayal of technology selection: that decisions beset with uncertainties and tensions are divorced from formal decision making criteria. Influenced by Michel Callon's writing on the 'performativity' of economic concepts and tools, we argue that formal assessment has a stronger relationship to technology decisions than suggested by cultural sociologists. We focus on a procurement which is characterised by high levels of organisational tension and where there is deep uncertainty about each of the solutions on offer. We show how the procurement team are able to arrive at a decision through laboriously establishing a 'comparison'. That is, they attempt to drag the choice from the informal domain onto a more formal, accountable plane through the mobilisation and performance of a number of 'comparative measures' and criteria. These measures constituted a stabilised form of accountability, which we describe through the metaphor of a 'scaffolding', erected in the course of the procurement. Our argument is threefold: first, we argue that comparisons are possible but that they require much effort; second, that it is not the properties of the technology which determines choice but the way these properties are given form through the various comparative measures put in place; and finally, whilst comparative measures might be imposed by one group upon others in a procurement team, these measures remain relatively malleable.	Comparative measures;; Decision making;; Organisational politics;; Performativity;; Procurement;; Software packages	Pollock, Neil; Williams, Robin	Information and Organization	https://doi.org/10.1016/j.infoandorg.2007.05.001		131 - 161	"""@ARTICLE{Pollock2007131,
    author = ""Pollock, Neil and Williams, Robin"",
    title = ""Technology choice and its performance: Towards a sociology of software package procurement"",
    year = ""2007"",
    journal = ""Information and Organization"",
    volume = ""17"",
    number = ""3"",
    pages = ""131 - 161"",
    doi = ""10.1016/j.infoandorg.2007.05.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34447294593\&doi=10.1016\%2fj.infoandorg.2007.05.001\&partnerID=40\&md5=537f1602c2aef1d1593fae117fcb9839"",
    affiliations = ""School of Management, University of Edinburgh, Edinburgh, EH8 9JY, William Robertson Bldg, George Sq., United Kingdom; Research Centre for Social Sciences, University of Edinburgh, High School Yards, Edinburgh EH1 1LZ, Old Surgeon's Hall, United Kingdom"",
    abstract = ""Technology acquisition is an important but neglected issue within the social science analysis of technology. The limited number of studies undertaken reproduce a schism between rationalist (e.g., economic) forms of analysis, where the assumption is that choice is the outcome of formal assessment, and cultural sociological approaches which see choice as driven by the micro-politics of the organisational setting, interests, prevalent rhetorics, fads, etc. While sympathetic to the latter critical view, we are dissatisfied with the relativist portrayal of technology selection: that decisions beset with uncertainties and tensions are divorced from formal decision making criteria. Influenced by Michel Callon's writing on the 'performativity' of economic concepts and tools, we argue that formal assessment has a stronger relationship to technology decisions than suggested by cultural sociologists. We focus on a procurement which is characterised by high levels of organisational tension and where there is deep uncertainty about each of the solutions on offer. We show how the procurement team are able to arrive at a decision through laboriously establishing a 'comparison'. That is, they attempt to drag the choice from the informal domain onto a more formal, accountable plane through the mobilisation and performance of a number of 'comparative measures' and criteria. These measures constituted a stabilised form of accountability, which we describe through the metaphor of a 'scaffolding', erected in the course of the procurement. Our argument is threefold: first, we argue that comparisons are possible but that they require much effort; second, that it is not the properties of the technology which determines choice but the way these properties are given form through the various comparative measures put in place; and finally, whilst comparative measures might be imposed by one group upon others in a procurement team, these measures remain relatively malleable. (c) 2007 Elsevier Ltd. All rights reserved."",
    author_keywords = ""Comparative measures; Decision making; Organisational politics; Performativity; Procurement; Software packages"",
    correspondence_address = ""N. Pollock; School of Management, University of Edinburgh, Edinburgh, EH8 9JY, William Robertson Bldg, George Sq., United Kingdom; email: neil.pollock@ed.ac.uk"",
    issn = ""14717727"",
    coden = ""ACMTE"",
    language = ""English"",
    abbrev_source_title = ""Inf. Organ."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 36; All Open Access, Green Open Access""
}
"""	Included	Included				2	Scopus Signed In		Technology choice and its performance: Towards a sociology of software package procurement	https://www.scopus.com/record/display.uri?eid=2-s2.0-34447294593&origin=resultslist&sort=r-f&src=s&sid=b2072a4e0d375a411de4180c59bd0e59&sot=b&sdt=b&s=TITLE%28technology+choice+and+its+performance+towards+a+sociology+of+software+package+procurement%29&sl=96&sessionSearchId=b2072a4e0d375a411de4180c59bd0e59&relpos=0		nan; References; Publisher
92	TrustSE	Global software and its provenance: Generification work in the production of organizational software packages	This paper addresses the seemingly implausible project of establishing a `generic' organizational information system. This is an apparent contradiction: on the one hand, we are told of the diversity of specific organizational contexts and on the other, we often find the same standardized software solutions being applied across those settings. How do generic software packages work in so many different contexts? Science and Technology Studies provides contrasting accounts of how this contradiction is resolved: either stressing the unwanted organizational change that standardized systems may bring; or, alternatively, insisting these technologies can only be made to work through processes of `localization'. We argue that the focus on specificity versus localization of application contexts draws attention away from enquiring into the origins and characteristics of generic solutions. Through comparing the design and evolution of two software packages we shift the debate from understanding how technologies are made to work within particular settings to how they are built to work across a diverse range of organizational contexts. Our question is `How do software packages achieve the mobility that allows them to bridge the heterogeneity within organizations and between organizations in different sectors and cultures?' We describe a set of revealed strategies through which suppliers produce software that embodies characteristics common across many users; what we term generification work. One aspect of this process of generification is the configuring of users within `managed communities', but it also includes `smoothing' the contents of the package and, at times, reverting to `social authority'. Our argument is that generic systems do exist but that they are brought into being through an intricately managed process, involving the broader extension of a particularized software application and, at the same time, the management of the user community attached to that solution.	generification; localization; particularity; sameness; software packages; generification;  localization;  particularity;  sameness;  software packages	Pollock, Neil; Williams, Robin; D'Adderio, Luciana	SOCIAL STUDIES OF SCIENCE	https://doi.org/10.1177/0306312706066022		254-280	"""@article{WOS:000245922800004,
    Author = ""Pollock, Neil and Williams, Robin and D'Adderio, Luciana"",
    Title = ""Global software and its provenance: Generification work in the production of organizational software packages"",
    Journal = ""SOCIAL STUDIES OF SCIENCE"",
    Year = ""2007"",
    Volume = ""37"",
    Number = ""2"",
    Pages = ""254-280"",
    Month = ""APR"",
    Abstract = ""This paper addresses the seemingly implausible project of establishing a `generic' organizational information system. This is an apparent contradiction: on the one hand, we are told of the diversity of specific organizational contexts and on the other, we often find the same standardized software solutions being applied across those settings. How do generic software packages work in so many different contexts? Science and Technology Studies provides contrasting accounts of how this contradiction is resolved: either stressing the unwanted organizational change that standardized systems may bring; or, alternatively, insisting these technologies can only be made to work through processes of `localization'. We argue that the focus on specificity versus localization of application contexts draws attention away from enquiring into the origins and characteristics of generic solutions. Through comparing the design and evolution of two software packages we shift the debate from understanding how technologies are made to work within particular settings to how they are built to work across a diverse range of organizational contexts. Our question is `How do software packages achieve the mobility that allows them to bridge the heterogeneity within organizations and between organizations in different sectors and cultures?' We describe a set of revealed strategies through which suppliers produce software that embodies characteristics common across many users; what we term generification work. One aspect of this process of generification is the configuring of users within `managed communities', but it also includes `smoothing' the contents of the package and, at times, reverting to `social authority'. Our argument is that generic systems do exist but that they are brought into being through an intricately managed process, involving the broader extension of a particularized software application and, at the same time, the management of the user community attached to that solution."",
    Publisher = ""SAGE PUBLICATIONS LTD"",
    Address = ""1 OLIVERS YARD, 55 CITY ROAD, LONDON EC1Y 1SP, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Pollock, N (Corresponding Author), Univ Edinburgh, Sch Management, George Sq, Edinburgh EH8 9JY, Midlothian, Scotland. Univ Edinburgh, Sch Management, Edinburgh EH8 9JY, Midlothian, Scotland. Univ Edinburgh, ESRC Innogen Ctr, Edinburgh EH1 1LZ, Midlothian, Scotland. Univ Edinburgh, Res Ctr Social Sci, Edinburgh EH1 1L2, Midlothian, Scotland."",
    DOI = ""10.1177/0306312706066022"",
    ISSN = ""0306-3127"",
    Keywords = ""generification; localization; particularity; sameness; software packages"",
    Keywords-Plus = ""SYSTEMS; UNIVERSALITY; TECHNOLOGY"",
    Research-Areas = ""History \\& Philosophy of Science"",
    Web-of-Science-Categories = ""History \\& Philosophy Of Science"",
    Author-Email = ""neil.pollock@ed.ac.uk r.williams@ed.ac.uk luciana@inf.ed.ac.uk"",
    Affiliations = ""University of Edinburgh; University of Edinburgh; UK Research \\& Innovation (UKRI); Economic \\& Social Research Council (ESRC); University of Edinburgh"",
    Number-of-Cited-References = ""52"",
    Times-Cited = ""81"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""6"",
    Journal-ISO = ""Soc. Stud. Sci."",
    Doc-Delivery-Number = ""160ED"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Arts \&amp; Humanities Citation Index (A\&amp;HCI)"",
    Unique-ID = ""WOS:000245922800004"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Global software and its provenance: generification work in the production of organizational software packages	https://www.webofscience.com/wos/woscc/full-record/WOS:000245922800004	SAGE PUBLICATIONS LTD	nan; References
93	TrustSE	Software preannouncements and their impact on customers' perceptions and vendor reputation	Software preannouncements are often called ``vaporware{''} (systems or features announced long before a ship date). The challenge confronting software vendors and consumers is understanding the balance between the need to inform the market and the negative consequences of unfulfilled promises. Based on signaling theory from marketing science and research, this study looks at the perceived importance of software preannouncement factors on customers, of unfulfilled promises and unreliable software on a company's reputation, and whether vendor dependence changes these perceptions. Database administrators were surveyed on the perceptions of their database software vendor. Fulfilling commitments to software functionality was more strongly correlated with vendor reputation than on-time delivery of the software. Customer dependence on the vendor was not correlated with perceptions of vendor reputation and credibility. Thus, unlike other industries, it seems that vendors can use software delivery time preannouncements for competitive purposes with minimal concern for the impact on customers, provided the software ultimately delivers the features and functionality promised and is largely free of errors.	corporate reputation; signaling; software preannouncements; vaporware; corporate reputation;  signaling;  software preannouncements;  vaporware	Hoxmeier, JA	JOURNAL OF MANAGEMENT INFORMATION SYSTEMS	https://www.webofscience.com/wos/woscc/full-record/WOS:000088450900006		115-139	"""@article{WOS:000088450900006,
    Author = ""Hoxmeier, JA"",
    Title = ""Software preannouncements and their impact on customers' perceptions and vendor reputation"",
    Journal = ""JOURNAL OF MANAGEMENT INFORMATION SYSTEMS"",
    Year = ""2000"",
    Volume = ""17"",
    Number = ""1"",
    Pages = ""115-139"",
    Month = ""SUM"",
    Abstract = ""Software preannouncements are often called ``vaporware{''} (systems or features announced long before a ship date). The challenge confronting software vendors and consumers is understanding the balance between the need to inform the market and the negative consequences of unfulfilled promises. Based on signaling theory from marketing science and research, this study looks at the perceived importance of software preannouncement factors on customers, of unfulfilled promises and unreliable software on a company's reputation, and whether vendor dependence changes these perceptions. Database administrators were surveyed on the perceptions of their database software vendor. Fulfilling commitments to software functionality was more strongly correlated with vendor reputation than on-time delivery of the software. Customer dependence on the vendor was not correlated with perceptions of vendor reputation and credibility. Thus, unlike other industries, it seems that vendors can use software delivery time preannouncements for competitive purposes with minimal concern for the impact on customers, provided the software ultimately delivers the features and functionality promised and is largely free of errors."",
    Publisher = ""ROUTLEDGE JOURNALS, TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OX14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Colorado State Univ, Ft Collins, CO 80523 USA. Colorado State Univ, Ft Collins, CO 80523 USA."",
    ISSN = ""0742-1222"",
    EISSN = ""1557-928X"",
    Keywords = ""corporate reputation; signaling; software preannouncements; vaporware"",
    Keywords-Plus = ""PRODUCT QUALITY; CORPORATE-STRATEGY; SIGNALING GAMES; EQUILIBRIUM; SELECTION"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Affiliations = ""Colorado State University"",
    Number-of-Cited-References = ""69"",
    Times-Cited = ""26"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""22"",
    Journal-ISO = ""J. Manage. Inform. Syst."",
    Doc-Delivery-Number = ""338YM"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000088450900006"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Software preannouncements and their impact on customers' perceptions and vendor reputation	https://www.webofscience.com/wos/woscc/full-record/WOS:000088450900006	ROUTLEDGE JOURNALS, TAYLOR \& FRANCIS LTD	nan; References
94	TrustSE	Packaged software: implications of the differences from custom approaches to software development	This paper contributes to the literature on software development in two ways. First, by discussing the packaged software domain relative to the more commonly studied custom information systems (IS) domain. Second, this paper presents our speculations on the implications of these differences between packaged and custom IS development. Regarding the first issue, while the two domains share many commonalities, the differences are also important to understand. To make this clear we discuss the differences at four levels: industry forces, approaches to software development, work culture and development team efforts. At each level, data from three case studies are used to illustrate the differences between the two domains. To develop our speculations, we contend that the differences between packaged software and the traditional, custom, approach to information systems development will be profound for five stakeholder groups: software development organizations, software development teams, software developers, software consumers and for researchers interested in software development.		Sawyer, S	EUROPEAN JOURNAL OF INFORMATION SYSTEMS	https://doi.org/10.1057/palgrave.ejis.3000345		47-58	"""@article{WOS:000086525900006,
    Author = ""Sawyer, S"",
    Title = ""Packaged software: implications of the differences from custom approaches to software development"",
    Journal = ""EUROPEAN JOURNAL OF INFORMATION SYSTEMS"",
    Year = ""2000"",
    Volume = ""9"",
    Number = ""1"",
    Pages = ""47-58"",
    Month = ""MAR"",
    Abstract = ""This paper contributes to the literature on software development in two ways. First, by discussing the packaged software domain relative to the more commonly studied custom information systems (IS) domain. Second, this paper presents our speculations on the implications of these differences between packaged and custom IS development. Regarding the first issue, while the two domains share many commonalities, the differences are also important to understand. To make this clear we discuss the differences at four levels: industry forces, approaches to software development, work culture and development team efforts. At each level, data from three case studies are used to illustrate the differences between the two domains. To develop our speculations, we contend that the differences between packaged software and the traditional, custom, approach to information systems development will be profound for five stakeholder groups: software development organizations, software development teams, software developers, software consumers and for researchers interested in software development."",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Penn State Univ, Sch Informat Sci \\& Technol, 513 Rider 1 Bldg, University Pk, PA 16801 USA. Penn State Univ, Sch Informat Sci \\& Technol, University Pk, PA 16801 USA."",
    DOI = ""10.1057/palgrave.ejis.3000345"",
    ISSN = ""0960-085X"",
    EISSN = ""1476-9344"",
    Keywords-Plus = ""COTS SOFTWARE; IMPLEMENTATION; SYSTEMS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Affiliations = ""Pennsylvania Commonwealth System of Higher Education (PCSHE); Pennsylvania State University; Pennsylvania State University - University Park"",
    ORCID-Numbers = ""Sawyer, Steve/0000-0001-5277-5148"",
    Number-of-Cited-References = ""63"",
    Times-Cited = ""67"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""Eur. J. Inform. Syst."",
    Doc-Delivery-Number = ""305EF"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000086525900006"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Packaged software: implications of the differences from custom approaches to software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000086525900006	TAYLOR \& FRANCIS LTD	nan; Keywords; References
95	TrustSE	Certified software	Only if the programmer can prove (through formal machine-checkable proofs) it is free of bugs with respect to a claim of dependability.		Shao, Zhong	Commun. ACM	https://doi.org/10.1145/1859204.1859226		56-66	"""@article{10.1145/1859204.1859226,
    author = ""Shao, Zhong"",
    title = ""Certified software"",
    year = ""2010"",
    issue_date = ""December 2010"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""53"",
    number = ""12"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1859204.1859226"",
    doi = ""10.1145/1859204.1859226"",
    abstract = ""Only if the programmer can prove (through formal machine-checkable proofs) it is free of bugs with respect to a claim of dependability."",
    journal = ""Commun. ACM"",
    month = ""December"",
    pages = ""56-66"",
    numpages = ""11""
}
"""	Excluded	Excluded				2	ACM		Certified software	https://doi.org/10.1145/1859204.1859226	Association for Computing Machinery	nan; Keywords; References; Link
96	TrustSE	Free/Open Source Software Development: Recent Research Results and Methods	The focus of this chapter is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It does not focus on specific properties or technical attributes of different FOSS systems, but it does seek to explore how FOSS is developed and evolved. The chapter provides a brief background on what FOSS is and how free software and open source software development efforts are similar and different. From there attention shifts to an extensive review of a set of empirical studies of FOSSD that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine why individuals participate; resources and capabilities supporting development activities; how cooperation, coordination, and control are realized in projects; alliance formation and inter-project social networking; FOSS as a multi-project software ecosystem, and FOSS as a social movement. Following this, the chapter reviews how different research methods are employed to examine different issues in FOSSD. These include reflective practice and industry polls, survey research, ethnographic studies, mining FOSS repositories, and multi-modal modeling and analysis of FOSSD processes and socio-technical networks. Finally, there is a discussion of limitations and constraints in the FOSSD studies so far, attention to emerging opportunities for future FOSSD studies, and then conclusions about what is known about FOSSD through the empirical studies reviewed here.		Scacchi, Walt	Advances in Computers	https://doi.org/10.1016/S0065-2458(06)69005-0		243 - 295	"""@ARTICLE{Scacchi2007243,
    author = ""Scacchi, Walt"",
    editor = ""M.V., Zelkowitz"",
    title = ""Free/Open Source Software Development: Recent Research Results and Methods"",
    year = ""2007"",
    journal = ""Advances in Computers"",
    volume = ""69"",
    pages = ""243 - 295"",
    doi = ""10.1016/S0065-2458(06)69005-0"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34248672283\&doi=10.1016\%2fS0065-2458\%2806\%2969005-0\&partnerID=40\&md5=d13516373d9ba8242d7703ed3bdd50f1"",
    affiliations = ""Institute for Software Research Donald Bren School of Information, Computer Sciences University of California, Irvine, Irvine, CA 92697-3425, United States"",
    abstract = ""The focus of this chapter is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It does not focus on specific properties or technical attributes of different FOSS systems, but it does seek to explore how FOSS is developed and evolved. The chapter provides a brief background on what FOSS is and how free software and open source software development efforts are similar and different. From there attention shifts to an extensive review of a set of empirical studies of FOSSD that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine why individuals participate; resources and capabilities supporting development activities; how cooperation, coordination, and control are realized in projects; alliance formation and inter-project social networking; FOSS as a multi-project software ecosystem, and FOSS as a social movement. Following this, the chapter reviews how different research methods are employed to examine different issues in FOSSD. These include reflective practice and industry polls, survey research, ethnographic studies, mining FOSS repositories, and multi-modal modeling and analysis of FOSSD processes and socio-technical networks. Finally, there is a discussion of limitations and constraints in the FOSSD studies so far, attention to emerging opportunities for future FOSSD studies, and then conclusions about what is known about FOSSD through the empirical studies reviewed here. (c) 2007 Elsevier Inc. All rights reserved."",
    correspondence_address = ""W. Scacchi; Institute for Software Research Donald Bren School of Information, Computer Sciences University of California, Irvine, Irvine, CA 92697-3425, United States; email: wscacchi@uci.edu"",
    issn = ""00652458"",
    isbn = ""0123737451; 978-012373745-8"",
    language = ""English"",
    abbrev_source_title = ""Adv. Comput."",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 64; All Open Access, Green Open Access""
}
"""	Included	Included				2	Scopus Signed In		Free/open source software development: Recent research results and methods	https://www.scopus.com/record/display.uri?eid=2-s2.0-34248672283&origin=resultslist&sort=r-f&src=s&sid=1c0932abb4bd7605a077f8d2b1ccaf11&sot=b&sdt=b&s=TITLE%28free+open+source+software+development+recent+research+results+and+methods%29&sl=80&sessionSearchId=1c0932abb4bd7605a077f8d2b1ccaf11&relpos=0		nan; Keywords; References; Publisher
97	TrustSE	Analysis of the Impact of Open Source Software			Nic Peeling; Julian Satchell		https://www.marchnetworks.com/wp-content/uploads/2013/09/Analysis20of20the20Impact20of20Open20Source20Software.pdf		51	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Analysis of the impact of open source software	https://www.marchnetworks.com/wp-content/uploads/2013/09/Analysis20of20the20Impact20of20Open20Source20Software.pdf	QinetiQ	
98	TrustSE	A review of capacity planning techniques within standard software packages	This paper gives a review of capacity planning techniques from which today's standard software packages for production control make their choice. The following techniques arc discussed in the paper: four variants of the rough cut capacity check, capacity requirements planning with infinite and finite loading, input/output planning without and with individual work orders, and a number of sequencing techniques. An important issue throughout the paper is the concept of robustness and nervousness of planning techniques. Aspects of interaction between techniques and human planners are given. The human planner is still an important factor in capacity planning.	Computer software; Manufacture; Production control; Reliability; Robustness (control systems); Scheduling; Capacity planning; Nervousness; Rough cut capacity check; Planning; Computer software;  Manufacture;  Production control;  Reliability;  Robustness (control systems);  Scheduling;  Capacity planning;  Nervousness;  Rough cut capacity check;  Planning	Wortman, J.C.; Euwe, M.J.; Taal, M.; Wiers, V.C.S.	Production Planning and Control	https://doi.org/10.1080/09537289608930335		117 - 128	"""@ARTICLE{Wortman1996117,
    author = ""Wortman, J.C. and Euwe, M.J. and Taal, M. and Wiers, V.C.S."",
    title = ""A review of capacity planning techniques within standard software packages"",
    year = ""1996"",
    journal = ""Production Planning and Control"",
    volume = ""7"",
    number = ""2"",
    pages = ""117 - 128"",
    doi = ""10.1080/09537289608930335"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0030104249\&doi=10.1080\%2f09537289608930335\&partnerID=40\&md5=2c8a57b27b859558e826d72a800180f1"",
    affiliations = ""Graduate School of Industrial Engineering and Management Science, Eindhoven University of Technology, Eindhoven, MB, NL-5600, PO Box 513, Netherlands; Baan International B.V., PG Ede, NL-6710, PO Box 250, Netherlands; Graduate School of Industrial Engineering and Management Science, Eindhoven University of Technology, Eindhoven, MB, NL-5600, PO Box 513, Netherlands; LV Eindhoven, NL-5612, Pastoor Petersstraat 162, Netherlands"",
    abstract = ""This paper gives a review of capacity planning techniques from which today's standard software packages for production control make their choice. The following techniques arc discussed in the paper: four variants of the rough cut capacity check, capacity requirements planning with infinite and finite loading, input/output planning without and with individual work orders, and a number of sequencing techniques. An important issue throughout the paper is the concept of robustness and nervousness of planning techniques. Aspects of interaction between techniques and human planners are given. The human planner is still an important factor in capacity planning. (c) 1996 Taylor \& Francis Ltd."",
    author_keywords = ""Capacity planning; Manufac-turing resources planning; Scheduling; Sequencing; Standard software packages"",
    keywords = ""Computer software; Manufacture; Production control; Reliability; Robustness (control systems); Scheduling; Capacity planning; Nervousness; Rough cut capacity check; Planning"",
    issn = ""09537287"",
    language = ""English"",
    abbrev_source_title = ""Prod Plann Control"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 38; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		A review of capacity planning techniques within standard software packages	https://www.scopus.com/record/display.uri?eid=2-s2.0-0030104249&origin=resultslist&sort=r-f&src=s&sid=f6f39bb7be7f577c1f93dae1480c2661&sot=b&sdt=b&s=TITLE%28a+review+of+capacity+planning+techniques+within+standard+software+packages%29&sl=81&sessionSearchId=f6f39bb7be7f577c1f93dae1480c2661&relpos=0		nan; References; Publisher
99	TrustSE	Uncertainty management in software engineering: Past, present, and future	Software development has significantly matured in the last decade. However, one of the critical challenges today is uncertainty inherent to every aspect of software development including requirement specifications, design, coding, and testing. In this paper, we propose a framework for uncertainty management in software engineering. The framework is used to model uncertainty inherent to software development activities and manage their consequences. The framework consists of four main phases: identification and prioritization, modeling and analysis, management and planning, and monitoring and evaluation. Commercial Off-The-Shelf (COTS)-based development is selected as an example to illustrate how the proposed framework is used in a simple but intuitive case study to represent uncertainty and manage its consequences.	Uncertainty; Engineering management; Software engineering; Programming; Software development management; Software design; Monitoring; Decision making; Bayesian methods; Software systems; Software Engineering; Uncertainty Management; Software Development; Commercial Off-the-shelf; Evaluation Criteria; Levels Of Satisfaction; System Software; Management Plan; Model Uncertainty; Processing Software; Digital Library; Design Software; Planning Phase; Evaluation Phase; Selection Phase; Use Of Planning; Requirements Engineering; Software Product; Imperfect Information; Forms Of Uncertainty; Software Reliability; Representation Of Uncertainty; Uncertainty management; Software Engineering; COTS-Based Development	Hamdy Ibrahim; Behrouz H. Far; Armin Eberlein; Yousef Daradkeh	2009 Canadian Conference on Electrical and Computer Engineering	https://doi.org/10.1109/CCECE.2009.5090081	"1.Roger S. Pressman, Software Engineering: A Practitioner's Approach, USA:McGraw-Hill, 2005. Google Scholar; 2.D. Greer and G. Ruhe, ""Software Release Planning: An Evolutionary and Iterative Approach"", Information and Software Technology, vol. 46, no. 4, pp. 243-253, 2004. CrossRef  Google Scholar; 3.M. Svahnberg, C. Wohlin, L. Lundberg and M. Mattsson, ""Quality Attribute Driven Selection of Software Architecture Structures"", Proc. of the First Workshop on Software Engineering Decision Support, pp. 819-826, 2002. Google Scholar; 4.H. Ziv, D. J. Richardson and R. Klosch, ""The uncertainty Principle in Software Engineering"", Technical Report UCITR-96-33, 1996. Google Scholar; 5.P. A. Laplante and C. J. Neill, ""Uncertainty: A Meta-Property of Software"", Proc. of the 29th annual IEE/NASA software engineering workshop (SEW'05), pp. 228-233, 2005. View Article  Google Scholar; 6.F. Xavier and N. Medinilla, ""How a Human-Centered Approach Impacts Software Development"", Human Computer Interaction Part I HCII 2007, pp. 68-77, 2007. Google Scholar; 7.R. V. Giddings, ""Accommodating Uncertainty in Software Design"", Commun. of the ACM, vol. 27, no. 5, pp. 428-434, 1984. CrossRef  Google Scholar; 8.Luqi and D. Cooke, ""The management of uncertainty in software development"", Proc. Of 16th annual international computer software and applications conf., pp. 381-386, 1992. Google Scholar; 9.N. Srinivas, ""Uncertainty in software engineering life cycle: The Very Idea"", IOS Press Knowledge-Based Intelligent Information Engineering systems Allied Technologies (KES'01), vol. 69, pp. 42-46, 2001. Google Scholar; 10.G. Canfora and L. Troiano, ""The importance of dealing with Uncertainty in the Evaluation of Software Engineering Methods and Tools"", Proc. of the 14th int. conf. on Software engineering and knowledge engineering (SEKE'02), pp. 691-698, 2002. CrossRef  Google Scholar; 11.P. A. Laplante and C. J. Neill, ""Modeling uncertainty in software engineering using rough sets"", Innovations in Systems and Software Engineering, vol. 1, no. 1, pp. 71-78, 2005. CrossRef  Google Scholar; 12.Y. S. Dai, M. X. Quan Long and S. H. Ng, ""Uncertainty Analysis in Software Reliability Modeling by Bayesian Analysis with Maximum-Entropy Principle"", IEEE Transactions on Software Engineering, vol. 33, no. 11, pp. 781-795, 2007. CrossRef  Google Scholar; 13.N. Medinilla and I. Gutierrez, ""Uncertainty as a Tool in Software Engineering"", IEEE Latin America Transactions, vol. 5, no. 4, pp. 265-270, 2007. View Article  Google Scholar; 14.J. Noppen, P. V. Broek and M. Aksit, ""Software development with imperfect information"", Soft Computing, vol. 12, no. 1, pp. 3-28, 2008. CrossRef  Google Scholar; 15.F. Xavier and M. Torchiano, ""Towards a Reference Framework for COTS-based development: a proposal"", Proc. of the second int. workshop on models and processes for the evaluation of off-the-shelf components Int. Conf. on Software Engineering, 1-4, 2005. Google Scholar; 16.S. B. Sassi, L. L. Jilani and H. H. B. Ghezala, ""Towards a COTS-Based Development Environment"", Proc. of the 5th Int. Conf. on Commercial-off-the shelf (COTS)-Based Software Systems (ICCBSS 2006), pp. 167-176, 2006. CrossRef  Google Scholar; 17.P. Oberndorf, ""Facilitating Component-Based Software Engineering: COTS and Open Systems"", Proc. of the 5th Int.l Symposium on Assessment of Software Tools - SAST'97, pp. 143-148, 1997. CrossRef  Google Scholar; 18.H. Ibrahim, B. H. Far and A. Eberlein, ""Towards Uncertainty Management in COTS-Based Development"", Proc. Of the 9th IASTED Int. Conf. On Software Engineering and Applications SEA 2008, pp. 133-140, 2008. Google Scholar; 19.H. Ibrahim, B. H. Far and A. Eberlein, ""Weighted Criteria Hybrid Model for Ranking commercial Off-The-Shelf Products"", Proc. Of the IASTED Int. Conf. On Software Engineering SE, pp. 49-56, 2009, 2009. Google Scholar; 20.H. Ibrahim, B. H. Far and A. Eberlein, ""Tradeoff and Sensitivity Analysis of a Hybrid Model for Ranking Commercial Off-The-Shelf Products"", the 16th Annual IEEE Int. Conf. and Workshop on the Engineering of Computer Based Systems (ECBS) Conference and Workshops, 2009. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Uncertainty management in software engineering: Past, present, and future	https://ieeexplore.ieee.org/document/5090081	IEEE	nan; Pages; Year; Bibtex
100	TrustSE	A Bibliography on Uncertainty Management in Information Systems	This is an evolving bibliography of documents on uncertainty and imprecision in information systems. By uncertainty and imprecision, we mean the representation of and query support for information that is fuzzy, unknown, partially known, vague, uncertain, probabilistic, indefinite, disjunctive, possible, maybe, incomplete, approximate, erroneous, or imprecise. Currently, the bibliography concentrates almost exclusively on database and knowledge-base systems, with few bl]References on other kinds of information systems.		Dyreson, Curtis E.	Uncertainty Management in Information Systems	https://doi.org/10.1007/978-1-4615-6245-0_15		413--458	"""@Inbook{Dyreson1997,
    author = ""Dyreson, Curtis E."",
    editor = ""Motro, Amihai and Smets, Philippe"",
    title = ""A Bibliography on Uncertainty Management in Information Systems"",
    bookTitle = ""Uncertainty Management in Information Systems: From Needs to Solutions"",
    year = ""1997"",
    publisher = ""Springer US"",
    address = ""Boston, MA"",
    pages = ""413--458"",
    abstract = ""This is an evolving bibliography of documents on uncertainty and imprecision in information systems. By uncertainty and imprecision, we mean the representation of and query support for information that is fuzzy, unknown, partially known, vague, uncertain, probabilistic, indefinite, disjunctive, possible, maybe, incomplete, approximate, erroneous, or imprecise. Currently, the bibliography concentrates almost exclusively on database and knowledge-base systems, with few bl]References on other kinds of information systems."",
    isbn = ""978-1-4615-6245-0"",
    doi = ""10.1007/978-1-4615-6245-0\_15"",
    url = ""https://doi.org/10.1007/978-1-4615-6245-0\_15""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Springer Link		A bibliography on uncertainty management in information systems	https://link.springer.com/chapter/10.1007/978-1-4615-6245-0_15	Springer US	nan; Keywords; References
101	TrustSE	The management of uncertainty in software development	"There are at least two different kinds of uncertainty in software development. Both are centered around software specification. The first type has to do with the uncertainty as to whether or not a given description is truly a specification of the software to be developed. The second type of uncertainty has to do with the lifetime of a valid specification. Most programs have parts that are a mixture of the two types. A high-level view of both types of uncertainty in specification is presented to explain the problems inherent in software development and maintenance. The view supports the need for prototyping throughout software development and maintenance.<
>"	Software development management; Uncertainty; Programming; Software maintenance; Software prototyping; Prototypes; Costs; Software systems; Milling machines; Heart	Luqi; D. Cooke	[1992] Proceedings. The Sixteenth Annual International Computer Software and Applications Conference	https://doi.org/10.1109/CMPSAC.1992.217575	"1.B. Boehm, ""A Spiral Model of Software Development and Enhancement"", Computer, vol. 21, no. 5, pp. 61-72, May 1988. View Article  Google Scholar; 2.E. Borison, Program Changes and Cost of Selective Recompilation, July 1989. Google Scholar; 3.R. Dunn, Software Quality Concepts and Plans, N.J., Englewood Cliffs:Prentice-Hall, pp. 142-145, 1990. Google Scholar; 4.M. M. Lehman, ""Programs Life Cycles and Laws of Software Evolution"", Proceedings of IEEE, vol. 68, no. 9, pp. 1060-1075, September 1980. View Article  Google Scholar; 5.M. A. Linton, J. M. Vlissides and P.R. Calder, ""Composing User Interfaces with InterViews"", IEEE Computer, February 1989. View Article  Google Scholar; 6.Luqi and M. Ketabchi, ""A Computer-Aided Prototyping System"", IEEE Transactions on Software Engineering, October 1988. View Article  Google Scholar; 7.B.,V. Luqi and R. Yeh, ""A Prototyping Language for Real-Time Software"", IEEE Trans. on Software Engineering, October 1988. View Article  Google Scholar; 8.H. Mills, ""Software Development"", IEEE Trans. on Software Eng., vol. SE-2, no. 4, pp. 265-273, Dec 1976. View Article  Google Scholar; 9.A. Mok, ""A Graph Based Computational Model for Real-Time Systems"", Proceedings of the IEEE International Conference on Parallel Processing, 1985. Google Scholar; 10.J. Nestor, ""Toward a Persistent Object Base"" in Advanced Programming Environments, Springer-Verlag, vol. 244, pp. 372-394, 1986. CrossRef  Google Scholar; 11.C. V. Ramamoorthy and E. Cooke, ""The Correspondence Between Methods of Artificial Intelligence and the Production and Maintenance of Evolutionary Software"", Proceedings of the 3rd International IEEE Conference on Tools for Artificial Intelligence, pp. 114-118, 1991-November. View Article  Google Scholar; 12.H. Raum, Design and Implementation of an Expert User Interface for the Computer Aided Prototyping System, Dec. 1988. Google Scholar; 13.R. Steigerwald, Luqi and J. McDowell, ""Rapid Prototyping with Reusable Software Components: Methodologies for Component Storage and Retrieval"", Journal of Software Engineering and Knowledge Engineering for publication. Google Scholar; 14.Transportable Applications Environment (TAE) Plus, National Aeronautics and Space Administration, Goddard Space Flight Center, January 1990. Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		The management of uncertainty in software development	https://ieeexplore.ieee.org/document/217575	IEEE	nan; Pages; Year; Bibtex
102	TrustSE	Software engineering in an uncertain world	In this paper, we argue that the reality of today's software systems requires us to consider uncertainty as a first-class concern in the design, implementation, and deployment of those systems. We further argue that this induces a paradigm shift, and a number of research challenges that must be addressed.	software architecture;  software design;  software engineering;  uncertainty; software architecture, software design, software engineering, uncertainty	Garlan, David	FoSER '10: Proceedings of the FSE/SDP workshop on Future of software engineering research	https://doi.org/10.1145/1882362.1882389		125-128	"""@inproceedings{10.1145/1882362.1882389,
    author = ""Garlan, David"",
    title = ""Software engineering in an uncertain world"",
    year = ""2010"",
    isbn = ""9781450304276"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1882362.1882389"",
    doi = ""10.1145/1882362.1882389"",
    abstract = ""In this paper, we argue that the reality of today's software systems requires us to consider uncertainty as a first-class concern in the design, implementation, and deployment of those systems. We further argue that this induces a paradigm shift, and a number of research challenges that must be addressed."",
    booktitle = ""Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research"",
    pages = ""125-128"",
    numpages = ""4"",
    keywords = ""software architecture, software design, software engineering, uncertainty"",
    location = ""Santa Fe, New Mexico, USA"",
    series = ""FoSER '10""
}
"""	Excluded	Excluded				2	ACM		Software engineering in an uncertain world	https://doi.org/10.1145/1882362.1882389	Association for Computing Machinery	nan; References; Link
103	TrustSE	Software risk management: Principles and practices	Identifying and dealing with risks early in development lessens long-term costs and helps preventsoftware disasters. It is easy to begin managing risks in your environment.	Principles and practices; Software risk management; Risk management; Principles and practices;  Software risk management;  Risk management	Boehm, Barry W.	Software Management, Seventh Edition	https://doi.org/10.1109/9780470049167.ch11	"1.J. Rothfeder, ""It's Late Costly and Incompetent -- But Try Firing a Computer System"", Business Week, pp. 164-165, Nov. 1988. Google Scholar; 2.B. W. Boehm, ""A Spiral Model of Software Development and Enhancement"", Computer, pp. 61-72, May 1988. View Article  Google Scholar; 3.B. W. Boehm, Software Risk Management, Calif., Los Almitos:CS Press, 1989. CrossRef  Google Scholar; 4.R. N. Charette, Software Engineering Risk Analysis and Management, New York:McGraw-Hill, 1989. Google Scholar; 5.Software Risk Abatement, 1988. Google Scholar"	365 - 374	"""@BOOK{Boehm2007365,
    author = ""Boehm, Barry W."",
    title = ""Software risk management: Principles and practices"",
    year = ""2007"",
    journal = ""Software Management, Seventh Edition"",
    pages = ""365 - 374"",
    doi = ""10.1109/9780470049167.ch11"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85036620208\&doi=10.1109\%2f9780470049167.ch11\&partnerID=40\&md5=257925735c882217d3342fa57aa0ec97"",
    affiliations = ""Defense Advanced Research Projects Agency, 1400 Wilson Blvd, Arlington, 22209-2308, VA, United States"",
    abstract = ""Identifying and dealing with risks early in development lessens long-term costs and helps preventsoftware disasters. It is easy to begin managing risks in your environment. (c) 2006 by the IEEE Computer Society. All rights reserved."",
    keywords = ""Principles and practices; Software risk management; Risk management"",
    publisher = ""Wiley-IEEE Press"",
    isbn = ""978-047004916-7; 0471775622; 978-047177562-1"",
    language = ""English"",
    abbrev_source_title = ""Softw. Management, Seventh Edition"",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software risk management: principles and practices	https://ieeexplore.ieee.org/document/62930	Wiley-IEEE Press	
104	TrustSE	Uncertainty: A meta-property of software	Uncertainty pervades all aspects of engineering, and its management is of paramount importance. In software engineering, uncertainty can occur at many levels. It can appear in the software artifacts including requirements specifications, designs, and the code itself. Uncertainty can also manifest in the way we use tools, and in the engineering practices employed. It is even present in the life cycle methodologies we employ. In short, uncertainty is a persistent, negative quality of both the software and the processes that rendered it. Unfortunately, t is too easy, but often the case, that software engineers ignore issues of uncertainty or overlook them as they become marginalized within other abstractions. In this paper we propose uncertainty as a persistent software quality attribute and examine several approaches for modeling that uncertainty. Finally, we offer suggestions for future work in this regard.	Codes (standards); Computer simulation; Engineering research; Quality of service; Software engineering; Specifications; Metaproperties; Software artifacts; Software quality; Uncertainty; Computer software; Codes (standards);  Computer simulation;  Engineering research;  Quality of service;  Software engineering;  Specifications;  Metaproperties;  Software artifacts;  Software quality;  Uncertainty;  Computer software	Laplante, Phillip A.; Neill, Colin J.	Proceedings of the 2005 29th Annual IEEE/NASA Software Engineering Workshop, SEW'05	https://doi.org/10.1109/SEW.2005.48	"1.R.C. Martin, Agile Software Development: Principles, Patterns, and Practices, Prentice Hall, 2003. Google Scholar; 2.F.H. Knight. Risk, Uncertainty, and Profit, Houghton Mifflin, Boston, MA, 1921. View Article  Google Scholar; 3.A.B. Tucker, Jr. (editor-in-chief), The Computer Science and Engineering Handbook, CRC Press, Boca Raton, FL, 1996. Google Scholar; 4.P.A. Laplante. ""The Heisenberg Uncertainty Principle and its Application to Software Engineering,"" ACM Software Engineering Notes, vol. 15, no. 5, October 1991, pp. 21-22. CrossRef  Google Scholar; 5.S.M. Yacoub, H.H. Ammar, and A. Mill. ""A UML Model for Analyzing Software Quality,"" Proc. International Conference on Reliability and Quality in Design, ISSAT'2000, Orlando, FL, August 2000, pp. 85-89. Google Scholar; 6.P. Hannah, A. Stair, J. Esteban, C. Bell, P. Civico, ""Dempster- Shaffer Introduction,"" Available from: www.eng.man.au.uk/mech/merg/ research/datafusion.org.uk/techniques/dempster.html, last accessed 12/15/04. Google Scholar; 7.N. Fenton, P. Krause and M. Neil, ""Software Measurement: Uncertainty and Causal Modeling,"" IEEE Software, vol. 19, no. 4, July/August 2002, pp. 116-122. View Article  Google Scholar; 8.Z. Pawlak, Rough Sets: Theoretical Aspects of Reasoning about Data. Kluwer Academic Publishers, Boston, MA, 1991. Google Scholar; 9.P.A. Laplante and D. Sinha, ""Handling Uncertain Data in Imaging Systems,"" IEEE Transactions on Systems, Man and Cybernetics, vol. 26, no. 1, February 1996, pp. 21-28. Google Scholar"	228 - 233	"""@CONFERENCE{Laplante2005228,
    author = ""Laplante, Phillip A. and Neill, Colin J."",
    title = ""Uncertainty: A meta-property of software"",
    year = ""2005"",
    journal = ""Proceedings of the 2005 29th Annual IEEE/NASA Software Engineering Workshop, SEW'05"",
    volume = ""2005"",
    pages = ""228 - 233"",
    doi = ""10.1109/SEW.2005.48"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33646940814\&doi=10.1109\%2fSEW.2005.48\&partnerID=40\&md5=eeb8314333e70dfd842d30564168cce6"",
    affiliations = ""Engineering Division, Great Valley Graduate Center, Pennsylvania State University, Malvern, PA 19355, United States"",
    abstract = ""Uncertainty pervades all aspects of engineering, and its management is of paramount importance. In software engineering, uncertainty can occur at many levels. It can appear in the software artifacts including requirements specifications, designs, and the code itself. Uncertainty can also manifest in the way we use tools, and in the engineering practices employed. It is even present in the life cycle methodologies we employ. In short, uncertainty is a persistent, negative quality of both the software and the processes that rendered it. Unfortunately, t is too easy, but often the case, that software engineers ignore issues of uncertainty or overlook them as they become marginalized within other abstractions. In this paper we propose uncertainty as a persistent software quality attribute and examine several approaches for modeling that uncertainty. Finally, we offer suggestions for future work in this regard. (c) 2005 IEEE."",
    author_keywords = ""Software quality; Uncertainty"",
    keywords = ""Codes (standards); Computer simulation; Engineering research; Quality of service; Software engineering; Specifications; Metaproperties; Software artifacts; Software quality; Uncertainty; Computer software"",
    correspondence_address = ""P.A. Laplante; Engineering Division, Great Valley Graduate Center, Pennsylvania State University, Malvern, PA 19355, United States; email: plaplante@psu.edu"",
    isbn = ""0769523064; 978-076952306-4"",
    language = ""English"",
    abbrev_source_title = ""Proc. 29th Annu. IEEE/NASA Softw. Eng. Workshop"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; Conference name: 2005 29th Annual IEEE/NASA Software Engineering Workshop, SEW'05; Conference date: 6 April 2005 through 7 April 2005; Conference code: 68119""
}
"""	Included	Included				2	Scopus Signed In		Uncertainty: A meta-property of software	https://ieeexplore.ieee.org/document/1521211	IEEE	
105	TrustSE	Understanding software project risk: a cluster analysis	Understanding software project risk can help in reducing the incidence of failure. Building on prior work, software project risk was conceptualized along six dimensions. A questionnaire was built and 507 software project managers were surveyed. A cluster analysis was then performed to identify aspects of low, medium, and high risk projects. An examination of risk dimensions across the levels revealed that even low risk projects have a high level of complexity risk. For high risk projects, the risks associated with requirements, planning and control, and the organization become more obvious. The influence of project scope, sourcing practices, and strategic orientation on project risk dimensions was also examined. Results suggested that project scope affects all dimensions of risk, whereas sourcing practices and strategic orientation had a more limited impact. A conceptual model of project risk and performance was presented.	software project risk; cluster analysis; project management; outsourcing; scope; software project risk;  cluster analysis;  project management;  outsourcing;  scope	Wallace, L; Keil, M; Rai, A	INFORMATION \& MANAGEMENT	https://doi.org/10.1016/j.im.2003.12.007		115-125	"""@article{WOS:000224489700009,
    Author = ""Wallace, L and Keil, M and Rai, A"",
    Title = ""Understanding software project risk: a cluster analysis"",
    Journal = ""INFORMATION \\& MANAGEMENT"",
    Year = ""2004"",
    Volume = ""42"",
    Number = ""1"",
    Pages = ""115-125"",
    Month = ""DEC"",
    Abstract = ""Understanding software project risk can help in reducing the incidence of failure. Building on prior work, software project risk was conceptualized along six dimensions. A questionnaire was built and 507 software project managers were surveyed. A cluster analysis was then performed to identify aspects of low, medium, and high risk projects. An examination of risk dimensions across the levels revealed that even low risk projects have a high level of complexity risk. For high risk projects, the risks associated with requirements, planning and control, and the organization become more obvious. The influence of project scope, sourcing practices, and strategic orientation on project risk dimensions was also examined. Results suggested that project scope affects all dimensions of risk, whereas sourcing practices and strategic orientation had a more limited impact. A conceptual model of project risk and performance was presented. (C) 2004 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Virginia Polytech Inst \\& State Univ, Dept Accounting \\& Informat Syst, Blacksburg, VA 24061 USA. Virginia Polytech Inst \\& State Univ, Dept Accounting \\& Informat Syst, Blacksburg, VA 24061 USA. Georgia State Univ, J Mack Robinson Coll Business, Dept Comp Informat Syst, Atlanta, GA 30303 USA. Georgia State Univ, J Mack Robinson Coll Business, Elect Commerce Inst, Atlanta, GA 30303 USA."",
    DOI = ""10.1016/j.im.2003.12.007"",
    ISSN = ""0378-7206"",
    EISSN = ""1872-7530"",
    Keywords = ""software project risk; cluster analysis; project management; outsourcing; scope"",
    Keywords-Plus = ""SYSTEM-DEVELOPMENT; USER INVOLVEMENT; INFORMATION; MANAGEMENT; UNCERTAINTY; SUCCESS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""wallace1@vt.edu arunrai@gsu.edu"",
    Affiliations = ""Virginia Polytechnic Institute \\& State University; University System of Georgia; Georgia State University; University System of Georgia; Georgia State University"",
    ORCID-Numbers = ""Rai, Arun/0000-0002-3655-7543"",
    Number-of-Cited-References = ""62"",
    Times-Cited = ""257"",
    Usage-Count-Last-180-days = ""4"",
    Usage-Count-Since-2013 = ""76"",
    Journal-ISO = ""Inf. Manage."",
    Doc-Delivery-Number = ""862KO"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000224489700009"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Understanding software project risk: a cluster analysis	https://www.webofscience.com/wos/woscc/full-record/WOS:000224489700009	ELSEVIER	nan; References
106	TrustSE	Selecting the optimal software solution under conditions of uncertainty	During the past decade, to a greater extent, companies undertake projects with virtual teams - teams composed of temporary employees from different parts of the world, relying heavily on virtual communication. The aim of this paper is to show a mathematical model of decision-making under conditions of uncertainty using the Laplace's criterion for choosing the right software solution for virtual teams. To do this, the following software solutions were analyzed: Any Meeting, Caltech's EVO, Live Meeting and Skype Free. Even it was mathematically demonstrated that certain software programs are the optimal solutions for defining the collaborative environment of virtual teams, in practice there have to be consider other specific conditions and/or requirements.	Virtual team; software tool; collaboration; Laplace's criterion; Virtual team;  software tool;  collaboration;  Laplace's criterion	Aldea, Cosmina Carmen; Olariu, Cristian	2ND WORLD CONFERENCE ON BUSINESS, ECONOMICS AND MANAGEMENT	https://doi.org/10.1016/j.sbspro.2013.12.467		333-337	"""@inproceedings{WOS:000335570200056,
    Author = ""Aldea, Cosmina Carmen and Olariu, Cristian"",
    Editor = ""Iacob, AI"",
    Title = ""Selecting the optimal software solution under conditions of uncertainty"",
    Booktitle = ""2ND WORLD CONFERENCE ON BUSINESS, ECONOMICS AND MANAGEMENT"",
    Series = ""Procedia Social and Behavioral Sciences"",
    Year = ""2014"",
    Volume = ""109"",
    Pages = ""333-337"",
    Note = ""2nd World Conference on Business, Economics and Management (BEM), Antalya, TURKEY, APR 25-28, 2013"",
    Organization = ""SciencePark Res, Org \\& Counseling Ltd; Acad World Educ \\& Res Ctr; Hacettepe Univ; Eastern Mediterranean Univ; Near E Univ; Zirve Univ"",
    Abstract = ""During the past decade, to a greater extent, companies undertake projects with virtual teams - teams composed of temporary employees from different parts of the world, relying heavily on virtual communication. The aim of this paper is to show a mathematical model of decision-making under conditions of uncertainty using the Laplace's criterion for choosing the right software solution for virtual teams. To do this, the following software solutions were analyzed: Any Meeting, Caltech's EVO, Live Meeting and Skype Free. Even it was mathematically demonstrated that certain software programs are the optimal solutions for defining the collaborative environment of virtual teams, in practice there have to be consider other specific conditions and/or requirements. (C) 2014 The Authors. Published by Elsevier Ltd."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""SARA BURGERHARTSTRAAT 25, PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Aldea, Cosmina Carmen; Olariu, Cristian, Politehn Univ Timisoara, Fac Management, Timisoara 300191, Romania."",
    DOI = ""10.1016/j.sbspro.2013.12.467"",
    ISSN = ""1877-0428"",
    Keywords = ""Virtual team; software tool; collaboration; Laplace's criterion"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Business; Economics; Management"",
    Author-Email = ""cosmina.aldea@yahoo.com"",
    Affiliations = ""Universitatea Politehnica Timisoara"",
    ResearcherID-Numbers = ""Florica, Cosmina/IWE-1259-2023"",
    Number-of-Cited-References = ""6"",
    Times-Cited = ""3"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""4"",
    Doc-Delivery-Number = ""BA4FD"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Social Science \&amp; Humanities (CPCI-SSH)"",
    Unique-ID = ""WOS:000335570200056"",
    OA = ""gold"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Selecting the optimal software solution under conditions of uncertainty	https://www.webofscience.com/wos/woscc/full-record/WOS:000335570200056	ELSEVIER SCIENCE BV	nan; References
107	TrustSE	Learning to live with uncertainty in our software	Software measurement has been most successful in evaluating and predicting dependability, particularly reliability. There are, however, severe limitations to the levels of reliability that can be assured in ways that are scientifically meaningful. The existence of these limits has serious social implications if we wish to place great dependence upon computer systems - for example in some safety-critical applications.	Accident prevention; Computer applications; Computer systems; Reliability; Social aspects; Software engineering; Safety critical applications; Software measurement; Computer software; Accident prevention;  Computer applications;  Computer systems;  Reliability;  Social aspects;  Software engineering;  Safety critical applications;  Software measurement;  Computer software	Littlewood, Bev	International Software Metrics Symposium, Proceedings	https://doi.org/10.1109/METRIC.1994.344234		2 - 9	"""@CONFERENCE{Littlewood19942,
    author = ""Littlewood, Bev"",
    title = ""Learning to live with uncertainty in our software"",
    year = ""1994"",
    journal = ""International Software Metrics Symposium, Proceedings"",
    pages = ""2 - 9"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028749373\&partnerID=40\&md5=cb15e3a2045f45992f42bae2e0ad1d8d"",
    affiliations = ""City Univ, London, United Kingdom"",
    abstract = ""Software measurement has been most successful in evaluating and predicting dependability, particularly reliability. There are, however, severe limitations to the levels of reliability that can be assured in ways that are scientifically meaningful. The existence of these limits has serious social implications if we wish to place great dependence upon computer systems - for example in some safety-critical applications."",
    keywords = ""Accident prevention; Computer applications; Computer systems; Reliability; Social aspects; Software engineering; Safety critical applications; Software measurement; Computer software"",
    coden = ""00171"",
    language = ""English"",
    abbrev_source_title = ""Int Software Metrics Symp Proc"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 5; Conference name: Proceedings of the 2nd International Software Metrics Symposium; Conference date: 24 October 1994 through 26 October 1994; Conference code: 42309""
}
"""	Included	Included				2	Scopus Signed In		Learning to Live with Uncertainty in our Software	https://ieeexplore.ieee.org/document/344234	IEEE	nan; References
108	TrustSE	Software Size Uncertainty: The Effects of Growth and Estimation Variability	"Examination of currently-accepted software cost, schedule, and defect estimation algorithms reveals a common acknowledgment that estimated software size is the single most influential independent variable. Unfortunately, ""The most important business decisions about a software project are made at the time of minimum knowledge and maximum uncertainty."" This includes minimum knowledge and maximum uncertainty about a software product's effec- tive size at the time when most estimating is done. Further complicating the issue of estimate uncertainty, in the au- thor's opinion, is the lack of a commonly-accepted taxon- omy. This paper proposes definitions for and the relation- ship between two key contributors to software size uncer- tainty: growth and estimation process variability, both be- ing distributions, the dispersions of which decrease as a function of project progress."		Mike Ross		https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=ea171e8ddfd28301416bde1510868869dca5a7f0		9	"""nan"""	Excluded	Excluded				2	Google Scholar		Software Size Uncertainty: The Effects of Growth and Estimation Variability	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=ea171e8ddfd28301416bde1510868869dca5a7f0	r2Estimating	
109	TrustSE	Optimizing the incremental delivery of software features under uncertainty	[Context] Lean and agile software development processes encourage delivering software in small increments so as to generate early business value, be able to adapt to changes, and reduce risks. Deciding what to build in each iteration is an important requirements engineering activity. The Incremental Funding Method (IFM) partly supports such decisions by identifying sequences of features delivery that optimize Net Present Value (NPV). [Problem] The IFM, however, does not deal explicitly with uncertainty and considers the maximization of NPV as the only objective, without explicit consideration for other objectives such as minimizing upfront investment costs and maximizing learning so as to reduce uncertainty and risk for future iterations. [Ideas] This short paper presents our ongoing research to address these limitations by extending IFM with Bayesian decision analysis to reason about uncertainty and with Pareto-based optimization to support decisions with respect multiple conflicting objectives. [Contributions] The paper presents the current version of our tool-supported extension of the IFM, illustrate it on a small example, and outlines our research agenda.	Computer software selection and evaluation; Decision making; Decision theory; Iterative methods; Requirements engineering; Software engineering; Uncertainty analysis; Agile software development; Agile software development process; Bayesian decision analysis; Conflicting objectives; Engineering decision analysis; Incremental delivery; Software features; Uncertainty and risks; Software design; Computer software selection and evaluation;  Decision making;  Decision theory;  Iterative methods;  Requirements engineering;  Software engineering;  Uncertainty analysis;  Agile software development;  Agile software development process;  Bayesian decision analysis;  Conflicting objectives;  Engineering decision analysis;  Incremental delivery;  Software features;  Uncertainty and risks;  Software design	Oni, Olawole; Letier, Emmanuel	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/978-3-319-30282-9_3		36 - 41	"""@ARTICLE{Oni201636,
    author = ""Oni, Olawole and Letier, Emmanuel"",
    editor = ""O., Pastor and M., Daneva"",
    title = ""Optimizing the incremental delivery of software features under uncertainty"",
    year = ""2016"",
    journal = ""Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)"",
    volume = ""9619"",
    pages = ""36 - 41"",
    doi = ""10.1007/978-3-319-30282-9\_3"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960916531\&doi=10.1007\%2f978-3-319-30282-9\_3\&partnerID=40\&md5=ab508de42396fa5a48057222a7d81f5d"",
    affiliations = ""Department of Computer Science, University College London, London, United Kingdom"",
    abstract = ""[Context] Lean and agile software development processes encourage delivering software in small increments so as to generate early business value, be able to adapt to changes, and reduce risks. Deciding what to build in each iteration is an important requirements engineering activity. The Incremental Funding Method (IFM) partly supports such decisions by identifying sequences of features delivery that optimize Net Present Value (NPV). [Problem] The IFM, however, does not deal explicitly with uncertainty and considers the maximization of NPV as the only objective, without explicit consideration for other objectives such as minimizing upfront investment costs and maximizing learning so as to reduce uncertainty and risk for future iterations. [Ideas] This short paper presents our ongoing research to address these limitations by extending IFM with Bayesian decision analysis to reason about uncertainty and with Pareto-based optimization to support decisions with respect multiple conflicting objectives. [Contributions] The paper presents the current version of our tool-supported extension of the IFM, illustrate it on a small example, and outlines our research agenda. (c) Springer International Publishing Switzerland 2016."",
    author_keywords = ""Agile software development; Requirements engineering; Software engineering decision analysis"",
    keywords = ""Computer software selection and evaluation; Decision making; Decision theory; Iterative methods; Requirements engineering; Software engineering; Uncertainty analysis; Agile software development; Agile software development process; Bayesian decision analysis; Conflicting objectives; Engineering decision analysis; Incremental delivery; Software features; Uncertainty and risks; Software design"",
    correspondence_address = ""E. Letier; Department of Computer Science, University College London, London, United Kingdom; email: e.letier@ucl.ac.uk"",
    publisher = ""Springer Verlag"",
    issn = ""03029743"",
    isbn = ""978-331930281-2"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3; Conference name: 22nd International Working Conference on Requirements Engineering: Foundation for Software Quality, REFSQ 2016; Conference date: 14 March 2016 through 17 March 2016; Conference code: 168979""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Scopus Signed In		Optimizing the incremental delivery of software features under uncertainty	https://www.scopus.com/record/display.uri?eid=2-s2.0-84960916531&origin=resultslist&sort=r-f&src=s&sid=f17224b688e2b1f5a0356798b319219e&sot=b&sdt=b&s=TITLE%28optimizing+the+incremental+delivery+of+software+features+under+uncertainty%29&sl=81&sessionSearchId=f17224b688e2b1f5a0356798b319219e&relpos=0	Springer Verlag	nan; References
110	TrustSE	Reliability of composite software by different forms of uncertainty	In this paper we focus on the reliability of the software \& hardware system by different forms of uncertainty: in the probability, possibility, and probability-possibility contexts. A program as a component of the system executes an infinite loop and consists of independent subprograms. The efficient technique based on the integral and functional equations is used for reliability analysing with regard for both hardware failures and software faults. The obtained expressions for computing the system reliability and software performances are simple from computational point of view.		Utkin, LV; Gurov, SV	MICROELECTRONICS AND RELIABILITY	https://doi.org/10.1016/0026-2714(95)00189-1		1459-1473	"""@article{WOS:A1996VD93400014,
    Author = ""Utkin, LV and Gurov, SV"",
    Title = ""Reliability of composite software by different forms of uncertainty"",
    Journal = ""MICROELECTRONICS AND RELIABILITY"",
    Year = ""1996"",
    Volume = ""36"",
    Number = ""10"",
    Pages = ""1459-1473"",
    Month = ""OCT"",
    Abstract = ""In this paper we focus on the reliability of the software \\& hardware system by different forms of uncertainty: in the probability, possibility, and probability-possibility contexts. A program as a component of the system executes an infinite loop and consists of independent subprograms. The efficient technique based on the integral and functional equations is used for reliability analysing with regard for both hardware failures and software faults. The obtained expressions for computing the system reliability and software performances are simple from computational point of view. Copyright (C) 1996 Elsevier Science Ltd"",
    Publisher = ""PERGAMON-ELSEVIER SCIENCE LTD"",
    Address = ""THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD, ENGLAND OX5 1GB"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Utkin, LV (Corresponding Author), FOREST TECH ACAD,DEPT COMP SCI,INST PER 5,ST PETERSBURG 194018,RUSSIA."",
    DOI = ""10.1016/0026-2714(95)00189-1"",
    ISSN = ""0026-2714"",
    Keywords-Plus = ""FAULT-TREE ANALYSIS; POSSIBILITY CONTEXT; FUZZY RELIABILITY; SYSTEMS; PROBABILITY"",
    Research-Areas = ""Engineering; Science \\& Technology - Other Topics; Physics"",
    Web-of-Science-Categories = ""Engineering, Electrical \\& Electronic; Nanoscience \\& Nanotechnology; Physics, Applied"",
    ResearcherID-Numbers = ""Isaevich, Gurov/J-6504-2013 Utkin, Lev/F-6480-2013"",
    ORCID-Numbers = ""Gurov, Sergey/0000-0001-5486-1357 Utkin, Lev/0000-0002-5637-1420"",
    Number-of-Cited-References = ""16"",
    Times-Cited = ""2"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""0"",
    Journal-ISO = ""Microelectron. Reliab."",
    Doc-Delivery-Number = ""VD934"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:A1996VD93400014"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Reliability of composite software by different forms of uncertainty	https://www.webofscience.com/wos/woscc/full-record/WOS:A1996VD93400014	PERGAMON-ELSEVIER SCIENCE LTD	nan; Keywords; References
111	TrustSE	Uncertainty Explicit Assessment of Off-the-Shelf Software: Selection of an Optimal Diverse Pair	Assessment of software COTS components is an essential part of component-based software development. Sub-optimal selection of components may lead to solutions with low quality. The assessment is based on incomplete knowledge about the COTS components themselves and other aspects, which may affect the choice such as the vendor's credentials, etc. We argue in favor of assessment methods in which uncertainty is explicitly represented (`uncertainty explicit' methods) using probability distributions. We have adapted a model (developed elsewhere by Littlewood, B. et al. (2000)) for assessment of a pair of COTS components to take account of the fault (bug) logs that might be available for the COTS components being assessed. We also provide empirical data from a study we have conducted with off-the-shelf database servers, which illustrate the use of the method	Uncertainty; Programming; Probability distribution; Databases; Costs; Software reliability; Testing; Fault tolerance; Software design; Job production systems; Optimal Pair; Component Of Assessment; Database Server; Pair Of Components; Posterior Probability; Conditional Distribution; Values Of Components; Multivariate Distribution; Dependability; Probability Of Failure; Inference Procedure; Divide-and-conquer; Requirements Engineering; Mathematical Details; Attribute Values; Single Server; SQL Server; Prior Definition; Bug Reports	Ilir Gashi; Peter Popov	2007 Sixth International IEEE Conference on Commercial-off-the-Shelf (COTS)-Based Software Systems (ICCBSS'07)	https://doi.org/10.1109/ICCBSS.2007.44	1.Ncube, C. and N. Maiden. PORE Procurement Oriented Requirements Engineering Method for the Component-Based Systems Engineering Development Paradigm, in International Workshop on Component-Based Software Engineering. 1999. Google Scholar; 2.Kontio, J., et al. A COTS Selection Method and Experiences of Its Use. in Twentieth Annual Software Engineering Workshop,NASA Goddard Space Flight Center. 1995. Greenbelt, Maryland. Google Scholar; 3.Jeanrenaud, J. and P. Romanazzi. Software Product Evaluation: A Methodological Approach, in Software Quality Management II: Building Software into Quality. 1994 p. 55-69. Google Scholar; 4.Tran, V. and D.-B. Liu. A Risk Mitigating Model for the Development of Reliable and Maintainable Large-Scale Commercial-Off-The-Shelf Integrated Software Systems. in Proceedings of the 1997 Annual Reliability and Maintainability Symposium (RAMS). 1997 p. 361-367. View Article  Google Scholar; 5.Ochs, M., et al. A Method for Efficient Measurement-based COTS Assessment and Selection -Method Description and Evaluation Results, in Proceedings of the 7th International Symposium on Software Metrics. 2001. London, England: IEEE Computer Society p. 285-294. View Article  Google Scholar; 6.Alves, C. and J. Castro. CRE: A Systematic Method for COTS Components Selection, in XV Brazilian Symposium on Software Engineering (SBES). 2001. Rio de Janeiro, Brazil. CrossRef  Google Scholar; 7.Phillips, B.C. and S.M. Polen, Add Decision Analysis to Your COTS Selection Process. 2002, http://www.stsc.hill.af.mil/crosstalk/2002/04/ phillips.html Google Scholar; 8.Boehm, B., et al. Composable Process Elements for Developing COTS-Based Applications, in Proceedings 2003 International Symposium on Empirical Software Engineering. ISESE2003. 2003: ACM-IEEE p. 8-17. View Article  Google Scholar; 9.Dean, J., An Evaluation Method for COTS Software Products. 2000, http://www.stc-online.org/cdrom/cdrom2000/webpages/johndean/paper.pdf.; 10.Kunda, D. and L. Brooks. Applying Social-Technical Approach for COTS Selection, in Proceedings of the 4th UKAIS Conference. 1999. University of York, England. Google Scholar; 11.Gregor, S., J. Hutson, and C. Oresky. Storyboard Process to Assist in Requirements Verification and Adaptation to Capabilities Inherent in COTS, in ICCBSS 2002. 2002. Florida, USA: Springer-Verlag p. 132-141. CrossRef  Google Scholar; 12.Burgues, X., et al. Combined Selection of COTS Components, in ICCBSS 2002. 2002. Florida, USA: Springer-Verlag p. 54-64. CrossRef  Google Scholar; 13.Comella-Dorda, S., et al. A Process for COTS Software Product Evaluation, in ICCBSS 2002. 2002. Florida, USA: Springer-Verlag p. 86-92. CrossRef  Google Scholar; 14.Ruhe, G. Intelligent Support for Selection of COTS Products, in Web, Web-Services, and Database Systems. 2003: Springer p. 34-45. Google Scholar; 15.Littlewood, B. and L. Strigini, Validation of Ultra-High Dependability for Software-based Systems. Communications of the ACM, 1993. 36(11): p. 69-80. CrossRef  Google Scholar; 16.Littlewood, B., Popov, P. and Strigini, L., Modelling software design diversity - a review. ACM Computing Surveys, 2001. 33(2): p. 177-208. CrossRef  Google Scholar; 17.Littlewood, B., P. Popov, and L. Strigini. Assessment of the Reliability of Fault-Tolerant Software: a Bayesian Approach, in Proc. 19th International Conference on Computer Safety, Reliability and Security, SAFECOMP2000. 2000. Rotterdam, the Netherlands: Springer p. 294-308. CrossRef  Google Scholar; 18.Lewis, P., et al., Lessons Learned in Developing Commercial Off-The-Shelf (COTS) Intensive Software Systems. 2000, Software Engineering Resource Center. Google Scholar; 19.Dean, J. and M. Vidger. COTS Software Evaluation Techniques, in Proceedings of The NATO Information Systems Technology. Symposium on Commercial Off-theshelf Products in Defence Applications. 2000. Brussels, Belgium. Google Scholar; 20.Wright, D. and K.-Y. Cai, Representing Uncertainty for Safety Critical Systems, PDCS2 Tech. Rep. 135. Center for Software Reliability, City University, London,. 1994. Google Scholar; 21.Littlewood, B. and D. Wright, Some conservative stopping rules for the operational testing of safetycritical software. IEEE Transactions on Software Engineering, 1997. 23(11): p. 673-683. View Article  Google Scholar; 22.Jeng, B. and E.J. Weyuker, Analyzing partition testing strategies. IEEE Transactions on Software Engineering, 1991. 17(7): p. 703-711. View Article  Google Scholar; 23.Hamlet, D. and R. Taylor, Partition testing does not inspire confidence. IEEE Transactions on Software Engineering, 1990. 16(12): p. 1402-1411. View Article  Google Scholar; 24.Musa, J.D., Operational Profiles in Software-Reliability Engineering. IEEE Software, 1993. March: p. 14-32. View Article  Google Scholar; 25.Gashi, I., Popov, P., Stankovic, V., Uncertainty Concious Assessment of Off-The-Shelf Software. 2006, http://www.csr.city.ac.uk/people/ilir. gashi/COTS/. Google Scholar; 26.Gashi, I., Popov, P., Strigini, L. Fault diversity among off-the-shelf SQL database servers, in DSN04 International Conference on Dependable Systems and Networks. 2004. Florence, Italy: IEEE Computer Society Press p. 389-398. View Article  Google Scholar; 27.ObjectWeb, C-JDBC. 2006 http://c-jdbc.objectweb.org/. Google Scholar; 28.Gray, J. Why do computers stop and what can be done about it? in 6th International Conference on Reliability and Distributed Databases. 1987. Google Scholar; 29.Chandra, S. and P.M. Chen. Whither Generic Recovery from Application Faults? A Fault Study using Open-Source Software, in DSN 2000, International Conference on Dependable Systems and Networks. 2000. NY, USA: IEEE Computer Society Press p. 97-106. View Article  Google Scholar; 30.Littlewood, B. and D.R. Miller, Conceptual Modelling of Coincident Failures in Multi-Version Software. IEEE Transactions on Software Engineering, 1989. SE-15(12): p. 1596-1614. View Article  Google Scholar			Excluded	Excluded				2	IEEE		Uncertainty explicit assessment of off-the-shelf software: Selection of an optimal diverse pair	https://ieeexplore.ieee.org/document/4127304	IEEE	nan; Pages; Year; Bibtex
112	TrustSE	Certain trends in uncertainty and sensitivity analysis: An overview of software tools and techniques	Uncertainty and sensitivity analysis (UA/SA) aid in assessing whether model complexity is warranted and under what conditions. To support these analyses a variety of software tools have been developed to provide UA/SA methods and approaches in a more accessible manner. This paper applies a hybrid bibliometric approach using 11 625 publications sourced from the Web of Science database to identify software packages for UA/SA used within the environmental sciences and to synthesize evidence of general research trends and directions. Use of local sensitivity approaches was determined to be prevalent, although adoption of global sensitivity analysis approaches is increasing. We find that interest in uncertainty management is also increasing, particularly in improving the reliability and effectiveness of UA/SA. Although available software is typically open-source and freely available, uptake of software tools is apparently slow or their use is otherwise under-reported. Longevity is also an issue, with many of the identified software appearing to be unmaintained. Improving the general usability and accessibility of UA/SA tools may help to increase software longevity and the awareness and adoption of purpose-appropriate methods. Usability should be improved so as to lower the ``cost of adoption{''} of incorporating the software in the modelling workflow. An overview of available software is provided to aid modelers in choosing an appropriate software tool for their purposes. Code and representative data used for this analysis can be found at https://github.com/frog7/uasa-trends (10.5281/zenodo.3406946).	Uncertainty analysis; Sensitivity analysis; Analysis software packages; Bibliometric trends; Environmental modeling; Uncertainty analysis;  Sensitivity analysis;  Analysis software packages;  Bibliometric trends;  Environmental modeling	Douglas-Smith, Dominique; Iwanaga, Takuya; Croke, Barry F. W.; Jakeman, Anthony J.	ENVIRONMENTAL MODELLING \& SOFTWARE	https://doi.org/10.1016/j.envsoft.2019.104588			"""@article{WOS:000510853300004,
    Author = ""Douglas-Smith, Dominique and Iwanaga, Takuya and Croke, Barry F. W. and Jakeman, Anthony J."",
    Title = ""Certain trends in uncertainty and sensitivity analysis: An overview of software tools and techniques"",
    Journal = ""ENVIRONMENTAL MODELLING \\& SOFTWARE"",
    Year = ""2020"",
    Volume = ""124"",
    Month = ""FEB"",
    Abstract = ""Uncertainty and sensitivity analysis (UA/SA) aid in assessing whether model complexity is warranted and under what conditions. To support these analyses a variety of software tools have been developed to provide UA/SA methods and approaches in a more accessible manner. This paper applies a hybrid bibliometric approach using 11 625 publications sourced from the Web of Science database to identify software packages for UA/SA used within the environmental sciences and to synthesize evidence of general research trends and directions. Use of local sensitivity approaches was determined to be prevalent, although adoption of global sensitivity analysis approaches is increasing. We find that interest in uncertainty management is also increasing, particularly in improving the reliability and effectiveness of UA/SA. Although available software is typically open-source and freely available, uptake of software tools is apparently slow or their use is otherwise under-reported. Longevity is also an issue, with many of the identified software appearing to be unmaintained. Improving the general usability and accessibility of UA/SA tools may help to increase software longevity and the awareness and adoption of purpose-appropriate methods. Usability should be improved so as to lower the ``cost of adoption{''} of incorporating the software in the modelling workflow. An overview of available software is provided to aid modelers in choosing an appropriate software tool for their purposes. Code and representative data used for this analysis can be found at https://github.com/frog7/uasa-trends (10.5281/zenodo.3406946)."",
    Publisher = ""ELSEVIER SCI LTD"",
    Address = ""THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Iwanaga, T (Corresponding Author), Australian Natl Univ, Fenner Sch Environm \\& Soc, Integrated Catchment Assessment \\& Management Ctr, Canberra, ACT, Australia. Douglas-Smith, Dominique; Iwanaga, Takuya; Croke, Barry F. W.; Jakeman, Anthony J., Australian Natl Univ, Fenner Sch Environm \\& Soc, Integrated Catchment Assessment \\& Management Ctr, Canberra, ACT, Australia. Croke, Barry F. W., Australian Natl Univ, Math Sci Inst, Canberra, ACT, Australia."",
    DOI = ""10.1016/j.envsoft.2019.104588"",
    Article-Number = ""104588"",
    ISSN = ""1364-8152"",
    EISSN = ""1873-6726"",
    Keywords = ""Uncertainty analysis; Sensitivity analysis; Analysis software packages; Bibliometric trends; Environmental modeling"",
    Keywords-Plus = ""RAINFALL-RUNOFF MODELS; GLOBAL SENSITIVITY; ENVIRONMENTAL-MODELS; FRAMEWORK; EFFICIENT; SYSTEMS; ROBUST; QUANTIFICATION; IDENTIFICATION; OUTPUT"",
    Research-Areas = ""Computer Science; Engineering; Environmental Sciences \\& Ecology; Water Resources"",
    Web-of-Science-Categories = ""Computer Science, Interdisciplinary Applications; Engineering, Environmental; Environmental Sciences; Water Resources"",
    Author-Email = ""iwanaga.takuya@anu.edu.au"",
    Affiliations = ""Australian National University; Australian National University"",
    ResearcherID-Numbers = ""Iwanaga, Takuya/AAV-8984-2020 Croke, Barry/A-2275-2008 Jakeman, Anthony/P-6786-2014"",
    ORCID-Numbers = ""Jakeman, Anthony/0000-0001-5282-2215 Iwanaga, Takuya/0000-0001-8173-0870 Croke, Barry/0000-0001-9216-1554"",
    Funding-Acknowledgement = ""Australian Government Research Training Program (AGRTP) Scholarship; Hilda-John Endowment Fund"",
    Funding-Text = ""The corresponding author (second in the author list) is supported through an Australian Government Research Training Program (AGRTP) Scholarship, and a top-up scholarship from the Hilda-John Endowment Fund."",
    Number-of-Cited-References = ""95"",
    Times-Cited = ""60"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""37"",
    Journal-ISO = ""Environ. Modell. Softw."",
    Doc-Delivery-Number = ""KH7TU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000510853300004"",
    OA = ""hybrid"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Certain trends in uncertainty and sensitivity analysis: An overview of software tools and techniques	https://www.webofscience.com/wos/woscc/full-record/WOS:000510853300004	ELSEVIER SCI LTD	nan; References; Pages
113	TrustSE	Structural reliability software and calculation tools: a review	Structural reliability is now the leading method in the field of design optimization and assessment of civil engineering structures since it offers a rational treatment of the uncertainties in this kind of studies. However, structural reliability problems become more complex with time due to the high number of random variables leading to very complex numerical problems; moreover, they have to deal with complex finite element structural models. So, many reliability calculation tools and software packages have been developed for this purpose. This paper is an important reference for researchers and engineers to help them select the most suitable reliability calculation tool or software package; they will also know their most common area of use through the application examples mentioned for each tool. Several criteria are taken into account in the investigation such as the type of the structure, the probabilistic computational methods, and the budget assigned to the calculation tool.	Assessment; Design optimization; Structural reliability; Software; Tools; Assessment;  Design optimization;  Structural reliability;  Software;  Tools	Chehade, Fatima El Hajj; Younes, Rafic	INNOVATIVE INFRASTRUCTURE SOLUTIONS	https://doi.org/10.1007/s41062-020-0282-4			"""@article{WOS:000519632200003,
    Author = ""Chehade, Fatima El Hajj and Younes, Rafic"",
    Title = ""Structural reliability software and calculation tools: a review"",
    Journal = ""INNOVATIVE INFRASTRUCTURE SOLUTIONS"",
    Year = ""2020"",
    Volume = ""5"",
    Number = ""1"",
    Month = ""MAR 3"",
    Abstract = ""Structural reliability is now the leading method in the field of design optimization and assessment of civil engineering structures since it offers a rational treatment of the uncertainties in this kind of studies. However, structural reliability problems become more complex with time due to the high number of random variables leading to very complex numerical problems; moreover, they have to deal with complex finite element structural models. So, many reliability calculation tools and software packages have been developed for this purpose. This paper is an important reference for researchers and engineers to help them select the most suitable reliability calculation tool or software package; they will also know their most common area of use through the application examples mentioned for each tool. Several criteria are taken into account in the investigation such as the type of the structure, the probabilistic computational methods, and the budget assigned to the calculation tool."",
    Publisher = ""SPRINGER INT PUBL AG"",
    Address = ""GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Chehade, FE (Corresponding Author), Lebanese Univ, Fac Engn, Branch 3, Raf Hariri Campus, Beirut, Lebanon. Chehade, Fatima El Hajj; Younes, Rafic, Lebanese Univ, Fac Engn, Branch 3, Raf Hariri Campus, Beirut, Lebanon."",
    DOI = ""10.1007/s41062-020-0282-4"",
    Article-Number = ""29"",
    ISSN = ""2364-4176"",
    EISSN = ""2364-4184"",
    Keywords = ""Assessment; Design optimization; Structural reliability; Software; Tools"",
    Keywords-Plus = ""COMPUTER-PROGRAM; REINFORCEMENT CORROSION; FATIGUE RELIABILITY; CONCRETE BEAMS; STRIP FOOTINGS; SYSTEM; DESIGN; LIFETIME; BRIDGES; DEGRADATION"",
    Research-Areas = ""Engineering"",
    Web-of-Science-Categories = ""Engineering, Civil"",
    Author-Email = ""fatima.hage.chehadeh@gmail.com"",
    Affiliations = ""Lebanese University"",
    ResearcherID-Numbers = ""Younes, Rafic/O-6769-2017"",
    ORCID-Numbers = ""Hajj Chehade, Fatima/0000-0001-5979-6419 Younes, Rafic/0000-0002-7957-2057"",
    Number-of-Cited-References = ""127"",
    Times-Cited = ""9"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""34"",
    Journal-ISO = ""Innov. Infrastruct. Solut."",
    Doc-Delivery-Number = ""KU3ST"",
    Web-of-Science-Index = ""Emerging Sources Citation Index (ESCI)"",
    Unique-ID = ""WOS:000519632200003"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		Structural reliability software and calculation tools: a review	https://www.webofscience.com/wos/woscc/full-record/WOS:000519632200003	SPRINGER INT PUBL AG	nan; References; Pages
114	TrustSE	Deriving a usage-independent software quality metric	Context The extent of post-release use of software affects the number of faults, thus biasing quality metrics and adversely affecting associated decisions. The proprietary nature of usage data limited deeper exploration of this subject in the past. Objective To determine how software faults and software use are related and how, based on that, an accurate quality measure can be designed. Method Via Google Analytics we measure new users, usage intensity, usage frequency, exceptions, and release date and duration for complex proprietary mobile applications for Android and iOS. We utilize Bayesian Network and Random Forest models to explain the interrelationships and to derive the usage independent release quality measure. To increase external validity, we also investigate the interrelationship among various code complexity measures, usage (downloads), and number of issues for 520 NPM packages. We derived a usage-independent quality measure from these analyses, and applied it on 4430 popular NPM packages to construct timelines for comparing the perceived quality (number of issues) and our derived measure of quality during the lifetime of these packages. Results We found the number of new users to be the primary factor determining the number of exceptions, and found no direct link between the intensity and frequency of software usage and software faults. Crashes increased with the power of 1.02-1.04 of new user for the Android app and power of 1.6 for the iOS app. Release quality expressed as crashes per user was independent of other usage-related predictors, thus serving as a usage independent measure of software quality. Usage also affected quality in NPM, where downloads were strongly associated with numbers of issues, even after taking the other code complexity measures into consideration. Unlike in mobile case where exceptions per user decrease over time, for 45.8\% of the NPM packages the number of issues per download increase. Conclusions We expect our result and our proposed quality measure will help gauge release quality of a software more accurately and inspire further research in this area.	Software quality; Software usage; Software faults; Bayesian networks; NPM packages; Software quality;  Software usage;  Software faults;  Bayesian networks;  NPM packages	Dey, Tapajit; Mockus, Audris	EMPIRICAL SOFTWARE ENGINEERING	https://doi.org/10.1007/s10664-019-09791-w		1596-1641	"""@article{WOS:000516329100002,
    Author = ""Dey, Tapajit and Mockus, Audris"",
    Title = ""Deriving a usage-independent software quality metric"",
    Journal = ""EMPIRICAL SOFTWARE ENGINEERING"",
    Year = ""2020"",
    Volume = ""25"",
    Number = ""2, SI"",
    Pages = ""1596-1641"",
    Month = ""MAR"",
    Abstract = ""Context The extent of post-release use of software affects the number of faults, thus biasing quality metrics and adversely affecting associated decisions. The proprietary nature of usage data limited deeper exploration of this subject in the past. Objective To determine how software faults and software use are related and how, based on that, an accurate quality measure can be designed. Method Via Google Analytics we measure new users, usage intensity, usage frequency, exceptions, and release date and duration for complex proprietary mobile applications for Android and iOS. We utilize Bayesian Network and Random Forest models to explain the interrelationships and to derive the usage independent release quality measure. To increase external validity, we also investigate the interrelationship among various code complexity measures, usage (downloads), and number of issues for 520 NPM packages. We derived a usage-independent quality measure from these analyses, and applied it on 4430 popular NPM packages to construct timelines for comparing the perceived quality (number of issues) and our derived measure of quality during the lifetime of these packages. Results We found the number of new users to be the primary factor determining the number of exceptions, and found no direct link between the intensity and frequency of software usage and software faults. Crashes increased with the power of 1.02-1.04 of new user for the Android app and power of 1.6 for the iOS app. Release quality expressed as crashes per user was independent of other usage-related predictors, thus serving as a usage independent measure of software quality. Usage also affected quality in NPM, where downloads were strongly associated with numbers of issues, even after taking the other code complexity measures into consideration. Unlike in mobile case where exceptions per user decrease over time, for 45.8\\% of the NPM packages the number of issues per download increase. Conclusions We expect our result and our proposed quality measure will help gauge release quality of a software more accurately and inspire further research in this area."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Dey, T (Corresponding Author), Univ Tennessee, Dept Elect Engn \\& Comp Sci, Knoxville, TN 37996 USA. Dey, Tapajit, Univ Tennessee, Dept Elect Engn \\& Comp Sci, Knoxville, TN 37996 USA. Mockus, Audris, Univ Tennessee, Dept Elect Engn \\& Comp Sci, Digital Archeol \\& Evidence Engn, Knoxville, TN USA."",
    DOI = ""10.1007/s10664-019-09791-w"",
    EarlyAccessDate = ""FEB 2020"",
    ISSN = ""1382-3256"",
    EISSN = ""1573-7616"",
    Keywords = ""Software quality; Software usage; Software faults; Bayesian networks; NPM packages"",
    Keywords-Plus = ""EMPIRICAL-ANALYSIS; PREDICTION; NETWORKS; COMPLEXITY; DEFECTS; IMPACT; MODEL"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering"",
    Author-Email = ""tdey2@vols.utk.edu audris@utk.edu"",
    Affiliations = ""University of Tennessee System; University of Tennessee Knoxville; University of Tennessee System; University of Tennessee Knoxville"",
    ResearcherID-Numbers = ""Dey, Tapajit/AAY-9483-2020 Mockus, Audris/AEY-3361-2022"",
    ORCID-Numbers = ""Dey, Tapajit/0000-0002-1379-8539 Mockus, Audris/0000-0002-7987-7598"",
    Funding-Acknowledgement = ""National Science Foundation (U.S.) {[}1633437, 1901102]; Direct For Computer \\& Info Scie \\& Enginr; Div Of Information \\& Intelligent Systems {[}1901102, 1633437] Funding Source: National Science Foundation"",
    Funding-Text = ""This work was supported by the National Science Foundation (U.S.) under Grant No. 1633437 and Grant No. 1901102."",
    Number-of-Cited-References = ""73"",
    Times-Cited = ""14"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""4"",
    Journal-ISO = ""Empir. Softw. Eng."",
    Doc-Delivery-Number = ""KT0VU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000516329100002"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Deriving a usage-independent software quality metric	https://www.webofscience.com/wos/woscc/full-record/WOS:000516329100002	SPRINGER	nan; References
115	TrustSE	How successfully is open-source research software adopted? Results and implications of surveying the users of a sensitivity analysis toolbox	Open-source research software is an important element of open science. While the number of software packages made available by researchers is increasing, there has been little analysis about their subsequent uptake. We collect basic information about prospective users when sharing our open-source sensitivity analysis toolbox. This enabled us to carry out a user survey to assess adoption success - beyond simply counting download numbers. Survey results confirm the key role of extensive documentation to ensure adoption, to enhance learning and to enable research implementation. We found that workflows are an effective tool to guide users to tailor methods to their problems. However, workflows also need to include guidance for interpretation of results, otherwise sophisticated functionalities are overlooked as their value is unclear. Developing effective documentation requires significant time investment but is essential if the ultimate aim of open research software is to promote the adoption of scientific methodologies and best practices.	Research software; Open-source software; Reproducibility; Workflows; Software documentation; Research software;  Open-source software;  Reproducibility;  Workflows;  Software documentation	Pianosi, Francesca; Sarrazin, Fanny; Wagener, Thorsten	ENVIRONMENTAL MODELLING \& SOFTWARE	https://doi.org/10.1016/j.envsoft.2019.104579			"""@article{WOS:000510853300008,
    Author = ""Pianosi, Francesca and Sarrazin, Fanny and Wagener, Thorsten"",
    Title = ""How successfully is open-source research software adopted? Results and implications of surveying the users of a sensitivity analysis toolbox"",
    Journal = ""ENVIRONMENTAL MODELLING \\& SOFTWARE"",
    Year = ""2020"",
    Volume = ""124"",
    Month = ""FEB"",
    Abstract = ""Open-source research software is an important element of open science. While the number of software packages made available by researchers is increasing, there has been little analysis about their subsequent uptake. We collect basic information about prospective users when sharing our open-source sensitivity analysis toolbox. This enabled us to carry out a user survey to assess adoption success - beyond simply counting download numbers. Survey results confirm the key role of extensive documentation to ensure adoption, to enhance learning and to enable research implementation. We found that workflows are an effective tool to guide users to tailor methods to their problems. However, workflows also need to include guidance for interpretation of results, otherwise sophisticated functionalities are overlooked as their value is unclear. Developing effective documentation requires significant time investment but is essential if the ultimate aim of open research software is to promote the adoption of scientific methodologies and best practices."",
    Publisher = ""ELSEVIER SCI LTD"",
    Address = ""THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Pianosi, F (Corresponding Author), Univ Bristol, Dept Civil Engn, Bristol, Avon, England. Pianosi, Francesca; Sarrazin, Fanny; Wagener, Thorsten, Univ Bristol, Dept Civil Engn, Bristol, Avon, England. Pianosi, Francesca; Wagener, Thorsten, Univ Bristol, Cabot Inst, Bristol, Avon, England. Sarrazin, Fanny, UFZ Helmholtz Zentrum Umweltforsch, Dept Computat Hydrosyst, Leipzig, Germany."",
    DOI = ""10.1016/j.envsoft.2019.104579"",
    Article-Number = ""104579"",
    ISSN = ""1364-8152"",
    EISSN = ""1873-6726"",
    Keywords = ""Research software; Open-source software; Reproducibility; Workflows; Software documentation"",
    Keywords-Plus = ""ENVIRONMENTAL-MODELS"",
    Research-Areas = ""Computer Science; Engineering; Environmental Sciences \\& Ecology; Water Resources"",
    Web-of-Science-Categories = ""Computer Science, Interdisciplinary Applications; Engineering, Environmental; Environmental Sciences; Water Resources"",
    Author-Email = ""francesca.pianosi@bristol.ac.uk"",
    Affiliations = ""University of Bristol; University of Bristol; Helmholtz Association; Helmholtz Center for Environmental Research (UFZ)"",
    ResearcherID-Numbers = ""Sarrazin, Fanny J./Q-7739-2018 Wagener, Thorsten/C-2062-2008 Pianosi, Francesca/L-3154-2018"",
    ORCID-Numbers = ""Sarrazin, Fanny J./0000-0002-9928-9566 Wagener, Thorsten/0000-0003-3881-5849 Pianosi, Francesca/0000-0002-1516-2163"",
    Funding-Acknowledgement = ""UK Natural Environment Research Council (NERC) through the Consortium on Risk in the Environment: Diagnostics, Integration, Benchmarking, Learning and Elicitation (CREDIBLE) {[}NE/J017450/1]; UK Engineering and Physical Sciences Research Council (EPSRC) through a ``Living with Environmental Uncertainty{''} fellowship {[}EP/R007330/1]; EPSRC {[}EP/R007330/1] Funding Source: UKRI; NERC {[}NE/J017450/1] Funding Source: UKRI"",
    Funding-Text = ""The SAFE toolbox was initially supported by the UK Natural Environment Research Council (NERC) through the Consortium on Risk in the Environment: Diagnostics, Integration, Benchmarking, Learning and Elicitation (CREDIBLE) {[}NE/J017450/1]. F. Pianosi is currently supported by the UK Engineering and Physical Sciences Research Council (EPSRC) through a ``Living with Environmental Uncertainty{''} fellowship {[}EP/R007330/1]. The authors wish to thank three anonymous reviewers for their comments that helped improving the discussion of the survey results. The authors are also grateful to the many users of the SAFE toolbox who over the years provided their feedbacks and comments through individual contacts and by taking part in the survey presented in this paper."",
    Number-of-Cited-References = ""24"",
    Times-Cited = ""17"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""7"",
    Journal-ISO = ""Environ. Modell. Softw."",
    Doc-Delivery-Number = ""KH7TU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000510853300008"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		How successfully is open-source research software adopted? Results and implications of surveying the users of a sensitivity analysis toolbox	https://www.webofscience.com/wos/woscc/full-record/WOS:000510853300008	ELSEVIER SCI LTD	nan; References; Pages
116	TrustSE	Software Development Kits for Cloud Computing	High Performance processing is barely bidden in cloud service as due to sluggish and ineffective Virtual Machine message applied on the similar server process as fortunate with giant dormancy among distant components of cloud. The virtual machine cloud is based on device framework of similar hardware device. The contrivance enhanced ruined with Linux modernize at long back. The distributed memory is made with filled cloud amalgamation like newest version Cloud Ubuntu used for cloud storing and handling power of factors with transfer control protocol techniques that might appreciably upturn implementation. Conclusively, we take generated communique network that discharge replace transfer control network, raising more enactment development.	virtual machine cloud; cloud computing; transfer control protocol	Thirumurugan Shanmugam; Viji Vinod; S.V.Tresa Sangeetha; S.Radha Rammohan; T. Muralidharan	International Journal of Advanced Science and Technology	https://www.researchgate.net/profile/Thirumurugan-Shanmugam/publication/341643480_Software_Development_Kits_for_Cloud_Computing/links/5ecd045ca6fdcc79e6d9b253/Software-Development-Kits-for-Cloud-Computing.pdf		5069-5073	"""nan"""	Excluded	Excluded				2	Google Scholar		Software Development Kits for Cloud Computing	https://www.researchgate.net/profile/Thirumurugan-Shanmugam/publication/341643480_Software_Development_Kits_for_Cloud_Computing/links/5ecd045ca6fdcc79e6d9b253/Software-Development-Kits-for-Cloud-Computing.pdf	SERSC	
117	TrustSE	Development Problems of Trusted Software in Critical Information Infrastructure Systems	Due to the increasing complexity of information systems, information security threats associated with the presence of software vulnerabilities used in the information infrastructure systems become relevant. Today in order to protect against this type of threat one usually applies a range of measures implemented in the operation and maintenance of the software. At the same time, to ensure the required level of data protection, it is necessary to implement measures aimed at preventing vulnerabilities during the software life cycle. Secure software development is the basis for trust in information and communication technologies in the context of modern cyber threats. The aim of this paper is to summarize and analyze the problems of creating trusted software used in critical information infrastructure, and to find possible ways to solve them. The organizational and methodological aspects of the creation of trusted software used in critical information infrastructure are discussed, and the main problems, strategies and technologies to ensure the trust for various software components are described. The issue of trust for tools, system-wide and special software is still open both in methodological and organizational terms. To solve these problems, it is necessary to have a long-term state policy, development and clarification of legal documents that define common approaches and specific ways to ensure the reliability and security of the software used in critical information infrastructure, taking into account the actual conditions of their operation.	Automation; Critical infrastructures; Data privacy; Life cycle; Security of data; Software reliability; Automated systems; Certification; Information and Communication Technologies; Information infrastructures; Information security threats; Operation and maintenance; Secure software development; Trusted softwares; Software design; Automation;  Critical infrastructures;  Data privacy;  Life cycle;  Security of data;  Software reliability;  Automated systems;  Certification;  Information and Communication Technologies;  Information infrastructures;  Information security threats;  Operation and maintenance;  Secure software development;  Trusted softwares;  Software design	Grachkov, I.A.; Malyuk, A.A.	Mechanisms and Machine Science	https://doi.org/10.1007/978-3-030-33491-8_6		55 - 62	"""@ARTICLE{Grachkov202055,
    author = ""Grachkov, I.A. and Malyuk, A.A."",
    title = ""Development Problems of Trusted Software in Critical Information Infrastructure Systems"",
    year = ""2020"",
    journal = ""Mechanisms and Machine Science"",
    volume = ""80"",
    pages = ""55 - 62"",
    doi = ""10.1007/978-3-030-33491-8\_6"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078078118\&doi=10.1007\%2f978-3-030-33491-8\_6\&partnerID=40\&md5=d4bdce0edbae0f32b2e25880ba26c138"",
    affiliations = ""National Nuclear Research University MEPHI (Moscow Engineering Physics Institute), Kashirskoe Shosse, 31, Moscow, 115409, Russian Federation"",
    abstract = ""Due to the increasing complexity of information systems, information security threats associated with the presence of software vulnerabilities used in the information infrastructure systems become relevant. Today in order to protect against this type of threat one usually applies a range of measures implemented in the operation and maintenance of the software. At the same time, to ensure the required level of data protection, it is necessary to implement measures aimed at preventing vulnerabilities during the software life cycle. Secure software development is the basis for trust in information and communication technologies in the context of modern cyber threats. The aim of this paper is to summarize and analyze the problems of creating trusted software used in critical information infrastructure, and to find possible ways to solve them. The organizational and methodological aspects of the creation of trusted software used in critical information infrastructure are discussed, and the main problems, strategies and technologies to ensure the trust for various software components are described. The issue of trust for tools, system-wide and special software is still open both in methodological and organizational terms. To solve these problems, it is necessary to have a long-term state policy, development and clarification of legal documents that define common approaches and specific ways to ensure the reliability and security of the software used in critical information infrastructure, taking into account the actual conditions of their operation. (c) 2020, Springer Nature Switzerland AG."",
    author_keywords = ""Automated systems; Certification; Data protection; Information security; Trusted software"",
    keywords = ""Automation; Critical infrastructures; Data privacy; Life cycle; Security of data; Software reliability; Automated systems; Certification; Information and Communication Technologies; Information infrastructures; Information security threats; Operation and maintenance; Secure software development; Trusted softwares; Software design"",
    correspondence_address = ""I.A. Grachkov; National Nuclear Research University MEPHI (Moscow Engineering Physics Institute), Moscow, Kashirskoe Shosse, 31, 115409, Russian Federation; email: ignat958@gmail.com"",
    publisher = ""Springer Science and Business Media B.V."",
    issn = ""22110984"",
    language = ""English"",
    abbrev_source_title = ""Mech. Mach. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1""
}
"""	Excluded	Excluded			Studies that were books or gray literature	2	Scopus Signed In		Development Problems of Trusted Software in Critical Information Infrastructure Systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-85078078118&origin=resultslist&sort=r-f&src=s&sid=fb6050cb0300664c7208564a4ea46776&sot=b&sdt=b&s=TITLE%28development+problems+of+trusted+software+in+critical+information+infrastructure+systems%29&sl=94&sessionSearchId=fb6050cb0300664c7208564a4ea46776&relpos=0	Springer Science and Business Media B.V	nan; References
118	TrustSE	Fuzzy model estimation of the risk factors impact on the target of promotion of the software product	This article studies the application of fuzzy logic to the risk analysis of a new software product development and marketing in specific case of a small size IT company. Identification and analysis of external and internal risk factors show that this type of business activity could be evaluated as high-risk enterprise. So, the purpose of the paper is to develop robust method to evaluate probability of occurrence of major risk events and their impact on the company financial health. The fuzzy logic is used to estimate degrees of threat of each relevant risk factor due to lack of reliable statistical data. The novelty of proposed approach is the inclusion into the model the risk event time.	Fuzzy models; risk factors; software promotion; decision making; marketing analytics and product management; project management; Fuzzy models;  risk factors;  software promotion;  decision making;  marketing analytics and product management;  project management	Kataev, Michael; Bulysheva, Larisa; Xu, Lida; Ekhlakov, Yuri; Permyakova, Natalia; Jovanovic, Vukica	ENTERPRISE INFORMATION SYSTEMS	https://doi.org/10.1080/17517575.2020.1713407		797-811	"""@article{WOS:000509022500001,
    Author = ""Kataev, Michael and Bulysheva, Larisa and Xu, Lida and Ekhlakov, Yuri and Permyakova, Natalia and Jovanovic, Vukica"",
    Title = ""Fuzzy model estimation of the risk factors impact on the target of promotion of the software product"",
    Journal = ""ENTERPRISE INFORMATION SYSTEMS"",
    Year = ""2020"",
    Volume = ""14"",
    Number = ""6"",
    Pages = ""797-811"",
    Month = ""JUL 2"",
    Abstract = ""This article studies the application of fuzzy logic to the risk analysis of a new software product development and marketing in specific case of a small size IT company. Identification and analysis of external and internal risk factors show that this type of business activity could be evaluated as high-risk enterprise. So, the purpose of the paper is to develop robust method to evaluate probability of occurrence of major risk events and their impact on the company financial health. The fuzzy logic is used to estimate degrees of threat of each relevant risk factor due to lack of reliable statistical data. The novelty of proposed approach is the inclusion into the model the risk event time."",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Bulysheva, L (Corresponding Author), Old Dominion Univ, Dept Informat Technol \\& Decis Sci, Norfolk, VA 23529 USA. Kataev, Michael; Ekhlakov, Yuri; Permyakova, Natalia, Tomsk State Univ Control Syst \\& Radioelect, Dept Control Syst, Tomsk, Russia. Bulysheva, Larisa; Xu, Lida, Old Dominion Univ, Dept Informat Technol \\& Decis Sci, Norfolk, VA 23529 USA. Jovanovic, Vukica, Old Dominion Univ, Dept Engn Technol, Norfolk, VA USA."",
    DOI = ""10.1080/17517575.2020.1713407"",
    EarlyAccessDate = ""JAN 2020"",
    ISSN = ""1751-7575"",
    EISSN = ""1751-7583"",
    Keywords = ""Fuzzy models; risk factors; software promotion; decision making; marketing analytics and product management; project management"",
    Keywords-Plus = ""AGGREGATIVE RISK; DECISION-MAKING; SET THEORY; MANAGEMENT; LOGIC; EVALUATE; PROJECTS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems"",
    Author-Email = ""lbulyshe@odu.edu"",
    Affiliations = ""Tomsk State University of Control Systems \\& Radioelectronics; Old Dominion University; Old Dominion University"",
    ResearcherID-Numbers = ""xu, li/GNH-3667-2022 Jovanovic, Vukica/D-2644-2013"",
    ORCID-Numbers = ""Permakova, Natal'a/0000-0001-6222-4737 LAPA, ANTONIO/0000-0002-5954-5115 Jovanovic, Vukica/0000-0002-8626-903X"",
    Number-of-Cited-References = ""34"",
    Times-Cited = ""8"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""17"",
    Journal-ISO = ""Enterp. Inf. Syst."",
    Doc-Delivery-Number = ""MI4ZE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000509022500001"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		Fuzzy model estimation of the risk factors impact on the target of promotion of the software product	https://www.webofscience.com/wos/woscc/full-record/WOS:000509022500001	TAYLOR \& FRANCIS LTD	nan; References
119	TrustSE	SIGNALS BY SOFTWARE		Acquisition; carrier to noise; code division multiple access; Global Positioning System; indoor GPS; Labview; Matlab; navigation; satellite navigation System; signal to noise ratio; software GPS; VHDL	Laurent M. Duchateau	Depot Institutionnel de l'Universite libre de Bruxelles	https://dipot.ulb.ac.be/dspace/bitstream/2013/211344/1/934646f3-35da-4bd9-9a4e-e753b54aece3.txt		92	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		SIGNALS BY SOFTWARE	https://dipot.ulb.ac.be/dspace/bitstream/2013/211344/1/934646f3-35da-4bd9-9a4e-e753b54aece3.txt	Universite libre de Bruxelles	
120	TrustSE	Peacebuilding SoftwarePeacebuilding software	In the last ten years several peace agreements have been signed. At first glance this development seems positive. However, if we analyse the successfulness of the peace-building processes, the picture becomes less rosy. Some peace processes, like those in Northern Ireland and South Africa, seem to have travelled the difficult road to sustainable peace. Others, like those in Bosnia-Herzegovina, Rwanda, the Middle East and Angola, seem, at best, to have stopped the fighting for a time.		Reychler, Luc; Langer, Arnim	Luc Reychler: A Pioneer in  Sustainable Peacebuilding Architecture	https://doi.org/10.1007/978-3-030-40208-2_10		223--239	"""@Inbook{Reychler2020,
    author = ""Reychler, Luc and Langer, Arnim"",
    editor = ""Reychler, Luc and Langer, Arnim"",
    title = ""Peacebuilding SoftwarePeacebuilding software"",
    bookTitle = ""Luc Reychler: A Pioneer in Sustainable Peacebuilding Architecture"",
    year = ""2020"",
    publisher = ""Springer International Publishing"",
    address = ""Cham"",
    pages = ""223--239"",
    abstract = ""In the last ten years several peace agreements have been signed. At first glance this development seems positive. However, if we analyse the successfulness of the peace-building processes, the picture becomes less rosy. Some peace processes, like those in Northern Ireland and South Africa, seem to have travelled the difficult road to sustainable peace. Others, like those in Bosnia-Herzegovina, Rwanda, the Middle East and Angola, seem, at best, to have stopped the fighting for a time."",
    isbn = ""978-3-030-40208-2"",
    doi = ""10.1007/978-3-030-40208-2\_10"",
    url = ""https://doi.org/10.1007/978-3-030-40208-2\_10""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Springer Link		Peacebuilding Software	https://link.springer.com/chapter/10.1007/978-3-030-40208-2_10	Springer International Publishing	nan; Keywords; References
121	TrustSE	Success of software packages in small businesses: an exploratory study	In this paper we develop and use a framework for evaluating the success of microcomputer based integrated administrative software packages in small businesses. The results of an exploratory survey of 66 small business organizations show that small businesses have often been disappointed with their software packages. The disappointment is frequently a result of the inability of the package to adapt to the needs of the company, especially in small businesses of more than 50 employees. For small businesses of less than 20 employees the packages are too difficult to use. These findings indicate that small businesses should place more emphasis on the acquisition, especially the requirements specification, and developers should improve user-friendliness, the quality of support and documentation to fulfil the needs of the smallest of small businesses. The successful implementers--because of their experience--knew their needs, carefully acquired the package, and implemented various parts of it, benefiting from integration. There seem to be no shortcuts to success, but a determined and eager attitude of the personnel can produce success with any of the software packages in our study.		J. Heikkila; T. Saarinen; M. Saaksjarvi	European Journal of Information Systems	https://doi.org/10.1057/ejis.1991.31				Excluded	Excluded			Studies that were not accessible in full-text	2	Springer Link		Success of software packages in small businesses: an exploratory study	https://link.springer.com/article/10.1057/ejis.1991.31	Springer Link	nan; Keywords; References; Pages; Year; Bibtex
122	TrustSE	Software to support expert elicitation : An exploratory study of existing software packages	Expert elicitations are used to gather the informed opinion of experts on topics about which little or no knowledge is available. They can also be used to build consensus on controversial knowledge. Software packages can provide important support, but a lot of researchers are not well aware of that. The National Institute for Public Health and the Environment (RIVM) therefore made an overview of the different possibilities. For this overview scientific literature has been reviewed, supplemented with sources on the Internet. This has been funded from the strategic research program (SOR) of the institute.  There appear to exist software packages that provide support in: 1) the collaboration of experts and building consensus; 2) characterization of uncertainties; 3) selection of experts; 4) design and execution of the process of estimation and; 5) aggregation and reporting about outcomes.  When designing and executing the estimation process, software can assist in developing and analysing conceptual models. They can also assist in the assessment of scenarios and the estimation of model parameters. For the characterization of uncertainties only one type of software is available: the software of the Netherlands Environmental Assessment Agency (PBL).  Currently, supporting software appears not to be equipped to moderate expert elicitations by mail or by using Internet as an alternative for gathering a group of experts on one specific location.  As the exact and future usage of expert elicitation at RIVM is not known, it is not possible to provide specific advice on the use of software in these specific situations.		Devilee JLA; Knol AB	RIVM letter report 630003001	https://rivm.openrepository.com/entities/publication/9ba7ddb6-0628-431a-9fa4-e84c96b2f8e2			"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Software to support expert elicitation: An exploratory study of existing software packages	https://rivm.openrepository.com/entities/publication/9ba7ddb6-0628-431a-9fa4-e84c96b2f8e2	Rijksinstituut voor Volksgezondheid en Milieu RIVM	
123	TrustSE	Open source software development: an overview	Although some challenge the value of open source software development, its popularity cannot be disputed. This overview of open source licensing and development models describes some of the movement's main principles. We also clarify some of the main principles underlying the resulting software. Because so much has already been written about open source software, we only touch on some of its major themes and provide pointers to essential information about the movement and its general licensing structures.	Open source software; Licenses; Packaging; History; Companies; Writing; Robustness; State feedback; HTML; Linux; Open-source; Open-source Software; Software Development; Open Source Software Development; Business Model; Proprietary Software; Source Distribution; Open-source License; Open Movement; Open-source Community; End-users; Free Software; Source Control; Source Model; GNU C Compiler; General Public License; Ordinary Users; Free Software Foundation; Red Hat	Ming-Wei Wu; Ying-Dar Lin	Computer	https://doi.org/10.1109/2.928619	"1.N. Bezroukov, ""Open Source Software Development as a Special Kind of Academic Research (Critique of Vulgar Raymondism)"". Google Scholar; 2.G. Drummond, ""Open Source Software and Documents: A Literature and Online Resource Review"". Google Scholar; 3.K. Fogel, Open Source Development with CVS, Scottsdale, Ariz.,, pp. 5-7, 1999. Google Scholar"	33- 38		Excluded	Excluded				2	IEEE		Open source software development: an overview	https://ieeexplore.ieee.org/document/928619	IEEE	nan; Year; Bibtex
124	TrustSE	Factors used in the selection of packaged software in small businesses: Views of owners and managers	Due to their limited human, technical, and financial resources, small firms usually purchase packaged software to meet their organizational needs for IS. The selection is usually made either by the owner or a manager. A key question is whether they use the same set of criteria. This study examines the question, and finds that owners and managers of small businesses have different views of the importance of the factors in their selection decision. Owners tend to take a more strategic view of software package selection, weigh technical factors more heavily, take more factors into consideration, and consider those factors in a more serious manner than managers. Therefore, different frameworks may be needed in the software package selection process by owners and managers of small businesses.	Managers; Software packages; Financial resources; Packaged software; Selection criteria; Selection decisions; Selection process; Small business; Small businesses; Small firm; Technical factors; Computer software selection and evaluation; Managers;  Software packages;  Financial resources;  Packaged software;  Selection criteria;  Selection decisions;  Selection process;  Small business;  Small businesses;  Small firm;  Technical factors;  Computer software selection and evaluation	Chau, Patrick Y.K.	Information and Management	https://doi.org/10.1016/0378-7206(95)00016-P		71 - 78	"""@ARTICLE{Chau199571,
    author = ""Chau, Patrick Y.K."",
    title = ""Factors used in the selection of packaged software in small businesses: Views of owners and managers"",
    year = ""1995"",
    journal = ""Information and Management"",
    volume = ""29"",
    number = ""2"",
    pages = ""71 - 78"",
    doi = ""10.1016/0378-7206(95)00016-P"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0009490843\&doi=10.1016\%2f0378-7206\%2895\%2900016-P\&partnerID=40\&md5=7f807c3710de949123ce6c3339f8d45b"",
    affiliations = ""Department of Information and Systems Management, School of Business and Management, The Hong Kong University of Science and Technology, Clear Water Bay, Kowloon, Hong Kong"",
    abstract = ""Due to their limited human, technical, and financial resources, small firms usually purchase packaged software to meet their organizational needs for IS. The selection is usually made either by the owner or a manager. A key question is whether they use the same set of criteria. This study examines the question, and finds that owners and managers of small businesses have different views of the importance of the factors in their selection decision. Owners tend to take a more strategic view of software package selection, weigh technical factors more heavily, take more factors into consideration, and consider those factors in a more serious manner than managers. Therefore, different frameworks may be needed in the software package selection process by owners and managers of small businesses. (c) 1995."",
    author_keywords = ""Packaged software; Selection criteria; Small businesses"",
    keywords = ""Managers; Software packages; Financial resources; Packaged software; Selection criteria; Selection decisions; Selection process; Small business; Small businesses; Small firm; Technical factors; Computer software selection and evaluation"",
    issn = ""03787206"",
    language = ""English"",
    abbrev_source_title = ""Inf. Manage."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 89""
}
"""	Included	Included				2	Scopus Signed In		Selection of packaged software in small businesses	https://www.scopus.com/record/display.uri?eid=2-s2.0-0009490843&origin=resultslist&sort=r-f&src=s&sid=33d006ff88da41bd65377200adafcc7b&sot=b&sdt=b&s=TITLE%28selection+of+packaged+software+in+small+businesses%29&sl=57&sessionSearchId=33d006ff88da41bd65377200adafcc7b&relpos=0		nan; References; Publisher
125	TrustSE	FACTORS USED IN THE SELECTION OF PACKAGED SOFTWARE IN SMALL BUSINESSES - VIEWS OF OWNERS AND MANAGERS	Due to their limited human, technical, and financial resources, small firms usually purchase packaged software to meet their organizational needs for IS. The selection is usually made either by the owner or a manager. A key question is whether they use the same set of criteria. This study examines the question, and finds that owners and managers of small businesses have different views of the importance of the factors in their selection decision. Owners tend to take a more strategic view of software package selection, weigh technical factors more heavily, take more factors into consideration, and consider those factors in a more serious manner than managers. Therefore, different frameworks may be needed in the software package selection process by owners and managers of small businesses.	PACKAGED SOFTWARE; SELECTION CRITERIA; SMALL BUSINESSES; PACKAGED SOFTWARE;  SELECTION CRITERIA;  SMALL BUSINESSES	CHAU, PYK	INFORMATION \& MANAGEMENT	https://doi.org/10.1016/0378-7206(95)00016-P		71-78	"""@article{WOS:A1995RU46400002,
    Author = ""CHAU, PYK"",
    Title = ""FACTORS USED IN THE SELECTION OF PACKAGED SOFTWARE IN SMALL BUSINESSES - VIEWS OF OWNERS AND MANAGERS"",
    Journal = ""INFORMATION \\& MANAGEMENT"",
    Year = ""1995"",
    Volume = ""29"",
    Number = ""2"",
    Pages = ""71-78"",
    Month = ""AUG"",
    Abstract = ""Due to their limited human, technical, and financial resources, small firms usually purchase packaged software to meet their organizational needs for IS. The selection is usually made either by the owner or a manager. A key question is whether they use the same set of criteria. This study examines the question, and finds that owners and managers of small businesses have different views of the importance of the factors in their selection decision. Owners tend to take a more strategic view of software package selection, weigh technical factors more heavily, take more factors into consideration, and consider those factors in a more serious manner than managers. Therefore, different frameworks may be needed in the software package selection process by owners and managers of small businesses."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""CHAU, PYK (Corresponding Author), HONG KONG UNIV SCI \\& TECHNOL,SCH BUSINESS \\& MANAGEMENT,DEPT INFORMAT \\& SYST MANAGEMENT,KOWLOON,HONG KONG."",
    DOI = ""10.1016/0378-7206(95)00016-P"",
    ISSN = ""0378-7206"",
    Keywords = ""PACKAGED SOFTWARE; SELECTION CRITERIA; SMALL BUSINESSES"",
    Keywords-Plus = ""INFORMATION MANAGEMENT; SUCCESS; STRATEGY; SYSTEMS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    ResearcherID-Numbers = ""Chau, Patrick/A-4422-2010"",
    Number-of-Cited-References = ""28"",
    Times-Cited = ""44"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""11"",
    Journal-ISO = ""Inf. Manage."",
    Doc-Delivery-Number = ""RU464"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:A1995RU46400002"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Factors used in the selection of packaged software in small businesses: views of owners and managers	https://www.webofscience.com/wos/woscc/full-record/WOS:A1995RU46400002	ELSEVIER SCIENCE BV	nan; References
126	TrustSE	Enterprise resource planning: componentizing the enterprise application packages			Sprott, David	Commun. ACM	https://doi.org/10.1145/332051.332074		63-69	"""@article{10.1145/332051.332074,
    author = ""Sprott, David"",
    title = ""Enterprise resource planning: componentizing the enterprise application packages"",
    year = ""2000"",
    issue_date = ""April 2000"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""43"",
    number = ""4"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/332051.332074"",
    doi = ""10.1145/332051.332074"",
    journal = ""Commun. ACM"",
    month = ""April"",
    pages = ""63-69"",
    numpages = ""7""
}
"""	Excluded	Excluded				2	ACM		Enterprise resource planning: componentizing the enterprise application packages	https://doi.org/10.1145/332051.332074	Association for Computing Machinery	nan; Abstract; Keywords; References; Link
127	TrustSE	Reputation management of an Open Source Software system based on the trustworthiness of its contributions.	La industria del software depende cada vez mas en componentes desarrollados externamente, siendo algunos proyectos de Codigo Abierto (Open Source). Estos componentes pueden depender a su vez de otros proyectos de software por lo que hay un cierto grado de incertidumbre sobre la calidad de estos componentes externos. Aunque la calidad de este software suele ser buena, eventos como la vulnerabilidad Heartbleed en OpenSSL han resaltado la importancia de gestionar estos elementos. Diferentes formas de asesorar sobre la calidad, respecto a la fiabilidad de un elemento, han sido analizadas teniendo en cuenta el origen e historial sobre los componentes individuales que forman un proyecto. Diferentes metricas han sido investigadas y finalmente un prototipo de prueba de concepto ha sido desarrollado		Garcia Garcia, Cristina	Trabajos Fin de Grado	https://digibuo.uniovi.es/dspace/handle/10651/38287		93	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Reputation management of an Open Source Software system based on the trustworthiness of its contributions	https://digibuo.uniovi.es/dspace/handle/10651/38287	Repositorio Institucional de la Universidad de Oviedo	
128	TrustSE	Packaged software: Selection and implementation policies	Many organizations use packaged software as an alternative to in-house developed information systems. Small businesses, unlike their large counterparts, often lack the organizational resources and technical expertise to develop information systems in-house. In other words, for small businesses packaged software is not just an attractive alternative but, in fact, is the only way to acquire information systems. However, while the lack of information systems staff members forces a reliance on packaged software, it simultaneously decreases the likelihood that the chosen package will satisfy the organization's information needs. The present study develops a packaged software selection model for small businesses which combines previous academic research in large businesses with the results of an exploratory study in small businesses. The purpose of our research project is to develop a model which can help small businesses to select packaged software that better satisfies their needs.		Janson, Marius A.; Subramanian, Ashok	INFOR	https://doi.org/10.1080/03155986.1996.11732298		133 - 151	"""@ARTICLE{Janson1996133,
    author = ""Janson, Marius A. and Subramanian, Ashok"",
    title = ""Packaged software: Selection and implementation policies"",
    year = ""1996"",
    journal = ""INFOR"",
    volume = ""34"",
    number = ""2"",
    pages = ""133 - 151"",
    doi = ""10.1080/03155986.1996.11732298"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0000777676\&doi=10.1080\%2f03155986.1996.11732298\&partnerID=40\&md5=30da69f6e897774e7673eac2e5a4c88b"",
    affiliations = ""School of Business Administration, University of Missouri-St. Louis, St. Louis, MO 63121, 8001 Natural Bridge Road, United States; Dept. of Mgmt. Sci. and Info. Syst., University of Missouri, St. Louis, MO, United States; University of Minnesota; University of Houston"",
    abstract = ""Many organizations use packaged software as an alternative to in-house developed information systems. Small businesses, unlike their large counterparts, often lack the organizational resources and technical expertise to develop information systems in-house. In other words, for small businesses packaged software is not just an attractive alternative but, in fact, is the only way to acquire information systems. However, while the lack of information systems staff members forces a reliance on packaged software, it simultaneously decreases the likelihood that the chosen package will satisfy the organization's information needs. The present study develops a packaged software selection model for small businesses which combines previous academic research in large businesses with the results of an exploratory study in small businesses. The purpose of our research project is to develop a model which can help small businesses to select packaged software that better satisfies their needs."",
    correspondence_address = ""M.A. Janson; School of Business Administration, University of Missouri-St. Louis, St. Louis, MO 63121, 8001 Natural Bridge Road, United States; email: MJANSON@UMSLVMA.UMSL.EDU"",
    publisher = ""University of Toronto Press"",
    issn = ""03155986"",
    coden = ""INFRC"",
    language = ""English"",
    abbrev_source_title = ""INFOR"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 51""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Packaged software: selection and implementation policies	https://www.scopus.com/record/display.uri?eid=2-s2.0-0000777676&origin=resultslist&sort=r-f&src=s&sid=11806dd768f6fb9d999693277b52e4d4&sot=b&sdt=b&s=TITLE%28packaged+software+selection+and+implementation+policies%29&sl=62&sessionSearchId=11806dd768f6fb9d999693277b52e4d4&relpos=0	University of Toronto Press	nan; Keywords; References
129	TrustSE	"How open source software works: ""free"" user-to-user assistance"	"Research into free and open source software development projects has so far largely focused on how the major tasks of software development are organized and motivated. But a complete project requires the execution of ""mundane but necessary"" tasks as well. In this paper, we explore how the mundane but necessary task of field support is organized in the case of Apache web server software, and why some project participants are motivated to provide this service gratis to others. We find that the Apache field support system functions effectively. We also find that, when we partition the help system into its component tasks, 98% of the effort expended by information providers in fact returns direct learning benefits to those providers. This finding considerably reduces the puzzle of why information providers are willing to perform this task ""for free."" Implications are discussed."	Intrinsic motivation;; Open source software;; User innovation;; User support;; Virtual community	Lakhani, Karim R; Von Hippel, Eric	Research Policy	https://doi.org/10.1016/S0048-7333(02)00095-1		923 - 943	"""@ARTICLE{Lakhani2003923,
    author = ""Lakhani, Karim R and Von Hippel, Eric"",
    title = {How open source software works: ""free"" user-to-user assistance},
    year = ""2003"",
    journal = ""Research Policy"",
    volume = ""32"",
    number = ""6"",
    pages = ""923 - 943"",
    doi = ""10.1016/S0048-7333(02)00095-1"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867988929\&doi=10.1016\%2fS0048-7333\%2802\%2900095-1\&partnerID=40\&md5=7543cce984a21c44348047b84fb586f2"",
    affiliations = ""MIT Sloan School of Management, Cambridge, MA 02142, 50 Memorial Drive, United States"",
    abstract = {Research into free and open source software development projects has so far largely focused on how the major tasks of software development are organized and motivated. But a complete project requires the execution of ""mundane but necessary"" tasks as well. In this paper, we explore how the mundane but necessary task of field support is organized in the case of Apache web server software, and why some project participants are motivated to provide this service gratis to others. We find that the Apache field support system functions effectively. We also find that, when we partition the help system into its component tasks, 98\% of the effort expended by information providers in fact returns direct learning benefits to those providers. This finding considerably reduces the puzzle of why information providers are willing to perform this task ""for free."" Implications are discussed. (c) 2002 Elsevier Science B.V.},
    author_keywords = ""Intrinsic motivation; Open source software; User innovation; User support; Virtual community"",
    correspondence_address = ""K.R. Lakhani; MIT Sloan School of Management, Cambridge, MA 02142, 50 Memorial Drive, United States; email: karim.lakhani@sloan.mit.edu"",
    issn = ""00487333"",
    coden = ""REPYB"",
    language = ""English"",
    abbrev_source_title = ""Res Policy"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1197; All Open Access, Bronze Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		How open source software works:“free” user-to-user assistance	https://doi.org/10.1016/S0048-7333(02)00095-1		nan; References; Link; Publisher
130	TrustSE	Transition of governance in a mature open software source community: Evidence from the Debian case	As open source software (OSS) communities mature, they have to introduce a variety of governance mechanisms to manage the participation of their members and to coordinate the launch of new releases. The Debian community introduced new mechanisms of informal administrative control based on a constitution, elected leaders, and used interactive communication channels. We show that these control mechanisms were introduced as a response to emerging innovative opportunities due to the usage of source packages and to the need to build a responsive organization within the Debian OSS community.	Open source software community; Governance; Debian; Open source software community;  Governance;  Debian	Sadowski, Bert M.; Sadowski-Rasters, Gaby; Duysters, Geert	INFORMATION ECONOMICS AND POLICY	https://doi.org/10.1016/j.infoecopol.2008.05.001		323-332	"""@article{WOS:000261859400004,
    Author = ""Sadowski, Bert M. and Sadowski-Rasters, Gaby and Duysters, Geert"",
    Title = ""Transition of governance in a mature open software source community: Evidence from the Debian case"",
    Journal = ""INFORMATION ECONOMICS AND POLICY"",
    Year = ""2008"",
    Volume = ""20"",
    Number = ""4, SI"",
    Pages = ""323-332"",
    Month = ""DEC"",
    Abstract = ""As open source software (OSS) communities mature, they have to introduce a variety of governance mechanisms to manage the participation of their members and to coordinate the launch of new releases. The Debian community introduced new mechanisms of informal administrative control based on a constitution, elected leaders, and used interactive communication channels. We show that these control mechanisms were introduced as a response to emerging innovative opportunities due to the usage of source packages and to the need to build a responsive organization within the Debian OSS community. (C) 2008 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Sadowski, BM (Corresponding Author), Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands. Sadowski, Bert M., Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands. Sadowski-Rasters, Gaby, Municipal Eindhoven, NL-5600 MB Eindhoven, Netherlands. Duysters, Geert, UNU MERIT, NL-6211 TC Maastricht, Netherlands."",
    DOI = ""10.1016/j.infoecopol.2008.05.001"",
    ISSN = ""0167-6245"",
    EISSN = ""1873-5975"",
    Keywords = ""Open source software community; Governance; Debian"",
    Keywords-Plus = ""EXPLOITATION; EXPLORATION; KNOWLEDGE; INTERNET"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Economics"",
    Author-Email = ""b.m.sadowski@tm.tue.nl g.sadowski@eindhoven.nl duysters@merit.unu.edu"",
    Affiliations = ""Eindhoven University of Technology; Maastricht University"",
    ORCID-Numbers = ""Sadowski, Bert/0000-0003-1340-2319"",
    Number-of-Cited-References = ""38"",
    Times-Cited = ""20"",
    Usage-Count-Last-180-days = ""6"",
    Usage-Count-Since-2013 = ""22"",
    Journal-ISO = ""Inf. Econ. Policy"",
    Doc-Delivery-Number = ""386CH"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000261859400004"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Web of Science		Transition of governance in a mature open software source community: Evidence from the Debian case	https://www.webofscience.com/wos/woscc/full-record/WOS:000261859400004	ELSEVIER	nan; References
131	TrustSE	Understanding Free Software Developers: Findings from the FLOSS Study	This chapter contains sections titled: The Need for Empirical Data, Models and Hypotheses, Conducting the FLOSS Developer Survey, What Do We Know Now?Subjective Responses, Objective Data?, Other Data Sources, Conclusion, Notes		Joseph Feller;; Brian Fitzgerald;; Scott A. Hissam;; Karim R. huff		https://ieeexplore.ieee.org/document/6277079				Excluded	Excluded				2	IEEE		Understanding free software developers: Findings from the FLOSS study	https://ieeexplore.ieee.org/document/6277079	MIT Press	nan; Venue; Keywords; References; Pages; Year; Bibtex
132	TrustSE	A framework analysis of the open source software development paradigm			Feller, Joseph; Fitzgerald, Brian	ICIS '00: Proceedings of the twenty first international conference on Information systems	https://doi.org/10.5555/359640.359723		58-69	"""@inproceedings{10.5555/359640.359723,
    author = ""Feller, Joseph and Fitzgerald, Brian"",
    title = ""A framework analysis of the open source software development paradigm"",
    year = ""2000"",
    publisher = ""Association for Information Systems"",
    address = ""USA"",
    booktitle = ""Proceedings of the Twenty First International Conference on Information Systems"",
    pages = ""58-69"",
    numpages = ""12"",
    location = ""Brisbane, Queensland, Australia"",
    series = ""ICIS '00""
}
"""	Excluded	Excluded				2	ACM		A framework analysis of the open source software development paradigm	https://doi.org/10.5555/359640.359723	Association for Information Systems	nan; Abstract; Keywords; References; Link
133	TrustSE	Information systems success in free and open source software development: Theory and measures	Information systems success is one of the most widely used dependent variables in information systems (IS) research, but research on free/libre and open source software (FLOSS) often fails to appropriately conceptualize this important concept. In this article, we reconsider what success means within a FLOSS context. We first review existing models of IS success and success variables used in FLOSS research and assess them for their usefulness, practicality and fit to the FLOSS context. Then, drawing on a theoretical model of group effectiveness in the FLOSS development process, as well as an on-line discussion with developers, we present additional concepts that are central to an appropriate understanding of success for FLOSS. In order to examine the practicality and validity of this conceptual scheme, the second half of our article presents an empirical study that demonstrates operationalizations of the chosen measures and assesses their internal validity. We use data from SourceForge to measure the project's effectiveness in team building, the speed of the project at responding to bug reports and the project's popularity. We conclude by discussing the implications of this study for our proposed extension of IS success in the context of FLOSS development and highlight future directions for research.	Computer operating procedures; Computer software; Information science; Information technology; Mathematical models; Online searching; Open systems; Concept development; Free/libre open source software; Information systems success; Survival analysis; Software engineering; Computer operating procedures;  Computer software;  Information science;  Information technology;  Mathematical models;  Online searching;  Open systems;  Concept development;  Free/libre open source software;  Information systems success;  Survival analysis;  Software engineering	Crowston, Kevin; Howison, James; Annabi, Hala	Software Process Improvement and Practice	https://doi.org/10.1002/spip.259		123 - 148	"""@ARTICLE{Crowston2006123,
    author = ""Crowston, Kevin and Howison, James and Annabi, Hala"",
    title = ""Information systems success in free and open source software development: Theory and measures"",
    year = ""2006"",
    journal = ""Software Process Improvement and Practice"",
    volume = ""11"",
    number = ""2"",
    pages = ""123 - 148"",
    doi = ""10.1002/spip.259"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33744792694\&doi=10.1002\%2fspip.259\&partnerID=40\&md5=f329fcd9804bf9e99e845dd8288851c5"",
    affiliations = ""Syracuse University, School of Information Studies, 348 Hinds Hall, Syracuse, NY 13244-4100, United States; University of Washington, Information School, Mary Gates Hall, Seattle, WA 98195-2840, Box 352840, United States"",
    abstract = ""Information systems success is one of the most widely used dependent variables in information systems (IS) research, but research on free/libre and open source software (FLOSS) often fails to appropriately conceptualize this important concept. In this article, we reconsider what success means within a FLOSS context. We first review existing models of IS success and success variables used in FLOSS research and assess them for their usefulness, practicality and fit to the FLOSS context. Then, drawing on a theoretical model of group effectiveness in the FLOSS development process, as well as an on-line discussion with developers, we present additional concepts that are central to an appropriate understanding of success for FLOSS. In order to examine the practicality and validity of this conceptual scheme, the second half of our article presents an empirical study that demonstrates operationalizations of the chosen measures and assesses their internal validity. We use data from SourceForge to measure the project's effectiveness in team building, the speed of the project at responding to bug reports and the project's popularity. We conclude by discussing the implications of this study for our proposed extension of IS success in the context of FLOSS development and highlight future directions for research. Copyright (c) 2006 John Wiley \& Sons, Ltd."",
    author_keywords = ""Concept development; Free/libre open source software; Information systems success; Survival analysis"",
    keywords = ""Computer operating procedures; Computer software; Information science; Information technology; Mathematical models; Online searching; Open systems; Concept development; Free/libre open source software; Information systems success; Survival analysis; Software engineering"",
    correspondence_address = ""K. Crowston; Syracuse University, School of Information Studies, 348 Hinds Hall, Syracuse, NY 13244-4100, United States; email: crowston@syr.edu"",
    issn = ""10991670"",
    language = ""English"",
    abbrev_source_title = ""Softw. Process Improv. Pract."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 234; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Information systems success in free and open source software development: Theory and measures	https://www.scopus.com/record/display.uri?eid=2-s2.0-33744792694&origin=resultslist&sort=r-f&src=s&sid=822341144d95ac40d788d4302d93a03f&sot=b&sdt=b&s=TITLE%28information+systems+success+in+free+and+open+source+software+development+theory+and+measures%29&sl=99&sessionSearchId=822341144d95ac40d788d4302d93a03f&relpos=0		nan; References; Publisher
134	TrustSE	The penguin has entered the building: The commercialization of open source software products	Previous literature on open source software ( OSS) mostly analyzes organizational issues within communities of developers and users. This paper focuses on for-profit torganizations that release software products under OSS licenses, and argues that variations in their endowments of intellectual property rights, namely patents and trademarks, help to determine which firms will tend to incorporate OSS into commercial products. We explain whether and under what conditions preexisting stocks of intellectual property rights can be useful complementary assets that allow firms to benefit directly or indirectly from commercializing OSS products, and test our hypotheses on a novel data set built on firms' announcements of OSS product releases in the specialized press between 1995 and 2003. We find three robust results: ( a) firms with large stocks of software patents are more likely to release OSS products; ( b) firms with large stocks of software trademarks are less likely to release OSS products; ( c) firms with large stocks of hardware trademarks are more likely to release OSS products.	open source software; product introductions; patents and trademarks; complementary assets; open source software;  product introductions;  patents and trademarks;  complementary assets	Fosfuri, Andrea; Giarratana, Marco S.; Luzzi, Alessandra	ORGANIZATION SCIENCE	https://doi.org/10.1287/orsc.1070.0321		292-305	"""@article{WOS:000254921800007,
    Author = ""Fosfuri, Andrea and Giarratana, Marco S. and Luzzi, Alessandra"",
    Title = ""The penguin has entered the building: The commercialization of open source software products"",
    Journal = ""ORGANIZATION SCIENCE"",
    Year = ""2008"",
    Volume = ""19"",
    Number = ""2"",
    Pages = ""292-305"",
    Month = ""MAR-APR"",
    Abstract = ""Previous literature on open source software ( OSS) mostly analyzes organizational issues within communities of developers and users. This paper focuses on for-profit torganizations that release software products under OSS licenses, and argues that variations in their endowments of intellectual property rights, namely patents and trademarks, help to determine which firms will tend to incorporate OSS into commercial products. We explain whether and under what conditions preexisting stocks of intellectual property rights can be useful complementary assets that allow firms to benefit directly or indirectly from commercializing OSS products, and test our hypotheses on a novel data set built on firms' announcements of OSS product releases in the specialized press between 1995 and 2003. We find three robust results: ( a) firms with large stocks of software patents are more likely to release OSS products; ( b) firms with large stocks of software trademarks are less likely to release OSS products; ( c) firms with large stocks of hardware trademarks are more likely to release OSS products."",
    Publisher = ""INFORMS"",
    Address = ""5521 RESEARCH PARK DR, SUITE 200, CATONSVILLE, MD 21228 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Fosfuri, A (Corresponding Author), Univ Carlos III Madrid, Dept Business Adm, Madrid 28903, Spain. Fosfuri, Andrea; Giarratana, Marco S.; Luzzi, Alessandra, Univ Carlos III Madrid, Dept Business Adm, Madrid 28903, Spain."",
    DOI = ""10.1287/orsc.1070.0321"",
    ISSN = ""1047-7039"",
    Keywords = ""open source software; product introductions; patents and trademarks; complementary assets"",
    Keywords-Plus = ""INNOVATION; PERFORMANCE; STRATEGIES; BUSINESS; ENTRY"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Management"",
    Author-Email = ""fosfuri@emp.uc3m.es marco.giarratana@uc3m.es alessandra.uzzi@uc3m.es"",
    Affiliations = ""Universidad Carlos III de Madrid"",
    ResearcherID-Numbers = ""Fosfuri, Andrea/O-6521-2014 Giarratana, Marco/N-1056-2016"",
    ORCID-Numbers = ""Giarratana, Marco/0000-0002-0015-6529 FOSFURI, ANDREA/0000-0001-6584-240X"",
    Number-of-Cited-References = ""48"",
    Times-Cited = ""102"",
    Usage-Count-Last-180-days = ""5"",
    Usage-Count-Since-2013 = ""73"",
    Journal-ISO = ""Organ Sci."",
    Doc-Delivery-Number = ""287MS"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000254921800007"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		The penguin has entered the building: The commercialization of open source software products	https://www.webofscience.com/wos/woscc/full-record/WOS:000254921800007	INFORMS	nan; References
135	TrustSE	Open Source Software: Free Provision of Complex Public Goods	Open source software, developed by volunteers, appears counter to the conventional wisdom that without ownership rights or government intervention, public goods will not be efficiently provided. But complexity makes a difference: contracts are incomplete and ownership rights do not necessarily elicit socially optimal effort. There are three mechanisms that improve the provision of complex software: pre-packaging, Application Program Interfaces, and Free/Open Source Software (F/OSS). F/OSS extends the range of products available to consumers, complementing, rather than replacing, proprietary provision. Pre-packaged software addresses common uses with limited feature sets, while firms with specialized, more complex needs use F/OSS. This chapter discusses sound economic reason why firms contribute to F/OSS development even when proprietary products are available from non-rival firms. This inquiry might reveal something about the limits of effective proprietary provision.		Bessen, James	The Economics of Open Source Software Development	https://doi.org/10.1016/B978-044452769-1/50003-2		57 - 81	"""@BOOK{Bessen200657,
    author = ""Bessen, James"",
    title = ""Open Source Software: Free Provision of Complex Public Goods"",
    year = ""2006"",
    journal = ""The Economics of Open Source Software Development"",
    pages = ""57 - 81"",
    doi = ""10.1016/B978-044452769-1/50003-2"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84882561848\&doi=10.1016\%2fB978-044452769-1\%2f50003-2\&partnerID=40\&md5=f63c47be5b7fb6e6690f9be517124dc0"",
    affiliations = ""Boston University School of Law, United States"",
    abstract = ""Open source software, developed by volunteers, appears counter to the conventional wisdom that without ownership rights or government intervention, public goods will not be efficiently provided. But complexity makes a difference: contracts are incomplete and ownership rights do not necessarily elicit socially optimal effort. There are three mechanisms that improve the provision of complex software: pre-packaging, Application Program Interfaces, and Free/Open Source Software (F/OSS). F/OSS extends the range of products available to consumers, complementing, rather than replacing, proprietary provision. Pre-packaged software addresses common uses with limited feature sets, while firms with specialized, more complex needs use F/OSS. This chapter discusses sound economic reason why firms contribute to F/OSS development even when proprietary products are available from non-rival firms. This inquiry might reveal something about the limits of effective proprietary provision. (c) 2006 Elsevier B.V. All rights reserved."",
    publisher = ""Elsevier"",
    isbn = ""978-044452769-1"",
    language = ""English"",
    abbrev_source_title = ""The Econ. of Open Source Software Dev."",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 43""
}
"""	Excluded	Excluded				2	Scopus Signed In		Open source software: Free provision of complex public goods	https://www.scopus.com/record/display.uri?eid=2-s2.0-84882561848&origin=resultslist&sort=r-f&src=s&sid=615dab9c45c435e5592209a5cc7ec049&sot=b&sdt=b&s=TITLE%28open+source+software+free+provision+of+complex+public+goods%29&sl=66&sessionSearchId=615dab9c45c435e5592209a5cc7ec049&relpos=0	Elsevier	nan; Keywords; References
136	TrustSE	The social structure of Free and Open Source software development	"Metaphors, such as the Cathedral and Bazaar, used to describe the organization of FLOSS projects typically place them in sharp contrast to proprietary development by emphasizing FLOSS's distinctive social and communications structures. But what do we really know about the communication patterns of FLOSS projects? How generalizable are the projects that have been studied? Is there consistency across FLOSS projects? Questioning the assumption of distinctiveness is important because practitioner-advocates from within the FLOSS community rely on features of social structure to describe and account for some of the advantages of FLOSS production. To address this question, we examined 120 project teams from SourceForge, representing a wide range of FLOSS project types, for their communications centralization as revealed in the interactions in the bug tracking system. We found that FLOSS development teams vary widely in their communications centralization, from projects completely centered on one developer to projects that are highly decentralized and exhibit a distributed pattern of conversation between developers and active users. We suggest, therefore, that it is wrong to assume that FLOSS projects are distinguished by a particular social structure merely because they are FLOSS. Our findings suggest that FLOSS projects might have to work hard to achieve the expected development advantages which have been assumed to flow from ""going open."" In addition, the variation in communications structure across projects means that communications centralization is useful for comparisons between FLOSS teams. We found that larger FLOSS teams tend to have more decentralized communication patterns, a finding that suggests interesting avenues for further research examining, for example, the relationship between communications structure and code modularity."		Crowston, Kevin	First Monday	https://www.scopus.com/record/display.uri?eid=2-s2.0-37849187333&origin=resultslist&sort=r-f&src=s&sid=49709e2bfa2f4fff42bce9b66e66826e&sot=b&sdt=b&s=TITLE%28the+social+structure+of+free+and+open+source+software+development%29&sl=72&sessionSearchId=49709e2bfa2f4fff42bce9b66e66826e&relpos=0	Batagelj, V., Mrvar, A.Pajek: Program for large network analysis(1998)Connections, 21 (2), pp. 47-57.Cited 34 times.; Butts, C.The SNA Package for R.Cited 6 times.accessed 24 October 2004http://erzuli.ss.uci.edn/R.stuff/; Cox, A.Cathedrals, bazaars and the town council(1998)Slashdot.Cited 13 times.(13 October), accessed 24 October 2004http://slashdot.org/features/98/10/13/1423253.shtml; Crowston, K.; Gacek, C., Lawrie, T., Arief, B.(2001)The Many Meanings of Open Source.Cited 8 times.Technical Report 1, accessed 24 October 2004DIRC - Interdisciplinary Research Collaboration in Dependability; Howison, J., Crowston, K.The perils and pitfalls of mining SourceForge(2004)Proceedings of the Mining Software Repositories Workshop at the International Conference on Software Engineering (ICSE).Cited 20 times.Edinburgh, Scotlandhttp://floss.syr.edu/; Kamada, T., Kawai, S.; Krishnamurthy, S.Cave or community? An empirical examination of 100 mature open source projects(2002)First Monday, 7 (6 JUNE).Cited 175 times.accessed 24 October 2004http://firstmonday.org/issues/issue7_6/krishnamurthy/; Kuwabara, K.; Mockus, A., Fielding, R.T., Herbsleb, J.D.; Moon, J.Y., Sproull, L.; NetMiner Web Pageaccessed 28 April 2002http://www.netminer.com; (2004)R: A Language and Environment for Statistical Computing.Cited 4665 times.R Development Core Team, R-Foundation for Statistical Computing (Vienna, Austria)http://www.R-proiect.org,accessed24October2004; Raymond, E.The cathedral and the bazaar(1998)First Monday, 3 (3 MARCH).Cited 171 times.accessed 24 October 2004http://www.firstmonday.org/issues/issue3_3/raymond/; Raymond, E.S.; Royston, P.An extension of shapiro and wilk's W test for normality to large samples(1982)Applied Statistics, 31, pp. 115-124.Cited 1066 times.; Scacchi, W.(2002)Software Development Practices in Open Source Communities: A Comparative Case Study.Cited 4 times.(position paper) accessed 2 February 2004http://opensource.ucc.ie/icse2001/scacchi.pdf; Wasserman, S., Frost, K.(1994)Social Network Analysis: Methods and Applications.Cited 21721 times.New York: Cambridge University Press		"""@ARTICLE{Crowston2005,
    author = ""Crowston, Kevin"",
    title = ""The social structure of Free and Open Source software development"",
    year = ""2005"",
    journal = ""First Monday"",
    volume = ""10"",
    number = ""SPEC. ISS. 2"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-37849187333\&partnerID=40\&md5=1f6eaaf2a3817504b2c4008c34dd2a58"",
    affiliations = ""Department of Information Studies, Syracuse University (N.Y.), School of Information Studies, United States; School's PhD in Information Science and Technology; Syracuse University School of Information Studies, United States"",
    abstract = {Metaphors, such as the Cathedral and Bazaar, used to describe the organization of FLOSS projects typically place them in sharp contrast to proprietary development by emphasizing FLOSS's distinctive social and communications structures. But what do we really know about the communication patterns of FLOSS projects? How generalizable are the projects that have been studied? Is there consistency across FLOSS projects? Questioning the assumption of distinctiveness is important because practitioner-advocates from within the FLOSS community rely on features of social structure to describe and account for some of the advantages of FLOSS production. To address this question, we examined 120 project teams from SourceForge, representing a wide range of FLOSS project types, for their communications centralization as revealed in the interactions in the bug tracking system. We found that FLOSS development teams vary widely in their communications centralization, from projects completely centered on one developer to projects that are highly decentralized and exhibit a distributed pattern of conversation between developers and active users. We suggest, therefore, that it is wrong to assume that FLOSS projects are distinguished by a particular social structure merely because they are FLOSS. Our findings suggest that FLOSS projects might have to work hard to achieve the expected development advantages which have been assumed to flow from ""going open."" In addition, the variation in communications structure across projects means that communications centralization is useful for comparisons between FLOSS teams. We found that larger FLOSS teams tend to have more decentralized communication patterns, a finding that suggests interesting avenues for further research examining, for example, the relationship between communications structure and code modularity.},
    issn = ""13960466"",
    language = ""English"",
    abbrev_source_title = ""First Monday"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 101""
}
"""	Excluded	Excluded				2	Scopus Signed In		The social structure of free and open source software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-37849187333&origin=resultslist&sort=r-f&src=s&sid=49709e2bfa2f4fff42bce9b66e66826e&sot=b&sdt=b&s=TITLE%28the+social+structure+of+free+and+open+source+software+development%29&sl=72&sessionSearchId=49709e2bfa2f4fff42bce9b66e66826e&relpos=0		nan; Keywords; Pages; Publisher
137	TrustSE	Allocation of Software Development Resources in Open Source Production Mode	This chapter contains sections titled: A New/Old Direction for Economic Research on the Phenomenon of FLOSS, A Simulation Model of OS/FS C-Mode Production, Emergent Properties, Conclusion and To-Do List, Notes		Joseph Feller;; Brian Fitzgerald;; Scott A. Hissam;; Karim R. huff		https://ieeexplore.ieee.org/document/6277083				Excluded	Excluded				2	IEEE		The allocation of software development resources in 'open source'production mode	https://ieeexplore.ieee.org/document/6277083	MIT Press	nan; Venue; Keywords; References; Pages; Year; Bibtex
138	TrustSE	Entry strategies under competing standards: Hybrid business models in the open source software industry	The paper analyzes the strategies of software firms that have entered the open source (OS) field. The notion of the OS business model is discussed in the light of a substantial body of theoretical literature concerning strategic management and the economics of innovation, as well as specialized literature on OS. Empirical evidence based on a survey of 146 Italian software firms shows that firms have adapted to an environment dominated by incumbent standards by combining the offering of proprietary and OS software under different licensing schemes, thus choosing a hybrid business model. The paper examines the determinants of the degree of openness toward OS and discusses the stability of hybrid models in the evolution of the industry.	open source; software industry; hybrid business models; switching costs; network externalities; open source;  software industry;  hybrid business models;  switching costs;  network externalities	Bonaccorsi, Andrea; Giannangeli, Silvia; Rossi, Cristina	MANAGEMENT SCIENCE	https://doi.org/10.1287/mnsc.1060.0547		1085-1098	"""@article{WOS:000238691100009,
    Author = ""Bonaccorsi, Andrea and Giannangeli, Silvia and Rossi, Cristina"",
    Title = ""Entry strategies under competing standards: Hybrid business models in the open source software industry"",
    Journal = ""MANAGEMENT SCIENCE"",
    Year = ""2006"",
    Volume = ""52"",
    Number = ""7"",
    Pages = ""1085-1098"",
    Month = ""JUL"",
    Note = ""3rd Annual International Industrial Organization Conference, Georgia Inst Technol, Conf Ctr, Atlanta, GA, APR 08-09, 2005"",
    Abstract = ""The paper analyzes the strategies of software firms that have entered the open source (OS) field. The notion of the OS business model is discussed in the light of a substantial body of theoretical literature concerning strategic management and the economics of innovation, as well as specialized literature on OS. Empirical evidence based on a survey of 146 Italian software firms shows that firms have adapted to an environment dominated by incumbent standards by combining the offering of proprietary and OS software under different licensing schemes, thus choosing a hybrid business model. The paper examines the determinants of the degree of openness toward OS and discusses the stability of hybrid models in the evolution of the industry."",
    Publisher = ""INFORMS"",
    Address = ""5521 RESEARCH PARK DR, SUITE 200, CATONSVILLE, MD 21228 USA"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Bonaccorsi, A (Corresponding Author), Univ Pisa, Dept Elect Syst \\& Automat, Via Diotisalvi 2, I-56126 Pisa, Italy. Univ Pisa, Dept Elect Syst \\& Automat, I-56126 Pisa, Italy. St Anna Sch Adv Studies, I-56127 Pisa, Italy. Politecn Milan, I-20133 Milan, Italy."",
    DOI = ""10.1287/mnsc.1060.0547"",
    ISSN = ""0025-1909"",
    EISSN = ""1526-5501"",
    Keywords = ""open source; software industry; hybrid business models; switching costs; network externalities"",
    Research-Areas = ""Business \\& Economics; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Management; Operations Research \\& Management Science"",
    Author-Email = ""a.bonaccorsi@gmail.com s.giannangeli@sssup.it cristina1.rossi@polimi.it"",
    Affiliations = ""University of Pisa; Scuola Superiore Sant'Anna; Polytechnic University of Milan"",
    Number-of-Cited-References = ""49"",
    Times-Cited = ""209"",
    Usage-Count-Last-180-days = ""6"",
    Usage-Count-Since-2013 = ""164"",
    Journal-ISO = ""Manage. Sci."",
    Doc-Delivery-Number = ""058UW"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Social Science \&amp; Humanities (CPCI-SSH); Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000238691100009"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Entry strategies under competing standards: Hybrid business models in the open source software industry	https://www.webofscience.com/wos/woscc/full-record/WOS:000238691100009	INFORMS	nan; References
139	TrustSE	The open source software phenomenon: Characteristics that promote research	Since the turn of the century, open source software has triggered a vast volume of research. In this essay, based on a brief review of selected work, we show that research in many different fields and disciplines of the social sciences have shed light on the phenomenon. We argue that five characteristics make the phenomenon particularly attractive to examination from various fields and disciplines using a plethora of research methods: (1) impact: open source software has an extensive impact on the economy and society; (2) theoretical tension: the phenomenon deviates sharply from the predictions and explanations of existing theory in different fields; (3) transparency: open source software has offered researchers an unprecedented access to data; (4) communal reflexivity: the community of open source software developers frequently engage in a dialog on its functioning (it also has its own research community); (5) proximity: the innovation process in open source software resembles knowledge production in science (in many instances, open source software is an output of research processes). These five characteristics also promote a transdisciplinary research dialog. Based on the experience of open source software research, we propose that phenomena-driven transdisciplinary research provides an excellent context to promote greater dialog between disciplines and fields. Moreover, we propose that the recent diffusion of the open source software model of innovation to other areas than software calls for new research and that the field of information systems has an important role to play in this future research agenda.	Economic analysis; Innovation; Resource allocation; Social sciences; Interdisciplinary research; Open source software; Transdisciplinary research; Computer software; Economic analysis;  Innovation;  Resource allocation;  Social sciences;  Interdisciplinary research;  Open source software;  Transdisciplinary research;  Computer software	von Krogh, Georg; Spaeth, Sebastian	Journal of Strategic Information Systems	https://doi.org/10.1016/j.jsis.2007.06.001		236 - 253	"""@ARTICLE{vonKrogh2007236,
    author = ""von Krogh, Georg and Spaeth, Sebastian"",
    title = ""The open source software phenomenon: Characteristics that promote research"",
    year = ""2007"",
    journal = ""Journal of Strategic Information Systems"",
    volume = ""16"",
    number = ""3"",
    pages = ""236 - 253"",
    doi = ""10.1016/j.jsis.2007.06.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548044442\&doi=10.1016\%2fj.jsis.2007.06.001\&partnerID=40\&md5=91c3d81b59402f94fbfe5a27826295c7"",
    affiliations = ""ETH Zurich, Department of Management, Technology, and Economics, 8032 Zurich, Kreuzplatz 5, Switzerland"",
    abstract = ""Since the turn of the century, open source software has triggered a vast volume of research. In this essay, based on a brief review of selected work, we show that research in many different fields and disciplines of the social sciences have shed light on the phenomenon. We argue that five characteristics make the phenomenon particularly attractive to examination from various fields and disciplines using a plethora of research methods: (1) impact: open source software has an extensive impact on the economy and society; (2) theoretical tension: the phenomenon deviates sharply from the predictions and explanations of existing theory in different fields; (3) transparency: open source software has offered researchers an unprecedented access to data; (4) communal reflexivity: the community of open source software developers frequently engage in a dialog on its functioning (it also has its own research community); (5) proximity: the innovation process in open source software resembles knowledge production in science (in many instances, open source software is an output of research processes). These five characteristics also promote a transdisciplinary research dialog. Based on the experience of open source software research, we propose that phenomena-driven transdisciplinary research provides an excellent context to promote greater dialog between disciplines and fields. Moreover, we propose that the recent diffusion of the open source software model of innovation to other areas than software calls for new research and that the field of information systems has an important role to play in this future research agenda. (c) 2007 Elsevier B.V. All rights reserved."",
    author_keywords = ""Innovation; Interdisciplinary research; Open source software"",
    keywords = ""Economic analysis; Innovation; Resource allocation; Social sciences; Interdisciplinary research; Open source software; Transdisciplinary research; Computer software"",
    correspondence_address = ""G. von Krogh; ETH Zurich, Department of Management, Technology, and Economics, 8032 Zurich, Kreuzplatz 5, Switzerland; email: gvkrogh@ethz.ch"",
    issn = ""09638687"",
    coden = ""JSIYE"",
    language = ""English"",
    abbrev_source_title = ""J Strategic Inform Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 159""
}
"""	Excluded	Excluded				2	Scopus Signed In		The open source software phenomenon: Characteristics that promote research	https://www.scopus.com/record/display.uri?eid=2-s2.0-34548044442&origin=resultslist&sort=r-f&src=s&sid=04ec396a778b9e11a6ab8de3304e0ab4&sot=b&sdt=b&s=TITLE%28the+open+source+software+phenomenon+characteristics+that+promote+research%29&sl=80&sessionSearchId=04ec396a778b9e11a6ab8de3304e0ab4&relpos=0		nan; References; Publisher
140	TrustSE	Socialization in an open source software community: A socio-technical analysis	Open Source Software (OSS) development is often characterized as a fundamentally new way to develop software. Past analyses and discussions, however, have treated OSS projects and their organization mostly as a static phenomenon. Consequently, we do not know how these communities of software developers are sustained and reproduced over time through the progressive integration of new members. To shed light on this issue I report on my analyses of socialization in a particular OSS community. In particular, I document the relationships OSS newcomers develop over time with both the social and material aspects of a project. To do so, I combine two mutually informing activities: ethnography and the use of software specially designed to visualize and explore the interacting networks of human and material resources incorporated in the email and code databases of OSS. Socialization in this community is analyzed from two perspectives: as an individual learning process and as a political process. From these analyses it appears that successful participants progressively construct identities as software craftsmen, and that this process is punctuated by specific rites of passage. Successful participants also understand the political nature of software development and progressively enroll a network of human and material allies to support their efforts. I conclude by discussing how these results could inform the design of software to support socialization in OSS projects, as well as practical implications for the future of these projects.	Codes (standards); Computer networks; Database systems; Electronic mail; Learning systems; Actor-network; Material resources; Open Source; Socialization; Software engineering; Codes (standards);  Computer networks;  Database systems;  Electronic mail;  Learning systems;  Actor-network;  Material resources;  Open Source;  Socialization;  Software engineering	Ducheneaut, Nicolas	Computer Supported Cooperative Work: CSCW: An International Journal	https://doi.org/10.1007/s10606-005-9000-1		323 - 368	"""@ARTICLE{Ducheneaut2005323,
    author = ""Ducheneaut, Nicolas"",
    title = ""Socialization in an open source software community: A socio-technical analysis"",
    year = ""2005"",
    journal = ""Computer Supported Cooperative Work: CSCW: An International Journal"",
    volume = ""14"",
    number = ""4"",
    pages = ""323 - 368"",
    doi = ""10.1007/s10606-005-9000-1"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-26844518777\&doi=10.1007\%2fs10606-005-9000-1\&partnerID=40\&md5=d78ce2d654d527cf3302a739fa413c5a"",
    affiliations = ""Palo Alto Research Center, Palo Alto, CA 94304, 3333 Coyote Hill Road, United States"",
    abstract = ""Open Source Software (OSS) development is often characterized as a fundamentally new way to develop software. Past analyses and discussions, however, have treated OSS projects and their organization mostly as a static phenomenon. Consequently, we do not know how these communities of software developers are sustained and reproduced over time through the progressive integration of new members. To shed light on this issue I report on my analyses of socialization in a particular OSS community. In particular, I document the relationships OSS newcomers develop over time with both the social and material aspects of a project. To do so, I combine two mutually informing activities: ethnography and the use of software specially designed to visualize and explore the interacting networks of human and material resources incorporated in the email and code databases of OSS. Socialization in this community is analyzed from two perspectives: as an individual learning process and as a political process. From these analyses it appears that successful participants progressively construct identities as software craftsmen, and that this process is punctuated by specific rites of passage. Successful participants also understand the political nature of software development and progressively enroll a network of human and material allies to support their efforts. I conclude by discussing how these results could inform the design of software to support socialization in OSS projects, as well as practical implications for the future of these projects. (c) Springer 2005."",
    author_keywords = ""Actor-network; Learning; Open Source; Socialization; Software development"",
    keywords = ""Codes (standards); Computer networks; Database systems; Electronic mail; Learning systems; Actor-network; Material resources; Open Source; Socialization; Software engineering"",
    correspondence_address = ""N. Ducheneaut; Palo Alto Research Center, Palo Alto, CA 94304, 3333 Coyote Hill Road, United States; email: nicolas@parc.com"",
    issn = ""15737551"",
    coden = ""CSCWE"",
    language = ""English"",
    abbrev_source_title = ""Comput Supported Coop Work CSCW Int J"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 336""
}
"""	Excluded	Excluded				2	Scopus Signed In		Socialization in an open source software community: A socio-technical analysis	https://www.scopus.com/record/display.uri?eid=2-s2.0-26844518777&origin=resultslist&sort=r-f&src=s&sid=63147886e3c66a968bbff62651c7bc23&sot=b&sdt=b&s=TITLE%28socialization+in+an+open+source+software+community+a+socio+technical+analysis%29&sl=84&sessionSearchId=63147886e3c66a968bbff62651c7bc23&relpos=0		nan; References; Publisher
141	TrustSE	How copyleft uses license rights to succeed in the open source software revolution and the implications for article 2B			Robert W. Gomulkiewicz	Houston Law Review 36 Hous. L. Rev.	https://heinonline.org/HOL/Page?collection=journals&handle=hein.journals/hulr36&id=191&men_tab=srchresults		179-194	"""nan"""	Excluded	Excluded				2	Google Scholar		How copyleft uses license rights to succeed in the open source software revolution and the implications for article 2B	https://heinonline.org/HOL/Page?collection=journals&handle=hein.journals/hulr36&id=191&men_tab=srchresults	Hein Online	
142	TrustSE	Decoding the Free/Open Source Software Puzzle: A Survey of Theoretical and Empirical Contributions	"The chapter traces the contours of the main relevant aspects of the F/OSS institutional environment, beginning with a review of the available theoretical and empirical evidence bearing on the issue of the motivation of contributors to F/OSS projects. The Free/Open Source Software (F/OSS) phenomenon attracted an increasing amount of attention in recent years. While early contributions have focused mainly on the question whether the ""puzzle"" of open source could be reconciled with economic theory, subsequent contributions have uncovered a wider range of interesting issues. The purpose of this chapter is to provide a sufficiently comprehensive account of these contributions in order to draw some general conclusions on the state of understanding of the phenomenon and identify directions for future research. The F/OSS is a complex and heterogeneous phenomenon. Several theoretical and empirical studies have so far uncovered a number of aspects of this heterogeneity, showing not only that F/OSS projects differ significantly from one another in terms of the complexity of the software developed, its degree of modularity, the nature of coordination or the intensity of communication among the various contributors, to cite few relevant dimensions of the heterogeneity, but within the same project participants differ as regards the intensity of their contributions, the primary motivation for contributing, the level of ideological commitment."		Rossi, Maria Alessandra	The Economics of Open Source Software Development	https://doi.org/10.1016/B978-044452769-1/50002-0		15 - 55	"""@BOOK{Rossi200615,
    author = ""Rossi, Maria Alessandra"",
    title = ""Decoding the Free/Open Source Software Puzzle: A Survey of Theoretical and Empirical Contributions"",
    year = ""2006"",
    journal = ""The Economics of Open Source Software Development"",
    pages = ""15 - 55"",
    doi = ""10.1016/B978-044452769-1/50002-0"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84882477653\&doi=10.1016\%2fB978-044452769-1\%2f50002-0\&partnerID=40\&md5=30075d442936c5b5a869472a71817682"",
    affiliations = ""Department of Management, Economics and Industrial Engineering of Politecnico di Milano, Italy"",
    abstract = {The chapter traces the contours of the main relevant aspects of the F/OSS institutional environment, beginning with a review of the available theoretical and empirical evidence bearing on the issue of the motivation of contributors to F/OSS projects. The Free/Open Source Software (F/OSS) phenomenon attracted an increasing amount of attention in recent years. While early contributions have focused mainly on the question whether the ""puzzle"" of open source could be reconciled with economic theory, subsequent contributions have uncovered a wider range of interesting issues. The purpose of this chapter is to provide a sufficiently comprehensive account of these contributions in order to draw some general conclusions on the state of understanding of the phenomenon and identify directions for future research. The F/OSS is a complex and heterogeneous phenomenon. Several theoretical and empirical studies have so far uncovered a number of aspects of this heterogeneity, showing not only that F/OSS projects differ significantly from one another in terms of the complexity of the software developed, its degree of modularity, the nature of coordination or the intensity of communication among the various contributors, to cite few relevant dimensions of the heterogeneity, but within the same project participants differ as regards the intensity of their contributions, the primary motivation for contributing, the level of ideological commitment. (c) 2006 Elsevier B.V. All rights reserved.},
    publisher = ""Elsevier"",
    isbn = ""978-044452769-1"",
    language = ""English"",
    abbrev_source_title = ""The Econ. of Open Source Software Dev."",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 27""
}
"""	Excluded	Excluded				2	Scopus Signed In		Decoding the free/open source software puzzle: A survey of theoretical and empirical contributions	https://www.scopus.com/record/display.uri?eid=2-s2.0-84882477653&origin=resultslist&sort=r-f&src=s&sid=fd1a707517a7938c1556c7f55f8a21c7&sot=b&sdt=b&s=TITLE%28decoding+the+free+open+source+software+puzzle+a+survey+of+theoretical+and+empirical+contributions%29&sl=104&sessionSearchId=fd1a707517a7938c1556c7f55f8a21c7&relpos=0	Elsevier	nan; Keywords; References
143	TrustSE	Open source software: A survey from 10,000 feet	Open source software (oss), the origins of which can be traced back to the 1950s, is software distributed with a license that allows access to its source code, free redistribution, the creation of derived works, and unrestricted use. oss applications cover most areas of consumer and business software and their study touches many disciplines, including computer science, information systems, economics, psychology, and law. Behind a successful oss project lies a community of actors, ranging from core developers to passive users, held together by a flexible governance structure and membership, leadership and contribution policies that align their interests. The motivation behind individuals participating in oss projects can be, among others, social, ideological, hedonistic, or signaling, while companies gain from their access to high-quality, innovative projects and an increase in their reputation and visibility. Nowadays many business models rely on oss as a product through the provision of associated services, or in coexistence with proprietary software, hardware, services, or licensing. The numerous oss licenses mainly differ on how they treat derived software: some contain provisions that maintain its availability in open source form while others allow more flexibility. Through its widespread adoption, oss is affecting the software industry, science, engineering, research, teaching, the developing countries, and the society at large through its ability to democratize technology and innovation.	Computer software; Developing countries; Economics; Engineering research; Innovation; Business models; Business software; Governance structures; High quality; Innovative projects; Open Source Software; Open sources; Proprietary software; Software industry; Source codes; Open systems; Computer software;  Developing countries;  Economics;  Engineering research;  Innovation;  Business models;  Business software;  Governance structures;  High quality;  Innovative projects;  Open Source Software;  Open sources;  Proprietary software;  Software industry;  Source codes;  Open systems	Androutsellis-Theotokis, Stephanos; Spinellis, Diomidis; Kechagia, Maria; Gousios, Georgios	Foundations and Trends in Technology, Information and Operations Management	https://doi.org/10.1561/0200000026		187 - 347	"""@ARTICLE{Androutsellis-Theotokis2010187,
    author = ""Androutsellis-Theotokis, Stephanos and Spinellis, Diomidis and Kechagia, Maria and Gousios, Georgios"",
    title = ""Open source software: A survey from 10,000 feet"",
    year = ""2010"",
    journal = ""Foundations and Trends in Technology, Information and Operations Management"",
    volume = ""4"",
    number = ""3-4"",
    pages = ""187 - 347"",
    doi = ""10.1561/0200000026"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-80053926779\&doi=10.1561\%2f0200000026\&partnerID=40\&md5=135bc638c770cdd88fc0c49e40844468"",
    affiliations = ""Department of Management Science and Technology, Athens University of Economics and Business, Athens, GR-104 34, Patision 76, Greece"",
    abstract = ""Open source software (oss), the origins of which can be traced back to the 1950s, is software distributed with a license that allows access to its source code, free redistribution, the creation of derived works, and unrestricted use. oss applications cover most areas of consumer and business software and their study touches many disciplines, including computer science, information systems, economics, psychology, and law. Behind a successful oss project lies a community of actors, ranging from core developers to passive users, held together by a flexible governance structure and membership, leadership and contribution policies that align their interests. The motivation behind individuals participating in oss projects can be, among others, social, ideological, hedonistic, or signaling, while companies gain from their access to high-quality, innovative projects and an increase in their reputation and visibility. Nowadays many business models rely on oss as a product through the provision of associated services, or in coexistence with proprietary software, hardware, services, or licensing. The numerous oss licenses mainly differ on how they treat derived software: some contain provisions that maintain its availability in open source form while others allow more flexibility. Through its widespread adoption, oss is affecting the software industry, science, engineering, research, teaching, the developing countries, and the society at large through its ability to democratize technology and innovation. (c) 2011 S. Androutsellis-Theotokis, D. Spinellis, M. Kechagia and GGousios."",
    keywords = ""Computer software; Developing countries; Economics; Engineering research; Innovation; Business models; Business software; Governance structures; High quality; Innovative projects; Open Source Software; Open sources; Proprietary software; Software industry; Source codes; Open systems"",
    correspondence_address = ""S. Androutsellis-Theotokis; Department of Management Science and Technology, Athens University of Economics and Business, Athens, GR-104 34, Patision 76, Greece; email: stheotok@aueb.gr"",
    issn = ""15719545"",
    language = ""English"",
    abbrev_source_title = ""Found. Trends Technol. Inf. Oper. Manage."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 49""
}
"""	Included	Included				2	Scopus Signed In		Open source software: A survey from 10,000 feet	https://www.scopus.com/record/display.uri?eid=2-s2.0-80053926779&origin=resultslist&sort=r-f&src=s&sid=b913772fe51a7dc6b5908497308cfde3&sot=b&sdt=b&s=TITLE%28open+source+software+a+survey+from+10+000+feet%29&sl=53&sessionSearchId=b913772fe51a7dc6b5908497308cfde3&relpos=0		nan; References; Publisher
144	TrustSE	Categorizing bugs with social networks: a case study on four open source software communities	Efficient bug triaging procedures are an important precondition for successful collaborative software engineering projects. Triaging bugs can become a laborious task particularly in open source software (OSS) projects with a large base of comparably inexperienced part-time contributors. In this paper, we propose an efficient and practical method to identify valid bug reports which a) refer to an actual software bug, b) are not duplicates and c) contain enough information to be processed right away. Our classification is based on nine measures to quantify the social embeddedness of bug reporters in the collaboration network. We demonstrate its applicability in a case study, using a comprehensive data set of more than 700,000 bug reports obtained from the Bugzilla installation of four major OSS communities, for a period of more than ten years. For those projects that exhibit the lowest fraction of valid bug reports, we find that the bug reporters' position in the collaboration network is a strong indicator for the quality of bug reports. Based on this finding, we develop an automated classification scheme that can easily be integrated into bug tracking platforms and analyze its performance in the considered OSS communities. A support vector machine (SVM) to identify valid bug reports based on the nine measures yields a precision of up to 90.3\% with an associated recall of 38.9\%. With this, we significantly improve the results obtained in previous case studies for an automated early identification of bugs that are eventually fixed. Furthermore, our study highlights the potential of using quantitative measures of social organization in collaborative software engineering. It also opens a broad perspective for the integration of social awareness in the design of support infrastructures.		Zanetti, Marcelo Serrano; Scholtes, Ingo; Tessone, Claudio Juan; Schweitzer, Frank	ICSE '13: Proceedings of the 2013 International Conference on Software Engineering	https://doi.org/10.5555/2486788.2486930		1032-1041	"""@inproceedings{10.5555/2486788.2486930,
    author = ""Zanetti, Marcelo Serrano and Scholtes, Ingo and Tessone, Claudio Juan and Schweitzer, Frank"",
    title = ""Categorizing bugs with social networks: a case study on four open source software communities"",
    year = ""2013"",
    isbn = ""9781467330763"",
    publisher = ""IEEE Press"",
    abstract = ""Efficient bug triaging procedures are an important precondition for successful collaborative software engineering projects. Triaging bugs can become a laborious task particularly in open source software (OSS) projects with a large base of comparably inexperienced part-time contributors. In this paper, we propose an efficient and practical method to identify valid bug reports which a) refer to an actual software bug, b) are not duplicates and c) contain enough information to be processed right away. Our classification is based on nine measures to quantify the social embeddedness of bug reporters in the collaboration network. We demonstrate its applicability in a case study, using a comprehensive data set of more than 700,000 bug reports obtained from the Bugzilla installation of four major OSS communities, for a period of more than ten years. For those projects that exhibit the lowest fraction of valid bug reports, we find that the bug reporters' position in the collaboration network is a strong indicator for the quality of bug reports. Based on this finding, we develop an automated classification scheme that can easily be integrated into bug tracking platforms and analyze its performance in the considered OSS communities. A support vector machine (SVM) to identify valid bug reports based on the nine measures yields a precision of up to 90.3\\% with an associated recall of 38.9\\%. With this, we significantly improve the results obtained in previous case studies for an automated early identification of bugs that are eventually fixed. Furthermore, our study highlights the potential of using quantitative measures of social organization in collaborative software engineering. It also opens a broad perspective for the integration of social awareness in the design of support infrastructures."",
    booktitle = ""Proceedings of the 2013 International Conference on Software Engineering"",
    pages = ""1032-1041"",
    numpages = ""10"",
    location = ""San Francisco, CA, USA"",
    series = ""ICSE '13""
}
"""	Excluded	Excluded				2	ACM		Categorizing bugs with social networks: a case study on four open source software communities	https://doi.org/10.5555/2486788.2486930	IEEE Press	nan; Keywords; References; Link
145	TrustSE	Open Source Software as Consumer Integration into Production	Open source software is emerging as a potentially important competitive force in the software industry, capturing the attention of venture capitalists and computing industry executives. Yet very little is known about how open source software, which is created collectively by individual volunteers, will compete with closed source software. This paper models open source software as consumer integration into production, in which users organize to produce a good for themselves. The model predicts that open source software will not compete in all product markets, but where it does, will be of higher quality than closed source software. An empirical study finds support for these predictions.	Software; open source software; nonprofit; vertical integration; R&D productivity	Jennifer W. Kuan		https://papers.ssrn.com/sol3/papers.cfm?abstract_id=259648		53	"""nan"""	Excluded	Excluded				2	Google Scholar		Open source software as consumer integration into production	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=259648	California State University Monterey Bay, College of Business	
146	TrustSE	Core and Periphery in Free/Libre and Open Source Software Team Communications	"The concept of the core group of developers is important and often discussed in empirical studies of FLOSS projects. This paper examines the question, ""how does one empirically distinguish the core?"" Being able to identify the core members of a FLOSS development project is important because many of the processes necessary for successful projects likely involve core members differently than peripheral members, so analyses that mix the two groups will likely yield invalid results. We compare 3 analysis approaches to identify the core: the named list of developers, a Bradford's law analysis that takes as the core the most frequent contributors and a social network analysis of the interaction pattern that identifies the core in a core-and-periphery structure. We apply these measures to the interactions around bug fixing for 116 SourceForge projects. The 3 techniques identify different individuals as core members; examination of which individuals are identified leads to suggestions for refining the measures. All 3 measures though suggest that the core of FLOSS projects is a small fraction of the total number of contributors."	Open source software; Pattern analysis; Linux; Testing; Social network services; Moon; Social Network Analysis; Group Concept; Project Members; Bug Fixes; Team Members; Role In Formation; Hierarchical Structure; Level Of Agreement; Paper Analyses; Active Users; Development Core; Mailing Lists; Level Of Contribution; Project Samples; Role In Projects; Project Selection; Bug Reports	K. Crowston; Kangning Wei; Qing Li; J. Howison	Proceedings of the 39th Annual Hawaii International Conference on System Sciences (HICSS'06)	https://doi.org/10.1109/HICSS.2006.101	"1.S. Borgatti and M. Everett, ""Models of core/periphery structures,"" Social Networks, vol. 21, pp. 375-395, 1999. CrossRef  Google Scholar; 2.S. C. Bradford, Documentation. Washington, DC: Public Affairs Press, 1950. Google Scholar; 3.B. C. Brookes, ""Theory of the Bradford Law,"" Journal of Documentation, vol. 33, pp. 189-209, 1977. CrossRef  Google Scholar; 4.A. Cox, ""Cathedrals, Bazaars and the Town Council,"" 1998. Google Scholar; 5.K. Crowston, ""A coordination theory approach to organizational process design,"" Organization Science, vol. 8, pp. 157-175, 1997. CrossRef  Google Scholar; 6.K. Crowston and J. Howison, ""Hierarchy and Centralization in Free and Open Source Software team communications,"" Knowledge, Technology  Policy, In press. CrossRef  Google Scholar; 7.C. Gacek and B. Arief, ""The many meanings of Open Source,"" IEEE Software, vol. 21, pp. 34-40, 2004. View Article  Google Scholar; 8.J. Howison, M. S. Conklin, and K. Crowston, ""OSSmole: A collaborative repository for FLOSS research data and analyses,"" presented at 1st International Conference on Open Source Software, Genova, Italy, 2005. Google Scholar; 9.J. James, ""A preliminary study of the size determinant in small group interaction,"" American Sociological Review, vol. 16, pp. 474-477, 1952. CrossRef  Google Scholar; 10.S. Krishnamurthy, ""Cave or Community? An Empirical Examination of 100 Mature Open Source Projects,"" University of Washington, Bothell, Bothell, WA May 2002. Google Scholar; 11.A. Mockus, R. T. Fielding, and J. D. Herbsleb, ""A case study of Open Source Software development: The Apache server,"" m Proceedings of ICSE2000, 2000, pp. 11 pages. View Article  Google Scholar; 12.A. Mockus, R. T. Fielding, and J. D. Herbsleb, ""Two Case Studies Of Open Source Software Development: Apache And Mozilla,"" ACM Transactions on Software Engineering and Methodology, vol. 11, pp. 309-346, 2002. CrossRef  Google Scholar; 13.J. Y. Moon and L. Sproull, ""Essence of distributed work: The case of Linux kernel,"" First Monday, vol. 5, 2000. CrossRef  Google Scholar; 14.E. S. Raymond, ""The cathedral and the bazaar,"" First Monday,vol.3, 1998. CrossRef  Google Scholar; 15.S. Wasserman and K. Frost, Social Network Analysis: Methods and Applications. New York: Cambridge, 1994. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Core and periphery in free/libre and open source software team communications	https://ieeexplore.ieee.org/document/1579526	IEEE	nan; Pages; Year; Bibtex
147	TrustSE	The Economics of Open Source Software: A Survey of the Early Literature	This paper reviews the recent literature on the economics of open source software. Two different sets of issues are addressed. The first looks at the incentives of programmers to participate in open source projects. The second considers the business models used by profit-making firms in the open source industry, and the effects on existing closed source firms. Some possible future research directions are also given.		Schiff Aaron	Review of Network Economics	https://econpapers.repec.org/article/bpjrneart/v_3a1_3ay_3a2002_3ai_3a1_3an_3a5.htm			"""nan"""	Excluded	Excluded				2	Google Scholar		The economics of open source software: A survey of the early literature	https://econpapers.repec.org/article/bpjrneart/v_3a1_3ay_3a2002_3ai_3a1_3an_3a5.htm	EconPapers	
148	TrustSE	Open Source Software: The New Intellectual Property Paradigm	Open source methods for creating software rely on developers who voluntarily reveal code in the expectation that other developers will reciprocate. Open source incentives are distinct from earlier uses of intellectual property, leading to different types of inefficiencies and different biases in R&D investment. Open source style of software development remedies a defect of intellectual property protection, namely, that it does not generally require or encourage disclosure of source code. We review a considerable body of survey evidence and theory that seeks to explain why developers participate in open source collaborations instead of keeping their code proprietary, and evaluates the extent to which open source may improve welfare compared to proprietary development.		Stephen M. Maurer; Suzanne Scotchmer	Economics and Information Systems	https://www.nber.org/papers/w12148			"""nan"""	Excluded	Excluded				2	Google Scholar		Open source software: the new intellectual property paradigm	https://www.nber.org/papers/w12148	Elsevier Science	
149	TrustSE	The attraction of contributors in free and open source software projects	As firms increasingly sanction an open sourcing strategy, the question of which open source project to undertake remains tentative. The lack of established metrics makes it difficult to formulate such strategy. While many projects have been formed and created, only a few managed to remain active. With the majority of these projects failing, firms need a reliable set of criteria to assess what makes a project appealing not only to developers but also to visitors, users and commercial sponsors. In this paper, we develop a theoretical model to explore the contextual and causal factors of project attractiveness in inducing activities such as source code contribution, software maintenance, and usage. We test our model with data derived from more than 4000 projects spanning 4 years. Our main findings include that projects' set of conditions such as license restrictiveness and their available resources provide the context that directly influence the amount of work activities observed in the projects. It was also found that indirect and unintended contributions such as recommending software, despite of being non-technical, cannot be ignored for project activeness, diffusion and sustainability. Finally, our analysis provide evidence that higher attractiveness leads to more code-related activities with the downside of slowing down responsiveness to address projects' tasks, such as the implementation of new features and bug fixes. Our model underscores the significance of the reinforcing effects of attractiveness and work activities in open source projects, giving us the opportunity to discuss strategies to manage common traps such as the liability of newness. We conclude by discussing the applicability of the research model to other user-led initiatives.	Attractiveness; Open source; Free software; Preferential attachment; Contributors; Contributions; Software development; Attractiveness;  Open source;  Free software;  Preferential attachment;  Contributors;  Contributions;  Software development	Santos, Carlos; Kuk, George; Kon, Fabio; Pearson, John	JOURNAL OF STRATEGIC INFORMATION SYSTEMS	https://doi.org/10.1016/j.jsis.2012.07.004		26-45	"""@article{WOS:000317162600003,
    Author = ""Santos, Carlos and Kuk, George and Kon, Fabio and Pearson, John"",
    Title = ""The attraction of contributors in free and open source software projects"",
    Journal = ""JOURNAL OF STRATEGIC INFORMATION SYSTEMS"",
    Year = ""2013"",
    Volume = ""22"",
    Number = ""1"",
    Pages = ""26-45"",
    Month = ""MAR"",
    Abstract = ""As firms increasingly sanction an open sourcing strategy, the question of which open source project to undertake remains tentative. The lack of established metrics makes it difficult to formulate such strategy. While many projects have been formed and created, only a few managed to remain active. With the majority of these projects failing, firms need a reliable set of criteria to assess what makes a project appealing not only to developers but also to visitors, users and commercial sponsors. In this paper, we develop a theoretical model to explore the contextual and causal factors of project attractiveness in inducing activities such as source code contribution, software maintenance, and usage. We test our model with data derived from more than 4000 projects spanning 4 years. Our main findings include that projects' set of conditions such as license restrictiveness and their available resources provide the context that directly influence the amount of work activities observed in the projects. It was also found that indirect and unintended contributions such as recommending software, despite of being non-technical, cannot be ignored for project activeness, diffusion and sustainability. Finally, our analysis provide evidence that higher attractiveness leads to more code-related activities with the downside of slowing down responsiveness to address projects' tasks, such as the implementation of new features and bug fixes. Our model underscores the significance of the reinforcing effects of attractiveness and work activities in open source projects, giving us the opportunity to discuss strategies to manage common traps such as the liability of newness. We conclude by discussing the applicability of the research model to other user-led initiatives. (C) 2012 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Santos, C (Corresponding Author), Univ Brasilia, Dept Adm, Campus Darcy Ribeiro,Asa Norte ICC Norte 1 Andar,, BR-70910900 Brasilia, DF, Brazil. Santos, Carlos, Univ Brasilia, Dept Management, BR-70910900 Brasilia, DF, Brazil. Kuk, George, Univ Nottingham, Sch Business, Nottingham NG7 2RD, England. Kon, Fabio, Univ Sao Paulo, Dept Comp Sci, Inst Math \\& Stat, BR-05508090 Sao Paulo, Brazil. Pearson, John, So Illinois Univ, Dept Management Informat Syst, Coll Business, Carbondale, IL 62901 USA."",
    DOI = ""10.1016/j.jsis.2012.07.004"",
    ISSN = ""0963-8687"",
    EISSN = ""1873-1198"",
    Keywords = ""Attractiveness; Open source; Free software; Preferential attachment; Contributors; Contributions; Software development"",
    Keywords-Plus = ""NETWORK; PARTICIPATION; IMPACT; COLLABORATION; DISTRIBUTIONS; INNOVATION; EMERGENCE; COMMUNITY; SUCCESS; CHOICE"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""carlosdenner@unb.br george.kuk@nottingham.ac.uk kon@ime.usp.br jpearson@business.siuc.edu"",
    Affiliations = ""Universidade de Brasilia; University of Nottingham; Universidade de Sao Paulo; Southern Illinois University System; Southern Illinois University"",
    ResearcherID-Numbers = ""Santos, Carlos/A-8821-2013 Kon, Fabio/H-2743-2012"",
    ORCID-Numbers = ""Kon, Fabio/0000-0003-3888-7340 Kuk, George/0000-0002-1288-3635 Santos, Carlos Denner dos/0000-0002-4481-0115"",
    Funding-Acknowledgement = ""FAPESP {[}2009/02046-2]; Horizon Digital Economy Research Institute at the University of Nottingham; EPSRC {[}EP/G065802/1] Funding Source: UKRI"",
    Funding-Text = ""This research was funded by FAPESP (www.fapesp.br, process: 2009/02046-2), and the Horizon Digital Economy Research Institute at the University of Nottingham (http://www.horizon.ac.uk/). The sponsors had no influence on the decision to publish or in the content of the paper."",
    Number-of-Cited-References = ""91"",
    Times-Cited = ""54"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""71"",
    Journal-ISO = ""J. Strateg. Inf. Syst."",
    Doc-Delivery-Number = ""120HY"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000317162600003"",
    DA = ""2024-11-06""
}
"""	Included	Included				2	Web of Science		The attraction of contributors in free and open source software projects	https://www.webofscience.com/wos/woscc/full-record/WOS:000317162600003	ELSEVIER	nan; References
150	TrustSE	Open source movements as a model for organising	Open source software such as the operating system Linux has in a few years created much attention as an alternative way to develop and distribute software. Open source is to let anyone have access to the source code, so that they can modify it. Open source can be seen as a movement, where communities of highly skilled programmers collectively develop software, often of a quality that outperforms commercial proprietary software. These movements are based on virtual networking on the Internet and the web. They are loosely coupled communities kept together by strong common values related to hacker culture. Work seems to be totally distributed, delegated and loosely coupled. The highly skilled members contribute to the collective effort of free software development. In this paper the open source phenomenon is investigated from different perspectives. It is claimed that the open source movement is one key to the understanding of future forms of organizations, information work and business.		Ljungberg, J.	European Journal of Information Systems	https://doi.org/10.1057/palgrave.ejis.3000373		208 - 216	"""@ARTICLE{Ljungberg2000208,
    author = ""Ljungberg, J."",
    title = ""Open source movements as a model for organising"",
    year = ""2000"",
    journal = ""European Journal of Information Systems"",
    volume = ""9"",
    number = ""4"",
    pages = ""208 - 216"",
    doi = ""10.1057/palgrave.ejis.3000373"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-23044524399\&doi=10.1057\%2fpalgrave.ejis.3000373\&partnerID=40\&md5=009c9cd1feb81115402a70162b4fdd58"",
    affiliations = ""Viktoria Institute, Goteborg, Sweden"",
    abstract = ""Open source software such as the operating system Linux has in a few years created much attention as an alternative way to develop and distribute software. Open source is to let anyone have access to the source code, so that they can modify it. Open source can be seen as a movement, where communities of highly skilled programmers collectively develop software, often of a quality that outperforms commercial proprietary software. These movements are based on virtual networking on the Internet and the web. They are loosely coupled communities kept together by strong common values related to hacker culture. Work seems to be totally distributed, delegated and loosely coupled. The highly skilled members contribute to the collective effort of free software development. In this paper the open source phenomenon is investigated from different perspectives. It is claimed that the open source movement is one key to the understanding of future forms of organizations, information work and business. (c) 2000 Operational Research Society Ltd. All rights reserved."",
    correspondence_address = ""J. Ljungberg; Viktoria Institute, Goteborg, Sweden; email: Janl@viktoria.informatik.gu.se"",
    issn = ""0960085X"",
    language = ""English"",
    abbrev_source_title = ""Eur. J. Inf. Syst."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 162""
}
"""	Excluded	Excluded				2	Scopus Signed In		Open source movements as a model for organising	https://www.scopus.com/record/display.uri?eid=2-s2.0-23044524399&origin=resultslist&sort=r-f&src=s&sid=ac8a494282f8ff7028a712cf2e146eed&sot=b&sdt=b&s=TITLE%28open+source+movements+as+a+model+for+organising%29&sl=54&sessionSearchId=ac8a494282f8ff7028a712cf2e146eed&relpos=0		nan; Keywords; References; Publisher
151	TrustSE	Networking beyond the software code? an explorative examination of the development of an open source car project	At present several initiatives have emerged that claim to be innovative while acting according to the mechanisms of open source software (OSS) a field frequently deemed to be a role model for open innovation Against this background this study focuses on a case study of the development of an automobile Based on a commons-based peer production-Informed perspective we show that this project displays a variety of characteristics that are usually associated with OSS projects In particular parallels can be drawn between the intrinsic and extrinsic motivations the ability to broadcast ideas due to the virtual nature of the tasks and the self-selection of tasks due to their modular nature The drawing of such parallels however must be done cautiously because diverse factors such as opportunity costs regulations and feasibility studies limit the applicability of OSS principles to this non-software related network of dispersed voluntary contributors within a commons-based peer production framework Herein we attempt to clarify how OSS projects can and cannot work as role models for open innovation in the automotive as well as other product-oriented industries	Open innovation; Open source software; Project networks; Modularity; Motivation; Automotive industry; Open innovation;  Open source software;  Project networks;  Modularity;  Motivation;  Automotive industry	Muller-Seitz, Gordon; Reger, Guido	TECHNOVATION	https://doi.org/10.1016/j.technovation.2010.07.006		627-634	"""@article{WOS:000283980600012,
    Author = ""Muller-Seitz, Gordon and Reger, Guido"",
    Title = ""Networking beyond the software code? an explorative examination of the development of an open source car project"",
    Journal = ""TECHNOVATION"",
    Year = ""2010"",
    Volume = ""30"",
    Number = ""11-12"",
    Pages = ""627-634"",
    Month = ""NOV-DEC"",
    Abstract = ""At present several initiatives have emerged that claim to be innovative while acting according to the mechanisms of open source software (OSS) a field frequently deemed to be a role model for open innovation Against this background this study focuses on a case study of the development of an automobile Based on a commons-based peer production-Informed perspective we show that this project displays a variety of characteristics that are usually associated with OSS projects In particular parallels can be drawn between the intrinsic and extrinsic motivations the ability to broadcast ideas due to the virtual nature of the tasks and the self-selection of tasks due to their modular nature The drawing of such parallels however must be done cautiously because diverse factors such as opportunity costs regulations and feasibility studies limit the applicability of OSS principles to this non-software related network of dispersed voluntary contributors within a commons-based peer production framework Herein we attempt to clarify how OSS projects can and cannot work as role models for open innovation in the automotive as well as other product-oriented industries (C) 2010 Elsevier Ltd All rights reserved"",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Muller-Seitz, G (Corresponding Author), Free Univ Berlin, Dept Management, Boltzmannstr 20, D-14195 Berlin, Germany. Muller-Seitz, Gordon, Free Univ Berlin, Dept Management, D-14195 Berlin, Germany. Reger, Guido, Univ Potsdam, Ctr Entrepreneurship \\& Innovat, D-14482 Potsdam, Germany."",
    DOI = ""10.1016/j.technovation.2010.07.006"",
    ISSN = ""0166-4972"",
    EISSN = ""1879-2383"",
    Keywords = ""Open innovation; Open source software; Project networks; Modularity; Motivation; Automotive industry"",
    Keywords-Plus = ""INNOVATION; COMMUNITY; LINUX; ORGANIZATION; CREATION; MODEL"",
    Research-Areas = ""Engineering; Business \\& Economics; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Engineering, Industrial; Management; Operations Research \\& Management Science"",
    Affiliations = ""Free University of Berlin; University of Potsdam"",
    ORCID-Numbers = ""Muller-Seitz, Gordon/0000-0003-2232-2644"",
    Number-of-Cited-References = ""53"",
    Times-Cited = ""28"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""37"",
    Journal-ISO = ""Technovation"",
    Doc-Delivery-Number = ""677HV"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000283980600012"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Networking beyond the software code? an explorative examination of the development of an open source car project	https://www.webofscience.com/wos/woscc/full-record/WOS:000283980600012	ELSEVIER	nan; References
152	TrustSE	"""INFECTIOUS"" OPEN SOURCE SOFTWARE: SPREADING INCENTIVES OR PROMOTING RESISTANCE?"	Some free or open source software infects other software with its licensing terms. Popularly, this is called a viral license, but the software is not a computer virus. Free or open source software is a copyright-based licensing system. It typically allows modification and distribution on conditions such as source code availability, royalty free use and other requirements. Some licenses require distribution of modifications under the same terms. A license is infectious when it has a strong scope for the modifications provision. The scope arises from a broad conception of software derivative works. A strong infectious ambit would apply itself to modified software, and to software intermixed or coupled with non-open-source software. Popular open source software, including the GNU/Linux operating system, uses a license with this feature. This Article assesses the efficacy of broad infectious license terms to determine their incentive effects for open source and proprietary software. The analysis doubts beneficial effects. Rather, on balance, such terms may produce incentives detrimental to interoperability and coexistence between open and proprietary code. As a result, open source licensing should precisely define infectious terms in order to support open source development without countervailing effects and misaligned incentives.		Greg R. Vetter	RUTGERS LAW JOURNAL	https://www.law.uh.edu/faculty/gvetter/documents/vetter.infectiousoss.incentivesorresistance.final.pdf		110	"""nan"""	Excluded	Excluded				2	Google Scholar		Infectious open source software: Spreading incentives or promoting resistance	https://www.law.uh.edu/faculty/gvetter/documents/vetter.infectiousoss.incentivesorresistance.final.pdf		
153	TrustSE	Analysis of license inconsistency in large collections of open source projects	Free and open source software (FOSS) plays an important role in source code reuse practice. They usually come with one or more software licenses written in the header part of source files, stating the requirements and conditions which should be followed when been reused. Removing or modifying the license statement by re-distributors will result in the inconsistency of license with its ancestor, and may potentially cause license infringement. In this paper, we describe and categorize different types of license inconsistencies and propose a method to detect them. Then we applied this method to Debian 7.5 and a collection of 10,514 Java projects on GitHub and present the license inconsistency cases found in these systems. With a manual analysis, we summarized various reasons behind these license inconsistency cases, some of which imply potential license infringement and require attention from the developers. This analysis also exposes the difficulty to discover license infringements, highlighting the usefulness of finding and maintaining source code provenance.	Codes (symbols); Computer software reusability; Copyrights; Open systems; Software engineering; Code clone; Free and open source softwares; License inconsistency; Manual analysis; Open source projects; Software license; Source codes; Source files; Open source software; Codes (symbols);  Computer software reusability;  Copyrights;  Open systems;  Software engineering;  Code clone;  Free and open source softwares;  License inconsistency;  Manual analysis;  Open source projects;  Software license;  Source codes;  Source files;  Open source software	Wu, Yuhao; Manabe, Yuki; Kanda, Tetsuya; German, Daniel M.; Inoue, Katsuro	Empirical Software Engineering	https://doi.org/10.1007/s10664-016-9487-8		1194 - 1222	"""@ARTICLE{Wu20171194,
    author = ""Wu, Yuhao and Manabe, Yuki and Kanda, Tetsuya and German, Daniel M. and Inoue, Katsuro"",
    title = ""Analysis of license inconsistency in large collections of open source projects"",
    year = ""2017"",
    journal = ""Empirical Software Engineering"",
    volume = ""22"",
    number = ""3"",
    pages = ""1194 - 1222"",
    doi = ""10.1007/s10664-016-9487-8"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85001114526\&doi=10.1007\%2fs10664-016-9487-8\&partnerID=40\&md5=86fcde6439357f05edce98e0c7b073b1"",
    affiliations = ""Graduate School of Information Science and Technology, Osaka University, Osaka, Japan; Faculty of Advanced Science and Technology, Kumamoto University, Kumamoto, Japan; Graduate School of Information Science, Nara Institute of Science and Technology, Nara, Japan; Department of Computer Science, University of Victoria, Victoria, Canada"",
    abstract = ""Free and open source software (FOSS) plays an important role in source code reuse practice. They usually come with one or more software licenses written in the header part of source files, stating the requirements and conditions which should be followed when been reused. Removing or modifying the license statement by re-distributors will result in the inconsistency of license with its ancestor, and may potentially cause license infringement. In this paper, we describe and categorize different types of license inconsistencies and propose a method to detect them. Then we applied this method to Debian 7.5 and a collection of 10,514 Java projects on GitHub and present the license inconsistency cases found in these systems. With a manual analysis, we summarized various reasons behind these license inconsistency cases, some of which imply potential license infringement and require attention from the developers. This analysis also exposes the difficulty to discover license infringements, highlighting the usefulness of finding and maintaining source code provenance. (c) 2016, Springer Science+Business Media New York."",
    author_keywords = ""Code clone; License inconsistency; Software license"",
    keywords = ""Codes (symbols); Computer software reusability; Copyrights; Open systems; Software engineering; Code clone; Free and open source softwares; License inconsistency; Manual analysis; Open source projects; Software license; Source codes; Source files; Open source software"",
    correspondence_address = ""Y. Wu; Graduate School of Information Science and Technology, Osaka University, Osaka, Japan; email: wuyuhao@ist.osaka-u.ac.jp"",
    publisher = ""Springer New York LLC"",
    issn = ""13823256"",
    coden = ""ESENF"",
    language = ""English"",
    abbrev_source_title = ""Empir Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 21""
}
"""	Excluded	Excluded				2	Scopus Signed In		Analysis of license inconsistency in large collections of open source projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-85001114526&origin=resultslist&sort=r-f&src=s&sid=d4b83784efd467b6f0a0158378a20726&sot=b&sdt=b&s=TITLE%28analysis+of+license+inconsistency+in+large+collections+of+open+source+projects%29&sl=85&sessionSearchId=d4b83784efd467b6f0a0158378a20726&relpos=0	Springer New York LLC	nan; References
154	TrustSE	Coordinating interdependencies in online communities: A study of an open source software project	"To manage work interdependencies, online communities draw on a variety of arm's length coordination mechanisms offered by information technology platforms and associated practices. However, ""unresolved interdependencies"" remain that cannot be addressed by such arm's length mechanisms. These interdependencies reflect, for example, unidentified or emerging knowledge-based dependencies between the community members or unaccounted relationships between ongoing community tasks. At the same time, online communities cannot resort to hierarchical coordination mechanisms such as incentives or command structures to address such interdependencies. So, how do they manage such interdependencies? To address this question, we conduct an exploratory, theory-generating case study involving qualitative and computational analyses of development activities within an open source software community: Rubinius. We analyze the ongoing management of interdependencies within the community and find that unresolved interdependencies are associated with alternatively structured sequences of activities, which we define as routines. In particular, we observe that two distinct classes of interdependencies-development and developer interdependencies-are associated with alternative forms of routine variation. We identify two generalized routine components-direct implementation and knowledge integration, which address these two distinct classes of unresolved interdependencies. In particular, direct implementation deals with development interdependencies within the code that are not already coordinated through modular interfaces, while knowledge integration resolves unaccounted interdependencies between developers. We conclude with implications for research into organizing principles for online communities and note the significance of our findings for the study of coordination in organization studies in general."	Computation theory; Computer software; Knowledge based systems; Online systems; Open systems; Social networking (online); Software engineering; Coordination; Interdependencies; On-line communities; Ordering variations; Routines; Sequence analysis; Open source software; Computation theory;  Computer software;  Knowledge based systems;  Online systems;  Open systems;  Social networking (online);  Software engineering;  Coordination;  Interdependencies;  On-line communities;  Ordering variations;  Routines;  Sequence analysis;  Open source software	Lindberg, Aron; Berente, Nicholas; Gaskin, James; Lyytinen, Kalle	Information Systems Research	https://doi.org/10.1287/isre.2016.0673		751 - 772	"""@ARTICLE{Lindberg2016751,
    author = ""Lindberg, Aron and Berente, Nicholas and Gaskin, James and Lyytinen, Kalle"",
    title = ""Coordinating interdependencies in online communities: A study of an open source software project"",
    year = ""2016"",
    journal = ""Information Systems Research"",
    volume = ""27"",
    number = ""4"",
    pages = ""751 - 772"",
    doi = ""10.1287/isre.2016.0673"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85010408653\&doi=10.1287\%2fisre.2016.0673\&partnerID=40\&md5=3d65d0d60fb052f0f37b2ebb9af08fd7"",
    affiliations = ""School of Business, Stevens Institute of Technology, Hoboken, 07030, NJ, United States; Terry College of Business, University of Georgia, Athens, 30602, GA, United States; Marriott School of Management, Brigham Young University, Provo, 84602, UT, United States; Weatherhead School of Management, Case Western Reserve University, Cleveland, 44106, OH, United States"",
    abstract = {To manage work interdependencies, online communities draw on a variety of arm's length coordination mechanisms offered by information technology platforms and associated practices. However, ""unresolved interdependencies"" remain that cannot be addressed by such arm's length mechanisms. These interdependencies reflect, for example, unidentified or emerging knowledge-based dependencies between the community members or unaccounted relationships between ongoing community tasks. At the same time, online communities cannot resort to hierarchical coordination mechanisms such as incentives or command structures to address such interdependencies. So, how do they manage such interdependencies? To address this question, we conduct an exploratory, theory-generating case study involving qualitative and computational analyses of development activities within an open source software community: Rubinius. We analyze the ongoing management of interdependencies within the community and find that unresolved interdependencies are associated with alternatively structured sequences of activities, which we define as routines. In particular, we observe that two distinct classes of interdependencies-development and developer interdependencies-are associated with alternative forms of routine variation. We identify two generalized routine components-direct implementation and knowledge integration, which address these two distinct classes of unresolved interdependencies. In particular, direct implementation deals with development interdependencies within the code that are not already coordinated through modular interfaces, while knowledge integration resolves unaccounted interdependencies between developers. We conclude with implications for research into organizing principles for online communities and note the significance of our findings for the study of coordination in organization studies in general. (c) 2016 INFORMS.},
    author_keywords = ""Activity variation; Coordination; Interdependencies; Online communities; Open source software; Order variation; Routines; Sequence analysis"",
    keywords = ""Computation theory; Computer software; Knowledge based systems; Online systems; Open systems; Social networking (online); Software engineering; Coordination; Interdependencies; On-line communities; Ordering variations; Routines; Sequence analysis; Open source software"",
    publisher = ""INFORMS Inst.for Operations Res.and the Management Sciences"",
    issn = ""10477047"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. Res."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 102""
}
"""	Excluded	Excluded				2	Scopus Signed In		Coordinating interdependencies in online communities: A study of an open source software project	https://www.scopus.com/record/display.uri?eid=2-s2.0-85010408653&origin=resultslist&sort=r-f&src=s&sid=cb77b1c67abbef280e8c8f4f9cf4fb10&sot=b&sdt=b&s=TITLE%28coordinating+interdependencies+in+online+communities+a+study+of+an+open+source+software+project%29&sl=102&sessionSearchId=cb77b1c67abbef280e8c8f4f9cf4fb10&relpos=0	INFORMS Inst.for Operations Res.and the Management Sciences	nan; References
155	TrustSE	Browse Theses			Patrick Adam Wagstrom		https://dl.acm.org/doi/book/10.5555/1751233				Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Vertical interaction in open software engineering communities	https://dl.acm.org/doi/book/10.5555/1751233	Association for Computing Machinery	nan; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex
156	TrustSE	The Mysteries of Open Source Software: Black and White and Red All Over?	Open Source Software (OSS) has attracted enormous media and research attention since the term was coined in February 1998. The concept itself is founded on the paradoxical premise that software source code-the 'crown jewels' for many proprietary software companies-should be provided freely to anyone who wishes to see it. Given this fundamental initial paradox, it is perhaps hardly surprising that the OSS concept is characterised by contradictions, paradoxes and tensions throughout. In this paper we focus specifically on the following issues in relation to OSS: the cathedral v. bazaar development approach; collectivism v. individualism, the bitter strife within the OSS community itself (OSS v. OSS), and between OSS and the Free Software Foundation (OSS v. FSF); whether OSS represents a paradigm shift in the software industry; whether the software is truly open-the Berkeley Conundrum, as we have termed it here; whether OSS truly is high quality software; and whether OSS is a 'one size fits all,' representing the future model for all software development.	Open source software; Software quality; Linux; Computer industry; Operating systems; State feedback; Industrial relations; Programming; Explosions; Resonance; Open-source; Open-source Software; Title Of The Paper; English-speaking Regions; Paradigm Shift; Source Code; Individualism; Software Development; Proprietary Software; Software Industry; Free Software Foundation; Crown Jewels; Development Process; Operating System; Modularity; Processing Software; Software Engineering; Binary Format; Ms Window; Software Product; Open Source Software Projects; Silver Bullet; Open-source Community; Self-deprecating; Software Vendors; Open-source Projects; Rapid Timescale; Voluntary Contributions; Availability Of Source Code; Software Quality	B. Fitzgerald; P.J. Agerfalk	Proceedings of the 38th Annual Hawaii International Conference on System Sciences	https://doi.org/10.1109/HICSS.2005.609	"1.M. Bergquist and J. Ljungberg, ""The Power of Gifts: Organising Social Relationships in Open Source Communities"" in , Sweden:Gothenberg University, 2001. CrossRef  Google Scholar; 2.F. Brooks, ""The Mythical Man-Month"" in , USA:Addison-Wesley, 1975. CrossRef  Google Scholar; 3.F. Brooks, ""No silver bullet: essence and accidents of software engineering"", IEEE Computer Magazine, April 1987. View Article  Google Scholar; 4.M. Campbell-Kelly, ""A History of the Software Industry"" in , Cambridge, MA:MIT Press, 2003. Google Scholar; 5.A. Cox, Cathedrals bazaars and the town council, 1998. Google Scholar; 6.B.J. Dempsey, D. Weiss, P. Jones and J. Greenberg, ""A quantitative profile of a community of open source Linux developers"", Technical Report TR-1999-05, 1999. Google Scholar; 7.C. Di Bona, S. Ockman and M. Stone, ""Introduction to Open Sources: Voices from the Open Source Revolution"" in , USA:OReilly  Associates, 1999. Google Scholar; 8.J. Feller and B. Fitzgerald, ""A Framework Analysis of the Open Source Development Paradigm"", Proceedings of the 21st International Conference in Information Systems, December 2000. Google Scholar; 9.P. Flaatten, D. McCubbrey, P. ORiordan and K. Burgess, ""Foundations of Business Systems"" in , Chicago:Dryden Press, 1989. Google Scholar; 10.K. Fogel, ""Open Source Development with CVS"" in , USA:Coriolis Open Press, 1999. Google Scholar; 11.R. Ghosh and V.V. Prakash, ""The Orbiten Free Software Survey"", First Monday, vol. 5, pp. 7, 2000. CrossRef  Google Scholar; 12.""The Halloween Documents"", 1998. Google Scholar; 13.R. Irwin, ""What is FUD?"", 1998. Google Scholar; 14.N. Jorgensen, ""Putting It All in the Trunk: Incremental Software Development in the FreeBSD Open Source Project"" in , Denmark:Roskilde University, 2001. CrossRef  Google Scholar; 15.K. Kuwabara, ""Linux: A Bazaar at the Edge of Chaos"", First Monday, vol. 5, pp. 3, 2000. CrossRef  Google Scholar; 16.E. Leibovitch, ""The Business Case for Linux"", IEEE Software, Jan/Feb 1999. View Article  Google Scholar; 17.T. Lewis, ""The Open Source Acid Test"", IEEE Computer, Feb 1999. View Article  Google Scholar; 18.J. Lerner and J. Tirole, ""The simple economics of open source"", Harvard Business School Working Paper #00-059, 2000. CrossRef  Google Scholar; 19.A Leonard, Salon Free Software Project: Chapter 1 Boot Time, 2000. Google Scholar; 20.J. Ljungberg, ""Open source movements as a model of organising"", Proceedings of 8th European Conference on Information Systems, 2000. CrossRef  Google Scholar; 21.S. McConnell, ""Open Source Methodology: Ready for Prime Time?"", IEEE Software, Jul/Aug 1999. Google Scholar; 22.M. McKusick, ""Twenty Years of Berkeley UNIX: From AT to Freely Redistributable"" in Open Sources: Voices from the Open Source Revolution, USA:OReilly  Associates, 1999. Google Scholar; 23.B. Metcalfe, From the ether, June 1999. Google Scholar; 24.R. Mitchell, ""New Numbers Historic Ramifications"", Wide Open News, February 2000. Google Scholar; 25.R. Mitchell, ""Linux Widens Lead in Web Market Share"", Wide Open News, April 2000. Google Scholar; 26.A. Mockus, R. Fielding and J. Herbsleb, ""A case study of open source software development: the Apache server"", Proceedings of 22nd International Conference on Software Engineering, pp. 263-272, 2000. View Article  Google Scholar; 27.T. Nadeau, Learning from Linux, 1999. Google Scholar; 28.L. Nakakoji and K. Yakamoto, ""A taxonomy of open source software development"", Proceedings of First Workshop on Open Source Software, 2001. Google Scholar; 29.The Netcraft Web Server Survey, 2001. Google Scholar; 30.S OMahony, ""Non-Profit Foundations and their Role in Community-Firm Software Collaboration"" in Perspectives on Free and Open Source Software, Cambridge:MIT Press, 2004. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		The mysteries of open source software: Black and white and red all over?	https://ieeexplore.ieee.org/document/1385636	IEEE	nan; Pages; Year; Bibtex
157	TrustSE	Trust engineering:rejecting the tyranny of the weakest link	In 2002 [1], the National Security Agency's Information Assurance Research Group coined the term,trust engineering, to describe a methodology for making use of software of uncertain provenance in mission-critical systems. Today, the loss of control that made software so hard to trust then applies to the rest of the supply chain as well. The discipline we described in the internal paper, <u>Trust-engineering: An Assurance Strategy for Software-based Systems</u>, no longer seems heretical today, even at NSA. Ten years later, we revisit the principles of trust engineering, compare the mechanisms available to us today with the practices of the past, and explore the construction of systems that are stronger than their weakest link.	assurance; composition; containment; defense in depth; isolation; layered; monitoring; moving target defense; provenance; supply chain; trust; trust engineering; virtualization	Susan D. Alexander	ACSAC '12: Proceedings of the 28th Annual Computer Security Applications Conference	https://doi.org/10.1145/2420950.2420973		145-148		Excluded	Excluded				2	ACM		Trust engineering: rejecting the tyranny of the weakest link	https://doi.org/10.1145/2420950.2420973	Association for Computing Machinery	nan; References; Year; Bibtex; Link
158	TrustSE	Learning from open source software projects to improve scientific review	Peer-reviewed publications are the primary mechanism for sharing scientific results. The current peer-review process is, however, fraught with many problems that undermine the pace, validity, and credibility of science. We highlight five salient problems: (1) reviewers are expected to have comprehensive expertise; (2) reviewers do not have sufficient access to methods and materials to evaluate a study; (3) reviewers are neither identified nor acknowledged; (4) there is no measure of the quality of a review; and (5) reviews take a lot of time, and once submitted cannot evolve. We propose that these problems can be resolved by making the following changes to the review process. Distributing reviews to many reviewers would allow each reviewer to focus on portions of the article that reflect the reviewer's specialty or area of interest and place less of a burden on any one reviewer. Providing reviewers materials and methods to perform comprehensive evaluation would facilitate transparency, greater scrutiny, and replication of results. Acknowledging reviewers makes it possible to quantitatively assess reviewer contributions, which could be used to establish the impact of the reviewer in the scientific community. Quantifying review quality could help establish the importance of individual reviews and reviewers as well as the submitted article. Finally, we recommend expediting post-publication reviews and allowing for the dialogue to continue and flourish in a dynamic and interactive manner. We argue that these solutions can be implemented by adapting existing features from open-source software management and social networking technologies. We propose a model of an open, interactive review system that quantifies the significance of articles, the quality of reviews and the reputation of reviewers.	Computer software; Publishing; Social sciences computing; Area of interest; Comprehensive evaluation; Open source software development; Open source software projects; Open-source softwares; Peer review; Peer-review process; Primary mechanism; Reputation assessment; Review process; Review quality; Scientific community; Scientific results; article; computer program; learning; peer review; publication; quantitative analysis; reproducibility; social network; standardization; validity; Quality control; Computer software;  Publishing;  Social sciences computing;  Area of interest;  Comprehensive evaluation;  Open source software development;  Open source software projects;  Open-source softwares;  Peer review;  Peer-review process;  Primary mechanism;  Reputation assessment;  Review process;  Review quality;  Scientific community;  Scientific results;  article;  computer program;  learning;  peer review;  publication;  quantitative analysis;  reproducibility;  social network;  standardization;  validity;  Quality control	Ghosh, Satrajit S.; Klein, Arno; Avants, Brian; Jarrod Millman, K.	Frontiers in Computational Neuroscience	https://doi.org/10.3389/fncom.2012.00018			"""@ARTICLE{Ghosh2012,
    author = ""Ghosh, Satrajit S. and Klein, Arno and Avants, Brian and Jarrod Millman, K."",
    title = ""Learning from open source software projects to improve scientific review"",
    year = ""2012"",
    journal = ""Frontiers in Computational Neuroscience"",
    number = ""MARCH 2012"",
    doi = ""10.3389/fncom.2012.00018"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859024378\&doi=10.3389\%2ffncom.2012.00018\&partnerID=40\&md5=bc62484aca10cff586f386d95381b419"",
    affiliations = ""McGovern Institute for Brain Research, Massachusetts Institute of Technology, Cambridge, MA, United States; New York State Psychiatric Institute, Columbia University, New York, NY, United States; PICSL, Department of Radiology, University of Pennsylvania School of Medicine, Philadelphia, PA, United States; Helen Wills Neuroscience Institute, University of California, Berkeley, CA, United States"",
    abstract = ""Peer-reviewed publications are the primary mechanism for sharing scientific results. The current peer-review process is, however, fraught with many problems that undermine the pace, validity, and credibility of science. We highlight five salient problems: (1) reviewers are expected to have comprehensive expertise; (2) reviewers do not have sufficient access to methods and materials to evaluate a study; (3) reviewers are neither identified nor acknowledged; (4) there is no measure of the quality of a review; and (5) reviews take a lot of time, and once submitted cannot evolve. We propose that these problems can be resolved by making the following changes to the review process. Distributing reviews to many reviewers would allow each reviewer to focus on portions of the article that reflect the reviewer's specialty or area of interest and place less of a burden on any one reviewer. Providing reviewers materials and methods to perform comprehensive evaluation would facilitate transparency, greater scrutiny, and replication of results. Acknowledging reviewers makes it possible to quantitatively assess reviewer contributions, which could be used to establish the impact of the reviewer in the scientific community. Quantifying review quality could help establish the importance of individual reviews and reviewers as well as the submitted article. Finally, we recommend expediting post-publication reviews and allowing for the dialogue to continue and flourish in a dynamic and interactive manner. We argue that these solutions can be implemented by adapting existing features from open-source software management and social networking technologies. We propose a model of an open, interactive review system that quantifies the significance of articles, the quality of reviews and the reputation of reviewers. (c) 2012 Ghosh, Klein, Avants and Millman."",
    author_keywords = ""Code review systems; Distributed peer review; Open source software development; Post-publication peer review; Reputation assessment; Review quality"",
    keywords = ""Computer software; Publishing; Social sciences computing; Area of interest; Comprehensive evaluation; Open source software development; Open source software projects; Open-source softwares; Peer review; Peer-review process; Primary mechanism; Reputation assessment; Review process; Review quality; Scientific community; Scientific results; article; computer program; learning; peer review; publication; quantitative analysis; reproducibility; social network; standardization; validity; Quality control"",
    correspondence_address = ""S. S. Ghosh; McGovern Institute for Brain Research, Massachusetts Institute of Technology, Cambridge, MA 02139, 43 Vassar St, 46-4033F MIT, United States; email: satra@mit.edu"",
    issn = ""16625188"",
    language = ""English"",
    abbrev_source_title = ""Front. Comput. Neurosci."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 20; All Open Access, Gold Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Learning from open source software projects to improve scientific review	https://www.scopus.com/record/display.uri?eid=2-s2.0-84859024378&origin=resultslist&sort=r-f&src=s&sid=7350473b3decc0974080621a3bc0e3da&sot=b&sdt=b&s=TITLE%28learning+from+open+source+software+projects+to+improve+scientific+review%29&sl=79&sessionSearchId=7350473b3decc0974080621a3bc0e3da&relpos=0		nan; References; Pages; Publisher
159	TrustSE	Managing the bazaar: commercialization and peripheral participation in mature, community-led free/open source software projects	The thesis investigates two fundamental dynamics of participation and collaboration in mature, community-led Free/Open Source (F/OS) software projects - commercialization and peripheral participation. The aim of the thesis is to examine whether the power relations that underlie the F/OS model of development are indicative of a new form of power relations supported by ICTs. Theoretically, the thesis is located within the Communities of Practice (CoP) literature and it draws upon Michel Foucault's ideas about the historical and relational character of power. It also mobilizes, to a lesser extent, Erving Goffman's notion of `face-work'. This framework supports a methodology that questions the rationality of how F/OS is organized and examines the relations between employed coders and volunteers, experienced and inexperienced coders, and programmers and nonprogrammers. The thesis examines discursive and structural dimensions of collaboration and employs quantitative and qualitative methods. Structural characteristics are considered in the light of arguments about embeddedness. The thesis contributes insights into how the gift economy is embedded in the exchange economy and the role of peripheral contributors. The analysis indicates that community-integrated paid developers have a key role in project development, maintaining the infrastructure aspects of the code base. The analysis suggests that programming and non-programming contributors are distinct in their make-up, priorities and rhythms of participation, and that learning plays an important role in controlling access. The results show that volunteers are important drivers of peripheral activities, such as translation and documentation. The term `autonomous peripherality' is used to capture the unique characteristics of these activities. These findings support the argument that centrality and peripherality are associated with the division of labour, which, in turn, is associated with employment relations and frameworks of institutional support. The thesis shows how the tensions produced by commercialization and peripheral participation are interwoven with values of meritocracy, ritual and strategic enactment of the idea of community as well as with tools and techniques developed to address the emergence of a set of problems specific to management and governance. These are characterized as `technologies of communities'. It is argued that the emerging topology of F/OS participation, seen as a `relational meshwork', is indicative of a redefinition of the relationship between sociality and economic production within mature, community-led F/OS projects.		Berdou, Evangelia	LSE History of Thought theses	http://etheses.lse.ac.uk/116/			"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Managing the Bazaar: Commercialization and peripheral participation in mature, community-led Free/Open source software projects	http://etheses.lse.ac.uk/116/	London School of Economics and Political Science	
160	TrustSE	A survey of trust in computer science and the Semantic Web	Trust is an integral component in many kinds of human interaction, allowing people to act under uncertainty and with the risk of negative consequences. For example, exchanging money for a service, giving access to your property, and choosing between conflicting sources of information all may utilize some form of trust. In computer science, trust is a widely used term whose definition differs among researchers and application areas. Trust is an essential component of the vision for the SemanticWeb, where both new problems and new applications of trust are being studied. This paper gives an overview of existing trust research in computer science and the Semantic Web.	trust; web of trust; policies; reputation; trust;  web of trust;  policies;  reputation	Artz, Donovan; Gil, Yolanda	JOURNAL OF WEB SEMANTICS	https://doi.org/10.1016/j.websem.2007.03.002		58-71	"""@article{WOS:000247054400003,
    Author = ""Artz, Donovan and Gil, Yolanda"",
    Title = ""A survey of trust in computer science and the Semantic Web"",
    Journal = ""JOURNAL OF WEB SEMANTICS"",
    Year = ""2007"",
    Volume = ""5"",
    Number = ""2"",
    Pages = ""58-71"",
    Month = ""JUN"",
    Abstract = ""Trust is an integral component in many kinds of human interaction, allowing people to act under uncertainty and with the risk of negative consequences. For example, exchanging money for a service, giving access to your property, and choosing between conflicting sources of information all may utilize some form of trust. In computer science, trust is a widely used term whose definition differs among researchers and application areas. Trust is an essential component of the vision for the SemanticWeb, where both new problems and new applications of trust are being studied. This paper gives an overview of existing trust research in computer science and the Semantic Web. (C) 2007 Published by Elsevier B. V."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Gil, Y (Corresponding Author), Univ So Calif, Inst Informat Sci, 4677 Admiralty Way, Marina Del Rey, CA 90292 USA. Univ So Calif, Inst Informat Sci, Marina Del Rey, CA 90292 USA."",
    DOI = ""10.1016/j.websem.2007.03.002"",
    ISSN = ""1570-8268"",
    EISSN = ""1873-7749"",
    Keywords = ""trust; web of trust; policies; reputation"",
    Keywords-Plus = ""PROVENANCE"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Artificial Intelligence; Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""dono@isi.edu gil@isi.edu"",
    Affiliations = ""University of Southern California"",
    ORCID-Numbers = ""Gil, Yolanda/0000-0001-8465-8341"",
    Number-of-Cited-References = ""109"",
    Times-Cited = ""318"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""67"",
    Journal-ISO = ""J. Web Semant."",
    Doc-Delivery-Number = ""176AF"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000247054400003"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		A survey of trust in computer science and the semantic web	https://www.webofscience.com/wos/woscc/full-record/WOS:000247054400003	ELSEVIER	nan; References
161	TrustSE	The mechanics of trust: A framework for research and design	With an increasing number of technologies supporting transactions over distance and replacing traditional forms of interaction, designing for trust in mediated interactions has become a key concern for researchers in human computer interaction (HCI). While much of this research focuses on increasing users' trust, we present a framework that shifts the perspective towards factors that support trustworthy behavior. In a second step, we analyze how the presence of these factors can be signalled. We argue that it is essential to take a systemic perspective for enabling well-placed trust and trustworthy behavior in the long term. For our analysis we draw on relevant research from sociology, economics, and psychology, as well as HCI. We identify contextual properties (motivation based on temporal, social, and institutional embeddedness) and the actor's intrinsic properties (ability, and motivation based on internalized norms and benevolence) that form the basis of trustworthy behavior. Our analysis provides a frame of reference for the design of studies on trust in technology-mediated interactions, as well as a guide for identifying trust requirements in design processes. We demonstrate the application of the framework in three scenarios: call centre interactions, B2C e-commerce, and voice-enabled on-line gaming.	Communication systems; Computer supported cooperative work; Decision making; Electronic commerce; Embedded systems; Game theory; Information analysis; Online systems; Societies and institutions; Computer mediated communication; Dis-embedding; Interpersonal cues; Social capital; Trust; Human computer interaction; Communication systems;  Computer supported cooperative work;  Decision making;  Electronic commerce;  Embedded systems;  Game theory;  Information analysis;  Online systems;  Societies and institutions;  Computer mediated communication;  Dis-embedding;  Interpersonal cues;  Social capital;  Trust;  Human computer interaction	Riegelsberger, Jens; Sasse, M. Angela; McCarthy, John D.	International Journal of Human Computer Studies	https://doi.org/10.1016/j.ijhcs.2005.01.001		381 - 422	"""@ARTICLE{Riegelsberger2005381,
    author = ""Riegelsberger, Jens and Sasse, M. Angela and McCarthy, John D."",
    title = ""The mechanics of trust: A framework for research and design"",
    year = ""2005"",
    journal = ""International Journal of Human Computer Studies"",
    volume = ""62"",
    number = ""3"",
    pages = ""381 - 422"",
    doi = ""10.1016/j.ijhcs.2005.01.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-14744304112\&doi=10.1016\%2fj.ijhcs.2005.01.001\&partnerID=40\&md5=3edf09e6d82d31308bcd5f3bd504bc87"",
    affiliations = ""Department of Computer Science, University College London, London WC1E 6BT, Gower Street, United Kingdom"",
    abstract = ""With an increasing number of technologies supporting transactions over distance and replacing traditional forms of interaction, designing for trust in mediated interactions has become a key concern for researchers in human computer interaction (HCI). While much of this research focuses on increasing users' trust, we present a framework that shifts the perspective towards factors that support trustworthy behavior. In a second step, we analyze how the presence of these factors can be signalled. We argue that it is essential to take a systemic perspective for enabling well-placed trust and trustworthy behavior in the long term. For our analysis we draw on relevant research from sociology, economics, and psychology, as well as HCI. We identify contextual properties (motivation based on temporal, social, and institutional embeddedness) and the actor's intrinsic properties (ability, and motivation based on internalized norms and benevolence) that form the basis of trustworthy behavior. Our analysis provides a frame of reference for the design of studies on trust in technology-mediated interactions, as well as a guide for identifying trust requirements in design processes. We demonstrate the application of the framework in three scenarios: call centre interactions, B2C e-commerce, and voice-enabled on-line gaming. (c) 2005 Elsevier Ltd. All rights reserved."",
    author_keywords = ""Computer mediated communication; Computer supported collaborative work; Decision-making; Dis-embedding; E-commerce; Game theory; Human computer interaction; Interpersonal cues; Social capital; Trust"",
    keywords = ""Communication systems; Computer supported cooperative work; Decision making; Electronic commerce; Embedded systems; Game theory; Information analysis; Online systems; Societies and institutions; Computer mediated communication; Dis-embedding; Interpersonal cues; Social capital; Trust; Human computer interaction"",
    correspondence_address = ""J. Riegelsberger; Department of Computer Science, University College London, London WC1E 6BT, Gower Street, United Kingdom; email: jriegels@cs.ucl.ac.uk"",
    issn = ""10715819"",
    coden = ""IHSTE"",
    language = ""English"",
    abbrev_source_title = ""Int J Hum Comput Stud"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 372; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		The mechanics of trust: A framework for research and design	https://www.scopus.com/record/display.uri?eid=2-s2.0-14744304112&origin=resultslist&sort=r-f&src=s&sid=789869e7fd9dcc72f72501f3d4f8690e&sot=b&sdt=b&s=TITLE%28the+mechanics+of+trust+a+framework+for+research+and+design%29&sl=65&sessionSearchId=789869e7fd9dcc72f72501f3d4f8690e&relpos=0		nan; References; Publisher
162	TrustSE	Open source software user communities: A study of participation in Linux user groups	We conceptualize participation in Linux user groups (LUGs) in terms of group-referent intentional actions and investigate cognitive (attitudes, perceived behavioral control, identification with the open source movement), affective (positive and negative anticipated emotions), and social (social identity) determinants of participation and its consequences on Linux-related behaviors of users. This survey-based study, conducted with 402 active LUG members representing 191 different LUGs from 23 countries and employing structural equation modeling methodology, supports the proposed model. Furthermore, we find that the Linux user's experience level moderates the extent of the LUG's social influence and its impact on the user's participation. We conclude with a consideration of the managerial and research implications of the study's findings.	Behavioral research; Computer operating systems; Computer software; Mathematical models; Social aspects; User interfaces; Anticipated emotions; Linux; Model of goal-directed behavior; Novice versus experienced users; Open source software; Social identity; We-intentions; Electronic communities; Behavioral research;  Computer operating systems;  Computer software;  Mathematical models;  Social aspects;  User interfaces;  Anticipated emotions;  Linux;  Model of goal-directed behavior;  Novice versus experienced users;  Open source software;  Social identity;  We-intentions;  Electronic communities	Bagozzi, Richard P.; Dholakia, Utpal M.	Management Science	https://doi.org/10.1287/mnsc.1060.0545		1099 - 1115	"""@ARTICLE{Bagozzi20061099,
    author = ""Bagozzi, Richard P. and Dholakia, Utpal M."",
    title = ""Open source software user communities: A study of participation in Linux user groups"",
    year = ""2006"",
    journal = ""Management Science"",
    volume = ""52"",
    number = ""7"",
    pages = ""1099 - 1115"",
    doi = ""10.1287/mnsc.1060.0545"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745601682\&doi=10.1287\%2fmnsc.1060.0545\&partnerID=40\&md5=fd6f02d44faee850351b699463afdd1b"",
    affiliations = ""Ross School of Business, College of Pharmacy, University of Michigan, Ann Arbor, MI 48109-1234, 701 Tappan Street, United States; Jesse H. Jones Graduate School of Management, Rice University, MS 531, Houston, TX 77005, 6100 Main Street, United States"",
    abstract = ""We conceptualize participation in Linux user groups (LUGs) in terms of group-referent intentional actions and investigate cognitive (attitudes, perceived behavioral control, identification with the open source movement), affective (positive and negative anticipated emotions), and social (social identity) determinants of participation and its consequences on Linux-related behaviors of users. This survey-based study, conducted with 402 active LUG members representing 191 different LUGs from 23 countries and employing structural equation modeling methodology, supports the proposed model. Furthermore, we find that the Linux user's experience level moderates the extent of the LUG's social influence and its impact on the user's participation. We conclude with a consideration of the managerial and research implications of the study's findings. (c) 2006 INFORMS."",
    author_keywords = ""Anticipated emotions; Linux; Model of goal-directed behavior; Novice versus experienced users; Open source software; Social identity; Virtual communities; We-intentions"",
    keywords = ""Behavioral research; Computer operating systems; Computer software; Mathematical models; Social aspects; User interfaces; Anticipated emotions; Linux; Model of goal-directed behavior; Novice versus experienced users; Open source software; Social identity; We-intentions; Electronic communities"",
    correspondence_address = ""R.P. Bagozzi; Ross School of Business, College of Pharmacy, University of Michigan, Ann Arbor, MI 48109-1234, 701 Tappan Street, United States; email: bagozzi@umich.edu"",
    issn = ""15265501"",
    coden = ""MSCIA"",
    language = ""English"",
    abbrev_source_title = ""Manage Sci"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 567""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Open source software user communities: A study of participation in Linux user groups	https://www.scopus.com/record/display.uri?eid=2-s2.0-33745601682&origin=resultslist&sort=r-f&src=s&sid=c9200b4be57dd4414da56f79c315eab7&sot=b&sdt=b&s=TITLE%28open+source+software+user+communities+a+study+of+participation+in+linux+user+groups%29&sl=90&sessionSearchId=c9200b4be57dd4414da56f79c315eab7&relpos=0		nan; References; Publisher
163	TrustSE	The transformation of open source software	A frequent characterization of open source software is the somewhat outdated, mythical one of a collective of supremely talented software hackers freely volunteering their services to produce uniformly high-quality software. I contend that the open source software phenomenon has metamorphosed into a more mainstream and commercially viable form, which I label as OSS 2.0. I illustrate this transformation using a framework of process and product factors, and discuss how the bazaar metaphor, which up to now has been associated with the open source development process, has actually shifted to become a metaphor better suited to the OSS 2.0 product delivery and support process. Overall the OSS 2.0 phenomenon is significantly different from its free software antecedent. Its emergence accentuates the fundamental alteration of the basic ground rules in the software landscape, signifying the end of the proprietary-driven model that has prevailed for the past 20 years or so. Thus, a clear understanding of the characteristics of the emergent OSS 2.0 phenomenon is required to address key challenges for research and practice.	open source software; free software; IS development; open source software;  free software;  IS development	Fitzgerald, Brian	MIS QUARTERLY	https://www.webofscience.com/wos/woscc/full-record/WOS:000240289900002		587-598	"""@article{WOS:000240289900002,
    Author = ""Fitzgerald, Brian"",
    Title = ""The transformation of open source software"",
    Journal = ""MIS QUARTERLY"",
    Year = ""2006"",
    Volume = ""30"",
    Number = ""3"",
    Pages = ""587-598"",
    Month = ""SEP"",
    Abstract = ""A frequent characterization of open source software is the somewhat outdated, mythical one of a collective of supremely talented software hackers freely volunteering their services to produce uniformly high-quality software. I contend that the open source software phenomenon has metamorphosed into a more mainstream and commercially viable form, which I label as OSS 2.0. I illustrate this transformation using a framework of process and product factors, and discuss how the bazaar metaphor, which up to now has been associated with the open source development process, has actually shifted to become a metaphor better suited to the OSS 2.0 product delivery and support process. Overall the OSS 2.0 phenomenon is significantly different from its free software antecedent. Its emergence accentuates the fundamental alteration of the basic ground rules in the software landscape, signifying the end of the proprietary-driven model that has prevailed for the past 20 years or so. Thus, a clear understanding of the characteristics of the emergent OSS 2.0 phenomenon is required to address key challenges for research and practice."",
    Publisher = ""SOC INFORM MANAGE-MIS RES CENT"",
    Address = ""UNIV MINNESOTA-SCH MANAGEMENT 271 19TH AVE SOUTH, MINNEAPOLIS, MN 55455 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Fitzgerald, B (Corresponding Author), Univ Limerick, Frederick A Krehbiel Chair Innovat Global Busines, Limerick, Ireland. Univ Limerick, Frederick A Krehbiel Chair Innovat Global Busines, Limerick, Ireland."",
    ISSN = ""0276-7783"",
    Keywords = ""open source software; free software; IS development"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""bf@ul.ie"",
    Affiliations = ""University of Limerick"",
    ResearcherID-Numbers = ""Fitzgerald, Brian/E-7790-2010"",
    ORCID-Numbers = ""Fitzgerald, Brian/0000-0001-9193-2863"",
    Number-of-Cited-References = ""32"",
    Times-Cited = ""433"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""87"",
    Journal-ISO = ""MIS Q."",
    Doc-Delivery-Number = ""081AP"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000240289900002"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		The transformation of open source software	https://www.webofscience.com/wos/woscc/full-record/WOS:000240289900002	SOC INFORM MANAGE-MIS RES CENT	nan; References
164	TrustSE	Antecedents of Commitment and Trust in Customer-Supplier Relationships in High Technology Markets	The level of complexity and inherent perceived risk involved in customer relationships in high-technology markets leads to an intricate interplay of factors determining commitment and trust that in turn affect customer intentions to remain in the relationship. In this article, we develop a model in which aspects of the product, relationship management activities, and market variables are discerned and taken into account simultaneously as antecedents of trust, commitment, and intention to stay. The results from a qualitative and a quantitative study provide evidence for the influence of types of antecedents of trust, commitment, and intention to stay in supplier-customer relationships in high-technology markets relationships. It is shown that particularly affective commitment plays an important role in these relationships		De Ruyter, Ko; Moorman, Luci; Lemmink, Jos	Industrial Marketing Management	https://doi.org/10.1016/S0019-8501(99)00091-7		271 - 286	"""@ARTICLE{DeRuyter2001271,
    author = ""De Ruyter, Ko and Moorman, Luci and Lemmink, Jos"",
    title = ""Antecedents of Commitment and Trust in Customer-Supplier Relationships in High Technology Markets"",
    year = ""2001"",
    journal = ""Industrial Marketing Management"",
    volume = ""30"",
    number = ""3"",
    pages = ""271 - 286"",
    doi = ""10.1016/S0019-8501(99)00091-7"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0001544656\&doi=10.1016\%2fS0019-8501\%2899\%2900091-7\&partnerID=40\&md5=e1a593268c741f33660b25ed3929f44e"",
    affiliations = ""Maastricht University, Dept. of Mktg. and Mktg. Research, NL-6200 MD Maastricht, P.O. Box 616, Netherlands"",
    abstract = ""The level of complexity and inherent perceived risk involved in customer relationships in high-technology markets leads to an intricate interplay of factors determining commitment and trust that in turn affect customer intentions to remain in the relationship. In this article, we develop a model in which aspects of the product, relationship management activities, and market variables are discerned and taken into account simultaneously as antecedents of trust, commitment, and intention to stay. The results from a qualitative and a quantitative study provide evidence for the influence of types of antecedents of trust, commitment, and intention to stay in supplier-customer relationships in high-technology markets relationships. It is shown that particularly affective commitment plays an important role in these relationships (c) 2001 Elsevier Science Inc."",
    issn = ""00198501"",
    coden = ""IMMAD"",
    language = ""English"",
    abbrev_source_title = ""Ind. Mark. Manage."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 374; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Antecedents of commitment and trust in customer–supplier relationships in high technology markets	https://doi.org/10.1016/S0019-8501(99)00091-7		nan; Keywords; References; Link; Publisher
165	TrustSE	Free/Libre open-source software development: What we know and what we do not know	We review the empirical research on Free/Libre and Open-Source Software (FLOSS) development and assess the state of the literature. We develop a framework for organizing the literature based on the input-mediator-output-input (IMOI) model from the small groups literature. We present a quantitative summary of articles selected for the review and then discuss findings of this literature categorized into issues pertaining to inputs (e.g., member characteristics, technology use, and project characteristics), processes (software development practices, social processes, and firm involvement practices), emergent states (e.g., social states and task-related states), and outputs (e.g. team performance, FLOSS implementation, and project evolution). Based on this review, we suggest topics for future research, as well as identify methodological and theoretical issues for future inquiry in this area, including issues relating to sampling and the need for more longitudinal studies.	distributed work;  development;  computer-mediated communication;  Free/Libre open-source software; distributed work, development, computer-mediated communication, Free/Libre open-source software	Crowston, Kevin; Wei, Kangning; Howison, James; Wiggins, Andrea	ACM Comput. Surv.	https://doi.org/10.1145/2089125.2089127			"""@article{10.1145/2089125.2089127,
    author = ""Crowston, Kevin and Wei, Kangning and Howison, James and Wiggins, Andrea"",
    title = ""Free/Libre open-source software development: What we know and what we do not know"",
    year = ""2008"",
    issue_date = ""February 2012"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""44"",
    number = ""2"",
    issn = ""0360-0300"",
    url = ""https://doi.org/10.1145/2089125.2089127"",
    doi = ""10.1145/2089125.2089127"",
    abstract = ""We review the empirical research on Free/Libre and Open-Source Software (FLOSS) development and assess the state of the literature. We develop a framework for organizing the literature based on the input-mediator-output-input (IMOI) model from the small groups literature. We present a quantitative summary of articles selected for the review and then discuss findings of this literature categorized into issues pertaining to inputs (e.g., member characteristics, technology use, and project characteristics), processes (software development practices, social processes, and firm involvement practices), emergent states (e.g., social states and task-related states), and outputs (e.g. team performance, FLOSS implementation, and project evolution). Based on this review, we suggest topics for future research, as well as identify methodological and theoretical issues for future inquiry in this area, including issues relating to sampling and the need for more longitudinal studies."",
    journal = ""ACM Comput. Surv."",
    month = ""March"",
    articleno = ""7"",
    numpages = ""35"",
    keywords = ""distributed work, development, computer-mediated communication, Free/Libre open-source software""
}
"""	Included	Included				2	ACM		Free/Libre open-source software development: What we know and what we do not know	https://doi.org/10.1145/2089125.2089127	Association for Computing Machinery	nan; References; Pages; Link
166	TrustSE	The ALPS project release 2.0: open source software for strongly correlated systems	We present release 2.0 of the ALPS (Algorithms and Libraries for Physics Simulations) project, an open source software project to develop libraries and application programs for the simulation of strongly correlated quantum lattice models such as quantum magnets, lattice bosons, and strongly correlated fermion systems. The code development is centered on common XML and HDF5 data formats, libraries to simplify and speed up code development, common evaluation and plotting tools, and simulation programs. The programs enable non-experts to start carrying out serial or parallel numerical simulations by providing basic implementations of the important algorithms for quantum lattice models: classical and quantum Monte Carlo (QMC) using non-local updates, extended ensemble simulations, exact and full diagonalization (ED), the density matrix renormalization group (DMRG) both in a static version and a dynamic time-evolving block decimation (TEBD) code, and quantum Monte Carlo solvers for dynamical mean field theory (DMFT). The ALPS libraries provide a powerful framework for programmers to develop their own applications, which, for instance, greatly simplify the steps of porting a serial code onto a parallel, distributed memory machine. Major changes in release 2.0 include the use of HDF5 for binary data, evaluation tools in Python, support for the Windows operating system, the use of CMake as build system and binary installation packages for Mac OS X and Windows, and integration with the VisTrails workflow provenance tool. The software is available from our web server at http://alps.comp-phys.org/.	density matrix renormalization group calculations; classical Monte Carlo simulations; quantum Monte Carlo simulations; quantum phase transitions (theory); density matrix renormalization group calculations;  classical Monte Carlo simulations;  quantum Monte Carlo simulations;  quantum phase transitions (theory)	Bauer, B.; Carr, L. D.; Evertz, H. G.; Feiguin, A.; Freire, J.; Fuchs, S.; Gamper, L.; Gukelberger, J.; Gull, E.; Guertler, S.; Hehn, A.; Igarashi, R.; Isakov, S. V.; Koop, D.; Ma, P. N.; Mates, P.; Matsuo, H.; Parcollet, O.; Pawlowski, G.; Picon, J. D.; Pollet, L.; Santos, E.; Scarola, V. W.; Schollwoeck, U.; Silva, C.; Surer, B.; Todo, S.; Trebst, S.; Troyer, M.; Wall, M. L.; Werner, P.; Wessel, S.	JOURNAL OF STATISTICAL MECHANICS-THEORY AND EXPERIMENT	https://doi.org/10.1088/1742-5468/2011/05/P05001			"""@article{WOS:000292190200002,
    Author = ""Bauer, B. and Carr, L. D. and Evertz, H. G. and Feiguin, A. and Freire, J. and Fuchs, S. and Gamper, L. and Gukelberger, J. and Gull, E. and Guertler, S. and Hehn, A. and Igarashi, R. and Isakov, S. V. and Koop, D. and Ma, P. N. and Mates, P. and Matsuo, H. and Parcollet, O. and Pawlowski, G. and Picon, J. D. and Pollet, L. and Santos, E. and Scarola, V. W. and Schollwoeck, U. and Silva, C. and Surer, B. and Todo, S. and Trebst, S. and Troyer, M. and Wall, M. L. and Werner, P. and Wessel, S."",
    Title = ""The ALPS project release 2.0: open source software for strongly correlated systems"",
    Journal = ""JOURNAL OF STATISTICAL MECHANICS-THEORY AND EXPERIMENT"",
    Year = ""2011"",
    Month = ""MAY"",
    Abstract = ""We present release 2.0 of the ALPS (Algorithms and Libraries for Physics Simulations) project, an open source software project to develop libraries and application programs for the simulation of strongly correlated quantum lattice models such as quantum magnets, lattice bosons, and strongly correlated fermion systems. The code development is centered on common XML and HDF5 data formats, libraries to simplify and speed up code development, common evaluation and plotting tools, and simulation programs. The programs enable non-experts to start carrying out serial or parallel numerical simulations by providing basic implementations of the important algorithms for quantum lattice models: classical and quantum Monte Carlo (QMC) using non-local updates, extended ensemble simulations, exact and full diagonalization (ED), the density matrix renormalization group (DMRG) both in a static version and a dynamic time-evolving block decimation (TEBD) code, and quantum Monte Carlo solvers for dynamical mean field theory (DMFT). The ALPS libraries provide a powerful framework for programmers to develop their own applications, which, for instance, greatly simplify the steps of porting a serial code onto a parallel, distributed memory machine. Major changes in release 2.0 include the use of HDF5 for binary data, evaluation tools in Python, support for the Windows operating system, the use of CMake as build system and binary installation packages for Mac OS X and Windows, and integration with the VisTrails workflow provenance tool. The software is available from our web server at http://alps.comp-phys.org/."",
    Publisher = ""IOP PUBLISHING LTD"",
    Address = ""TEMPLE CIRCUS, TEMPLE WAY, BRISTOL BS1 6BE, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Troyer, M (Corresponding Author), ETH, CH-8093 Zurich, Switzerland. Bauer, B.; Gamper, L.; Gukelberger, J.; Hehn, A.; Isakov, S. V.; Ma, P. N.; Mates, P.; Pollet, L.; Surer, B.; Troyer, M.; Werner, P., ETH, CH-8093 Zurich, Switzerland. Carr, L. D.; Wall, M. L., Colorado Sch Mines, Dept Phys, Golden, CO 80401 USA. Evertz, H. G., Graz Univ Technol, Inst Theoret Phys, A-8010 Graz, Austria. Feiguin, A., Univ Wyoming, Dept Phys \\& Astron, Laramie, WY 82071 USA. Freire, J.; Koop, D.; Mates, P.; Santos, E.; Silva, C., Univ Utah, Sci Comp \\& Imaging Inst, Salt Lake City, UT 84112 USA. Fuchs, S., Univ Gottingen, Inst Theoret Phys, D-3400 Gottingen, Germany. Gull, E., Columbia Univ, New York, NY 10027 USA. Guertler, S., Univ Bonn, Bethe Ctr Theoret Phys, D-53115 Bonn, Germany. Igarashi, R., Japan Atom Energy Agcy, Ctr Computat Sci \\& E Syst, Tokyo 1100015, Japan. Todo, S., Japan Sci \\& Technol Agcy, Core Res Evolut Sci \\& Technol, Kawaguchi, Saitama 3320012, Japan. Matsuo, H.; Todo, S., Univ Tokyo, Dept Appl Phys, Tokyo 1138656, Japan. Parcollet, O., CEA Saclay, Inst Phys Theor, CEA DSM IPhT CNRS URA 2306, F-91191 Gif Sur Yvette, France. Pawlowski, G., Adam Mickiewicz Univ, Fac Phys, PL-61614 Poznan, Poland. Picon, J. D., Ecole Polytech Fed Lausanne, Inst Theoret Phys, CH-1015 Lausanne, Switzerland. Pollet, L., Harvard Univ, Dept Phys, Cambridge, MA 02138 USA. Scarola, V. W., Virginia Tech, Dept Phys, Blacksburg, VA 24061 USA. Schollwoeck, U., Univ Munich, Dept Phys, Arnold Sommerfeld Ctr Theoret Phys, D-80333 Munich, Germany. Schollwoeck, U., Univ Munich, Ctr NanoSci, D-80333 Munich, Germany. Trebst, S., Univ Calif Santa Barbara, Stn Q, Microsoft Res, Santa Barbara, CA 93106 USA. Wessel, S., Rhein Westfal TH Aachen, Inst Solid State Theory, D-52056 Aachen, Germany. Wessel, S., Univ Stuttgart, Inst Theoret Phys 3, D-70550 Stuttgart, Germany."",
    DOI = ""10.1088/1742-5468/2011/05/P05001"",
    Article-Number = ""P05001"",
    ISSN = ""1742-5468"",
    Keywords = ""density matrix renormalization group calculations; classical Monte Carlo simulations; quantum Monte Carlo simulations; quantum phase transitions (theory)"",
    Keywords-Plus = ""MONTE-CARLO METHOD; VISUALIZATIONS; PROVENANCE; ALGORITHM"",
    Research-Areas = ""Mechanics; Physics"",
    Web-of-Science-Categories = ""Mechanics; Physics, Mathematical"",
    Author-Email = ""troyer@comp-phys.org"",
    Affiliations = ""Swiss Federal Institutes of Technology Domain; ETH Zurich; Colorado School of Mines; Graz University of Technology; University of Wyoming; Utah System of Higher Education; University of Utah; University of Gottingen; Columbia University; University of Bonn; Japan Atomic Energy Agency; Japan Science \\& Technology Agency (JST); University of Tokyo; CEA; Centre National de la Recherche Scientifique (CNRS); Universite Paris Saclay; Adam Mickiewicz University; Swiss Federal Institutes of Technology Domain; Ecole Polytechnique Federale de Lausanne; Harvard University; Virginia Polytechnic Institute \\& State University; University of Munich; University of Munich; Microsoft; University of California System; University of California Santa Barbara; RWTH Aachen University; University of Stuttgart"",
    ResearcherID-Numbers = ""Freire, Juliana/AAQ-4484-2020 Santos, Emanuele/J-1980-2017 Bauer, Bela/C-1984-2009 Igarashi, Ryo/B-5024-2010 Pollet, Lode/F-6845-2010 Schollwock, Ulrich/L-1220-2016 Scarola, Vito/AAG-7503-2019 Werner, Philipp/C-7247-2009 Troyer, Matthias/B-7826-2008 Todo, Synge/G-5023-2014 Parcollet, Olivier/C-2340-2008 Scarola, Vito/G-5412-2012 Evertz, Hans Gerd/O-5975-2015 Carr, Lincoln/E-3819-2016 Pawlowski, Grzegorz/B-4880-2019 Trebst, Simon/C-5390-2008"",
    ORCID-Numbers = ""Troyer, Matthias/0000-0002-1469-9444 Todo, Synge/0000-0001-9338-0548 Parcollet, Olivier/0000-0002-0389-2660 Scarola, Vito/0000-0002-8653-2723 Wessel, Stefan/0000-0002-6353-5083 Evertz, Hans Gerd/0000-0002-2037-0725 Pollet, Lode/0000-0002-7274-2842 Carr, Lincoln/0000-0002-4848-7941 Igarashi, Ryo/0000-0002-2894-7226 Freire, Juliana/0000-0003-3915-7075 Pawlowski, Grzegorz/0000-0001-5019-1317 Gull, Emanuel/0000-0002-6082-1260 Trebst, Simon/0000-0002-1479-9736"",
    Funding-Acknowledgement = ""Pauli Center at ETH Zurich; NSF {[}PHY-0551164, DMR-0705847]; Aspen Center for Physics; Swiss National Science Foundation; Jeffress Memorial Trust {[}J-992]; National Science Foundation {[}PHY-0903457, DMR-0955707]; Golden Energy Computing Organization at the Colorado School of Mines; National Science Foundation; National Renewable Energy Laboratories; Deutsche Forschungsgemeinschaft {[}SFB 602]; Japan Society for the Promotion of Science {[}20540364]; MEXT Japan; Army Research Office; DARPA; US Department of Energy; US National Science Foundation; IBM; Grants-in-Aid for Scientific Research {[}20540364, 23540438] Funding Source: KAKEN; Direct For Mathematical \\& Physical Scien; Division Of Physics {[}0903457] Funding Source: National Science Foundation"",
    Funding-Text = ""The development of ALPS has profited from support of the Pauli Center at ETH Zurich, the Swiss HP<SUP>2</SUP>C initiative, the Kavli Institute for Theoretical Physics in Santa Barbara through NSF grants PHY-0551164 and DMR-0705847, the Aspen Center for Physics, the Swiss National Science Foundation, the Jeffress Memorial Trust, Grant No. J-992, the National Science Foundation under grants PHY-0903457 and DMR-0955707, the Golden Energy Computing Organization at the Colorado School of Mines for the use of resources acquired with financial assistance from the National Science Foundation and the National Renewable Energy Laboratories, the Deutsche Forschungsgemeinschaft through the collaborative research center SFB 602, Japan Society for the Promotion of Science through KAKENHI No. 20540364, Next-Generation Supercomputer Project from MEXT Japan, and a grant from the Army Research Office with funding from the DARPA OLE program. Work on VisTrails is primarily supported by grants and contracts from the US National Science Foundation, the US Department of Energy, and IBM."",
    Number-of-Cited-References = ""55"",
    Times-Cited = ""637"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""113"",
    Journal-ISO = ""J. Stat. Mech.-Theory Exp."",
    Doc-Delivery-Number = ""784WW"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000292190200002"",
    OA = ""Green Submitted"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		The ALPS project release 2.0: open source software for strongly correlated systems	https://www.webofscience.com/wos/woscc/full-record/WOS:000292190200002	IOP PUBLISHING LTD	nan; References; Pages
167	TrustSE	Tragedy of the FOSS commons? Investigating the institutional designs of free/libre and open source software projects	"Free/Libre and Open Source Software projects (FOSS) are a form of Internet-based commons. Since 1968, when Garrett Hardin published his famous article ""Tragedy of the Commons"" in the journal Science, there has been significant interest in understanding how to manage commons appropriately, particularly in environmental fields. An important distinction between natural resource commons and FOSS commons is that the ""tragedy"" to be avoided in natural resources is over-harvesting and the potential destruction of the resource. In FOSS commons the ""tragedy"" to be avoided is project abandonment and a ""dead"" project. Institutions - defined as informal norms, more formalized rules, and governance structures - are mechanisms that have been shown to help overcome tragedies in some environmental commons situations. The goal of this paper is to more formally describe the concept of FOSS institutions and to conduct a preliminary examination of FOSS projects in order to shed light into institutions, their composition and importance to the projects. We report findings from an initial set of interviews of FOSS developers and find that in commons settings that need to encourage contribution rather than control over-appropriation, the institutional designs appear to be extremely lean and as unobtrusive as possible. To the FOSS programmers we interviewed, institutional structure adds transaction costs and hinders collective action. This is markedly different from traditional environmental commons settings."		Schweik, Charles M.; English, Robert	First Monday	https://doi.org/10.5210/fm.v12i2.1619			"""@ARTICLE{Schweik2007,
    author = ""Schweik, Charles M. and English, Robert"",
    title = ""Tragedy of the FOSS commons? Investigating the institutional designs of free/libre and open source software projects"",
    year = ""2007"",
    journal = ""First Monday"",
    volume = ""12"",
    number = ""2"",
    doi = ""10.5210/fm.v12i2.1619"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33847262088\&doi=10.5210\%2ffm.v12i2.1619\&partnerID=40\&md5=a011fb91874b5be32942e83f1a97d300"",
    affiliations = ""Department of Natural Resources Conservation, Center for Public Policy and Administration, University of Massachusetts, Amherst, United States; National Center for Digital Government, United States; University of Massachusetts, Amherst, United States"",
    abstract = {Free/Libre and Open Source Software projects (FOSS) are a form of Internet-based commons. Since 1968, when Garrett Hardin published his famous article ""Tragedy of the Commons"" in the journal Science, there has been significant interest in understanding how to manage commons appropriately, particularly in environmental fields. An important distinction between natural resource commons and FOSS commons is that the ""tragedy"" to be avoided in natural resources is over-harvesting and the potential destruction of the resource. In FOSS commons the ""tragedy"" to be avoided is project abandonment and a ""dead"" project. Institutions - defined as informal norms, more formalized rules, and governance structures - are mechanisms that have been shown to help overcome tragedies in some environmental commons situations. The goal of this paper is to more formally describe the concept of FOSS institutions and to conduct a preliminary examination of FOSS projects in order to shed light into institutions, their composition and importance to the projects. We report findings from an initial set of interviews of FOSS developers and find that in commons settings that need to encourage contribution rather than control over-appropriation, the institutional designs appear to be extremely lean and as unobtrusive as possible. To the FOSS programmers we interviewed, institutional structure adds transaction costs and hinders collective action. This is markedly different from traditional environmental commons settings.},
    correspondence_address = ""C.M. Schweik; Department of Natural Resources Conservation, Center for Public Policy and Administration, University of Massachusetts, Amherst, United States; email: cschweik@pubpol.umass.edu"",
    publisher = ""First Monday"",
    issn = ""13960466"",
    language = ""English"",
    abbrev_source_title = ""First Monday"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 26; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Tragedy of the FOSS commons? Investigating the institutional designs of free/libre and open source software projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-33847262088&origin=resultslist&sort=r-f&src=s&sid=5c656485199c54b4ca411c876744d1e3&sot=b&sdt=b&s=TITLE%28tragedy+of+the+foss+commons+investigating+the+institutional+designs+of+free+libre+and+open+source+software+projects%29&sl=122&sessionSearchId=5c656485199c54b4ca411c876744d1e3&relpos=0	First Monday	nan; Keywords; References; Pages
168	TrustSE	On the impact of software ecosystems in requirements communication and management	The treatment of economic and social issues in Software Engineering was pointed out as a challenge for the next years. Companies and organizations have directly (or not) opened up their software platforms and assets to others, including partners and third-party developers around the world, generating software ecosystems (SECOs). This changes the traditional software industry because it requires mature research in software requirements and architecture in an environment where business models and socio-technical networks can impact the management of the platforms' needs and demands overtime. However, one strong inhibitor is the complexity in defining and modeling SECOs elements to improve their comprehension and analysis and their impacts on requirements engineering. So, this paper introduces an approach to support SECO definition and modeling based on the SECOs domain. The goal consists in dealing with the stakeholders' value proposition and realization in SECOs, as well as treating nontechnical issues in components and social repositories.	Complex networks; Ecology; Ecosystems; Requirements engineering; Software engineering; Conceptual model; Domain; Repositories; Requirements management; Reuse; Socio-technical networks; Software ecosystems; Computer software reusability; Complex networks;  Ecology;  Ecosystems;  Requirements engineering;  Software engineering;  Conceptual model;  Domain;  Repositories;  Requirements management;  Reuse;  Socio-technical networks;  Software ecosystems;  Computer software reusability	Dos Santos, Rodrigo Pereira; Werner, Claudia Maria Lima	CEUR Workshop Proceedings	https://www.scopus.com/record/display.uri?eid=2-s2.0-84922326341&origin=resultslist&sort=r-f&src=s&sid=84b2ef76a86ebbbcedae8290f36d959f&sot=b&sdt=b&s=TITLE%28on+the+impact+of+software+ecosystems+in+requirements+communication+and+management%29&sl=88&sessionSearchId=84b2ef76a86ebbbcedae8290f36d959f&relpos=0			"""@CONFERENCE{DosSantos2013,
    author = ""Dos Santos, Rodrigo Pereira and Werner, Claudia Maria Lima"",
    editor = ""F., Alencar and M., Lucena and G., Cysneiros Filho and J., Castro"",
    title = ""On the impact of software ecosystems in requirements communication and management"",
    year = ""2013"",
    journal = ""CEUR Workshop Proceedings"",
    volume = ""1005"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84922326341\&partnerID=40\&md5=c98bf72d54e66af4e51480a01f401723"",
    affiliations = ""System Engineering and Computer Science Department, PESC/COPPE Federal University of Rio de Janeiro, Rio de Janeiro, Zip Code 21945-970, Brazil"",
    abstract = ""The treatment of economic and social issues in Software Engineering was pointed out as a challenge for the next years. Companies and organizations have directly (or not) opened up their software platforms and assets to others, including partners and third-party developers around the world, generating software ecosystems (SECOs). This changes the traditional software industry because it requires mature research in software requirements and architecture in an environment where business models and socio-technical networks can impact the management of the platforms' needs and demands overtime. However, one strong inhibitor is the complexity in defining and modeling SECOs elements to improve their comprehension and analysis and their impacts on requirements engineering. So, this paper introduces an approach to support SECO definition and modeling based on the SECOs domain. The goal consists in dealing with the stakeholders' value proposition and realization in SECOs, as well as treating nontechnical issues in components and social repositories."",
    author_keywords = ""Conceptual Modeling; Domain; Repositories; Requirements Management; Reuse; Sociotechnical Networks; Software Ecosystems"",
    keywords = ""Complex networks; Ecology; Ecosystems; Requirements engineering; Software engineering; Conceptual model; Domain; Repositories; Requirements management; Reuse; Socio-technical networks; Software ecosystems; Computer software reusability"",
    publisher = ""CEUR-WS"",
    issn = ""16130073"",
    language = ""English"",
    abbrev_source_title = ""CEUR Workshop Proc."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1; Conference name: Requirements Engineering@Brazil, ER@BR 2013; Conference date: 16 July 2013 through 16 July 2013; Conference code: 110402""
}
"""	Excluded	Excluded				2	Scopus Signed In		On the Impact of Software Ecosystems in Requirements Communication and Management	https://www.scopus.com/record/display.uri?eid=2-s2.0-84922326341&origin=resultslist&sort=r-f&src=s&sid=84b2ef76a86ebbbcedae8290f36d959f&sot=b&sdt=b&s=TITLE%28on+the+impact+of+software+ecosystems+in+requirements+communication+and+management%29&sl=88&sessionSearchId=84b2ef76a86ebbbcedae8290f36d959f&relpos=0	CEUR-WS	nan; References; Pages
169	TrustSE	An empirical analysis of software vendors' patch release behavior: Impact of vulnerability disclosure	Akey aspect of better and more secure software is timely patch release by software vendors for the vulnerabilities in their products. Software vulnerability disclosure, which refers to the publication of vulnerability information, has generated intense debate. An important consideration in this debate is the behavior of software vendors. How quickly do vendors patch vulnerabilities and how does disclosure affect patch release time? This paper compiles a unique data set from the Computer Emergency Response Team/Coordination Center (CERT) and SecurityFocus to answer this question. Our results suggest that disclosure accelerates patch release. The instantaneous probability of releasing the patch rises by nearly two and a half times because of disclosure. Open source vendors release patches more quickly than closed source vendors. Vendors are more responsive to more severe vulnerabilities. We also find that vendors respond more slowly to vulnerabilities not disclosed by CERT. We verify our results by using another publicly available data set and find that results are consistent. We also show how our estimates can aid policy makers in their decision making.	Decision making; Open systems; Security of data; Disclosure policies; Hazard modeling; Open sources; Patch release time; Security vulnerabilities; Software vendors; Open source software; Decision making;  Open systems;  Security of data;  Disclosure policies;  Hazard modeling;  Open sources;  Patch release time;  Security vulnerabilities;  Software vendors;  Open source software	Arora, Ashish; Krishnan, Ramayya; Telang, Rahul; Yang, Yubao	Information Systems Research	https://doi.org/10.1287/isre.1080.0226		115 - 132	"""@ARTICLE{Arora2010115,
    author = ""Arora, Ashish and Krishnan, Ramayya and Telang, Rahul and Yang, Yubao"",
    title = ""An empirical analysis of software vendors' patch release behavior: Impact of vulnerability disclosure"",
    year = ""2010"",
    journal = ""Information Systems Research"",
    volume = ""21"",
    number = ""1"",
    pages = ""115 - 132"",
    doi = ""10.1287/isre.1080.0226"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954250852\&doi=10.1287\%2fisre.1080.0226\&partnerID=40\&md5=78d0475663d3f20269ae8413b11a5f8e"",
    affiliations = ""H. John Heinz III College, Carnegie Mellon University, Pittsburgh, PA 15213, United States"",
    abstract = ""Akey aspect of better and more secure software is timely patch release by software vendors for the vulnerabilities in their products. Software vulnerability disclosure, which refers to the publication of vulnerability information, has generated intense debate. An important consideration in this debate is the behavior of software vendors. How quickly do vendors patch vulnerabilities and how does disclosure affect patch release time? This paper compiles a unique data set from the Computer Emergency Response Team/Coordination Center (CERT) and SecurityFocus to answer this question. Our results suggest that disclosure accelerates patch release. The instantaneous probability of releasing the patch rises by nearly two and a half times because of disclosure. Open source vendors release patches more quickly than closed source vendors. Vendors are more responsive to more severe vulnerabilities. We also find that vendors respond more slowly to vulnerabilities not disclosed by CERT. We verify our results by using another publicly available data set and find that results are consistent. We also show how our estimates can aid policy makers in their decision making. (c) 2010 INFORMS."",
    author_keywords = ""Disclosure policy; Hazard model; Information security; Open source vendors; Patch release time; Security vulnerability; Software vendors"",
    keywords = ""Decision making; Open systems; Security of data; Disclosure policies; Hazard modeling; Open sources; Patch release time; Security vulnerabilities; Software vendors; Open source software"",
    correspondence_address = ""A. Arora; H. John Heinz III College, Carnegie Mellon University, Pittsburgh, PA 15213, United States; email: ashish@andrew.cmu.edu"",
    publisher = ""INFORMS Inst.for Operations Res.and the Management Sciences"",
    issn = ""10477047"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. Res."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 112; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		An empirical analysis of software vendors' patch release behavior: impact of vulnerability disclosure	https://www.scopus.com/record/display.uri?eid=2-s2.0-77954250852&origin=resultslist&sort=r-f&src=s&sid=dfa77b293717184d8561ddffdacbe489&sot=b&sdt=b&s=TITLE%28an+empirical+analysis+of+software+vendors+patch+release+behavior+impact+of+vulnerability+disclosure%29&sl=106&sessionSearchId=dfa77b293717184d8561ddffdacbe489&relpos=0	INFORMS Inst.for Operations Res.and the Management Sciences	nan; References
170	TrustSE	Progressive open source	The success of several Open Source(tm) software systems, e.g., Apache, Bind, Emacs, and Linux, has recently sparked interest in studying and emulating the software engineering principles underlying this innovative development and use model. Certain aspects of the Open Source development method, e.g., community building, open discussions for requirements and features, and evolvable and modular designs are having fundamental and far reaching consequences on general software engineering practices.To leverage such Open Source methods and tools, we have defined an innovative software engineering paradigm for large corporations: Progressive Open Source (POS). POS leverages the power of Open Source methods and tools for large corporations in a progressive manner: starting from completely within the corporation, to include partner businesses, and eventually complete Open Source. In this paper we present the design goals and principles for POS. We illustrate POS with two programs in HP: Corporate Source and the Collaborative Development Program (CDP). We present early results from both these programs suggesting the power and necessity of POS for all modern large corporations.		Dinkelacker, Jamie; Garg, Pankaj K.; Miller, Rob; Nelson, Dean	ICSE '02: Proceedings of the 24th International Conference on Software Engineering	https://doi.org/10.1145/581339.581363		177-184	"""@inproceedings{10.1145/581339.581363,
    author = ""Dinkelacker, Jamie and Garg, Pankaj K. and Miller, Rob and Nelson, Dean"",
    title = ""Progressive open source"",
    year = ""2002"",
    isbn = ""158113472X"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/581339.581363"",
    doi = ""10.1145/581339.581363"",
    abstract = ""The success of several Open Source(tm) software systems, e.g., Apache, Bind, Emacs, and Linux, has recently sparked interest in studying and emulating the software engineering principles underlying this innovative development and use model. Certain aspects of the Open Source development method, e.g., community building, open discussions for requirements and features, and evolvable and modular designs are having fundamental and far reaching consequences on general software engineering practices.To leverage such Open Source methods and tools, we have defined an innovative software engineering paradigm for large corporations: Progressive Open Source (POS). POS leverages the power of Open Source methods and tools for large corporations in a progressive manner: starting from completely within the corporation, to include partner businesses, and eventually complete Open Source. In this paper we present the design goals and principles for POS. We illustrate POS with two programs in HP: Corporate Source and the Collaborative Development Program (CDP). We present early results from both these programs suggesting the power and necessity of POS for all modern large corporations."",
    booktitle = ""Proceedings of the 24th International Conference on Software Engineering"",
    pages = ""177-184"",
    numpages = ""8"",
    location = ""Orlando, Florida"",
    series = ""ICSE '02""
}
"""	Excluded	Excluded				2	ACM		Progressive open source	https://doi.org/10.1145/581339.581363	Association for Computing Machinery	nan; Keywords; References; Link
171	TrustSE	Predicting fault incidence using software change history	This paper is an attempt to understand the processes by which software ages. We define code to be aged or decayed if its structure makes it unnecessarily difficult to understand or change and we measure the extent of decay by counting the number of faults in code in a period of time. Using change management data from a very large, long-lived software system, we explore the extent to which measurements from the change history are successful in predicting the distribution over modules of these incidences of faults. In general, process measures based on the change history are more useful in predicting fault rates than product metrics of the code: For instance, the number of times code has been changed is a better indication of how many faults it will contain than is its length. We also compare the fault rates of code of various ages, finding that if a module is, on the average, a year older than an otherwise similar module, the older module will have roughly a third fewer faults. Our most successful model measures the fault potential of a module as the sum of contributions from all of the times the module has been changed, with large, recent changes receiving the most weight.	History; Predictive models; Software systems; Aging; Time measurement; Software measurement; Length measurement; Software development management; Statistical analysis; Degradation	T.L. Graves; A.F. Karr; J.S. Marron; H. Siy	IEEE Transactions on Software Engineering	https://doi.org/10.1109/32.859533	"1.M.M. Lehman and L.A. Belady, Program Evolution: Processes of Software Change., 1985. Google Scholar; 2.J.D. Musa, A. Iannino and K. Okumoto, Software Reliability., 1990. Google Scholar; 3.J. Jelinski and P.B. Moranda, ""Software Reliability Research"", in Probabilistic Models for Software, pp. 485-502, 1972. CrossRef  Google Scholar; 4.G.J. Schick and R.W. Wolverton, ""An Analysis of Competing Software Reliability Models"", IEEE Trans. Software Eng., vol. 4, no. 2, pp. 104-120, Mar. 1978. View Article  Google Scholar; 5.S.N. Mohanty, ""Models and Measurements for Quality Assessment of Software"", ACM Computing Surveys, vol. 11, no. 3, pp. 251-275, Sept. 1979. CrossRef  Google Scholar; 6.S.G. Eick, C.R. Loader, M.D. Long, L.G. Votta and S. VanderWiel, ""Estimating Software Fault Content Before Coding"", Proc. 14th Int'l Conf. Software Eng., pp. 59-65, 1992-May. View Article  Google Scholar; 7.D.A. Christenson and S.T. Huang, ""Estimating the Fault Content of Software Using the Fix-on-Fix Model"", Bell Labs Technical J., vol. 1, no. 1, pp. 130-137, Summer 1996. CrossRef  Google Scholar; 8.K.H. An, D.A. Gustafson and A.C. Melton, ""A Model for Software Maintenance"", Proc. Conf. Software Maintenance, pp. 57-62, 1987-Sept. CrossRef  Google Scholar; 9.V.R. Basili and B.T. Perricone, ""Software Errors and Complexity: An Empirical Investigation"", Comm. ACM, vol. 27, no. 1, pp. 42-52, Jan. 1984. CrossRef  Google Scholar; 10.L. Hatton, ""Reexamining the Fault DensityComponent Size Connection"", IEEE Software, pp. 89-97, Mar./Apr. 1997. View Article  Google Scholar; 11.T.J. McCabe, ""A Complexity Measure"", IEEE Trans. Software Eng., vol. 2, no. 4, pp. 308-320, Dec. 1976. View Article  Google Scholar; 12.M.H. Halstead, Elements of Software Science., 1979. Google Scholar; 13.N.F. Schneidewind and H.-M. Hoffman, ""An Experiment in Software Error Data Collection and Analysis"", IEEE Trans. Software Eng., vol. 5, no. 3, pp. 276-286, May 1979. View Article  Google Scholar; 14.V.Y. Shen, T.-J. Yu, S.M. Thebaut and L.R. Paulsen, ""Identifying Error-Prone SoftwareAn Empirical Study"", IEEE Trans. Software Eng., vol. 11, no. 4, pp. 317-324, Apr. 1985. View Article  Google Scholar; 15.J.C. Munson and T.M. Khoshgoftaar, ""Regression Modelling of Software Quality: Empirical Investigation"", Information and Software Technology, pp. 106-114, 1990. CrossRef  Google Scholar; 16.P. McCullagh and J.A. Nelder, Generalized Linear Models, 1989. CrossRef  Google Scholar; 17.H. Zuse, Software Complexity: Measures and Methods., 1991. Google Scholar; 18.T.J. Yu, V.Y. Shen and H.E. Dunsmore, ""An Analysis of Several Software Defect Models"", IEEE Trans. Software Eng., vol. 14, no. 9, pp. 1,261-1,270, Sept. 1988. View Article  Google Scholar; 19.N. Ohlsson and H. Alberg, ""Predicting Fault-Prone Software Modules in Telephone Switches"", IEEE Trans. Software Eng., vol. 22, no. 12, pp. 886-894, Dec. 1996. View Article  Google Scholar; 20.M.J. Rochkind, ""The Source Code Control System"", IEEE Trans. Software Eng., vol. 1, no. 4, pp. 364-370, Dec. 1975. View Article  Google Scholar; 21.B. Efron and R.J. Tibshirani, An Introduction to the Bootstrap., 1993. CrossRef  Google Scholar"	653- 661		Excluded	Excluded				2	IEEE		Predicting fault incidence using software change history	https://ieeexplore.ieee.org/document/859533	IEEE	nan; Year; Bibtex
172	TrustSE	Convicting exploitable software vulnerabilities: An efficient input provenance based approach	Software vulnerabilities are the root cause of a wide range of attacks. Existing vulnerability scanning tools are able to produce a set of suspects. However, they often suffer from a high false positive rate. Convicting a suspect and vindicating false positives are mostly a highly demanding manual process, requiring a certain level of understanding of the software. This limitation significantly thwarts the application of these tools by system administrators or regular users who are concerned about security but lack of understanding of, or even access to, the source code. It is often the case that even developers are reluctant to inspect/fix these numerous suspects unless they are convicted by evidence. In this paper, we propose a lightweight dynamic approach which generates evidence for various security vulnerabilities in software, with the goal of relieving the manual procedure. It is based on data lineage tracing, a technique that associates each execution point precisely with a set of relevant input values. These input values can be mutated by an offline analysis to generate exploits. We overcome the efficiency challenge by using Binary Decision Diagrams (BDD). Our tool successfully generates exploits for all the known vulnerabilities we studied. We also use it to uncover a number of new vulnerabilities, proved by evidence.	Software; Data structures; Boolean functions; Runtime; Conferences; Equations; Detectors; Security Vulnerabilities; Source Code; Input Values; Dynamic Approach; High False Positive Rate; Lineage Tracing; Regular Users; Heuristic; Scope Of This Paper; Random Generation; Search Method; Flow Control; Static Analysis; Binary Code; Benchmark Test; Program Execution; Input Generation; Lineage Information; Constraint Satisfaction Problem; Buffer Overflow; Execution Steps; Input Program; System Calls; Runtime Overhead; Vulnerable Locations	Zhiqiang Lin; Xiangyu Zhang; Dongyan Xu	2008 IEEE International Conference on Dependable Systems and Networks With FTCS and DCC (DSN)	https://doi.org/10.1109/DSN.2008.4630093	1.http://www.dwheeler.com/flawfinder/; 2.http://www.fortifysoftware.com/security-resources/rats.jsp; 3.http://diablo.elis.ugent.be; 4.Buddy, a binary decision diagram package. Department of Information Technology, Technical Univ. of Denmark.; 5.C. Meinel and T. Theobald. Algorithms and data structures in vlsi design, 1998. Springer. CrossRef  Google Scholar; 6.Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. N. Nethercote and J. Seward. In Proc. of ACMPLDI, June 2007.; 7.B.P. Miller, L. Fredriksen, and B. So. An Empirical Study of the Reliability of UNIX Utilities. Communications of the ACM 33, 12, Dec. 1990.; 8.J. E. Forrester and B. P. Miller. An Empirical Study of the Robustness of Windows NT Applications Using Random Testing. In Proc. of the 4th USENIX Windows System Symposium, 2000. Google Scholar; 9.C. Cadar, V. Ganesh, P. Pawlowski, D. Dill, and D. Engler. Exe: automatically generating inputs of death. In Proc. of ACM CCS, Nov. 2006. CrossRef  Google Scholar; 10.K. Sen, D. Marinov, and G. Agha. Cute: A concolic unit testing engine for c. In Proc. of ACM ESEC/FSE-13, 2005. CrossRef  Google Scholar; 11.P. Godefroid, N. Klarlund, and K. Sen. Dart: Directed automated random testing. In Proc. of ACM PLDI, 2005.; 12.A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proc. of 2007 IEEE Symposium on Security and Privacy, May 2007. View Article  Google Scholar; 13.P. Godefroid, M. Levin, and D. Moinar. Automated whitebox fuzz testing. In Proc. of NDSS, San Deigo, CA, Feb. 2008. View Article  Google Scholar; 14.M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic Spyware Analysis. In Proc. of the 2007 USENIX Annual Technical Conference, Santa Clara, CA, June 2007. Google Scholar; 15.J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software.. In Proc. of NDSS, Feb. 2005. Google Scholar; 16.M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity: Principles, Implementations, and Applications. In Proc of ACM CCS, Nov. 2005. CrossRef  Google Scholar; 17.M. Castro, M. Costa, and T. Harris. Securing Software by Enforcing Data-flow Integrity. In Proc. of OSDI, Nov. 2006. Google Scholar; 18.D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In Proc. of NDSS, Feb. 2000. Google Scholar; 19.D. Larochelle and D. Evans. Statically Detecting Likely Buffer Overflow Vulnerabilities. In Proc. of USENIX Security, 2001. Google Scholar; 20.M. Zitser, D. Shaw, T. Leek and R. Lippman. Testing Static Analysis Tools Using Exploitable Buffer Overflows From Open Source Code. In Proc. of ACM ESEC/FSE-11, 2004. CrossRef  Google Scholar; 21.Y. Xie, A. Chou, and D. Engler. Archer: using symbolic, path-sensitive analysis to detect memory access errors. In Proc. of ACM ESEC/FSE-10, 2003. CrossRef  Google Scholar; 22.J. Ferrante, K. Ottenstein, J. Warren. The program dependence graph and its use in optimization. ACM Trans. on Programming Languages and Systems, 9(3),1987. CrossRef  Google Scholar; 23.M. Weiser. Program slicing. In Proc. of ICSE, 1981. View Article  Google Scholar; 24.X. Zhang, R. Gupta, and Y. Zhang. Efficient forward computation of dynamic slices using reduced ordered binary decision diagrams. In Proc. of ICSE, 2004. View Article  Google Scholar			Excluded	Excluded				2	IEEE		Convicting exploitable software vulnerabilities: An efficient input provenance based approach	https://ieeexplore.ieee.org/document/4630093	IEEE	nan; Pages; Year; Bibtex
173	TrustSE	Robust open-source software	No abstract available.		Neumann, Peter G.	Intellectual property in the age of universal access	https://doi.org/10.1145/318536.318542		22	"""@inbook{10.1145/318536.318542,
    author = ""Neumann, Peter G."",
    title = ""Robust open-source software"",
    year = ""1999"",
    isbn = ""1581131690"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/318536.318542"",
    booktitle = ""Intellectual Property in the Age of Universal Access"",
    pages = ""22""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	ACM		Robust open-source software	https://doi.org/10.1145/318536.318542	Association for Computing Machinery	nan; Keywords; References; Link
174	TrustSE	The social shaping of packaged software selection	"As organisations increasingly engage in the selection, purchase, and adoption of packaged software products, how these activities are carried out in practice becomes increasingly relevant for researchers and practitioners. Our focus in this paper is to propose a framework for understanding the packaged software selection process. The functionalist literature on this area of study suggests a number of generic recommendations, which are based on rational assumptions about the process and view the decision making that takes place as producing the ""best technology solution.'"" To explore this, we conducted a longitudinal, in-depth study of packaged software selection in a small organisation. For interpretation of the case, we draw upon the Social Construction of Technology, a theoretical framework arguing that technology is socially constituted and regarding the process of development as contradictory and uncertain. We offer a number of contributions. First, we further our understanding of packaged software selection with the critique that we offer of the functionalist literature, drawing insights from the emerging critical/constructivist literature and expanding our domain of interest to encompass the wider environment. Second, we weave this together with our experiences in the field, drawing on social constructivism for theoretical support, to develop a framework of packaged software selection that shows how various actors shape the process."	Behavioral research; Computer software selection and evaluation; Packaged software; Packaged software selection; Social construction of technology; Social Shaping; Social shaping of technologies; Software procurement; Software products; Software selection; Vendor; Decision making; Behavioral research;  Computer software selection and evaluation;  Packaged software;  Packaged software selection;  Social construction of technology;  Social Shaping;  Social shaping of technologies;  Software procurement;  Software products;  Software selection;  Vendor;  Decision making	Howcroft, Debra; Light, Ben	Journal of the Association for Information Systems	https://doi.org/10.17705/1jais.00224		122 - 148	"""@ARTICLE{Howcroft2010122,
    author = ""Howcroft, Debra and Light, Ben"",
    title = ""The social shaping of packaged software selection"",
    year = ""2010"",
    journal = ""Journal of the Association for Information Systems"",
    volume = ""11"",
    number = ""3"",
    pages = ""122 - 148"",
    doi = ""10.17705/1jais.00224"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953152121\&doi=10.17705\%2f1jais.00224\&partnerID=40\&md5=85e48acdb17818216130a7d50beba047"",
    affiliations = ""University of Manchester, United Kingdom; University of Salford, United Kingdom"",
    abstract = {As organisations increasingly engage in the selection, purchase, and adoption of packaged software products, how these activities are carried out in practice becomes increasingly relevant for researchers and practitioners. Our focus in this paper is to propose a framework for understanding the packaged software selection process. The functionalist literature on this area of study suggests a number of generic recommendations, which are based on rational assumptions about the process and view the decision making that takes place as producing the ""best technology solution.'"" To explore this, we conducted a longitudinal, in-depth study of packaged software selection in a small organisation. For interpretation of the case, we draw upon the Social Construction of Technology, a theoretical framework arguing that technology is socially constituted and regarding the process of development as contradictory and uncertain. We offer a number of contributions. First, we further our understanding of packaged software selection with the critique that we offer of the functionalist literature, drawing insights from the emerging critical/constructivist literature and expanding our domain of interest to encompass the wider environment. Second, we weave this together with our experiences in the field, drawing on social constructivism for theoretical support, to develop a framework of packaged software selection that shows how various actors shape the process. (c) 2010, by the Association for Information Systems.},
    author_keywords = ""Packaged software; Packaged software selection; Social construction of technology; Social shaping of technology; Software procurement; Vendors"",
    keywords = ""Behavioral research; Computer software selection and evaluation; Packaged software; Packaged software selection; Social construction of technology; Social Shaping; Social shaping of technologies; Software procurement; Software products; Software selection; Vendor; Decision making"",
    correspondence_address = ""D. Howcroft; University of Manchester, United Kingdom; email: debra.howcroft@manchester.ac.uk"",
    publisher = ""Association for Information Systems"",
    issn = ""15583457"",
    language = ""English"",
    abbrev_source_title = ""J. Assoc. Inf. Syst."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 46; All Open Access, Bronze Open Access""
}
"""	Included	Included				2	Scopus Signed In		The social shaping of packaged software selection	https://www.scopus.com/record/display.uri?eid=2-s2.0-77953152121&origin=resultslist&sort=r-f&src=s&sid=84aa3c74876996026a8fa6844863801f&sot=b&sdt=b&s=TITLE%28the+social+shaping+of+packaged+software+selection%29&sl=56&sessionSearchId=84aa3c74876996026a8fa6844863801f&relpos=0	Association for Information Systems	nan; References
175	TrustSE	Organizational adoption of open source software: barriers and remedies	"IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail."		Nagy, Del; Yassin, Areej M.; Bhattacherjee, Anol	Commun. ACM	https://doi.org/10.1145/1666420.1666457		148-151	"""@article{10.1145/1666420.1666457,
    author = ""Nagy, Del and Yassin, Areej M. and Bhattacherjee, Anol"",
    title = ""Organizational adoption of open source software: barriers and remedies"",
    year = ""2010"",
    issue_date = ""March 2010"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""53"",
    number = ""3"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1666420.1666457"",
    doi = ""10.1145/1666420.1666457"",
    abstract = {IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail.},
    journal = ""Commun. ACM"",
    month = ""March"",
    pages = ""148-151"",
    numpages = ""4""
}
"""	Included	Included				2	ACM		Organizational adoption of open source software	https://doi.org/10.1145/1666420.1666457	Association for Computing Machinery	nan; Keywords; References; Link
176	TrustSE	Comparison of open-source cloud management platforms: OpenStack and OpenNebula	Cloud management platforms may manage the resources provided by the infrastructure as a service (IaaS) cloud. With the rapid development of open-source cloud platforms, they have been widely used due to open and free, some of them can substitute commercial clouds. Some existed related works only concisely compare the basic features of open-source platforms, and not including some new released features. In this paper, we firstly present the function of OpenStack and OpenNebula briefly, and then compare them from provenance, architecture, hypervisors, security and other angles in detail. Moreover, we provide some deployment recommendations according to different user demands and platform characteristics.	Cloud computing; Open source software; Servers; Computer architecture; Virtual machine monitors; Communities; Educational institutions; Open-source Software; Open-source Cloud; Cloud Computing; Number Of Participants; Scalable; Data Center; Storage Systems; Types Of Services; Application Programming Interface; Successful Examples; Mailing Lists; Virtual Machines; July 2010; Software Components; Core Layer; Amazon Web Services; Cloud Providers; Open-source Community; Storage Infrastructure; Virtual Private Network; Representational State Transfer; Open Source; Cloud Platforms; Cloud Computing; IaaS; OpenStack; OpenNebula	Xiaolong Wen; Genqiang Gu; Qingchun Li; Yun Gao; Xuejie Zhang	2012 9th International Conference on Fuzzy Systems and Knowledge Discovery	https://doi.org/10.1109/FSKD.2012.6234218	"1.M. Armbrust, A. Fox, R. Griggith, et al. , ""Above the cloud: A Berkeley View of Cloud Computing, "" Technical Report No. UCB/EECS-2009-28, EECS Department, University of California at Berkeley, USA, Feb. 10, 2009. Google Scholar; 2.I. Foster, Y. Zhao, I. Raicu and S. lu, ""Cloud Computing and Grid Computing 360-Degree Compared, "" in Grid Computing Environments Workshop, 2008. GCE'08, 2008, pp. 1-10. View Article  Google Scholar; 3.Amazon Elastic Compute Cloud (EC2). http://aws. amazon. com/ec2/. Google Scholar; 4.Amazon Simple Storage Service (S3). http://aws. amazon. com/s3/. Google Scholar; 5.Google APP Engine. http://code. google. com/appengine/.; 6.Microsoft Azure. http://www. windowsazure. com/.; 7.OpenStack Home Page. http://www. openstack. org/.; 8.OpenNebula Home Page. http://www. opennebula. org/.; 9.D. Cerbelaud, S. Garg, J. Huylebroeck, ""Opening the Clouds: Qualitative Overview of the State-of-the-art Open-Source VM-based Cloud Management Platforms"", Proceedings of the 10th ACM International Conference on Middleware, 2009. Google Scholar; 10.Patricia Takako Endo, Glauco Estacio Goncalves et al. , ""A Survey on Open-source Cloud Computing Solutions, "" VIII Workshop em Clouds, Grids e Aplicaces. , pp. 3-16, 2010. Google Scholar; 11.P. Sempolinski, D. Thain, ""A Comparison and Critique of Eucalyptus, OpenNebula and Nimbus, "" 2nd IEEE International Conference on Cloud Computing Technology and Science, pp. 417-426, 2010. View Article  Google Scholar; 12.S. Wind, ""Open Source Cloud Computing Management Platforms: Introduction, Comparison and Recommendations for Implementation"", IEEE Conference on Open Systems, pp. 175-179, 2011. View Article  Google Scholar; 13.I. Voras, B. Mihaljeci?, M. Orli?, et al, ""Evaluating Open-Source Cloud Computing Solutions"", MIPRO, Proceedings of the 34th International Convention, pp. 209-214, 2011. View Article  Google Scholar; 14.M. Mahjoub, A. Mdhaffar, et al. ""A Comparative Study of the Current Cloud Computing Technologies and Offers, "" IEEE First Symposium on Network Cloud Computing and Applications, pp. 131-134, 2011. View Article  Google Scholar; 15.Junjie Peng, Xuejun Zhang, et al. ""Comparison of Several Cloud Computing Platforms, "" 2nd International Symposium on Information Science and Engineering, pp. 23-27, 2009. View Article  Google Scholar; 16.Representational state transfer. http://en. wikipedia. org/wiki/REST. Google Scholar; 17.Virtual Data Center. http://blog. opennebula. org/?p=1802."			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Comparison of open-source cloud management platforms: OpenStack and OpenNebula	https://ieeexplore.ieee.org/document/6234218	IEEE	nan; Pages; Year; Bibtex
177	TrustSE	Do developers update their library dependencies?: An empirical study on the impact of security advisories on library migration	Third-party library reuse has become common practice in contemporary software development, as it includes several benefits for developers. Library dependencies are constantly evolving, with newly added features and patches that fix bugs in older versions. To take full advantage of third-party reuse, developers should always keep up to date with the latest versions of their library dependencies. In this paper, we investigate the extent of which developers update their library dependencies. Specifically, we conducted an empirical study on library migration that covers over 4,600 GitHub software projects and 2,700 library dependencies. Results show that although many of these systems rely heavily on dependencies, 81.5% of the studied systems still keep their outdated dependencies. In the case of updating a vulnerable dependency, the study reveals that affected developers are not likely to respond to a security advisory. Surveying these developers, we find that 69% of the interviewees claimed to be unaware of their vulnerable dependencies. Moreover, developers are not likely to prioritize a library update, as it is perceived to be extra workload and responsibility. This study concludes that even though third-party reuse is common practice, updating a dependency is not as common for many developers.	Computer software maintenance; Computer software reusability; Software design; Empirical studies; Security advisories; Security vulnerabilities; Software project; Third parties; Digital libraries; Computer software maintenance;  Computer software reusability;  Software design;  Empirical studies;  Security advisories;  Security vulnerabilities;  Software project;  Third parties;  Digital libraries	Kula, Raula Gaikovina; German, Daniel M; Ouni, Ali; Ishio, Takashi; Inoue, Katsuro	Empirical Software Engineering	https://doi.org/10.1007/s10664-017-9521-5		384 - 417	"""@ARTICLE{Kula2018384,
    author = ""Kula, Raula Gaikovina and German, Daniel M and Ouni, Ali and Ishio, Takashi and Inoue, Katsuro"",
    title = ""Do developers update their library dependencies?: An empirical study on the impact of security advisories on library migration"",
    year = ""2018"",
    journal = ""Empirical Software Engineering"",
    volume = ""23"",
    number = ""1"",
    pages = ""384 - 417"",
    doi = ""10.1007/s10664-017-9521-5"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018911525\&doi=10.1007\%2fs10664-017-9521-5\&partnerID=40\&md5=f9a3baa2c84ed179aa805789b9e16a14"",
    affiliations = ""Osaka University, Suita, Japan; University of Victoria, Victoria, BC, Canada; Nara Institute of Science and Technology, Osaka University, Takayama, Ikoma, Japan; UAE University, Sheikh Khalifa Bin Zayed Street, Al Ain, Abu Dhabi, United Arab Emirates"",
    abstract = ""Third-party library reuse has become common practice in contemporary software development, as it includes several benefits for developers. Library dependencies are constantly evolving, with newly added features and patches that fix bugs in older versions. To take full advantage of third-party reuse, developers should always keep up to date with the latest versions of their library dependencies. In this paper, we investigate the extent of which developers update their library dependencies. Specifically, we conducted an empirical study on library migration that covers over 4,600 GitHub software projects and 2,700 library dependencies. Results show that although many of these systems rely heavily on dependencies, 81.5\% of the studied systems still keep their outdated dependencies. In the case of updating a vulnerable dependency, the study reveals that affected developers are not likely to respond to a security advisory. Surveying these developers, we find that 69\% of the interviewees claimed to be unaware of their vulnerable dependencies. Moreover, developers are not likely to prioritize a library update, as it is perceived to be extra workload and responsibility. This study concludes that even though third-party reuse is common practice, updating a dependency is not as common for many developers. (c) 2017, Springer Science+Business Media New York."",
    author_keywords = ""Security vulnerabilities; Software maintenance; Software reuse"",
    keywords = ""Computer software maintenance; Computer software reusability; Software design; Empirical studies; Security advisories; Security vulnerabilities; Software project; Third parties; Digital libraries"",
    correspondence_address = ""R.G. Kula; Nara Institute of Science and Technology, Osaka University, Takayama, Ikoma, Japan; email: raula-k@is.naist.jp"",
    publisher = ""Springer New York LLC"",
    issn = ""13823256"",
    coden = ""ESENF"",
    language = ""English"",
    abbrev_source_title = ""Empir Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 215; All Open Access, Green Open Access""
}
"""	Included	Included				2	Scopus Signed In		Do developers update their library dependencies?	https://www.scopus.com/record/display.uri?eid=2-s2.0-85018911525&origin=resultslist&sort=r-f&src=s&sid=cc8db408a388f47380dac5b9906d794f&sot=b&sdt=b&s=TITLE%28do+developers+update+their+library+dependencies%29&sl=54&sessionSearchId=cc8db408a388f47380dac5b9906d794f&relpos=0	Springer New York LLC	nan; References
178	TrustSE	Component-based systems: A classification of issues	Although component-based development offers many potential benefits, such as greater reuse and a commodity-oriented perspective of software, it also raises several issues that developers need to consider. A set of issues organized within an overall framework that software developers must address for component-based systems (CBS) to achieve their full potential is discussed. By classifying and grouping the relevant ideas into a framework achieves different goals. These goals include: helping the potential transfer of CBS development into reality; bringing together disparate perspectives on components; and begins the identification of key research questions.	Interoperability; Response time (computer systems); Software engineering; Component-based systems (CBS); Computer systems programming; Interoperability;  Response time (computer systems);  Software engineering;  Component-based systems (CBS);  Computer systems programming	Brereton, Pearl; Budgen, David	Computer	https://doi.org/10.1109/2.881695	"1.O.P. Brereton, ""The Future of Software: Defining the Research Agenda"", Comm. ACM, pp. 78-84, Dec. 1999. CrossRef  Google Scholar; 2.C. Szyperski, Component SoftwareBeyond Object-Oriented Programming, Reading, Mass.,, 1998. Google Scholar; 3.A.W. Brown and K.C. Wallnau, ""The Current State of CBSE"", IEEE Software, pp. 37-46, Sept./Oct. 1998. View Article  Google Scholar; 4.Butler Report: Component-Based Development, vol. 1, 1998. Google Scholar; 5.R.G. Fichman and C.F. Kemerer, ""Object Technology and Reuse: Lessons from Early Adopters"", Computer, pp. 47-59, Oct. 1997. View Article  Google Scholar; 6.M. Tsagias and B.A. Kitchenham, ""An Evaluation of the Business Object Approach to Software Development"", J. Systems and Software, Nov. 2000. CrossRef  Google Scholar; 7.W.B. Frakes and T.P. Pole, ""An Empirical Study of Representation Methods for Reusable Components"", IEEE Trans. Software Eng., pp. 617-630, Aug. 1994. View Article  Google Scholar; 8.V. Traas and J. van Hillegersberg, ""The Software Component Market on the Internet: Current Status and Conditions for Growth"", Software Eng. Notes, pp. 114-117, Jan. 2000. CrossRef  Google Scholar; 9.O.P. Brereton, D. Budgen and G. Hamilton, ""Hypertext: The Next Maintenance Mountain"", Computer, pp. 49-55, Dec. 1998. View Article  Google Scholar; 10.J.Z. Gao, ""Engineering on the Internet for Global Software Production"", Computer, pp. 38-47, May 1999. View Article  Google Scholar; 11.D.J. Carney and K. Wallnau, ""A Basis for Evaluation of Commercial Software"", Information and Software Technology, pp. 851-860, Dec. 1998. CrossRef  Google Scholar; 12.J. Voas and J. Payne, ""Dependability Certification of Software Components"", J. Systems and Software, Nov. 2000. CrossRef  Google Scholar; 13.A.W. Brown and K. Short, ""On Components and Objects: The Foundations of Component Based Development"", Proc. 5th Int'l Symp. Assessment of Software Tools and Technologies, pp. 112-121, 1997. View Article  Google Scholar; 14.A.W. Brown and K.C. Wallnau, ""The Current State of CBSE"", IEEE Software, pp. 37-46, Sept./Oct. 1998. View Article  Google Scholar"	54 - 62	"""@ARTICLE{Brereton200054,
    author = ""Brereton, Pearl and Budgen, David"",
    title = ""Component-based systems: A classification of issues"",
    year = ""2000"",
    journal = ""Computer"",
    volume = ""33"",
    number = ""11"",
    pages = ""54 - 62"",
    doi = ""10.1109/2.881695"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034320863\&doi=10.1109\%2f2.881695\&partnerID=40\&md5=0787ffc7fa09d052b6821d415699dc89"",
    affiliations = ""Keele University, Staffordshire, United Kingdom"",
    abstract = ""Although component-based development offers many potential benefits, such as greater reuse and a commodity-oriented perspective of software, it also raises several issues that developers need to consider. A set of issues organized within an overall framework that software developers must address for component-based systems (CBS) to achieve their full potential is discussed. By classifying and grouping the relevant ideas into a framework achieves different goals. These goals include: helping the potential transfer of CBS development into reality; bringing together disparate perspectives on components; and begins the identification of key research questions."",
    keywords = ""Interoperability; Response time (computer systems); Software engineering; Component-based systems (CBS); Computer systems programming"",
    publisher = ""IEEE"",
    issn = ""00189162"",
    coden = ""CPTRB"",
    language = ""English"",
    abbrev_source_title = ""Computer"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 116""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Component-based systems: A classification of issues	https://ieeexplore.ieee.org/document/881695	IEEE	
179	TrustSE	Trust perceptions of metadata in open-source software: The role of performance and reputation	Open-source software (OSS) is a key aspect of software creation. However, little is known about programmers' decisions to trust software from OSS websites. The current study emulated OSS websites and manipulated reputation and performance factors in the stimuli according to the heuristic-systematic processing model. We sampled professional programmers--with a minimum experience of three years--from Amazon Mechanical Turk (N = 38). We used a 3 x 3 within-subjects design to investigate the relationship between OSS reputation and performance on users' time spent on code, the number of interface clicks, trustworthiness perceptions, and willingness to use OSS code. We found that participants spent more time on and clicked the interface more often for code that was high in reputation. Meta-information included with OSS tools was found to affect the degree to which computer programmers interact with and perceive online code repositories. Furthermore, participants reported higher levels of perceived trustworthiness in and trust toward highly reputable OSS code. Notably, we observed fewer significant main effects for the performance manipulation, which may correspond to participants considering performance attributes mainly within the context of reputation-relevant information. That is, the degree to which programmers investigate and then trust OSS code may depend on the initial reputation ratings.	Code;; Heuristic-systematic model;; Open-source software;; Trust	Alarcon, Gene M.; Gibson, Anthony M.; Walter, Charles; Gamble, Rose F.; Ryan, Tyler J.; Jessup, Sarah A.; Boyd, Brian E.; Capiola, August	Systems	https://doi.org/10.3390/systems8030028		1 - 14	"""@ARTICLE{Alarcon20201,
    author = ""Alarcon, Gene M. and Gibson, Anthony M. and Walter, Charles and Gamble, Rose F. and Ryan, Tyler J. and Jessup, Sarah A. and Boyd, Brian E. and Capiola, August"",
    title = ""Trust perceptions of metadata in open-source software: The role of performance and reputation"",
    year = ""2020"",
    journal = ""Systems"",
    volume = ""8"",
    number = ""3"",
    pages = ""1 - 14"",
    doi = ""10.3390/systems8030028"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089838914\&doi=10.3390\%2fsystems8030028\&partnerID=40\&md5=6197ce879f65a481eb32da1f8b8dce99"",
    affiliations = ""Air Force Research Laboratory, Wright Patterson AFB, 45433, OH, United States; Consortium of Universities, Washington, 20036, DC, United States; Computer \& Information Science, University of Mississippi, Oxford, 38677, MS, United States; College of Engineering \& Natural Sciences, University of Tulsa, Tulsa, 74101, OK, United States; Department of Psychology, Wright State University, Dayton, 45433, OH, United States"",
    abstract = ""Open-source software (OSS) is a key aspect of software creation. However, little is known about programmers' decisions to trust software from OSS websites. The current study emulated OSS websites and manipulated reputation and performance factors in the stimuli according to the heuristic-systematic processing model. We sampled professional programmers--with a minimum experience of three years--from Amazon Mechanical Turk (N = 38). We used a 3 x 3 within-subjects design to investigate the relationship between OSS reputation and performance on users' time spent on code, the number of interface clicks, trustworthiness perceptions, and willingness to use OSS code. We found that participants spent more time on and clicked the interface more often for code that was high in reputation. Meta-information included with OSS tools was found to affect the degree to which computer programmers interact with and perceive online code repositories. Furthermore, participants reported higher levels of perceived trustworthiness in and trust toward highly reputable OSS code. Notably, we observed fewer significant main effects for the performance manipulation, which may correspond to participants considering performance attributes mainly within the context of reputation-relevant information. That is, the degree to which programmers investigate and then trust OSS code may depend on the initial reputation ratings. (c) 2020 by the authors. Licensee MDPI, Basel, Switzerland."",
    author_keywords = ""Code; Heuristic-systematic model; Open-source software; Trust"",
    correspondence_address = ""G.M. Alarcon; Air Force Research Laboratory, Wright Patterson AFB, 45433, United States; email: gene.alarcon.1@us.af.mil"",
    publisher = ""MDPI AG"",
    issn = ""20798954"",
    language = ""English"",
    abbrev_source_title = ""Systems"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 8; All Open Access, Gold Open Access""
}
"""	Included	Included				2	Scopus Signed In		Trust Perceptions of Metadata in Open-Source Software: The Role of Performance and Reputation	https://www.scopus.com/record/display.uri?eid=2-s2.0-85089838914&origin=resultslist&sort=r-f&src=s&sid=27f3d70525ba61c7e1defb1ee75ac2e5&sot=b&sdt=b&s=TITLE%28trust+perceptions+of+metadata+in+open+source+software+the+role+of+performance+and+reputation%29&sl=99&sessionSearchId=27f3d70525ba61c7e1defb1ee75ac2e5&relpos=0	MDPI AG	nan; References
180	TrustSE	Online trust and reputation systems	As online commerce, social networks, and user-generated content become common, need for trust and reputation models become prime. This tutorial will give an overview of trust and reputation systems as studied by social network researchers. Other topics include: Reputation and its relationship to security and fraud; Feedback and other Manifestations and Implementations of trust and reputations; Models of reputation; platforms: P2P systems, Centralized systems; Auctions, Incentive systems; Collaborative filtering; Social Networking and Social reputation; Portability and Universality of Identity, trust, and reputation.	trust;  reputation;  fraud detection;  feedback;  electronic commerce; trust, reputation, fraud detection, feedback, electronic commerce	Sundaresan, Neel	EC '07: Proceedings of the 8th ACM conference on Electronic commerce	https://doi.org/10.1145/1250910.1250969		366-367	"""@inproceedings{10.1145/1250910.1250969,
    author = ""Sundaresan, Neel"",
    title = ""Online trust and reputation systems"",
    year = ""2007"",
    isbn = ""9781595936530"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1250910.1250969"",
    doi = ""10.1145/1250910.1250969"",
    abstract = ""As online commerce, social networks, and user-generated content become common, need for trust and reputation models become prime. This tutorial will give an overview of trust and reputation systems as studied by social network researchers. Other topics include: Reputation and its relationship to security and fraud; Feedback and other Manifestations and Implementations of trust and reputations; Models of reputation; platforms: P2P systems, Centralized systems; Auctions, Incentive systems; Collaborative filtering; Social Networking and Social reputation; Portability and Universality of Identity, trust, and reputation."",
    booktitle = ""Proceedings of the 8th ACM Conference on Electronic Commerce"",
    pages = ""366-367"",
    numpages = ""2"",
    keywords = ""trust, reputation, fraud detection, feedback, electronic commerce"",
    location = ""San Diego, California, USA"",
    series = ""EC '07""
}
"""	Excluded	Excluded			Studies that were books or gray literature	2	ACM		Trust and reputation systems	https://doi.org/10.1145/1250910.1250969	Association for Computing Machinery	nan; References; Link
181	TrustSE	The extent of orphan vulnerabilities from code reuse in open source software	Motivation: A key premise of open source software is the ability to copy code to other open source projects (white-box reuse). Such copying accelerates development of new projects, but the code flaws in the original projects, such as vulnerabilities, may also spread even if fixed in the projects from where the code was appropriated. The extent of the spread of vulnerabilities through code reuse, the potential impact of such spread, or avenues for mitigating risk of these secondary vulnerabilities has not been studied in the context of a nearly complete collection of open source code.Aim: We aim to find ways to detect the white-box reuse induced vulnerabilities, determine how prevalent they are, and explore how they may be addressed.Method: We rely on World of Code infrastructure that provides a curated and cross-referenced collection of nearly all open source software to conduct a case study of a few known vulnerabilities. To conduct our case study we develop a tool, VDiOS, to help identify and fix white-box-reuse-induced vulnerabilities that have been already patched in the original projects (orphan vulnerabilities).Results: We find numerous instances of orphan vulnerabilities even in currently active and in highly popular projects (over 1K stars). Even apparently inactive projects are still publicly available for others to use and spread the vulnerability further. The often long delay in fixing orphan vulnerabilities even in highly popular projects increases the chances of it spreading to new projects. We provided patches to a number of project maintainers and found that only a small percentage accepted and applied the patch. We hope that VDiOS will lead to further study and mitigation of risks from orphan vulnerabilities and other orphan code flaws.	CVE;  code reuse;  git;  security vulnerabilities; CVE, code reuse, git, security vulnerabilities	Reid, David; Jahanshahi, Mahmoud; Mockus, Audris	ICSE '22: Proceedings of the 44th International Conference on Software Engineering	https://doi.org/10.1145/3510003.3510216		2104-2115	"""@inproceedings{10.1145/3510003.3510216,
    author = ""Reid, David and Jahanshahi, Mahmoud and Mockus, Audris"",
    title = ""The extent of orphan vulnerabilities from code reuse in open source software"",
    year = ""2022"",
    isbn = ""9781450392211"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3510003.3510216"",
    doi = ""10.1145/3510003.3510216"",
    abstract = ""Motivation: A key premise of open source software is the ability to copy code to other open source projects (white-box reuse). Such copying accelerates development of new projects, but the code flaws in the original projects, such as vulnerabilities, may also spread even if fixed in the projects from where the code was appropriated. The extent of the spread of vulnerabilities through code reuse, the potential impact of such spread, or avenues for mitigating risk of these secondary vulnerabilities has not been studied in the context of a nearly complete collection of open source code.Aim: We aim to find ways to detect the white-box reuse induced vulnerabilities, determine how prevalent they are, and explore how they may be addressed.Method: We rely on World of Code infrastructure that provides a curated and cross-referenced collection of nearly all open source software to conduct a case study of a few known vulnerabilities. To conduct our case study we develop a tool, VDiOS, to help identify and fix white-box-reuse-induced vulnerabilities that have been already patched in the original projects (orphan vulnerabilities).Results: We find numerous instances of orphan vulnerabilities even in currently active and in highly popular projects (over 1K stars). Even apparently inactive projects are still publicly available for others to use and spread the vulnerability further. The often long delay in fixing orphan vulnerabilities even in highly popular projects increases the chances of it spreading to new projects. We provided patches to a number of project maintainers and found that only a small percentage accepted and applied the patch. We hope that VDiOS will lead to further study and mitigation of risks from orphan vulnerabilities and other orphan code flaws."",
    booktitle = ""Proceedings of the 44th International Conference on Software Engineering"",
    pages = ""2104-2115"",
    numpages = ""12"",
    keywords = ""CVE, code reuse, git, security vulnerabilities"",
    location = ""Pittsburgh, Pennsylvania"",
    series = ""ICSE '22""
}
"""	Included	Included				2	ACM		Code reuse in open source software	https://doi.org/10.1145/3510003.3510216	Association for Computing Machinery	nan; References; Link
182	TrustSE	The grand challenge of Trusted Components	"Reusable components equipped with strict guarantees of quality can help reestablish software development on a stronger footing, by taking advantage of the scaling effect of reuse to justify the extra effort of ensuring impeccable quality. This discussion examines work intended to help the concept of Trusted Component brings its full potential to the software industry, along two complementary directions: a ""low road"" leading to qualification of existing components, and a ""high road"" aimed at the production of components with fully proved correctness properties."		Meyer, Bertrand	ICSE '03: Proceedings of the 25th International Conference on Software Engineering	https://doi.org/10.5555/776816.776911		660-667	"""@inproceedings{10.5555/776816.776911,
    author = ""Meyer, Bertrand"",
    title = ""The grand challenge of Trusted Components"",
    year = ""2003"",
    isbn = ""076951877X"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    abstract = {Reusable components equipped with strict guarantees of quality can help reestablish software development on a stronger footing, by taking advantage of the scaling effect of reuse to justify the extra effort of ensuring impeccable quality. This discussion examines work intended to help the concept of Trusted Component brings its full potential to the software industry, along two complementary directions: a ""low road"" leading to qualification of existing components, and a ""high road"" aimed at the production of components with fully proved correctness properties.},
    booktitle = ""Proceedings of the 25th International Conference on Software Engineering"",
    pages = ""660-667"",
    numpages = ""8"",
    location = ""Portland, Oregon"",
    series = ""ICSE '03""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	ACM		The grand challenge of trusted components	https://doi.org/10.5555/776816.776911	IEEE Computer Society	nan; Keywords; References; Link
183	TrustSE	The impact of ideology on effectiveness in open source software development teams	The emerging work on understanding open source software has questioned what leads to effectiveness in OSS development teams in the absence of formal controls, and it has pointed to the importance of ideology. This paper develops a framework of the OSS community ideology (including specific norms, beliefs, and values) and a theoretical model to show how adherence to components of the ideology impacts effectiveness in OSS teams. The model is based on the idea that the tenets of the OSS ideology motivate behaviors that enhance cognitive trust and communication quality and encourage identification with the project team, which enhances affective trust. Trust and communication in turn impact OSS team effectiveness. The research considers two kinds of effectiveness in OSS teams: the attraction and retention of developer input and the generation of project outputs. Hypotheses regarding antecedents to each are developed. Hypotheses are tested using survey and objective data on OSS projects. Results support the main thesis that OSS team members' adherence to the tenets of the OSS community ideology impacts OSS team effectiveness and reveal that different components impact effectiveness in different ways. Of particular interest is the finding that adherence to some ideological components was beneficial to the effectiveness of the team in terms of attracting and retaining input, but detrimental to the output of the team. Theoretical and practical implications are discussed.	Cognitive systems; Communication systems; Mathematical models; Software engineering; Virtual reality; Ideology; Open source software; Trust; Virtual teams; Computer software; Cognitive systems;  Communication systems;  Mathematical models;  Software engineering;  Virtual reality;  Ideology;  Open source software;  Trust;  Virtual teams;  Computer software	Stewart, Katherine J.; Gosain, Sanjay	MIS Quarterly: Management Information Systems	https://doi.org/10.2307/25148732		291 - 314	"""@ARTICLE{Stewart2006291,
    author = ""Stewart, Katherine J. and Gosain, Sanjay"",
    title = ""The impact of ideology on effectiveness in open source software development teams"",
    year = ""2006"",
    journal = ""MIS Quarterly: Management Information Systems"",
    volume = ""30"",
    number = ""2"",
    pages = ""291 - 314"",
    doi = ""10.2307/25148732"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745021689\&doi=10.2307\%2f25148732\&partnerID=40\&md5=c39db8dad3d4d8a1513ae838b9e79542"",
    affiliations = ""Department of Decision and Information Technologies, R. H. Smith School of Business, University of Maryland, College Park, MD 20742, United States"",
    abstract = ""The emerging work on understanding open source software has questioned what leads to effectiveness in OSS development teams in the absence of formal controls, and it has pointed to the importance of ideology. This paper develops a framework of the OSS community ideology (including specific norms, beliefs, and values) and a theoretical model to show how adherence to components of the ideology impacts effectiveness in OSS teams. The model is based on the idea that the tenets of the OSS ideology motivate behaviors that enhance cognitive trust and communication quality and encourage identification with the project team, which enhances affective trust. Trust and communication in turn impact OSS team effectiveness. The research considers two kinds of effectiveness in OSS teams: the attraction and retention of developer input and the generation of project outputs. Hypotheses regarding antecedents to each are developed. Hypotheses are tested using survey and objective data on OSS projects. Results support the main thesis that OSS team members' adherence to the tenets of the OSS community ideology impacts OSS team effectiveness and reveal that different components impact effectiveness in different ways. Of particular interest is the finding that adherence to some ideological components was beneficial to the effectiveness of the team in terms of attracting and retaining input, but detrimental to the output of the team. Theoretical and practical implications are discussed."",
    author_keywords = ""Communication; Ideology; Open source software; Trust; Virtual teams"",
    keywords = ""Cognitive systems; Communication systems; Mathematical models; Software engineering; Virtual reality; Ideology; Open source software; Trust; Virtual teams; Computer software"",
    correspondence_address = ""K.J. Stewart; Department of Decision and Information Technologies, R. H. Smith School of Business, University of Maryland, College Park, MD 20742, United States; email: kstewart@rhsmith.umd.edu"",
    publisher = ""Management Information Systems Research Center"",
    issn = ""02767783"",
    coden = ""MISQD"",
    language = ""English"",
    abbrev_source_title = ""MIS Quart Manage Inf Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 477""
}
"""	Excluded	Excluded				2	Scopus Signed In		The impact of ideology on effectiveness in open source software development teams	https://www.scopus.com/record/display.uri?eid=2-s2.0-33745021689&origin=resultslist&sort=r-f&src=s&sid=39b0815c251d151d4183dc1a83df8cb1&sot=b&sdt=b&s=TITLE%28the+impact+of+ideology+on+effectiveness+in+open+source+software+development+teams%29&sl=88&sessionSearchId=39b0815c251d151d4183dc1a83df8cb1&relpos=0	Management Information Systems Research Center	nan; References
184	TrustSE	A framework for creating hybrid-open source software communities	The open source software (OSS) model is a fundamentally new and revolutionary way to develop software. The success of the OSS model is also setting the stage for a structural change in the software industry; it is beginning to transform software industry from manufacturing to a service industry. Despite the success of the OSS model, for-profit organizations are having difficulty building a business model around the open source paradigm. Whereas there are some isolated empirical studies, little rigorous research has been done on how traditional organizations can implement and benefit from OSS practices. This research explores how organizations can foster an environment similar to OSS to manage their software development efforts to reap its numerous advantages. Drawing on organizational theory, we develop a framework that guides the creation and management of a hybrid-OSS community within an organization. We discuss the implications of this framework and suggest areas for future research.	Features of OSS;; Hybrid-OSS community;; Open source software;; OSS framework;; Software development	Srinarayan Sharma; Vijayan Sugumaran; Balaji Rajagopalan	Information Systems Journal	https://doi.org/10.1046/j.1365-2575.2002.00116.x				Excluded	Excluded				2	Scopus		A framework for creating hybrid‐open source software communities	https://doi.org/10.1046/j.1365-2575.2002.00116.x		nan; Venue; Authors; References; Pages; Year; Bibtex; Link; Publisher
185	TrustSE	Comparative assessment of software quality classification techniques: An empirical case study	Software metrics-based quality classification models predict a software module as either fault-prone (fp) or not fault-prone (nfp). Timely application of such models can assist in directing quality improvement efforts to modules that are likely to be fp during operations, thereby cost-effectively utilizing the software quality testing and enhancement resources. Since several classification techniques are available, a relative comparative study of some commonly used classification techniques can be useful to practitioners. We present a comprehensive evaluation of the relative performances of seven classification techniques and/or tools. These include logistic regression, case-based reasoning, classification and regression trees (CART), tree-based classification with S-PLUS, and the Sprint-Sliq, C4.5, and Treedisc algorithms. The use of expected cost of misclassification (ECM), is introduced as a singular unified measure to compare the performances of different software quality classification models. A function of the costs of the Type I (a nfp module misclassified as fp) and Type II (a fp module misclassified as nfp) misclassifications, ECM is computed for different cost ratios. Evaluating software quality classification models in the presence of varying cost ratios is important, because the usefulness of a model is dependent on the system-specific costs of misclassifications. Moreover, models should be compared and preferred for cost ratios that fall within the range of interest for the given system and project domain. Software metrics were collected from four successive releases of a large legacy telecommunications system. A two-way ANOVA randomized-complete block design modeling approach is used, in which the system release is treated as a block, while the modeling method is treated as a factor. It is observed that predictive performances of the models is significantly different across the system releases, implying that in the software engineering domain prediction models are influenced by the characteristics of the data and the system being modeled. Multiple-pairwise comparisons are performed to evaluate the relative performances of the seven models for the cost ratios of interest to the case study. In addition, the performance of the seven classification techniques is also compared with a classification based on lines of code. The comparative approach presented in this paper can also be applied to other software systems.	Computer software; Cost effectiveness; Decision theory; Logistics; Mathematical models; Project management; Regression analysis; Telecommunication; Trees (mathematics); Analysis of variance; Decision tree; Logistic regression; Software quality classification; Software engineering; Computer software;  Cost effectiveness;  Decision theory;  Logistics;  Mathematical models;  Project management;  Regression analysis;  Telecommunication;  Trees (mathematics);  Analysis of variance;  Decision tree;  Logistic regression;  Software quality classification;  Software engineering	Khoshgoftaar, Taghi M.; Seliya, Naeem	Empirical Software Engineering	https://doi.org/10.1023/B:EMSE.0000027781.18360.9b		229 - 257	"""@ARTICLE{Khoshgoftaar2004229,
    author = ""Khoshgoftaar, Taghi M. and Seliya, Naeem"",
    title = ""Comparative assessment of software quality classification techniques: An empirical case study"",
    year = ""2004"",
    journal = ""Empirical Software Engineering"",
    volume = ""9"",
    number = ""3"",
    pages = ""229 - 257"",
    doi = ""10.1023/B:EMSE.0000027781.18360.9b"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-3543063465\&doi=10.1023\%2fB\%3aEMSE.0000027781.18360.9b\&partnerID=40\&md5=8e45c42d73d29bce456b105fddc68a4a"",
    affiliations = ""Empirical Software Eng. Laboratory, Dept. of Comp. Sci. and Engineering, Florida Atlantic University, Boca Raton, FL 33431, United States"",
    abstract = ""Software metrics-based quality classification models predict a software module as either fault-prone (fp) or not fault-prone (nfp). Timely application of such models can assist in directing quality improvement efforts to modules that are likely to be fp during operations, thereby cost-effectively utilizing the software quality testing and enhancement resources. Since several classification techniques are available, a relative comparative study of some commonly used classification techniques can be useful to practitioners. We present a comprehensive evaluation of the relative performances of seven classification techniques and/or tools. These include logistic regression, case-based reasoning, classification and regression trees (CART), tree-based classification with S-PLUS, and the Sprint-Sliq, C4.5, and Treedisc algorithms. The use of expected cost of misclassification (ECM), is introduced as a singular unified measure to compare the performances of different software quality classification models. A function of the costs of the Type I (a nfp module misclassified as fp) and Type II (a fp module misclassified as nfp) misclassifications, ECM is computed for different cost ratios. Evaluating software quality classification models in the presence of varying cost ratios is important, because the usefulness of a model is dependent on the system-specific costs of misclassifications. Moreover, models should be compared and preferred for cost ratios that fall within the range of interest for the given system and project domain. Software metrics were collected from four successive releases of a large legacy telecommunications system. A two-way ANOVA randomized-complete block design modeling approach is used, in which the system release is treated as a block, while the modeling method is treated as a factor. It is observed that predictive performances of the models is significantly different across the system releases, implying that in the software engineering domain prediction models are influenced by the characteristics of the data and the system being modeled. Multiple-pairwise comparisons are performed to evaluate the relative performances of the seven models for the cost ratios of interest to the case study. In addition, the performance of the seven classification techniques is also compared with a classification based on lines of code. The comparative approach presented in this paper can also be applied to other software systems."",
    author_keywords = ""Analysis of variance; Case-based reasoning; Decision trees; Expected cost of misclassification; Logistic regression; Software quality classification"",
    keywords = ""Computer software; Cost effectiveness; Decision theory; Logistics; Mathematical models; Project management; Regression analysis; Telecommunication; Trees (mathematics); Analysis of variance; Decision tree; Logistic regression; Software quality classification; Software engineering"",
    correspondence_address = ""T.M. Khoshgoftaar; Empirical Software Eng. Laboratory, Dept. of Comp. Sci. and Engineering, Florida Atlantic University, Boca Raton, FL 33431, United States; email: taghi@cse.fau.edu"",
    issn = ""13823256"",
    coden = ""ESENF"",
    language = ""English"",
    abbrev_source_title = ""Empir Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 144""
}
"""	Excluded	Excluded				2	Scopus Signed In		Comparative assessment of software quality classification techniques: An empirical case study	https://www.scopus.com/record/display.uri?eid=2-s2.0-3543063465&origin=resultslist&sort=r-f&src=s&sid=6f8b47b8c05717595bc5d05d9fd8c866&sot=b&sdt=b&s=TITLE%28comparative+assessment+of+software+quality+classification+techniques+an+empirical+case+study%29&sl=99&sessionSearchId=6f8b47b8c05717595bc5d05d9fd8c866&relpos=0		nan; References; Publisher
186	TrustSE	Has Open Source Software a Future?	This chapter contains sections titled: Problematic Issues from a Software Engineering Perspective, Problematic Issues from a Business Perspective, Problematic Issues from a Sociocultural Perspective, Conclusion		Joseph Feller;; Brian Fitzgerald;; Scott A. Hissam;; Karim R. huff		https://ieeexplore.ieee.org/document/6277071				Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Has open source software a future	https://ieeexplore.ieee.org/document/6277071	MIT Press	nan; Venue; Keywords; References; Pages; Year; Bibtex
187	TrustSE	Adoption of open source software in software-intensive organizations - A systematic literature review	Context: Open source software (OSS) is changing the way organizations develop, acquire, use, and commercialize software. Objective: This paper seeks to identify how organizations adopt OSS, classify the literature according to these ways of adopting OSS, and with a focus on software development evaluate the research on adoption of OSS in organizations. Method: Based on the systematic literature review method we reviewed publications from 24 journals and seven conference and workshop proceedings, published between 1998 and 2008. From a population of 24,289 papers, we identified 112 papers that provide empirical evidence on how organizations actually adopt OSS. Results: We show that adopting OSS involves more than simply using OSS products. We moreover provide a classification framework consisting of six distinctly different ways in which organizations adopt OSS. This framework is used to illustrate some of the opportunities and challenges organizations meet when approaching OSS, to show that OSS can be adopted successfully in different ways, and to organize and review existing research. We find that existing research on OSS adoption does not sufficiently describe the context of the organizations studied, and it fails to benefit fully from related research fields. While existing research covers a large number of topics, it contains very few closely related studies. To aid this situation, we offer directions for future research. Conclusion: The implications of our findings are twofold. On the one hand, practitioners should embrace the many opportunities OSS offers, but consciously evaluate the consequences of adopting it in their own context. They may use our framework and the success stories provided by the literature in their own evaluations. On the other hand, researchers should align their work, and perform more empirical research on topics that are important to organizations. Our framework may be used to position this research and to describe the context of the organization they are studying.	Computer software; Open systems; Research; Societies and institutions; Technical presentations; Classification framework; Empirical evidence; Empirical research; Open Source Software; Organizations; Research fields; Software development; Systematic literature review; Software design; Computer software;  Open systems;  Research;  Societies and institutions;  Technical presentations;  Classification framework;  Empirical evidence;  Empirical research;  Open Source Software;  Organizations;  Research fields;  Software development;  Systematic literature review;  Software design	Hauge, Oyvind; Ayala, Claudia; Conradi, Reidar	Information and Software Technology	https://doi.org/10.1016/j.infsof.2010.05.008		1133 - 1154	"""@ARTICLE{Hauge20101133,
    author = ""Hauge, Oyvind and Ayala, Claudia and Conradi, Reidar"",
    title = ""Adoption of open source software in software-intensive organizations - A systematic literature review"",
    year = ""2010"",
    journal = ""Information and Software Technology"",
    volume = ""52"",
    number = ""11"",
    pages = ""1133 - 1154"",
    doi = ""10.1016/j.infsof.2010.05.008"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956415573\&doi=10.1016\%2fj.infsof.2010.05.008\&partnerID=40\&md5=c162b9ab2e3754d5905cbace7a15b96f"",
    affiliations = ""IDI, NTNU, NO-7491 Trondheim, Sem Saelands vei 7-9, Norway"",
    abstract = ""Context: Open source software (OSS) is changing the way organizations develop, acquire, use, and commercialize software. Objective: This paper seeks to identify how organizations adopt OSS, classify the literature according to these ways of adopting OSS, and with a focus on software development evaluate the research on adoption of OSS in organizations. Method: Based on the systematic literature review method we reviewed publications from 24 journals and seven conference and workshop proceedings, published between 1998 and 2008. From a population of 24,289 papers, we identified 112 papers that provide empirical evidence on how organizations actually adopt OSS. Results: We show that adopting OSS involves more than simply using OSS products. We moreover provide a classification framework consisting of six distinctly different ways in which organizations adopt OSS. This framework is used to illustrate some of the opportunities and challenges organizations meet when approaching OSS, to show that OSS can be adopted successfully in different ways, and to organize and review existing research. We find that existing research on OSS adoption does not sufficiently describe the context of the organizations studied, and it fails to benefit fully from related research fields. While existing research covers a large number of topics, it contains very few closely related studies. To aid this situation, we offer directions for future research. Conclusion: The implications of our findings are twofold. On the one hand, practitioners should embrace the many opportunities OSS offers, but consciously evaluate the consequences of adopting it in their own context. They may use our framework and the success stories provided by the literature in their own evaluations. On the other hand, researchers should align their work, and perform more empirical research on topics that are important to organizations. Our framework may be used to position this research and to describe the context of the organization they are studying. (c) 2010 Elsevier B.V. All rights reserved."",
    author_keywords = ""Open source software; Organizations; Software development; Systematic literature review"",
    keywords = ""Computer software; Open systems; Research; Societies and institutions; Technical presentations; Classification framework; Empirical evidence; Empirical research; Open Source Software; Organizations; Research fields; Software development; Systematic literature review; Software design"",
    correspondence_address = ""O. Hauge; Norwegian University of Science and Technology, Norway; email: oyvind.hauge@idi.ntnu.no"",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 175; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Adoption of open source software in software-intensive organizations–A systematic literature review	https://doi.org/10.1016/j.infsof.2010.05.008		nan; References; Link; Publisher
188	TrustSE	Understanding the motivations, participation, and performance of open source software developers: A longitudinal study of the Apache projects	Understanding what motivates participation is a central theme in the research on open source software (OSS) development. Our study contributes by revealing how the different motivations of OSS developers are interrelated, how these motivations influence participation leading to performance, and how past performance influences subsequent motivations. Drawing on theories of intrinsic and extrinsic motivation, we develop a theoretical model relating the motivations, participation, and performance of OSS developers. We evaluate our model using survey and archival data collected from a longitudinal field study of software developers in the Apache projects. Our results reveal several important findings. First, we find that developers' motivations are not independent but rather are related in complex ways. Being paid to contribute to Apache projects is positively related to developers' status motivations but negatively related to their use-value motivations. Perhaps surprisingly, we find no evidence of diminished intrinsic motivation in the presence of extrinsic motivations; rather, status motivations enhance intrinsic motivations. Second, we find that different motivations have an impact on participation in different ways. Developers' paid participation and status motivations lead to above-average contribution levels, but use-value motivations lead to below-average contribution levels, and intrinsic motivations do not significantly impact average contribution levels. Third, we find that developers' contribution levels positively impact their performance rankings. Finally, our results suggest that past-performance rankings enhance developers' subsequent status motivations.	Data acquisition; Mathematical models; Motivation; Project management; Software engineering; Extrinsic motivation; Intrinsic motivation; Open source software; Software development performance; Behavioral research; Data acquisition;  Mathematical models;  Motivation;  Project management;  Software engineering;  Extrinsic motivation;  Intrinsic motivation;  Open source software;  Software development performance;  Behavioral research	Roberts, Jeffrey A.; Hann, Il-Horn; Slaughter, Sandra A.	Management Science	https://doi.org/10.1287/mnsc.1060.0554		984 - 999	"""@ARTICLE{Roberts2006984,
    author = ""Roberts, Jeffrey A. and Hann, Il-Horn and Slaughter, Sandra A."",
    title = ""Understanding the motivations, participation, and performance of open source software developers: A longitudinal study of the Apache projects"",
    year = ""2006"",
    journal = ""Management Science"",
    volume = ""52"",
    number = ""7"",
    pages = ""984 - 999"",
    doi = ""10.1287/mnsc.1060.0554"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745599608\&doi=10.1287\%2fmnsc.1060.0554\&partnerID=40\&md5=f2ab7a49a9d52f66499c02618c2167f3"",
    affiliations = ""John F. Donahue Graduate School of Business, Duquesne University, Rockwell Hall, Pittsburgh, PA 15282, United States; Marshall School of Business, Bridge Hall 401T, University of Southern California, Los Angeles, CA 90089, United States; David A. Tepper School of Business, Carnegie Mellon University, Pittsburgh, PA 15213, 354 Posner, United States"",
    abstract = ""Understanding what motivates participation is a central theme in the research on open source software (OSS) development. Our study contributes by revealing how the different motivations of OSS developers are interrelated, how these motivations influence participation leading to performance, and how past performance influences subsequent motivations. Drawing on theories of intrinsic and extrinsic motivation, we develop a theoretical model relating the motivations, participation, and performance of OSS developers. We evaluate our model using survey and archival data collected from a longitudinal field study of software developers in the Apache projects. Our results reveal several important findings. First, we find that developers' motivations are not independent but rather are related in complex ways. Being paid to contribute to Apache projects is positively related to developers' status motivations but negatively related to their use-value motivations. Perhaps surprisingly, we find no evidence of diminished intrinsic motivation in the presence of extrinsic motivations; rather, status motivations enhance intrinsic motivations. Second, we find that different motivations have an impact on participation in different ways. Developers' paid participation and status motivations lead to above-average contribution levels, but use-value motivations lead to below-average contribution levels, and intrinsic motivations do not significantly impact average contribution levels. Third, we find that developers' contribution levels positively impact their performance rankings. Finally, our results suggest that past-performance rankings enhance developers' subsequent status motivations. (c) 2006 INFORMS."",
    author_keywords = ""Extrinsic motivation; Intrinsic motivation; Open source software; Software development performance"",
    keywords = ""Data acquisition; Mathematical models; Motivation; Project management; Software engineering; Extrinsic motivation; Intrinsic motivation; Open source software; Software development performance; Behavioral research"",
    correspondence_address = ""J.A. Roberts; John F. Donahue Graduate School of Business, Duquesne University, Rockwell Hall, Pittsburgh, PA 15282, United States; email: jeff@roberts.net"",
    issn = ""15265501"",
    coden = ""MSCIA"",
    language = ""English"",
    abbrev_source_title = ""Manage Sci"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 803""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Understanding the motivations, participation, and performance of open source software developers: A longitudinal study of the Apache projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-33745599608&origin=resultslist&sort=r-f&src=s&sid=b17dc8d30b0994e937702c090b55c958&sot=b&sdt=b&s=TITLE%28understanding+the+motivations+participation+and+performance+of+open+source+software+developers+a+longitudinal+study+of+the+apache+projects%29&sl=145&sessionSearchId=b17dc8d30b0994e937702c090b55c958&relpos=0		nan; References; Publisher
189	TrustSE	The Economic Motivation of Open Source Software: Stakeholder Perspectives	Open source software has enabled large system integrators to increase their profits through cost savings and reach more customers due to flexible pricing. This has upset existing ecosystems and shuffled structural relationships, resulting in the emergence of firms providing consulting services to open source projects. This new breed of service firm in turn lives or dies by its ability to recruit and retain appropriate talent. For such talent, in particular for software developers, life has become more difficult and exciting at once. Developers face new career prospects and paths, since their formal position in an open source project, in addition to their experience and capabilities, determines their value to an employer. Economically rational developers strive to become commiters to high-profile open source projects to further their careers, which in turn generates more recognition, independence, and job security	Open source software; Costs; Environmental economics; Ecosystems; Companies; Licenses; Hardware; Boosting; Business; Web server; Open-source; Open-source Software; Labour Market; Source Code; Software Development; Commercial Sources; Open-source Projects; Marketing; Support Services; Rate Of Return; Business Model; Cost Savings; Economic Interests; Proprietary Software; Dominant Strategy; Current Employment; Software Components; Service Companies; Software Product; Demand Curve; Software Vendors; software development; open source software	Dirk Riehle	Computer	https://doi.org/10.1109/MC.2007.147	"1.R. Goldman and R. Gabriel, Innovation Happens Elsewhere, 2005. Google Scholar; 2.E. Raymond, The Cathedral and the Bazaar, 2001. Google Scholar; 3.E. Haruvy, F. Wu and S. Chakravarty, ""Incentives for Developers Contributions and Product Performance Metric in Open Source Development: An Empirical Exploration"". Google Scholar; 4.J. Lerner and J. Tirole, ""Some Simple Economics of Open Source"", J. Industrial Economics, vol. 50, no. 2, pp. 197-234, 2000. CrossRef  Google Scholar; 5.K.R. Lakhani and R.G. Wolf, ""Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects"", Perspectives on Free and Open Source Software, pp. 3-22, 2005. CrossRef  Google Scholar; 6.I-H. Hann, ""Economic Returns to Open Source Participation: A Panel Data Analysis"". Google Scholar; 7.G. Moore, Inside the Tornado: Marketing Strategies from Silicon Valleys Cutting Edge, 1999. Google Scholar; 8.C. Christensen, The Innovators Dilemma: When New Technologies Cause Great Firms to Fail, 2000. Google Scholar; 9.S. Krishnamurthy, ""An Analysis of Open Source Business Models"", Perspectives on Free and Open Source Software, pp. 279-296, 2005. CrossRef  Google Scholar"	25- 32		Excluded	Excluded				2	IEEE		The economic motivation of open source software: Stakeholder perspectives	https://ieeexplore.ieee.org/document/4160218	IEEE	nan; Year; Bibtex
190	TrustSE	Open source software development-Just another case of collective invention?	"Do open source software (OSS) projects represent a new innovation model? Under what conditions can it be employed in other contexts? ""Collective invention"" regimes usually ended when a dominant design emerged. This is not the case with OSS. Firstly, the OSS community developed the institutional innovation of OSS licenses enabling OSS software to survive as a common property. Secondly, these licenses are mainly enforced by pro-socially motivated contributors. We characterize the conditions under which OSS communities develop and sustain pro-social commitments. We point out the vulnerability of these conditions to developments in patent legislation."	Laws and legislation; Open systems; Patents and inventions; Project management; Collective invention; Copyleft; Intrinsic motivation; New innovaton models; Open source software (OSS); Software engineering; Laws and legislation;  Open systems;  Patents and inventions;  Project management;  Collective invention;  Copyleft;  Intrinsic motivation;  New innovaton models;  Open source software (OSS);  Software engineering	Osterloh, Margit; Rota, Sandra	Research Policy	https://doi.org/10.1016/j.respol.2006.10.004		157 - 171	"""@ARTICLE{Osterloh2007157,
    author = ""Osterloh, Margit and Rota, Sandra"",
    title = ""Open source software development-Just another case of collective invention?"",
    year = ""2007"",
    journal = ""Research Policy"",
    volume = ""36"",
    number = ""2"",
    pages = ""157 - 171"",
    doi = ""10.1016/j.respol.2006.10.004"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33846883291\&doi=10.1016\%2fj.respol.2006.10.004\&partnerID=40\&md5=3b3f4cff042a60b268a30310384932dd"",
    affiliations = ""University of Zurich, Institute for Organization and Administrative Science, CH-8032 Zurich, Plattenstrasse 14, Switzerland"",
    abstract = {Do open source software (OSS) projects represent a new innovation model? Under what conditions can it be employed in other contexts? ""Collective invention"" regimes usually ended when a dominant design emerged. This is not the case with OSS. Firstly, the OSS community developed the institutional innovation of OSS licenses enabling OSS software to survive as a common property. Secondly, these licenses are mainly enforced by pro-socially motivated contributors. We characterize the conditions under which OSS communities develop and sustain pro-social commitments. We point out the vulnerability of these conditions to developments in patent legislation. (c) 2007.},
    author_keywords = ""Collective invention; Copyleft; Intrinsic motivation; New innovaton models; Open source software"",
    keywords = ""Laws and legislation; Open systems; Patents and inventions; Project management; Collective invention; Copyleft; Intrinsic motivation; New innovaton models; Open source software (OSS); Software engineering"",
    correspondence_address = ""M. Osterloh; University of Zurich, Institute for Organization and Administrative Science, CH-8032 Zurich, Plattenstrasse 14, Switzerland; email: osterloh@iou.unizh.ch"",
    issn = ""00487333"",
    coden = ""REPYB"",
    language = ""English"",
    abbrev_source_title = ""Res Policy"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 172; All Open Access, Green Open Access""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Scopus Signed In		Open source software development—Just another case of collective invention?	https://doi.org/10.1016/j.respol.2006.10.004		nan; References; Link; Publisher
191	TrustSE	Open source software: Private provision of a public good	A simple model of open source software (as typified by the GNU-Linux operating system) is presented. Individual user-programmers decide whether to invest their own effort to develop a software enhancement that will become a public good if so developed. The effect of changing the population size of user-programmers is considered; finite and asymptotic results are given. Welfare results are presented. It is shown that whether development will increase when applications have a modular structure depends on whether the developer base exceeds a critical size. Potential explanations of several stylized facts are given, including why certain useful programs don'T get written.		Johnson, Justin Pappas	Journal of Economics and Management Strategy	https://doi.org/10.1162/105864002320757280	Ash, R.B.(1972)Real Analysis and Probability.Cited 768 times.New York: Academic Press; Bergstrom, T., Blume, L., Varian, H.; Bliss, C., Nalebuff, B.; Brooks, F.P.(1995)The Mythical Man-Month: Essays on Software Engineering.Cited 3494 times.Reading, MA: Addison-Wesley; Chamberlin, J.; Dixit, A., Shapiro, C.Entry dynamics with mixed strategies(1986)The Economics of Strategic Planning: Essays in Honor of Joel Dean.Cited 68 times.L. Thomas, III, ed., Lexington, MA: Lexington Books; Lerner, J., Tirole, J.The simple economics of open source(2000)NBER Working Paper, 7600.Cited 31 times.; Miller, B.P., Koski, D., Lee, C.P., Maganty, V., Murthy, R., Natarajan, A., Steidl, J.Fuzz revisited: A re-examination of the reliability of Unix utilities and services(1998)University of Wisconsin Computer Science Working Paper; Palfrey, T.R., Rosenthal, H.; Raymond, E.S.(1999)The Cathedral and the Bazaar.Cited 19 times.O'Reilly Books; Stallman, R.M.(1996)GNU Emacs Manual, Version 19.33.Cited 89 times.Boston: Free Software Foundation	637 - 662	"""@ARTICLE{Johnson2002637,
    author = ""Johnson, Justin Pappas"",
    title = ""Open source software: Private provision of a public good"",
    year = ""2002"",
    journal = ""Journal of Economics and Management Strategy"",
    volume = ""11"",
    number = ""4"",
    pages = ""637 - 662"",
    doi = ""10.1162/105864002320757280"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036026761\&doi=10.1162\%2f105864002320757280\&partnerID=40\&md5=1f020e7c53eaec36946039bf68a140df"",
    affiliations = ""Johnson Graduate Sch. of Management, Cornell University, Ithaca, NY 14853, United States"",
    abstract = ""A simple model of open source software (as typified by the GNU-Linux operating system) is presented. Individual user-programmers decide whether to invest their own effort to develop a software enhancement that will become a public good if so developed. The effect of changing the population size of user-programmers is considered; finite and asymptotic results are given. Welfare results are presented. It is shown that whether development will increase when applications have a modular structure depends on whether the developer base exceeds a critical size. Potential explanations of several stylized facts are given, including why certain useful programs don'T get written."",
    issn = ""10586407"",
    language = ""English"",
    abbrev_source_title = ""J. Econ. Manage. Strateg."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 147""
}
"""	Excluded	Excluded				2	Scopus Signed In		Open source software: Private provision of a public good	https://www.scopus.com/record/display.uri?eid=2-s2.0-0036026761&origin=resultslist&sort=r-f&src=s&sid=5c79c01c75e9494f95e3164efeb5754a&sot=b&sdt=b&s=TITLE%28open+source+software+private+provision+of+a+public+good%29&sl=62&sessionSearchId=5c79c01c75e9494f95e3164efeb5754a&relpos=0		nan; Keywords; Publisher
192	TrustSE	Process Improvement and Risk Management in Off-The-Shelf Component-Based Development	Reusing software components from third-party vendors is one key technology to gain shorter time-to-market and better quality of the software system. These components, also known as OTS (Off-the-Shelf) components, come in two types: COTS (Commercial-Off-The-Shelf) and OSS (Open-Source-Software) components. To use OTS components successfully, it is necessary to know how the development processes and methods have to be adapted. Most current studies are either theoretical proposals without empirical assessment or case studies in similar project contexts. It is therefore necessary to conduct more empirical studies on how process improvement and risk management were performed and what were the results in various project contexts. The overall research design of the work was a sequential, mixed method design that consists of several empirical studies. The thesis contains five novel main contributions (C1 to C5) and one minor contribution (C6): C1. Better understanding on reusing in-house built components. A quantitative preliminary study shows that reusing in-house built components has the same challenges as OTS components related to requirements (re)negotiation, component documentation, and the specification of quality attributes. The informal communication between developers supplements component documentation. The component repository is not a key factor to successful component reuse. C2: Summarizing the state-of-the-practice of development and selection processes in OTS component-based projects. A qualitative pre-study, a quantitative main study, and a follow-up study with industrial seminar show that OTS component-based development processes are typically variations of well-known process models, mixed with OTS specific activities. Concerning the OTS component selection, we find that mainly familiarity-based and Internet searches with hands-on-trials processes are applied. We summarize the state-of-the-practice of OTS processes into seven scenarios and propose how to customize the processes in OTS component-based projects. C3: Empirical verification of the risk management proposals in OTS component- based development. The results of the main study reveal that allocating more effort into learning OTS components, performing the integration testing early, evaluating the quality of OTS components thoroughly, and following the update of OTS components have helped to mitigate corresponding risks. However, some problems, such as wrong estimation of the integration efforts and inefficient debugging, still happen frequently in practice and need further investigations. C4: Better understanding of decision-making in OTS component-based development. By comparing projects using COTS components with those using OSS components, we reveal who, why, and the results of using different OTS components. C5: Empirical validation of six newly published theses from the literature, which are related to process and risk management in OTS component-based development. The results of the main study support four theses and contradict the two others. C6. Improved understanding about performing an international survey in the ICT industry (minor contribution). The main study is probably the first software engineering survey using a representative subset (sample) of industrial companies. Lessons learned from performing such as study reveal that, at best, we can achieve a stratified-random sample of ICT companies, followed by a convenient sample of relevant projects.		Jingyue Li		https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=0cf2e8e1862aa0310aaa9e2ce688c50c046337db			"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Process improvement and risk management in Off-the-Shelf Component-based development	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=0cf2e8e1862aa0310aaa9e2ce688c50c046337db	Norwegian University of Science and Technology	
193	TrustSE	Code reuse in open source software development: Quantitative evidence, drivers, and impediments	"The focus of existing open source software (OSS) research has been on how and why individuals and firms add to the commons of public OSS code-that is, on the ""giving"" side of this open innovation process. In contrast, research on the corresponding ""receiving"" side of the innovation process is scarce. We address this gap, studying how existing OSS code is reused and serves as an input to further OSS development. Our findings are based on a survey with 686 responses from OSS developers. As the most interesting results, our multivariate analyses of developers' code reuse behavior point out that developers with larger personal networks within the OSS community and those who have experience in a greater number of OSS projects reuse more, presumably because both network size and a broad project experience facilitate local search for reusable artifacts. Moreover, we find that a development paradigm that calls for releasing an initial functioning version of the software early-as the ""credible promise"" in OSS-leads to increased reuse. Finally, we identify developers' interest in tackling difficult technical challenges as detrimental to efficient reuse-based innovation. Beyond OSS, we discuss the relevance of our findings for companies developing software and for the receiving side of open innovation processes, in general."	Codes (symbols); Computer software reusability; Multivariant analysis; Open systems; Software design; Software engineering; Code reuse; Innovation process; Multi variate analysis; Network size; Open innovation; Personal networks; Project experiences; Technical challenges; Open source software; Codes (symbols);  Computer software reusability;  Multivariant analysis;  Open systems;  Software design;  Software engineering;  Code reuse;  Innovation process;  Multi variate analysis;  Network size;  Open innovation;  Personal networks;  Project experiences;  Technical challenges;  Open source software	Sojer, Manuel; Henkel, Joachim	Journal of the Association for Information Systems	https://doi.org/10.17705/1jais.00248		868 - 901	"""@ARTICLE{Sojer2010868,
    author = ""Sojer, Manuel and Henkel, Joachim"",
    title = ""Code reuse in open source software development: Quantitative evidence, drivers, and impediments"",
    year = ""2010"",
    journal = ""Journal of the Association for Information Systems"",
    volume = ""11"",
    number = ""12"",
    pages = ""868 - 901"",
    doi = ""10.17705/1jais.00248"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952925066\&doi=10.17705\%2f1jais.00248\&partnerID=40\&md5=ee9eb75bc00a71703e270095a0efa92c"",
    affiliations = ""Technische Universitat Munchen, Germany; Bain and Company, United States"",
    abstract = {The focus of existing open source software (OSS) research has been on how and why individuals and firms add to the commons of public OSS code-that is, on the ""giving"" side of this open innovation process. In contrast, research on the corresponding ""receiving"" side of the innovation process is scarce. We address this gap, studying how existing OSS code is reused and serves as an input to further OSS development. Our findings are based on a survey with 686 responses from OSS developers. As the most interesting results, our multivariate analyses of developers' code reuse behavior point out that developers with larger personal networks within the OSS community and those who have experience in a greater number of OSS projects reuse more, presumably because both network size and a broad project experience facilitate local search for reusable artifacts. Moreover, we find that a development paradigm that calls for releasing an initial functioning version of the software early-as the ""credible promise"" in OSS-leads to increased reuse. Finally, we identify developers' interest in tackling difficult technical challenges as detrimental to efficient reuse-based innovation. Beyond OSS, we discuss the relevance of our findings for companies developing software and for the receiving side of open innovation processes, in general.},
    author_keywords = ""Code reuse; Innovation; Open source software; Software development; Software reuse"",
    keywords = ""Codes (symbols); Computer software reusability; Multivariant analysis; Open systems; Software design; Software engineering; Code reuse; Innovation process; Multi variate analysis; Network size; Open innovation; Personal networks; Project experiences; Technical challenges; Open source software"",
    correspondence_address = ""M. Sojer; Technische Universitat Munchen, Germany; email: sojer@wi.tum.de"",
    publisher = ""Association for Information Systems"",
    issn = ""15583457"",
    language = ""English"",
    abbrev_source_title = ""J. Assoc. Inf. Syst."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 86; All Open Access, Bronze Open Access""
}
"""	Included	Included				2	Scopus Signed In		Code reuse in open source software development: Quantitative evidence, drivers, and impediments	https://www.scopus.com/record/display.uri?eid=2-s2.0-79952925066&origin=resultslist&sort=r-f&src=s&sid=d0b8056ea05bda332d9907427d2b35e4&sot=b&sdt=b&s=TITLE%28code+reuse+in+open+source+software+development+quantitative+evidence+drivers+and+impediments%29&sl=99&sessionSearchId=d0b8056ea05bda332d9907427d2b35e4&relpos=0	Association for Information Systems	nan; References
194	TrustSE	Opportunities and risks of software-as-a-service: Findings from a survey of IT executives	IT providers have heralded software-as-a-service (SaaS) as an excellent complement to on-premises software addressing the shortcomings of previous on-demand software solutions such as application service provision (ASP). However, although some practitioners and academics emphasize the opportunities that SaaS offers companies, others already predict its decline due to the considerable risk involved in its deployment. Ours is the first study to analyze the opportunities and risks associated with adopting SaaS as perceived by IT executives at adopter and non-adopter firms. We first developed a research model grounded in an opportunity-risk framework, which is theoretically embedded in the theory of reasoned action. Subsequently, we analyzed the data collected through a survey of 349 IT executives at German companies. Our findings suggest that in respect to both SaaS adopters and non-adopters, security threats are the dominant factor influencing IT executives' overall risk perceptions. On the other hand, cost advantages are the strongest driver affecting IT executives' perceptions of SaaS opportunities. Furthermore, we find significant differences between adopters' and non-adopters' perceptions of specific SaaS risks and opportunities, such as performance and economic risks as well as quality improvements, and access to specialized resources. Our study provides relevant findings to improve companies' assessment of SaaS offerings. It also offers SaaS providers insights into the factors that should be prioritized or avoided when offering SaaS services to companies at different stages of their technology adoption lifecycle.	Cloud computing; Outsourcing; Risk perception; Surveys; IT outsourcing; SaaS opportunities; SaaS risks; Software-as-a-Service; Technology adoption; Theory of reasoned action; Information technology; Cloud computing;  Outsourcing;  Risk perception;  Surveys;  IT outsourcing;  SaaS opportunities;  SaaS risks;  Software-as-a-Service;  Technology adoption;  Theory of reasoned action;  Information technology	Benlian, Alexander; Hess, Thomas	Decision Support Systems	https://doi.org/10.1016/j.dss.2011.07.007		232 - 246	"""@ARTICLE{Benlian2011232,
    author = ""Benlian, Alexander and Hess, Thomas"",
    title = ""Opportunities and risks of software-as-a-service: Findings from a survey of IT executives"",
    year = ""2011"",
    journal = ""Decision Support Systems"",
    volume = ""52"",
    number = ""1"",
    pages = ""232 - 246"",
    doi = ""10.1016/j.dss.2011.07.007"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-80455174683\&doi=10.1016\%2fj.dss.2011.07.007\&partnerID=40\&md5=7eb7af8f2a31b3ae240605a1aacd7d8e"",
    affiliations = ""Institute for Information Systems and New Media, University of Munich, 80539 Munich, Ludwigstr. 28, Germany"",
    abstract = ""IT providers have heralded software-as-a-service (SaaS) as an excellent complement to on-premises software addressing the shortcomings of previous on-demand software solutions such as application service provision (ASP). However, although some practitioners and academics emphasize the opportunities that SaaS offers companies, others already predict its decline due to the considerable risk involved in its deployment. Ours is the first study to analyze the opportunities and risks associated with adopting SaaS as perceived by IT executives at adopter and non-adopter firms. We first developed a research model grounded in an opportunity-risk framework, which is theoretically embedded in the theory of reasoned action. Subsequently, we analyzed the data collected through a survey of 349 IT executives at German companies. Our findings suggest that in respect to both SaaS adopters and non-adopters, security threats are the dominant factor influencing IT executives' overall risk perceptions. On the other hand, cost advantages are the strongest driver affecting IT executives' perceptions of SaaS opportunities. Furthermore, we find significant differences between adopters' and non-adopters' perceptions of specific SaaS risks and opportunities, such as performance and economic risks as well as quality improvements, and access to specialized resources. Our study provides relevant findings to improve companies' assessment of SaaS offerings. It also offers SaaS providers insights into the factors that should be prioritized or avoided when offering SaaS services to companies at different stages of their technology adoption lifecycle. (c) 2011 Elsevier B.V. All rights reserved."",
    author_keywords = ""Cloud computing; IT outsourcing; SaaS opportunities; SaaS risks; Software-as-a-service (SaaS); Technology adoption; Theory of reasoned action"",
    keywords = ""Cloud computing; Outsourcing; Risk perception; Surveys; IT outsourcing; SaaS opportunities; SaaS risks; Software-as-a-Service; Technology adoption; Theory of reasoned action; Information technology"",
    correspondence_address = ""A. Benlian; Institute for Information Systems and New Media, University of Munich, 80539 Munich, Ludwigstr. 28, Germany; email: benlian@bwl.lmu.de"",
    issn = ""01679236"",
    coden = ""DSSYD"",
    language = ""English"",
    abbrev_source_title = ""Decis Support Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 396""
}
"""	Excluded	Excluded				2	Scopus Signed In		Opportunities and risks of software-as-a-service: Findings from a survey of IT executives	https://www.scopus.com/record/display.uri?eid=2-s2.0-80455174683&origin=resultslist&sort=r-f&src=s&sid=7f4a9042480e0e280bc50b73ea961d73&sot=b&sdt=b&s=TITLE%28opportunities+and+risks+of+software+as+a+service+findings+from+a+survey+of+it+executives%29&sl=95&sessionSearchId=7f4a9042480e0e280bc50b73ea961d73&relpos=0		nan; References; Publisher
195	TrustSE	Operational profiles in software-reliability engineering	"A systematic approach to organizing the process of determining the operational profile for guiding software development is presented. The operational profile is a quantitative characterization of how a system will be used that shows how to increase productivity and reliability and speed development by allocating development resources to function on the basis of use. Using an operational profile to guide testing ensures that if testing is terminated and the software is shipped because of schedule constraints, the most-used operations will have received the most testing and the reliability level will be the maximum that is practically achievable for the given test time. For guiding regression testing, it efficiently allocates test cases in accordance with use, so the faults most likely to be found, of those introduced by changes, are the ones that have the most effect on reliability.<
>"	Costs; Reliability engineering; Marketing and sales; Automatic testing; Productivity; Resource management; Capacitive sensors; Switching systems; Customer satisfaction; Operating systems	J.D. Musa	IEEE Software	https://doi.org/10.1109/52.199724	"1.J. D. Musa, A. lannino and K. Okumoto, Software Reliability: Measurement Prediction Application, New York:McGraw-Hill, 1987. Google Scholar; 2.S. R. Abramson, ""Customer Satisfaction-Based Product Development"", Proc. Int'lSwitching Symp., vol. 2, pp. 65-69, 1992. Google Scholar; 3.J. D. Musa, ""Reduced Operation Software"", ACM Software Eng. Notes, vol. 16, no. 3, pp. 78. CrossRef  Google Scholar; 4.D. Hamlet and R. Taylor, ""Partition Testing Does Not Inspire Confidence"", IEEE Trans. Soft. Eng., pp. 1402-1411, Dec. 1990. View Article  Google Scholar; 5.W.W. Everett and J.D. Musa, ""A Software-Reliability Engineering Practice"", Computer, pp. 2, Mar. 1993. View Article  Google Scholar"	14- 32		Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Operational profiles in software-reliability engineering	https://ieeexplore.ieee.org/document/199724	IEEE	nan; Year; Bibtex
196	TrustSE	The Ecology of Open-Source Software Development	Open Source Software (oss) is an innovative method of developing software applications that has been very successful over the past eight to ten years. A number of theories have emerged to explain its success, mainly from economics and law. We analyze a very large sample of oss projects and find striking patterns in the overall structure of the development community. The distribution of projects on a range of activity measures is spectacularly skewed, with only a relatively tiny number of projects showing evidence of the strong collaborative activ- ity which is supposed to characterize oss. Our findings are consistent with prior, smaller-scale empirical research. We argue that these find- ings pose problems for the dominant accounts of oss. We suggest that the gulf between active and inactive projects may be explained by social-structural features of the community which have received little attention in the existing literature. We suggest some hypotheses that might better predict the observed ecology of projects.		Kieran Healy; Alan Schussman		https://flossmole.org/sites/flosshub.org/files/healyschussman.pdf		24	"""nan"""	Excluded	Excluded				2	Google Scholar		The ecology of open-source software development	https://flossmole.org/sites/flosshub.org/files/healyschussman.pdf	University of Arizona	
197	TrustSE	Usability and open-source software development	Open-source is becoming an increasingly popular software development method. This paper reports a usability study of the open-source Greenstone Digital Library collection-building software. The problems highlighted by the study are analysed to identify their likely source within the social context of Greenstone's development environment. We discuss how characteristics of open-source software development influence the usability of resulting software products.		Nichols, David M.; Thomson, Kirsten; Yeates, Stuart A.	CHINZ '01: Proceedings of the Symposium on Computer Human Interaction	https://doi.org/10.1145/2331812.2331822		49-54	"""@inproceedings{10.1145/2331812.2331822,
    author = ""Nichols, David M. and Thomson, Kirsten and Yeates, Stuart A."",
    title = ""Usability and open-source software development"",
    year = ""2001"",
    isbn = ""0473075598"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2331812.2331822"",
    doi = ""10.1145/2331812.2331822"",
    abstract = ""Open-source is becoming an increasingly popular software development method. This paper reports a usability study of the open-source Greenstone Digital Library collection-building software. The problems highlighted by the study are analysed to identify their likely source within the social context of Greenstone's development environment. We discuss how characteristics of open-source software development influence the usability of resulting software products."",
    booktitle = ""Proceedings of the Symposium on Computer Human Interaction"",
    pages = ""49-54"",
    numpages = ""6"",
    location = ""Palmerston North, New Zealand"",
    series = ""CHINZ '01""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Usability and open source software.	https://doi.org/10.1145/2331812.2331822	Association for Computing Machinery	nan; Keywords; References; Link
198	TrustSE	Effects of empowerment on performance in open-source software projects	An enduring issue that intrigues researchers and practitioners in open-source software (OSS) development is what motivates individuals to participate and make contributions, given the lack of numerating mechanisms. Amidst several end-state-focused motives advocated by prior studies (such as improved programming skills and future career growth), we add that an important contributing factor is empowerment , the positive feelings derived from task assessments in OSS projects. Through survey data collected from 233 OSS participants, we assess how components of psychological empowerment (i.e., autonomy, competence, meaningfulness, and impact) derived from OSS tasks may affect the work output of participants. In particular, we demonstrate that competence and impact have a positive influence on OSS participants performance, while autonomy and meaningfulness have a slightly negative influence on performance. In addition, empowerments effects on performance can be mediated by effort expended. Theoretical contributions and managerial implications of this study are discussed.	Surveys; Contributing factor; Empowerment; Managerial implications; Negative influence; open-source software (OSS); Open-source softwares; Positive feelings; Programming skills; software-development participation; Survey data; Work output; Software design; Surveys;  Contributing factor;  Empowerment;  Managerial implications;  Negative influence;  open-source software (OSS);  Open-source softwares;  Positive feelings;  Programming skills;  software-development participation;  Survey data;  Work output;  Software design	Ke, Weiling; Zhang, Ping	IEEE Transactions on Engineering Management	https://doi.org/10.1109/TEM.2010.2096510	"1.J. S. Armstrong and T. S. Overton, ""Estimating nonresponse bias in mail surveys"", J. Marketing Res., vol. 14, no. 3, pp. 396-402, 1977. CrossRef  Google Scholar; 2.B. E. Ashforth and F. Mael, ""Social identity theory and the organization"", Acad. Manage. Rev., vol. 14, no. 1, pp. 20-39, 1989. CrossRef  Google Scholar; 3.R. P. Bagozzi and U. M. Dholakia, ""Open source software user communities: A study of participation in Linux user groups"", Manage. Sci., vol. 52, no. 7, pp. 1099-1115, 2006. CrossRef  Google Scholar; 4.A. Bandura, Social Foundations of Thought and Action: A Social-Cognitive View, NJ, Englewood Cliffs:Prentice-Hall, 1986. Google Scholar; 5.D. Barclay, C. Higgins and R. Thompson, ""The partial least squares (PLS) approach to causal modeling personal computer adoption and use as an illustration"", Technol. Stud., vol. 2, no. 2, pp. 285-309, 1995. Google Scholar; 6.R. M. Baron and D. A. Kenny, ""The moderatormediator distinction in social psychology research: Conceptual strategic and statistical considerations"", J. Pers. Soc. Psychol., vol. 51, pp. 1173-1183, 1986. CrossRef  Google Scholar; 7.S. P. Brown and T. W. Leigh, ""A new look at psychological climate and its relationship to job involvement effort and performance"", J. Appl. Psychol., vol. 81, no. 4, pp. 358-368, 1996. CrossRef  Google Scholar; 8.S. P. Brown and R. A. Peterson, ""The effect of effort on sales performance and job satisfaction"", J. Marketing, vol. 58, no. 2, pp. 70-80, 1994. CrossRef  Google Scholar; 9.C. L. Carr, ""The FAIRSERV model: Consumer reactions to services based on a multidimensional evaluation of service fairness"", Decision Sci., vol. 38, no. 1, pp. 107-130, 2007. CrossRef  Google Scholar; 10.C. Chebat and P. Kollias, ""The impact of empowerment on customer contact employees roles in service organizations"", J. Serv. Res., vol. 3, no. 1, pp. 66-81, 2000. CrossRef  Google Scholar; 11.W. W. Chin, ""The partial least squares approach to structural equation modeling"" in Modern Methods for Business Research, NJ:Lawrence Erlbaum Associates, pp. 295-336, 1998. Google Scholar; 12.W. W. Chin, B. L. Marcolin and P. R. Newsted, ""A partial least squares latent variable modeling approach for measuring interaction effects: Results from a Monte Carlo simulation study and voice mail emotion/adoption study"", presented at 17th Int. Conf. Inf. Syst., 1996. Google Scholar; 13.M. Christen, G. Iyer and D. Soberman, ""Job satisfaction job performance and effort: A reexamination using agency theory"", J. Marketing, vol. 70, no. 1, pp. 137-150, 2006. CrossRef  Google Scholar; 14.J. A. Conger and R. N. Kanungo, ""The empowerment process: Integrating theory and practice"", Acad. Manage. Rev., vol. 13, pp. 471-482, 1988. CrossRef  Google Scholar; 15.N. J. Cooke, ""Varieties of knowledge elicitation techniques"", J. Human-Comput. Stud., vol. 41, pp. 801-849, 1994. CrossRef  Google Scholar; 16.J. Crant, ""Proactive behavior in organizations"", J. Manage., vol. 26, no. 3, pp. 435-462, 2000. CrossRef  Google Scholar; 17.E. L. Deci and R. M. Ryan, Intrinsic Motivation and Self-determination in Human Behavior, New York:Plenum, 1985. CrossRef  Google Scholar; 18.E. L. Deci and R. M. Ryan, ""The what and why of goal pursuits: Human needs and the self-determination of behavior"", Psychol. Inquiry, vol. 11, no. 4, pp. 227-268, 2000. CrossRef  Google Scholar; 19.A. C. Edmondson, ""Psychological safety and learning behavior in work teams"", Administ. Sci. Q., vol. 42, no. 2, pp. 350-383, 1999. CrossRef  Google Scholar; 20.B. Fitzgerald, ""The transformation of open source software"", MIS Q., vol. 30, no. 3, pp. 587-598, 2006. CrossRef  Google Scholar; 21.C. Fornell and F. L. Bookstein, ""Two structural equation models: LISREL and PLS applied to customer exit-voice theory"", J. Marketing Res., vol. 19, no. 11, pp. 440-452, 1982. CrossRef  Google Scholar; 22.C. Fornell and D. F. Larcker, ""Structural equation models with unobservable variables and measurement errors"", J. Marketing Res., vol. 18, no. 2, pp. 39-50, 1981. CrossRef  Google Scholar; 23.N. Franke and E. von Hippel, ""Satisfying heterogeneous user needs via innovation toolkits: the case of Apache security software"", Res. Policy, vol. 32, no. 7, pp. 1199-1215, 2003. CrossRef  Google Scholar; 24.M. Gagne, C. B. Senecal and R. Koestner, ""Proximal job characteristics feelings of empowerment and intrinsic motivation: A multidimensional model"", J. Appl. Soc. Psychol., vol. 27, no. 14, pp. 1222-1240, 1997. CrossRef  Google Scholar; 25.D. Gefen and D. Straub, ""A practical guide to factorial validity using PLS-Graph: Tutorial and annotated example"", Commun. Assoc. Inf. Syst., vol. 16, pp. 91-109, 2005. Google Scholar; 26.R. Grewal, J. A. Cote and H. Baumgartner, ""Multicollinearity and measurement error in structural equation models: Implications for theory testing"", Marketing Sci., vol. 23, no. 1, pp. 519-529, 2004. CrossRef  Google Scholar; 27.J. R. Hackman and G. R. Oldham, Work Redesign, MA, Reading:Addison-Wesley, 1980. Google Scholar; 28.J. F. Hair, R. E. Anderson, R. L. Tatham and W. C. Black, Multivariate Data Analysis, NJ, Englewood Cliffs:Prentice Hall, 1998. Google Scholar; 29.G. Hertel, ""Motivating job design as a factor in open source governance"", J. Manage. Governance, vol. 11, no. 2, pp. 129-137, 2007. CrossRef  Google Scholar; 30.G. Hertel, S. Niedner and S. Herrmann, ""Motivation of software developers in open source projects: An internet-based survey of contributors to the Linux kernel"", Res. Policy, vol. 32, no. 7, pp. 1159-1177, 2003. CrossRef  Google Scholar"	334 - 346	"""@ARTICLE{Ke2011334,
    author = ""Ke, Weiling and Zhang, Ping"",
    title = ""Effects of empowerment on performance in open-source software projects"",
    year = ""2011"",
    journal = ""IEEE Transactions on Engineering Management"",
    volume = ""58"",
    number = ""2"",
    pages = ""334 - 346"",
    doi = ""10.1109/TEM.2010.2096510"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-79955566937\&doi=10.1109\%2fTEM.2010.2096510\&partnerID=40\&md5=869b0c017e73481824d868a2bd6e18e4"",
    affiliations = ""School of Business, Clarkson University, Potsdam, NY 13699, United States; School of Information Studies, Syracuse University, Syracuse, NY 13244, United States"",
    abstract = ""An enduring issue that intrigues researchers and practitioners in open-source software (OSS) development is what motivates individuals to participate and make contributions, given the lack of numerating mechanisms. Amidst several end-state-focused motives advocated by prior studies (such as improved programming skills and future career growth), we add that an important contributing factor is empowerment , the positive feelings derived from task assessments in OSS projects. Through survey data collected from 233 OSS participants, we assess how components of psychological empowerment (i.e., autonomy, competence, meaningfulness, and impact) derived from OSS tasks may affect the work output of participants. In particular, we demonstrate that competence and impact have a positive influence on OSS participants performance, while autonomy and meaningfulness have a slightly negative influence on performance. In addition, empowerments effects on performance can be mediated by effort expended. Theoretical contributions and managerial implications of this study are discussed. (c) 2006 IEEE."",
    author_keywords = ""Empowerment; open-source software (OSS); software-development participation"",
    keywords = ""Surveys; Contributing factor; Empowerment; Managerial implications; Negative influence; open-source software (OSS); Open-source softwares; Positive feelings; Programming skills; software-development participation; Survey data; Work output; Software design"",
    correspondence_address = ""W. Ke; School of Business, Clarkson University, Potsdam, NY 13699, United States; email: wke@clarkson.edu"",
    issn = ""00189391"",
    coden = ""IEEMA"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans Eng Manage"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 31""
}
"""	Excluded	Excluded				2	Scopus Signed In		Effects of empowerment on performance in open-source software projects	https://ieeexplore.ieee.org/document/5680956	IEEE	
199	TrustSE	A Brief Overview of Trust and Reputation over Various Domains	The research, development and commercial efforts in trust and reputation related methods and technologies have resulted in a plethora of proposals and solutions during the past few decades--and their number is still growing. In parallel, and rather independently, trust and reputation research has also been proceeding in non-technical domains like philosophy and the social sciences. Therefore it comes as no surprise that trust and reputation have different meanings across the various domains. Consequently, being basically familiar with these variations is important if computational trust and reputation management solutions are to fulfil their mission.	Trusted Computing; Research Reputation; Social Science Domain; Trust Game; Combined Speech	Denis Trcek	Trust and Reputation Management Systems	https://doi.org/10.1007/978-3-319-62374-0_2		5-19		Excluded	Excluded			Studies that were books or gray literature	2	Springer Link		A brief overview of trust and reputation over various domains	https://link.springer.com/chapter/10.1007/978-3-319-62374-0_2	Springer, Cham	nan; References; Year; Bibtex
200	TrustSE	Legal implications of open-source software	"The proliferation of computer technology and the advent of the Internet have created many new relationships and problems that raise questions about traditional legal and economic principles. The development of ""open-source"" or ""free"" software is an example of this phenomenon. Unlike the traditional producers of computer software - Microsoft, for example - open-source software is often developed by computer programmers from all over the world, each submitting contributions to the code, and distributed without charge or for a minimal fee. Open-source software is generally passed from programmer to programmer, with the understanding that improvements may be made, but that the improvements must be distributed freely, without any attempt to ""privatize"" the program. The existence of such relationships among programmers raise several interesting questions. First, how do large-scale open-source projects come into being? One open-source project, the GNU/Linux operating system, even threatens the market share of Microsoft's operating systems - a feat that calls traditional economic theories on the operation of the firm into question. A more important question is whether the open-source model is sustainable and generalizable. Ultimately, one wonders what role the law will play in the open-source community - a community that seems to operate in the absence of traditional legal principles. In this article, which was introduced at the University of Illinois College of Law Symposium on Intellectual Property Challenges in the Next Century, Professor McGowan addresses these questions. Using the GNU/Linux operating system as a case study, he probes the organization of the open-source community and the philosophies of its leading members in order to understand how traditional firm models, intellectual property, and contract law might apply. Professor McGowan concludes by reviewing recent attempts by courts to impose traditional principles in computer software transaction disputes. Ultimately, it appears that the open-source community cannot be neatly categorized. Although many traditional firm theories - such as the formation of a hierarchy - and legal principles - such as copyright - do apply to the open-source model, these theories and principles are employed in creative ways not previously envisioned."		McGowan, David	University of Illinois Law Review	https://www.scopus.com/record/display.uri?eid=2-s2.0-0347710184&origin=resultslist&sort=r-f&src=s&sid=65ef4afb7566fd40208dc7dc8b0c17a2&sot=b&sdt=b&s=TITLE%28legal+implications+of+open+source+software%29&sl=49&sessionSearchId=65ef4afb7566fd40208dc7dc8b0c17a2&relpos=0		241 - 242	"""@ARTICLE{McGowan2001241,
    author = ""McGowan, David"",
    title = ""Legal implications of open-source software"",
    year = ""2001"",
    journal = ""University of Illinois Law Review"",
    number = ""1"",
    pages = ""241 - 242"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0347710184\&partnerID=40\&md5=b435c4ec914644924cfd5866e2888dde"",
    abstract = {The proliferation of computer technology and the advent of the Internet have created many new relationships and problems that raise questions about traditional legal and economic principles. The development of ""open-source"" or ""free"" software is an example of this phenomenon. Unlike the traditional producers of computer software - Microsoft, for example - open-source software is often developed by computer programmers from all over the world, each submitting contributions to the code, and distributed without charge or for a minimal fee. Open-source software is generally passed from programmer to programmer, with the understanding that improvements may be made, but that the improvements must be distributed freely, without any attempt to ""privatize"" the program. The existence of such relationships among programmers raise several interesting questions. First, how do large-scale open-source projects come into being? One open-source project, the GNU/Linux operating system, even threatens the market share of Microsoft's operating systems - a feat that calls traditional economic theories on the operation of the firm into question. A more important question is whether the open-source model is sustainable and generalizable. Ultimately, one wonders what role the law will play in the open-source community - a community that seems to operate in the absence of traditional legal principles. In this article, which was introduced at the University of Illinois College of Law Symposium on Intellectual Property Challenges in the Next Century, Professor McGowan addresses these questions. Using the GNU/Linux operating system as a case study, he probes the organization of the open-source community and the philosophies of its leading members in order to understand how traditional firm models, intellectual property, and contract law might apply. Professor McGowan concludes by reviewing recent attempts by courts to impose traditional principles in computer software transaction disputes. Ultimately, it appears that the open-source community cannot be neatly categorized. Although many traditional firm theories - such as the formation of a hierarchy - and legal principles - such as copyright - do apply to the open-source model, these theories and principles are employed in creative ways not previously envisioned.},
    issn = ""02769948"",
    language = ""English"",
    abbrev_source_title = ""Univ. Ill. Law Rev."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 65""
}
"""	Excluded	Excluded				2	Scopus Signed In		Legal implications of open-source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-0347710184&origin=resultslist&sort=r-f&src=s&sid=65ef4afb7566fd40208dc7dc8b0c17a2&sot=b&sdt=b&s=TITLE%28legal+implications+of+open+source+software%29&sl=49&sessionSearchId=65ef4afb7566fd40208dc7dc8b0c17a2&relpos=0		nan; Keywords; References; Publisher
201	TrustSE	Optimal policy for software vulnerability disclosure	Software vulnerabilities represent a serious threat to cybersecurity, most cyberattacks exploit known vulnerabilities. Unfortunately, there is no agreed-upon policy for their disclosure. Disclosure policy (which sets a protected period given to a vendor to release the patch for the vulnerability) indirectly affects the speed and quality of the patch that a vendor develops. Thus, CERT/CC and similar bodies acting in the public interest can use disclosure to influence the behavior of vendors and reduce social cost. This paper develops a framework to analyze the optimal timing of disclosure. We formulate a model involving a social planner who sets the disclosure policy and a vendor who decides on the patch release. We show that the vendor typically releases the patch less expeditiously than is socially optimal. The social planner optimally shrinks the protected period to push the vendor to deliver the patch more quickly, and sometimes the patch release time coincides with disclosure. We extend the model to allow the proportion of users implementing patches to depend upon the quality (chosen by the vendor) of the patch. We show that a longer protected period does not always result in a better patch quality. Another extension allows for some fraction of users to use ``work-arounds.{''} We show that the possibility of work-arounds can provide the social planner with more leverage, and hence the social planner shrinks the protected period. Interestingly, the possibility of work-arounds can sometimes increase the social cost due to the negative externalities imposed by the users who are able to use the work-arounds on the users who are not.	economics of cybersecurity; software vulnerability; disclosure policy; instant disclosure; patching; patch quality; economics of cybersecurity;  software vulnerability;  disclosure policy;  instant disclosure;  patching;  patch quality	Arora, Ashish; Telang, Rahul; Xu, Hao	MANAGEMENT SCIENCE	https://doi.org/10.1287/mnsc.1070.0771		642-656	"""@article{WOS:000255063400002,
    Author = ""Arora, Ashish and Telang, Rahul and Xu, Hao"",
    Title = ""Optimal policy for software vulnerability disclosure"",
    Journal = ""MANAGEMENT SCIENCE"",
    Year = ""2008"",
    Volume = ""54"",
    Number = ""4"",
    Pages = ""642-656"",
    Month = ""APR"",
    Abstract = ""Software vulnerabilities represent a serious threat to cybersecurity, most cyberattacks exploit known vulnerabilities. Unfortunately, there is no agreed-upon policy for their disclosure. Disclosure policy (which sets a protected period given to a vendor to release the patch for the vulnerability) indirectly affects the speed and quality of the patch that a vendor develops. Thus, CERT/CC and similar bodies acting in the public interest can use disclosure to influence the behavior of vendors and reduce social cost. This paper develops a framework to analyze the optimal timing of disclosure. We formulate a model involving a social planner who sets the disclosure policy and a vendor who decides on the patch release. We show that the vendor typically releases the patch less expeditiously than is socially optimal. The social planner optimally shrinks the protected period to push the vendor to deliver the patch more quickly, and sometimes the patch release time coincides with disclosure. We extend the model to allow the proportion of users implementing patches to depend upon the quality (chosen by the vendor) of the patch. We show that a longer protected period does not always result in a better patch quality. Another extension allows for some fraction of users to use ``work-arounds.{''} We show that the possibility of work-arounds can provide the social planner with more leverage, and hence the social planner shrinks the protected period. Interestingly, the possibility of work-arounds can sometimes increase the social cost due to the negative externalities imposed by the users who are able to use the work-arounds on the users who are not."",
    Publisher = ""INFORMS"",
    Address = ""5521 RESEARCH PARK DR, SUITE 200, CATONSVILLE, MD 21228 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Arora, A (Corresponding Author), Carnegie Mellon Univ, H John Heinz Sch Publ Policy \\& Management 3, Pittsburgh, PA 15213 USA. Arora, Ashish; Telang, Rahul; Xu, Hao, Carnegie Mellon Univ, H John Heinz Sch Publ Policy \\& Management 3, Pittsburgh, PA 15213 USA."",
    DOI = ""10.1287/mnsc.1070.0771"",
    ISSN = ""0025-1909"",
    EISSN = ""1526-5501"",
    Keywords = ""economics of cybersecurity; software vulnerability; disclosure policy; instant disclosure; patching; patch quality"",
    Keywords-Plus = ""SECURITY"",
    Research-Areas = ""Business \\& Economics; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Management; Operations Research \\& Management Science"",
    Author-Email = ""lashish@andrew.cmu.edu rtelang@andrew.cmu.edu xhao@andrew.cmu.edu"",
    Affiliations = ""Carnegie Mellon University"",
    ResearcherID-Numbers = ""arora, ashish/A-2513-2008 arora, ashish/M-1720-2013"",
    ORCID-Numbers = ""arora, ashish/0000-0001-5097-8646 Telang, Rahul/0000-0002-9353-7661"",
    Number-of-Cited-References = ""20"",
    Times-Cited = ""81"",
    Usage-Count-Last-180-days = ""4"",
    Usage-Count-Since-2013 = ""47"",
    Journal-ISO = ""Manage. Sci."",
    Doc-Delivery-Number = ""289OI"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000255063400002"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Optimal policy for software vulnerability disclosure	https://www.webofscience.com/wos/woscc/full-record/WOS:000255063400002	INFORMS	nan; References
202	TrustSE	Socio-Technical Interaction Networks in Free/Open Source Software Development Processes		Software Development; Source Software; Open Source Project; Software Development Process; Virtual Enterprise	Scacchi, Walt	Software Process Modeling	https://doi.org/10.1007/0-387-24262-7_1		1--27	"""@Inbook{Scacchi2005,
    author = ""Scacchi, Walt"",
    editor = ""Acu{\\textasciitilde {n}}a, Silvia T. and Juristo, Natalia"",
    title = ""Socio-Technical Interaction Networks in Free/Open Source Software Development Processes"",
    bookTitle = ""Software Process Modeling"",
    year = ""2005"",
    publisher = ""Springer US"",
    address = ""Boston, MA"",
    pages = ""1--27"",
    isbn = ""978-0-387-24262-0"",
    doi = ""10.1007/0-387-24262-7\_1"",
    url = ""https://doi.org/10.1007/0-387-24262-7\_1""
}
"""	Excluded	Excluded				2	Springer Link		Socio-technical interaction networks in free/open source software development processes	https://link.springer.com/chapter/10.1007/0-387-24262-7_1	Springer US	nan; Abstract; References
203	TrustSE	Combining Static Source Code Analysis and Threat Assessment Modeling For Testing Open Source Software Security	Organizations that implement open source software in their system before they verify the software for security vulnerabilities are more vulnerable to attacks. Therefore, it is important to discover and fix vulnerabilities in open source software before their implementation. Nowadays different techniques exist that help in the vulnerability discovery. The goal of this project is to improve the security of open source software by discovering various source code vulnerabilities using static source code analysis technique, and design and architectural vulnerabilities by developing a threat risk model. I conducted a case study on a remote desktop connection manager application using two static analysis tools and one threat risk modeling tool. In the case study performed, I found that the static analysis tools discovered large number of different types of vulnerabilities on the application. I also discovered some design and architectural vulnerabilities using the threat risk modeling tool. The results obtained from the case study suggest that it is unsafe to deploy open source software in a system without first verifying it for vulnerabilities.		Abraham Ghebrehiwet Ghebremedhin		https://uia.brage.unit.no/uia-xmlui/bitstream/handle/11250/137555/masteroppgave.pdf?sequence=1		121	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Combining static source code analysis and threat assessment modeling for testing open source software security	https://uia.brage.unit.no/uia-xmlui/bitstream/handle/11250/137555/masteroppgave.pdf?sequence=1	University of Agder	
204	TrustSE	Social status in an open-source community	Despite a fair amount of conjecture regarding the circumstances that lead to the generation of status orders, most of the previous literature in this area typically has studied the effects of social cues within a laboratory setting. This article analyzes the evolution of the status hierarchy within a large-scale, natural setting. The results of empirical analyses assessing a large online community of software developers show that in the process of status attainment, community members tend to evaluate a focal actor's reputation according to publicly available social references. Ironically, these same social references also work to constrain an actor's status mobility.	social status; social status	Stewart, Daniel	American Sociological Review	https://doi.org/10.1177/000312240507000505		823 - 842	"""@ARTICLE{Stewart2005823,
    author = ""Stewart, Daniel"",
    title = ""Social status in an open-source community"",
    year = ""2005"",
    journal = ""American Sociological Review"",
    volume = ""70"",
    number = ""5"",
    pages = ""823 - 842"",
    doi = ""10.1177/000312240507000505"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-30444448080\&doi=10.1177\%2f000312240507000505\&partnerID=40\&md5=84a513d6ba168ec77c22085e3114de4b"",
    affiliations = ""Washington State University, Spokane, WA 99210-1495, P.O. Box 1495, 534 E. Trent Ave., United States"",
    abstract = ""Despite a fair amount of conjecture regarding the circumstances that lead to the generation of status orders, most of the previous literature in this area typically has studied the effects of social cues within a laboratory setting. This article analyzes the evolution of the status hierarchy within a large-scale, natural setting. The results of empirical analyses assessing a large online community of software developers show that in the process of status attainment, community members tend to evaluate a focal actor's reputation according to publicly available social references. Ironically, these same social references also work to constrain an actor's status mobility."",
    keywords = ""social status"",
    correspondence_address = ""D. Stewart; Washington State University, Spokane, WA 99210-1495, P.O. Box 1495, 534 E. Trent Ave., United States; email: danstewart@wsu.edu"",
    publisher = ""American Sociological Association"",
    issn = ""00031224"",
    language = ""English"",
    abbrev_source_title = ""Am. Sociol. Rev."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 139""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Scopus Signed In		Social status in an open-source community	https://www.scopus.com/record/display.uri?eid=2-s2.0-30444448080&origin=resultslist&sort=r-f&src=s&sid=918af414f419319b20c78ee6d04be4db&sot=b&sdt=b&s=TITLE%28social+status+in+an+open+source+community%29&sl=48&sessionSearchId=918af414f419319b20c78ee6d04be4db&relpos=0	American Sociological Association	nan; References
205	TrustSE	The Many Meanings of Open Source	"Many software development methodologies are called ""open source. "" However simply stating that a project is open source doesn't precisely describe the approach used to support the project. A multidisciplinary viewpoint can help determine those characteristics that are common to open source projects and those that vary among projects. These characteristics form the basis for a taxonomy of open source projects that's useful for analyzing and setting up projects. They also provide a starting point for understanding what ""open source"" means."	Computer aided software engineering; Installation; Internet; Quality control; Security of data; Societies and institutions; Code quality; Open source code; Binary codes; Computer aided software engineering;  Installation;  Internet;  Quality control;  Security of data;  Societies and institutions;  Code quality;  Open source code;  Binary codes	Gacek, Cristina; Arief, Budi	IEEE Software	https://doi.org/10.1109/MS.2004.1259206	"1.E.S. Raymond, The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary, 1999. Google Scholar; 2.G. Moody, Rebel Code: Linux and the Open Source Revolution, 2001. Google Scholar; 3.C. Dibona, M. Stone and S. Ockman, Open Sources: Voices from the Open Source Revolution, 1999. Google Scholar; 4.J. Feller and B. Fitzgerald, Understanding Open Source Software Development, 2002. Google Scholar; 5.J. Feller and B. Fitzgerald, ""A Framework Analysis of the Open Source Software Development Paradigm"", Proc. 21st Intl Conf. Information Systems, pp. 58-69, 2000. Google Scholar; 6.A. Mockus, R.T. Fielding and J. Herbsleb, ""A Case Study of Open Source Software Development: The Apache Server"", Proc. 22nd Intl Conf. Software Eng., pp. 263-272, 2000. View Article  Google Scholar; 7.B.J. Dempsey, ""A Quantitative Profile of a Community of Open Source Linux Developers"", 1999. Google Scholar; 8.S. Krishnamurthy, ""Cave or Community? An Empirical Examination of 100 Mature Open Source Projects"", First Monday, vol. 7, no. 6, June 2002. CrossRef  Google Scholar; 9.A. Capiluppi, P. Lago and M. Morisio, ""Characteristics of Open Source Projects"", Proc. 7th European Conf. Software Maintenance and Reengineering, pp. 317-330, 2003. View Article  Google Scholar; 10.H. Wang and C. Wang, ""Open Source Software Adoption: A Status Report"", IEEE Software, vol. 18, no. 2, pp. 90-95, Mar./Apr. 2001. View Article  Google Scholar; 11.T. Bollinger, ""Open-Source Methods: Peering through the Clutter"", IEEE Software, vol. 16, no. 4, pp. 8-11, July/Aug. 1999. Google Scholar; 12.L. Bass, P. Clements and R. Kazman, Software Architecture in Practice, 1998. Google Scholar; 13.H. Wang and C. Wang, ""Open Source Software Adoption: A Status Report"", IEEE Software, vol. 18, no. 2, pp. 90-95, Mar./Apr. 2001. View Article  Google Scholar; 14.A. Capiluppi, P. Lago and M. Morisio, ""Characteristics of Open Source Projects"", Proc. 7th European Conf. Software Maintenance and Reengineering, pp. 317-330, 2003. View Article  Google Scholar; 15.S. Krishnamurthy, ""Cave or Community? An Empirical Examination of 100 Mature Open Source Projects"", First Monday, vol. 7, no. 6, June 2002. CrossRef  Google Scholar; 16.J. Feller and B. Fitzgerald, Understanding Open Source Software Development, 2002. Google Scholar"	34 - 40+4	"""@ARTICLE{Gacek200434,
    author = ""Gacek, Cristina and Arief, Budi"",
    title = ""The Many Meanings of Open Source"",
    year = ""2004"",
    journal = ""IEEE Software"",
    volume = ""21"",
    number = ""1"",
    pages = ""34 - 40+4"",
    doi = ""10.1109/MS.2004.1259206"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0742303457\&doi=10.1109\%2fMS.2004.1259206\&partnerID=40\&md5=6d4be7621e90d2b63e07781400a42853"",
    affiliations = ""School of Computing Science, Univ. of Newcastle upon Tyne, Newcastle upon Tyne NE1 7RU, United Kingdom"",
    abstract = {Many software development methodologies are called ""open source. "" However simply stating that a project is open source doesn't precisely describe the approach used to support the project. A multidisciplinary viewpoint can help determine those characteristics that are common to open source projects and those that vary among projects. These characteristics form the basis for a taxonomy of open source projects that's useful for analyzing and setting up projects. They also provide a starting point for understanding what ""open source"" means.},
    keywords = ""Computer aided software engineering; Installation; Internet; Quality control; Security of data; Societies and institutions; Code quality; Open source code; Binary codes"",
    correspondence_address = ""C. Gacek; School of Computing Science, Univ. of Newcastle upon Tyne, Newcastle upon Tyne NE1 7RU, United Kingdom; email: cristina.gacek@ncl.ac.uk"",
    issn = ""07407459"",
    coden = ""IESOE"",
    language = ""English"",
    abbrev_source_title = ""IEEE Software"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 180""
}
"""	Excluded	Excluded				2	Scopus Signed In		The many meanings of open source	https://ieeexplore.ieee.org/document/1259206	IEEE	
206	TrustSE	A comprehensive trust model for component software	The growing importance of component software introduces special requirements on trust due to the nature of applications they provide, in particular when the system supports dynamic component deployment. This paper presents a comprehensive trust model in order to specify, evaluate and manage various trust relationships that exist among entities in a component software system. It contains a sub-model to present trust relationships among system entities, a sub-model to specify the information related to trust management for a software component, a sub-model for trust evaluation and a sub-model for trust management. This trust model supports trust management based on trust evaluation both at component download time and runtime.	component software;  security;  trust;  trust management;  trust model; component software, security, trust, trust management, trust model	Yan, Zheng	SecPerU '08: Proceedings of the 4th international workshop on Security, privacy and trust in pervasive and ubiquitous computing	https://doi.org/10.1145/1387329.1387330		1-6	"""@inproceedings{10.1145/1387329.1387330,
    author = ""Yan, Zheng"",
    title = ""A comprehensive trust model for component software"",
    year = ""2008"",
    isbn = ""9781605582078"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1387329.1387330"",
    doi = ""10.1145/1387329.1387330"",
    abstract = ""The growing importance of component software introduces special requirements on trust due to the nature of applications they provide, in particular when the system supports dynamic component deployment. This paper presents a comprehensive trust model in order to specify, evaluate and manage various trust relationships that exist among entities in a component software system. It contains a sub-model to present trust relationships among system entities, a sub-model to specify the information related to trust management for a software component, a sub-model for trust evaluation and a sub-model for trust management. This trust model supports trust management based on trust evaluation both at component download time and runtime."",
    booktitle = ""Proceedings of the 4th International Workshop on Security, Privacy and Trust in Pervasive and Ubiquitous Computing"",
    pages = ""1-6"",
    numpages = ""6"",
    keywords = ""component software, security, trust, trust management, trust model"",
    location = ""Sorrento, Italy"",
    series = ""SecPerU '08""
}
"""	Included	Included				2	ACM		A comprehensive trust model for component software	https://doi.org/10.1145/1387329.1387330	Association for Computing Machinery	nan; References; Link
207	TrustSE	Trust Management Mechanism in IoV based on Bayesian classification	The Internet of Vehicles (IoV) significantly enhances the perception of the traffic environment and facilitates information exchange among vehicles, thereby bolstering transportation safety. Nevertheless, the intricate nature of traffic scenes, the swift movement of vehicles and the dynamic nature of the vehicle network's topology present challenges in guaranteeing the reliability of shared messages among vehicles. The intricacy of the situation additionally poses challenges for vehicles in evaluating the reliability of received messages, creating substantial potential for traffic accidents. Therefore, this article proposes an IoV trust management mechanism based on Bayesian classification, which designs a complete vehicle trust value calculation scheme. The verification of messages received from neighboring vehicles is carried out using the Bayesian inference model, which can effectively detect vehicles sending malicious information. After the verification results, rating parameters are produced for every source vehicle of the messages. Ultimately, the trust value of the vehicle is calibrated and penalized based on these rating parameters. The vehicle uploads rating parameters to the RSU, which calculates the trust value of the relevant vehicles. By excluding vehicles with low trust values, the cooperation success rate among vehicles within the network has risen from 65\% to approximately 70\%.	Bayesian Classification;  Internet of Vehicles;  Trust Management; Bayesian Classification, Internet of Vehicles, Trust Management	Fan, Xiumei; Wang, Yuchen	CNIOT '24: Proceedings of the 2024 5th International Conference on Computing, Networks and Internet of Things	https://doi.org/10.1145/3670105.3670213		620-625	"""@inproceedings{10.1145/3670105.3670213,
    author = ""Fan, Xiumei and Wang, Yuchen"",
    title = ""Trust Management Mechanism in IoV based on Bayesian classification"",
    year = ""2024"",
    isbn = ""9798400716751"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3670105.3670213"",
    doi = ""10.1145/3670105.3670213"",
    abstract = ""The Internet of Vehicles (IoV) significantly enhances the perception of the traffic environment and facilitates information exchange among vehicles, thereby bolstering transportation safety. Nevertheless, the intricate nature of traffic scenes, the swift movement of vehicles and the dynamic nature of the vehicle network's topology present challenges in guaranteeing the reliability of shared messages among vehicles. The intricacy of the situation additionally poses challenges for vehicles in evaluating the reliability of received messages, creating substantial potential for traffic accidents. Therefore, this article proposes an IoV trust management mechanism based on Bayesian classification, which designs a complete vehicle trust value calculation scheme. The verification of messages received from neighboring vehicles is carried out using the Bayesian inference model, which can effectively detect vehicles sending malicious information. After the verification results, rating parameters are produced for every source vehicle of the messages. Ultimately, the trust value of the vehicle is calibrated and penalized based on these rating parameters. The vehicle uploads rating parameters to the RSU, which calculates the trust value of the relevant vehicles. By excluding vehicles with low trust values, the cooperation success rate among vehicles within the network has risen from 65\\% to approximately 70\\%."",
    booktitle = ""Proceedings of the 2024 5th International Conference on Computing, Networks and Internet of Things"",
    pages = ""620-625"",
    numpages = ""6"",
    keywords = ""Bayesian Classification, Internet of Vehicles, Trust Management"",
    location = ""Tokyo, Japan"",
    series = ""CNIOT '24""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	ACM		Trust Management	https://doi.org/10.1145/3670105.3670213	Association for Computing Machinery	nan; References; Link
209	TrustSE	Predicting Trustworthiness for Component Software	Trust has been recognized as an important factor for component software. In this paper, we propose a methodology to predict trustworthiness of a software component for downloading and execution. The methodology is based on a trust model of software component, which indicates the component's asserted performance and requirements for achieving the performance. Through evaluating the related trust models, the proposed methodology can predict the trustworthiness of the software components.	Software systems; Security; Runtime; Predictive models; Availability; Application software; Pervasive computing; Concrete; Software engineering; Computer industry; Software Components; Trust Model; Mobile Devices; Resource Consumption; Concrete Examples; System Resources; Network Resources; Resource Requirements; Service Components; Composition Rules; Trust Management; Aspects Of Trust; Components C4; Non-functional Requirements; Download Time	Zheng Yan	Third International Workshop on Security, Privacy and Trust in Pervasive and Ubiquitous Computing (SecPerU 2007)	https://doi.org/10.1109/SECPERU.2007.8	"1.P. Herrmann, ""Trust-Based Protection of Software Component Users and Designers"", Proceedings of iTrust03, May 2003. CrossRef  Google Scholar; 2.MIDP 2.0 specification. Google Scholar; 3.Security and Trust Services API (SATSA) for J2ME. Google Scholar; 4.DE Denning, ""A New Paradigm for Trusted Systems"", Proceedings of the IEEE New Paradigms Workshop, 1993. CrossRef  Google Scholar; 5.T. Grandison and M. Sloman, ""A Survey of Trust in Internet Applications"", IEEE Communications and Survey Forth Quarter, vol. 3, no. 4, pp. 2-16, 2000. View Article  Google Scholar; 6.G. Theodorakopoulos and J. S. Baras, ""On Trust Models and Trust Evaluation Metrics for Ad Hoc Networks"", IEEE Journal on Selected Areas in Communications, vol. 24, no. 2, pp. 318-328, Feb. 2006. View Article  Google Scholar; 7.Y. Sun, W. Yu, Z. Han and K. J. R. Liu, ""Information Theoretic Framework of Trust Modeling and Evaluation for Ad Hoc Networks"", IEEE Journal on Selected Area in Communications, vol. 24, no. 2, pp. 305-317, Feb. 2006. View Article  Google Scholar; 8.M. Zhou, H. Mei and L. Zhang, ""A Multi-Property Trust Model for Reconfiguring Component Software"", QAIC2005, pp. 142-149, 19-20 Sept. 2005. Google Scholar; 9.M. Zhou, W. Jiao and H. Mei, ""Customizable Framework for Managing Trusted Components Deployed on Middleware"", Proceedings of 10th IEEE International Conference Engineering of Complex Computer Systems, pp. 283-291, 16-20 June 2005. View Article  Google Scholar; 10.W. Hasselbring and R Reussner, ""Toward Trustworthy Software Systems"", IEEE Computer, vol. 39, no. 4, pp. 91-92, April 2006. View Article  Google Scholar; 11.Z. Yan and R. MacLaverty, ""Autonomic Trust Management in a Component Based Software System"", ATC06 LNCS, vol. 4158/2006, pp. 279-292, Sept. 2006. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Predicting trustworthiness for component software	https://ieeexplore.ieee.org/document/4279762	IEEE	nan; Pages; Year; Bibtex
210	TrustSE	Can you trust software capability evaluations?	Software capability evaluations (SCE) are widely used to determine an organization's capability maturity model, but their results maybe misleading. It is shown how certain practices distort results and waste time and money. Some ways to improve SCE are discussed.	Decision making; Mathematical models; Process engineering; Professional aspects; Scheduling; Software engineering; Capability maturity model (CMM); Software capability evaluation (SCE); Computer software selection and evaluation; Decision making;  Mathematical models;  Process engineering;  Professional aspects;  Scheduling;  Software engineering;  Capability maturity model (CMM);  Software capability evaluation (SCE);  Computer software selection and evaluation	O'Connell, Emilie; Saiedian, Hossein	Computer	https://doi.org/10.1109/2.820036	"1.H. Saiedian and D. Kuzara, ""SEI Capability Maturity Model's Impact on Contractors"", Computer, pp. 16-26, Jan. 1995. View Article  Google Scholar; 2.D. Maibor, ""Software Acquisition for the 90s: One Big Dilemma"", Crosstalk: J. Defense Software Eng., vol. 10, no. 7, pp. 20-25. Google Scholar; 3.T. Bollinger and C. McGowan, ""A Critical Look at Software Capability Evaluations"", IEEE Software, pp. 25-41, July 1991. View Article  Google Scholar; 4.W. Humphrey and W. Sweet, A Method for Assessing the Software Engineering Capability of Contractors, 1992. Google Scholar; 5.C. Lin, ""Software Capability Evaluations: Experiences from the Field"", SEI Technical Rev., pp. 1-30, 1993. Google Scholar; 6.D. Card, ""Capability Evaluations Rated Highly Variable"", IEEE Software, pp. 105-106, Sept. 1992. Google Scholar"	28 - 35	"""@ARTICLE{O'Connell200028,
    author = ""O'Connell, Emilie and Saiedian, Hossein"",
    title = ""Can you trust software capability evaluations?"",
    year = ""2000"",
    journal = ""Computer"",
    volume = ""33"",
    number = ""2"",
    pages = ""28 - 35"",
    doi = ""10.1109/2.820036"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0033891469\&doi=10.1109\%2f2.820036\&partnerID=40\&md5=00afa93950583a75327ee27d7cfe1b21"",
    affiliations = ""University of Nebraska, Omaha, NE, United States; Department of Computer Science, University of Nebraska, Omaha, NE, United States"",
    abstract = ""Software capability evaluations (SCE) are widely used to determine an organization's capability maturity model, but their results maybe misleading. It is shown how certain practices distort results and waste time and money. Some ways to improve SCE are discussed."",
    keywords = ""Decision making; Mathematical models; Process engineering; Professional aspects; Scheduling; Software engineering; Capability maturity model (CMM); Software capability evaluation (SCE); Computer software selection and evaluation"",
    publisher = ""IEEE"",
    issn = ""00189162"",
    coden = ""CPTRB"",
    language = ""English"",
    abbrev_source_title = ""Computer"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 11""
}
"""	Excluded	Excluded				2	Scopus Signed In		Can you trust software capability evaluations?	https://ieeexplore.ieee.org/document/820036	IEEE	
211	TrustSE	Automated dependency resolution for open source software	Opportunities for software reuse are plentiful, thanks in large part to the widespread adoption of open source processes and the availability of search engines for locating relevant artifacts. One challenge presented by open source software reuse is simply getting a newly downloaded artifact to build/run in the first place. The artifact itself likely reuses other artifacts, and so depends on their being located to function properly. While merely tedious in the individual case, this can cause serious difficulties for those seeking to study open source software. It is simply not feasible to manually resolve dependencies for thousands of projects, and many forms of analysis require declarative completeness. In this paper we present a method for automatically resolving dependencies for open source software. It works by cross-referencing a project's missing type information with a repository of candidate artifacts. We have implemented this method on top of the Sourcerer, an infrastructure for the large-scale indexing and analysis of open source code. The performance of our resolution algorithm was evaluated in two parts. First, for a small number of popular open source projects, we manually examined the artifacts suggested by our system to determine if they were appropriate. Second, we applied the algorithm to the 13,241 projects in the Sourcerer managed repository to evaluate the rate of resolution success. The results demonstrate the feasibility of this approach, as the algorithm located all of the required artifacts needed by 3,904 additional projects, increasing the percentage of declaratively complete projects in Sourcerer from 39% to 69%.	Algorithms; Open systems; Search engines; Software engineering; Large parts; Open source projects; Open Source Software; Open sources; Open-source code; Software Re-use; Type information; Computer software reusability; Algorithms;  Open systems;  Search engines;  Software engineering;  Large parts;  Open source projects;  Open Source Software;  Open sources;  Open-source code;  Software Re-use;  Type information;  Computer software reusability	Ossher, Joel; Bajracharya, Sushil; Lopes, Cristina	Proceedings - International Conference on Software Engineering	https://doi.org/10.1109/MSR.2010.5463346	"1.A. Mockus, ""Large-scale code reuse in open source software"", FLOSS '07: Proceedings of the First International Workshop on Emerging Trends in FLOSS Research and Development, pp. 7, 2007. View Article  Google Scholar; 2.R. Holmes, ""Unanticipated reuse of large-scale software features"", Proceedings of the 28th international conference on Software engineering, pp. 961-964, 2006. CrossRef  Google Scholar; 3.O. Hummel, W. Janjic and C. Atkinson, ""Code conjurer: Pulling reusable software out of thin air"", IEEE Softw., vol. 25, no. 5, pp. 45-52, 2008. View Article  Google Scholar; 4.R. Holmes and R. J. Walker, ""Supporting the investigation and planning of pragmatic reuse tasks"", ICSE '07: Proceedings of the 29th international conference on Software Engineering, pp. 447-457, 2007. View Article  Google Scholar; 5.D. M. Nichols and M. B. Twidale, ""The usability of open source software"", 2003. CrossRef  Google Scholar; 6.B. Dagenais and L. Hendren, ""Enabling static analysis for partial java programs"", Proceedings of the 23rd ACM SIG-PLAN conference on Object oriented programming systems languages and applications, pp. 313-328, 2008. CrossRef  Google Scholar; 7.S. Thummalapenta and T. Xie, ""Parseweb: a programmer assistant for reusing open source code on the web"", Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, pp. 204-213, 2007. CrossRef  Google Scholar; 8.E. Linstead, S. Bajracharya, T. Ngo, P. Rigor, C. Lopes and P. Baldi, ""Sourcerer: mining and searching internet-scale software repositories"", Data Min. Knowl. Discov., vol. 18, no. 2, pp. 300-336, 2009. CrossRef  Google Scholar; 9.P. P.-S. Chen, ""The entity-relationship model--toward a unified view of data"", ACM Trans. Database Syst., vol. 1, no. 1, pp. 9-36, 1976. CrossRef  Google Scholar; 10.Y.-F. Chen, E. R. Gansner and E. Koutsofios, ""A c++ data model supporting reachability analysis and dead code detection"", IEEE Trans. Softw. Eng., vol. 24, no. 9, pp. 682-694, 1998. View Article  Google Scholar; 11.S. Demeyer, S. Tichelaar and S. Ducasse, ""FAMIX 2.1the FAMOOS information exchange model"", Research report University of Bern, pp. 11, 2001. Google Scholar; 12.eclipse java development tools,  [online]  Available: http://www.eclipse.org/jdt/. Google Scholar; 13.J. Ossher, S. Bajracharya, E. Linstead, P. Baldi and C. Lopes, ""SourcererDB: an aggregated repository of statically analyzed and cross-linked open source java projects"", Mining Software Repositories 2009. MSR '09. 6th IEEE International Working Conference on, pp. 183-186, 2009. View Article  Google Scholar; 14.maven 2 central repository,  [online]  Available: http://repol.maven.org/maven2/. Google Scholar; 15.C. Luer and D. S. Rosenblum, ""Wren--an environment for component-based development"", ESEC/FSE-9: Proceedings of the 8th European software engineering conference held jointly with 9th ACM SIGSOFT international symposium on Foundations of software engineering, pp. 207-217, 2001. CrossRef  Google Scholar; 16.google code search,  [online]  Available: http://www.google.com/codesearch. Google Scholar; 17. [online]  Available: http://www.koders.com.; 18. [online]  Available: http://www.merobase.com.; 19. [online]  Available: http://www.findjar.com.; 20.K. Inoue, R. Yokomori, T. Yamamoto, M. Matsushita and S. Kusumoto, ""Ranking significance of software components based on use relations"", Software Engineering IEEE Transactions on, vol. 31, no. 3, pp. 213-225, March 2005. View Article  Google Scholar"	130 - 140	"""@CONFERENCE{Ossher2010130,
    author = ""Ossher, Joel and Bajracharya, Sushil and Lopes, Cristina"",
    title = ""Automated dependency resolution for open source software"",
    year = ""2010"",
    journal = ""Proceedings - International Conference on Software Engineering"",
    pages = ""130 - 140"",
    doi = ""10.1109/MSR.2010.5463346"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953799042\&doi=10.1109\%2fMSR.2010.5463346\&partnerID=40\&md5=c4c5623e95c1a64fea515a551cde66c7"",
    affiliations = ""Bren School of Information and Computer Sciences, University of California, Irvine, Irvine, CA, United States"",
    abstract = ""Opportunities for software reuse are plentiful, thanks in large part to the widespread adoption of open source processes and the availability of search engines for locating relevant artifacts. One challenge presented by open source software reuse is simply getting a newly downloaded artifact to build/run in the first place. The artifact itself likely reuses other artifacts, and so depends on their being located to function properly. While merely tedious in the individual case, this can cause serious difficulties for those seeking to study open source software. It is simply not feasible to manually resolve dependencies for thousands of projects, and many forms of analysis require declarative completeness. In this paper we present a method for automatically resolving dependencies for open source software. It works by cross-referencing a project's missing type information with a repository of candidate artifacts. We have implemented this method on top of the Sourcerer, an infrastructure for the large-scale indexing and analysis of open source code. The performance of our resolution algorithm was evaluated in two parts. First, for a small number of popular open source projects, we manually examined the artifacts suggested by our system to determine if they were appropriate. Second, we applied the algorithm to the 13,241 projects in the Sourcerer managed repository to evaluate the rate of resolution success. The results demonstrate the feasibility of this approach, as the algorithm located all of the required artifacts needed by 3,904 additional projects, increasing the percentage of declaratively complete projects in Sourcerer from 39\% to 69\%. (c) 2010 IEEE."",
    keywords = ""Algorithms; Open systems; Search engines; Software engineering; Large parts; Open source projects; Open Source Software; Open sources; Open-source code; Software Re-use; Type information; Computer software reusability"",
    correspondence_address = ""J. Ossher; Bren School of Information and Computer Sciences, University of California, Irvine, Irvine, CA, United States; email: fjossher@ics.uci.edu"",
    issn = ""02705257"",
    isbn = ""978-142446803-4"",
    coden = ""PCSED"",
    language = ""English"",
    abbrev_source_title = ""Proc Int Conf Software Eng"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 36; Conference name: 7th IEEE Working Conference on Mining Software Repositories, MSR 2010, Co-located with the 2010 ACM/IEEE International Conference on Software Engineering, ICSE 2010; Conference date: 2 May 2010 through 3 May 2010; Conference code: 80678""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Automated dependency resolution for open source software	https://ieeexplore.ieee.org/document/5463346	IEEE	
212	TrustSE	Extracting acyclic dependency models from quality standards for COTS software evaluation	Commercial off-the-shelf (COTS) software has become a crucial component of many of today's mission- and safety-critical products. As these products have proliferated internationally, global demand for software safety and performance quality has increased. Unfortunately, the current state-of-the-art in software assessment technology has not matured to the point where well-established and widely accepted schemes for evaluating COTS software quality have been presented. Without insight into the source code, COTS software users depend on a subjective assessment of attributes described by performance metrics, behavioral descriptions, and/or historical product data. Published techniques that attempt to formalize the above approach are often less than successful due to ill-defined and subjective metrics, and the naive assumption of independence between attributes. Recently, software standards have been seen as a means of improving the evaluation process by providing an acknowledged criterion for software metric comparison. Given the stated issues, is it possible to develop a standards-based dependency model of well-defined attributes that does not depend on naive assumptions? The answer to this question is yes. This paper describes a process that can be used to extract acyclic dependency models, if they exist, from various software product quality standards. Application of the extraction process will be used to reveal the attribute dependency model of the international software standard ISO/IEC 9126-1. Not only can this process be used for COTS software evaluation, but it can also be used by standards making bodies to clarify the reasoning, justifications and causal implications they employ when developing standards.	Codes (standards); Data acquisition; Mathematical models; Software engineering; Commercial off-the-shelf (COTS) software; COTS software evaluation; Safety-critical products; Computer software; Codes (standards);  Data acquisition;  Mathematical models;  Software engineering;  Commercial off-the-shelf (COTS) software;  COTS software evaluation;  Safety-critical products;  Computer software	Morris, A. Terry; Beling, Peter A.	Journal of Aerospace Computing, Information and Communication	https://doi.org/10.2514/1.19106		327 - 339	"""@ARTICLE{Morris2006327,
    author = ""Morris, A. Terry and Beling, Peter A."",
    title = ""Extracting acyclic dependency models from quality standards for COTS software evaluation"",
    year = ""2006"",
    journal = ""Journal of Aerospace Computing, Information and Communication"",
    volume = ""3"",
    number = ""7"",
    pages = ""327 - 339"",
    doi = ""10.2514/1.19106"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33746347066\&doi=10.2514\%2f1.19106\&partnerID=40\&md5=9dee338e587982b293d13812db196b42"",
    affiliations = ""NASA Langley Research Center, Hampton, VA 23681, United States; University of Virginia, Charlottesville, VA 22903, United States; Safety-Critical Avionics Systems Branch, Mail Stop 130, United States; AIAA, United States; Department of Systems Engineering, Thornton Hall, United States"",
    abstract = ""Commercial off-the-shelf (COTS) software has become a crucial component of many of today's mission- and safety-critical products. As these products have proliferated internationally, global demand for software safety and performance quality has increased. Unfortunately, the current state-of-the-art in software assessment technology has not matured to the point where well-established and widely accepted schemes for evaluating COTS software quality have been presented. Without insight into the source code, COTS software users depend on a subjective assessment of attributes described by performance metrics, behavioral descriptions, and/or historical product data. Published techniques that attempt to formalize the above approach are often less than successful due to ill-defined and subjective metrics, and the naive assumption of independence between attributes. Recently, software standards have been seen as a means of improving the evaluation process by providing an acknowledged criterion for software metric comparison. Given the stated issues, is it possible to develop a standards-based dependency model of well-defined attributes that does not depend on naive assumptions? The answer to this question is yes. This paper describes a process that can be used to extract acyclic dependency models, if they exist, from various software product quality standards. Application of the extraction process will be used to reveal the attribute dependency model of the international software standard ISO/IEC 9126-1. Not only can this process be used for COTS software evaluation, but it can also be used by standards making bodies to clarify the reasoning, justifications and causal implications they employ when developing standards."",
    keywords = ""Codes (standards); Data acquisition; Mathematical models; Software engineering; Commercial off-the-shelf (COTS) software; COTS software evaluation; Safety-critical products; Computer software"",
    issn = ""15429423"",
    language = ""English"",
    abbrev_source_title = ""J. Aerosp. Comput. Inf. Commun."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1""
}
"""	Excluded	Excluded				2	Scopus Signed In		Extracting Acyclic Dependency Models from Quality Standards for COTS Software Evaluation	https://www.scopus.com/record/display.uri?eid=2-s2.0-33746347066&origin=resultslist&sort=r-f&src=s&sid=2346636f56a45a16ae614cc0a1c97ae5&sot=b&sdt=b&s=TITLE%28extracting+acyclic+dependency+models+from+quality+standards+for+cots+software+evaluation%29&sl=95&sessionSearchId=2346636f56a45a16ae614cc0a1c97ae5&relpos=0		nan; References; Publisher
213	TrustSE	Software release planning under soft resource and dependency constraints	The goal of incremental software release planning is to assign planning items to future releases so that value is maximized while various resource, technical and other constraints are satisfied. We propose a new approach to this problem called soft-EVOLVE II, in which a project is first modeled using a highly-general model with a nonlinear objective function, and then a set of high-value release plans is generated using a hybrid genetic algorithm. Our formalization naturally extends the established EVOLVE II model by Ruhe et al., but is capable of expressing a much larger variety of constraints between features, in which traditional, Boolean feasibility constraints are replaced entirely by soft constraints. Such a formulation allows for highly-detailed modeling while taking uncertainty into account. We discuss the primary hypotheses and goals of this research, as well as potential validity threats and their control.		Mark Przepiora		https://scholar.google.ca/citations?view_op=view_citation&hl=en&user=4e3npx4AAAAJ&citation_for_view=4e3npx4AAAAJ:u-x6o8ySG0sC			"""nan"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Google Scholar		Software release planning under soft resource and dependency constraints	https://scholar.google.ca/citations?view_op=view_citation&hl=en&user=4e3npx4AAAAJ&citation_for_view=4e3npx4AAAAJ:u-x6o8ySG0sC		
214	TrustSE	The role of dependency propagation in the accumulation of technical debt for software implementations	Technical debt management requires means to identify, track, and resolve technical debt in the various software project artifacts. There are several approaches for identifying technical debt from the software implementation but they all have their shortcomings in maintaining this information. This paper presents a case study that explores the role of dependency propagation in the accumulation of technical debt for a software implementation. A clear relation between the two is identified in addition to some differentiating characteristics.We conclude that formalization of this relation can lead to solutions for the maintenance problem. As such, we use this case study to improve the propagation method implemented in our DebtFlag tool.	Maintenance Problem; Propagation method; Refactorings; Software implementation; Software project; Technical debts; Maintenance Problem;  Propagation method;  Refactorings;  Software implementation;  Software project;  Technical debts	Holvitie, Johannes; Laakso, Mikko-Jussi; Rajala, Teemu; Kaila, Erkki; Leppanen, Ville	13th Symposium on Programming Languages and Software Tools, SPLST 2013 - Proceedings	https://www.scopus.com/record/display.uri?eid=2-s2.0-84923612810&origin=resultslist&sort=r-f&src=s&sid=72fc3fca8603d6f1f5b959b9f7cea255&sot=b&sdt=b&s=TITLE%28the+role+of+dependency+propagation+in+the+accumulation+of+technical+debt+for+software+implementations%29&sl=108&sessionSearchId=72fc3fca8603d6f1f5b959b9f7cea255&relpos=0	Cunningham, W.; Ozkaya, I., Kruchten, P., Nord, R.L., Brown, N.Managing technical debt in software development: Report on the 2nd international workshop on managing technical debt, held at icse 2011(2011)SIGSOFT Softw. Eng. Notes, 36 (5), pp. 33-35.Cited 17 times.September; Izurieta, C., Vetro, A., Zazworka, N., Cai, Y., Seaman, C., Shull, F.; Seaman, C., Guo, Y.; Holvitie, J., Leppanen, V.; Brown, N., Cai, Y., Guo, Y., Kazman, R., Kim, M., Kruchten, P., Lim, E., (...), Zazworka, N.; Seaman, C., Guo, Y., Zazworka, N., Shull, F., Izurieta, C., Cai, Y., Vetro, A.; Guo, Y., Seaman, C., Gomes, R., Cavalcanti, A., Tonin, G., Da Silva, F.Q.B., Santos, A.L.M., (...), Siebra, C.; Barowski, L.A., Cross, J.H.; McGregor, J.D., Monteith, J.Y., Zhang, J.; Fowler, M., Beck, K.(1999)Refactoring: Improving the Design of Existing Code.Cited 5143 times.Addison-Wesley Professional; Avellis, Giovanna; Bianchi, A., Caivano, D., Lanubile, F., Visaggio, G.; Robillard, M.P.; Rajala, T., Laakso, M.J., Kaila, E., Salakoski, T.Ville: A language-independent program visualization tool(2007)Proceedings of the Seventh Baltic Sea Conference on Computing Education Research, 88, pp. 151-159.Cited 65 times.Australian Computer Society, Inc; (2013)ViLLERajala T., Kaila E., Laakso M.J.http://ville.cs.utu.fi/; Laakso, M.J.(2010)Promoting Programming Learning: Engagement, Automatic Assessment with Immediate Feedback in Visualizations.Cited 20 times.PhD thesis, Turku Centre for Computer Science; Kaila, E., Rajala, T., Laakso, M., Salakoski, T.Important features in program visualization(2011)Appeared in ICEE: An International Conference on Engineering Education, pp. 21-26.Cited 3 times.; Gronroos, M.(2011)Book of Vaadin.Cited 33 times.Vaadin Limited; Holvitie, J.(2012)Code Level Agility and Future Development of Software Products.Cited 2 times.Master's thesis, Department of Information Technology, University of Turku; Feathers, M.(2004)Working Effectively with Legacy Code.Cited 203 times.Prentice Hall; Martin, R.C.(2003)Agile Software Development: Principles, Patterns, and Practices.Cited 1284 times.Prentice Hall PTR; Page, L., Brin, S., Motwani, R., Winograd, T.(1999)The Pagerank Citation Ranking: Bringing Order to the Web.Cited 9683 times.	61 - 75	"""@CONFERENCE{Holvitie201361,
    author = ""Holvitie, Johannes and Laakso, Mikko-Jussi and Rajala, Teemu and Kaila, Erkki and Leppanen, Ville"",
    editor = ""A., Kiss"",
    title = ""The role of dependency propagation in the accumulation of technical debt for software implementations"",
    year = ""2013"",
    journal = ""13th Symposium on Programming Languages and Software Tools, SPLST 2013 - Proceedings"",
    pages = ""61 - 75"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84923612810\&partnerID=40\&md5=8419d1f1c8a6264dc258d971e0e58b57"",
    affiliations = ""TUCS, Turku Centre for Computer Science, Turku, Finland; University of Turku, Department of Information Technology, Turku, Finland"",
    abstract = ""Technical debt management requires means to identify, track, and resolve technical debt in the various software project artifacts. There are several approaches for identifying technical debt from the software implementation but they all have their shortcomings in maintaining this information. This paper presents a case study that explores the role of dependency propagation in the accumulation of technical debt for a software implementation. A clear relation between the two is identified in addition to some differentiating characteristics.We conclude that formalization of this relation can lead to solutions for the maintenance problem. As such, we use this case study to improve the propagation method implemented in our DebtFlag tool."",
    author_keywords = ""Refactoring; Software implementation assessment; Technical debt; Technical debt propagation modelling"",
    keywords = ""Maintenance Problem; Propagation method; Refactorings; Software implementation; Software project; Technical debts"",
    publisher = ""University of Szeged"",
    isbn = ""978-963306228-9"",
    language = ""English"",
    abbrev_source_title = ""Symp. Program. Lang. Softw. Tools, SPLST - Proc."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3; Conference name: 13th Symposium on Programming Languages and Software Tools, SPLST 2013; Conference date: 26 August 2013 through 27 August 2013; Conference code: 110311""
}
"""	Excluded	Excluded				2	Scopus Signed In		The role of dependency propagation in the accumulation of technical debt for software implementations	https://www.scopus.com/record/display.uri?eid=2-s2.0-84923612810&origin=resultslist&sort=r-f&src=s&sid=72fc3fca8603d6f1f5b959b9f7cea255&sot=b&sdt=b&s=TITLE%28the+role+of+dependency+propagation+in+the+accumulation+of+technical+debt+for+software+implementations%29&sl=108&sessionSearchId=72fc3fca8603d6f1f5b959b9f7cea255&relpos=0	University of Szeged	
215	TrustSE	Analysis of issue and dependency management in open-source software projects	Modern software development relies on open-source software to facilitate reuse and reduce redundant work. Software developers use open-source packages in their projects without having insights into how these components are being developed and maintained. The aim of this thesis is to develop approaches for analyzing issue and dependency management in software projects. Software projects organize their work with issue trackers, tools for tracking issues such as development tasks, bug reports, and feature requests. By analyzing issue handling in more than 4,000 open-source projects, we found that many issues are left open for long periods of time, which can result in bugs and vulnerabilities not being fixed in a timely manner.  This thesis proposes a method for predicting the amount of time it takes to resolve an issue by using the historical data available in issue trackers. Methods for predicting issue lifetime can help software project managers to prioritize issues and allocate resources accordingly. Another problem studied in this thesis is how software dependencies are used.  Software developers often include third-party open-source software packages in their project code as a dependency. The included dependencies can also have their own dependencies. A complex network of dependency relationships exists among open-source software packages. This thesis analyzes the structure and the evolution of dependency networks of three popular programming languages. We propose an approach to measure the growth and the evolution of dependency networks. This thesis demonstrates that dependency network analysis can quantify what is the likelihood of acquiring vulnerabilities through software packages and how it changes over time. The approaches and findings developed here could help to bring transparency into open-source projects with respect to how issues are handled, or dependencies are updated.	software design; free software	Kikas, Riivo	TU vaitekirjad alates	https://dspace.ut.ee/items/5710e30f-b8ba-4cf5-a177-c8971a6b9a88			"""nan"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Google Scholar		Analysis of issue and dependency management in open-source software projects	https://dspace.ut.ee/items/5710e30f-b8ba-4cf5-a177-c8971a6b9a88	Tartu Ulikool digiarhiiv ADA	
216	TrustSE	Quantitative studies in software release planning under risk and resource constraints	Delivering software in an incremental fashion implicitly reduces many of the risks associated with delivering large software projects. However, adopting a process, where requirements are delivered in releases means decisions have to be made on which requirements should be delivered in which release. This paper describes a method called EVOLVE+, based on a genetic algorithm and aimed at the evolutionary planning of incremental software development. The method is initially evaluated using a sample project. The evaluation involves an investigation of the tradeoff relationship between risk and the overall benefit. The link to empirical research is two-fold: firstly, our model is based on interaction with industry and randomly generated data for effort and risk of requirements. The results achieved this way are the first step for a more comprehensive evaluation using real-world data. Secondly, we try to approach uncertainty of data by additional computational effort providing more insight into the problem solutions: (i) effort estimates are considered to be stochastic variables following a given probability function; (ii) instead of offering just one solution, the L-best (L > 1) solutions are determined. This provides support in finding the most appropriate solution, reflecting implicit preferences and constraints of the actual decision-maker. Stability intervals are given to indicate the validity of solutions and to allow the problem parameters to be changed without adversely affecting the optimality of the solution.	Programming; Uncertainty; Genetic algorithms; Software engineering; Industrial relations; Stochastic processes; Stability; Risk analysis; Algorithm design and analysis; Risk management; Resource Constraints; Software Release; Release Planning; Comprehensive Evaluation; Real-world Data; Software Projects; Stable Interval; Objective Function; Evaluation Method; Mutation Rate; Development Of Approaches; Risk Level; Decision Support; Software Engineering; Solution Approach; Crossover Operator; Set Of Requirements; Technical Constraints; Random Changes; Fitness Score; Precedence Constraints; Incremental Model; Crossover Rate	G. Ruhe; D. Greer	2003 International Symposium on Empirical Software Engineering, 2003. ISESE 2003. Proceedings.	https://doi.org/10.1109/ISESE.2003.1237987	"1.L.C. Briand, J. Feng and Y. Labiche, ""Experimenting with Genetic Algorithm to Devise Optimal Integration Test Orders"" in TR Department of Systems and Computer Engineering, Software Quality Engineering Laboratory Carleton University, 2002. Google Scholar; 2.J. Carnahan and R. Simha, ""Natures's Algorithms"", IEEE Potentials, pp. 21-24, April/May 2001. View Article  Google Scholar; 3.R. Charette, ""Software Engineering Risk Analysis and Management"" in , New York:McGraw-Hill, 1989. Google Scholar; 4.M.A. Cusamano and D.B. Yoffie, ""Competing on Internet Time: Lessons From Netscape and Its Battle with Microsoft"" in , New York:The Free Press, 1998. Google Scholar; 5.L. Davis, ""Handbook of Genetic Algorithms"" in , New York:Van Nostrand Reinhold, 1991. Google Scholar; 6.G. De Gregorio, ""Enterprise-wide Requirements and Decision Management"",             Proc. 9            th            International Symposium of the International Council on System Engineering          , 1999. Google Scholar; 7.J. Fitzgerald and A.F. Fitzgerald, ""A Methodology for Conducting A Risk Assessment"" in Designing Controls into Computerized System, Redwood, California:Jerry Fitzgerald & Associates, 1990. Google Scholar; 8.T. Gilb, ""Principles of Software Engineering Management"" in , Addison-Wesley, 1988. Google Scholar; 9.D. Greer, D. Bustard and T. Sunazuka, ""Prioritisation of System Changes using Cost-Benefit and Risk Assessments"", Fourth IEEE International Symposium on Requirements Engineering, pp. 180-187, June, 1999. CrossRef  Google Scholar; 10.D. Greer, D. Bustard and T. Sunazuka, ""Effecting and Measuring Risk Reduction in Software Development"", NEC Journal of Research and Development, vol. 40, no. 3, pp. 378-38, 1999. Google Scholar; 11.D. Greer and G. Ruhe, ""Software Release Planning: An Evolutionary and Iterative Approach"", Journal for Information and Software Technology, 2003. Google Scholar; 12.H.W. Hamacher and G. Ruhe, ""On Spanning Tree Problems with Multiple Objectives"", Annals of Operations Research, vol. 52, pp. 209-230, 1994. CrossRef  Google Scholar; 13.J.H. Holland, ""Adaptation in Natural and Artificial Systems"" in , Ann Arbor:University of Michigan Press, 1975. Google Scholar; 14.R. Jeffrey and L. Scott, ""Has twenty five years of empirical software engineering made a difference"", Proceedings Asia-Pacific Software Engineering Conference, pp. 539-546, 4-6 Dec. 2002. CrossRef  Google Scholar; 15.J. Karlsson, C. Wohlin and B. Regnell, ""An evaluation of methods for prioritizing Software Requirements"", Information and Software Technology, vol. 39, pp. 939-947, 1998. CrossRef  Google Scholar; 16.B.A. Kitchenham, S.L. Pfleeger, L.M. Pickard, P.W. Jones, D.C. Hoaglin, K. El-Emam, et al., ""Preliminary guidelines for empirical research in software engineering"", IEEE Transactions on Software Engineering, vol. 28, pp. 721-734, 2002. View Article  Google Scholar; 17.Palisade Corporation Palisade Corporation 31 Decker Road Newfield NY 14867, September 2002,  [online]  Available: www.palisade.com. Google Scholar; 18.Guide to RISKOptimizer: Simulation Optimization for Microsoft Excel Windows Version Release 1.0, 2001. Google Scholar; 19.V. Rajlich and P. Gosavi, ""A case study of unanticipated incremental change"", Proc. Software Maintenance, pp. 442-451, 2002. CrossRef  Google Scholar; 20.D.J. Reifer, ""How good are agile methods?"", IEEE Software, vol. 19, no. 4, pp. 16-18, 2002. View Article  Google Scholar; 21.G. Ruhe, ""Software Engineering Decision Support: Methodology and Applications"" in Innovations in Decision Support Systems, vol. 3, pp. 143-174, 2003. Google Scholar; 22.T.L. Saaty, ""The Analytic Hierarchy Process"" in , New York:McGraw Hill, 1980. Google Scholar"			Excluded	Excluded				2	IEEE		Quantitative studies in software release planning under risk and resource constraints	https://ieeexplore.ieee.org/document/1237987	IEEE	nan; Pages; Year; Bibtex
217	TrustSE	Software dependencies, work dependencies, and their impact on failures	Prior research has shown that customer-reported software faults are often the result of violated dependencies that are not recognized by developers implementing software. Many types of dependencies and corresponding measures have been proposed to help address this problem. The objective of this research is to compare the relative performance of several of these dependency measures as they relate to customer-reported defects. Our analysis is based on data collected from two projects from two independent companies. Combined, our data set encompasses eight years of development activity involving 154 developers. The principal contribution of this study is the examination of the relative impact that syntactic, logical, and work dependencies have on the failure proneness of a software system. While all dependencies increase the fault proneness, the logical dependencies explained most of the variance in fault proneness, while workflow dependencies had more impact than syntactic dependencies. These results suggest that practices such as rearchitecting, guided by the network structure of logical dependencies, hold promise for reducing defects.	Computer software selection and evaluation; Syntactics; Corresponding measures; Data sets; Development activity; Fault proneness; Logical dependencies; Metrics/measurement; Network structures; Organizational management; Quality analysis; Relative impact; Relative performance; Software fault; Software systems; Workflow dependency; Quality control; Computer software selection and evaluation;  Syntactics;  Corresponding measures;  Data sets;  Development activity;  Fault proneness;  Logical dependencies;  Metrics/measurement;  Network structures;  Organizational management;  Quality analysis;  Relative impact;  Relative performance;  Software fault;  Software systems;  Workflow dependency;  Quality control	Cataldo, Marcelo; Mockus, Audris; Roberts, Jeffrey A.; Herbsleb, James D.	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2009.42	"1.D. Atkins, T. Ball, T. Graves and A. Mockus, ""Using Version Control Data to Evaluate the Impact of Software Tools: A Case Study of the Version Editor"", IEEE Trans. Software Eng., no. 7, pp. 625-637, July 2002. View Article  Google Scholar; 2.C.Y. Baldwin and K.B. Clark, Design Rules: The Power of Modularity., 2000. Google Scholar; 3.S.R. Chidamber and C.F. Kemerer, ""A Metrics Suite for Object-Oriented Design"", IEEE Trans. Software Eng., vol. 20, no. 6, pp. 476-493, June 1994. View Article  Google Scholar; 4.K.C. Crowston, Toward a Coordination Cookbook: Recipes for Multi-Agent Action, 1991. Google Scholar; 5.B. Curtis, H. Kransner and N. Iscoe, ""A Field Study of Software Design Process for Large Systems"", Comm. ACM, vol. 31, pp. 1268-1287, 1988. CrossRef  Google Scholar; 6.C.R.B. de Souza, On the Relationship between Software Dependencies and Coordination: Field Studies and Tool Support, 2005. Google Scholar; 7.C.R.B. de Souza, D. Redmiles, L. Cheng, D. Millen and J. Patterson, ""How a Good Software Practice Thwarts Collaboration The Multiple Roles of APIs in Software Development"", Proc. Conf. Foundations of Software Eng., pp. 221-230, 2004. Google Scholar; 8.M. Eaddy, T. Zimmermannn, K.D. Sherwood, V. Garg, G.C. Murphy, N. Nagappan, et al., ""Do Crosscutting Concerns Cause Defects?"", IEEE Trans. Software Eng., vol. 34, no. 4, pp. 497-515, July/Aug. 2008. View Article  Google Scholar; 9.S.G. Eick, T.L. Graves, A.F. Karr, A. Mockus and P. Schuster, ""Visualizing Software Changes"", IEEE Trans. Software Eng., no. 4, pp. 396-412, Apr. 2002. View Article  Google Scholar; 10.S.D. Eppinger, D.E. Whitney, R.P. Smith and D.A. Gebala, ""A Model-Based Method for Organizing Tasks in Product Development"", Research in Eng. Design, vol. 6, pp. 1-13, 1994. CrossRef  Google Scholar; 11.D.H. Hutchens and V.R. Basili, ""System Structure Analysis: Clustering with Data Bindings"", IEEE Trans. Software Eng., no. 8, pp. 749-757, Aug. 1985. View Article  Google Scholar; 12.D. Krackhardt and J.D. Brass, ""Intra-Organizational Networks: The Micro Side"", Social Network Analysis: Research in the Social and Behavioral Sciences, pp. 207-229, 1994. CrossRef  Google Scholar; 13.A. Meneely, L. Williams, W. Snipes and J. Osborn, ""Predicting Failures with Developer Networks and Social Network Analysis"", Proc. Foundations of Software Eng., 2008. CrossRef  Google Scholar; 14.A. Mockus and D. Weiss, ""Predicting Risk of Software Changes"", Bell Labs Technical J., vol. 5, pp. 169-180, 2000. View Article  Google Scholar; 15.A. Mockus and D. Weiss, ""Globalization by Chunking: A Quantitative Approach"", IEEE Software, vol. 18, no. 2, pp. 30-37, Mar./Apr. 2001. View Article  Google Scholar; 16.K.H. Moeller and D. Paulish, ""An Empirical Investigation of Software Fault Distribution"", Proc. Intl Software Metrics Symp., pp. 82-90, 1993. View Article  Google Scholar; 17.N. Nagappan and T. Ball, ""Using Software Dependencies and Churn Metrics to Predict Field Failures: An Empirical Case Study"", Proc. First Intl Symp. Empirical Software Eng. and Measurement, pp. 363-373, 2007. View Article  Google Scholar; 18.N. Nagappan, B. Murphy and V.R. Basili, ""The Influence of Organizational Structure on Software Quality: An Empirical Case Study"", Proc. Intl Conf. Software Eng., pp. 521-530, 2008. View Article  Google Scholar; 19.D.L. Parnas, ""On the Criteria to Be Used in Decomposing Systems into Modules"", Comm. ACM, vol. 15, pp. 1053-1058, 1972. CrossRef  Google Scholar; 20.M. Pinzger, N. Nagappan and B. Murphy, ""Can Developer-Module Networks Predict Failures?"", Proc. Foundations of Software Eng., 2008. CrossRef  Google Scholar; 21.A. Sarma, Z. Noroozi and A. Van Der Hoek, ""Palantir: Raising Awareness among Configuration Management Workspaces"", Proc. Intl Conf. Software Eng., pp. 444-453, 2003. View Article  Google Scholar; 22.R.W. Selby and V.R. Basili, ""Analyzing Error-Prone System Structure"", IEEE Trans. Software Eng., vol. 17, no. 2, pp. 141-152, Feb. 1991. View Article  Google Scholar; 23.T. Schummer and J.M. Haake, ""Supporting Distributed Software Development by Modes of Collaboration"", Proc. European Conf. Computer-Supported Collaborative Work, pp. 79-89, 2001. Google Scholar; 24.N. Staudenmayer, Managing Multiple Interdependencies in Large Scale Software Development Projects, 1997. Google Scholar; 25.D.J. Watts, Small Worlds: The Dynamics of Networks between Order and Randomness., 1994. Google Scholar; 26.T. Zimmermannn and N. Nagappan, ""The Predicting Defects Using Network Analysis on Dependency Graphs"", Proc. Intl Conf. Software Eng., pp. 531-540, 2008. View Article  Google Scholar; 27.W.P. Stevens, G.J. Myers and L.L. Constantine, ""Structure Design"", IBM Systems J., vol. 13, pp. 231-256, 1974. View Article  Google Scholar; 28.E. Trainer, S. Quirk, C. de Souza and D. Redmiles, ""Bridging the Gap between Technical and Social Dependencies with Ariadne"", Proc. Workshop the Eclipse Technology Exchange, pp. 26-30, 2005. CrossRef  Google Scholar; 29.J.D. Thompson, Organizations in Action: Social Science Bases of Administrative Theory., 1967. Google Scholar; 30.E. von Hippel, ""Task Partitioning: An Innovation Process Variable"", Research Policy, vol. 19, pp. 407-418, 1990. CrossRef  Google Scholar"	864 - 878	"""@ARTICLE{Cataldo2009864,
    author = ""Cataldo, Marcelo and Mockus, Audris and Roberts, Jeffrey A. and Herbsleb, James D."",
    title = ""Software dependencies, work dependencies, and their impact on failures"",
    year = ""2009"",
    journal = ""IEEE Transactions on Software Engineering"",
    volume = ""35"",
    number = ""6"",
    pages = ""864 - 878"",
    doi = ""10.1109/TSE.2009.42"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-73549114022\&doi=10.1109\%2fTSE.2009.42\&partnerID=40\&md5=04c0d53b70627f469c68504e143ba19f"",
    affiliations = ""Research and Technology Center, Robert Bosch LLC, 2 North Shore Center, Pittsburgh, PA 15212, United States; Avaya Labs Research, Basking Ridge, NJ 07920, 233 Mt. Airy Road, United States; Palumbo Donahue School of Business, Duquesne University, Pittsburgh, PA 15282, 600 Forbes Avenue, United States; School of Computer Science, Carnegie Mellon University, Pittsburgh, PA 15213, 5000 Forbes Ave., United States"",
    abstract = ""Prior research has shown that customer-reported software faults are often the result of violated dependencies that are not recognized by developers implementing software. Many types of dependencies and corresponding measures have been proposed to help address this problem. The objective of this research is to compare the relative performance of several of these dependency measures as they relate to customer-reported defects. Our analysis is based on data collected from two projects from two independent companies. Combined, our data set encompasses eight years of development activity involving 154 developers. The principal contribution of this study is the examination of the relative impact that syntactic, logical, and work dependencies have on the failure proneness of a software system. While all dependencies increase the fault proneness, the logical dependencies explained most of the variance in fault proneness, while workflow dependencies had more impact than syntactic dependencies. These results suggest that practices such as rearchitecting, guided by the network structure of logical dependencies, hold promise for reducing defects. (c) 2009 IEEE."",
    author_keywords = ""Distribution/maintenance/enhancement; Metrics/measurement; Organizational management and coordination; Quality analysis and evaluation"",
    keywords = ""Computer software selection and evaluation; Syntactics; Corresponding measures; Data sets; Development activity; Fault proneness; Logical dependencies; Metrics/measurement; Network structures; Organizational management; Quality analysis; Relative impact; Relative performance; Software fault; Software systems; Workflow dependency; Quality control"",
    correspondence_address = ""M. Cataldo; Research and Technology Center, Robert Bosch LLC, 2 North Shore Center, Pittsburgh, PA 15212, United States; email: marcelo.cataldo@us.bosch.com"",
    issn = ""00985589"",
    coden = ""IESED"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 207""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software dependencies, work dependencies, and their impact on failures	https://ieeexplore.ieee.org/document/5166450	IEEE	
218	TrustSE	IusWare: A methodology for the evaluation and selection of software products	IusWare (IUStitia SoftWARis) is a methodology designed to evaluate software products in a formal and rigorous way. The methodology is based on the multicriteria decision aid approach and encompasses activities such as comparison, assessment and selection of software artefacts. The methodology defines an evaluation process which consists of two mam phases, designing an evaluation model and applying it. The design phase is made up of the following activities: first, identifying the actors relevant to the evaluation, their role, the purpose of the evaluation, the resources available and the object(s) of the evaluation; secondly, identifying the type of evaluation required: either a formal description of products or the ranking of products from the most preferred to the least preferred or a partitioning into two sets of the best and the remaining products; thirdly, defining a nonredundant hierarchy of evaluation attributes, often corresponding with the quality characteristics of quality models; fourthly, associating a measure, a criterion scale and a function to transform the measure scale into the criterion scale to each basic attribute; and finally, choosing an aggregation technique so as to aggregate values on criteria to form a recommendation for the selection. In the application phase attributes of products are measured, measures are transformed into values on criteria and aggregated to form a recommendation.	Decision support systems; Product design; Quality assurance; Aggregation techniques; Evaluation and selections; Evaluation modeling; Formal Description; Multi-criteria decision aids; Quality characteristic; Selection of software; Software products; Quality control; Decision support systems;  Product design;  Quality assurance;  Aggregation techniques;  Evaluation and selections;  Evaluation modeling;  Formal Description;  Multi-criteria decision aids;  Quality characteristic;  Selection of software;  Software products;  Quality control	Morisio, M.; Tsoukias, A.	Software Process Improvement	https://doi.org/10.1109/9781118156667.ch6		255 - 267	"""@BOOK{Morisio2011255,
    author = ""Morisio, M. and Tsoukias, A."",
    title = ""IusWare: A methodology for the evaluation and selection of software products"",
    year = ""2011"",
    journal = ""Software Process Improvement"",
    pages = ""255 - 267"",
    doi = ""10.1109/9781118156667.ch6"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85036521795\&doi=10.1109\%2f9781118156667.ch6\&partnerID=40\&md5=7b647fc20c3478e55c5a62fe62a0ae7d"",
    affiliations = ""Dipartimento di Automatica e Informatica, Politecnico di Torino, Corsa Duca degli Abruzzi, 24, Torino, 10129, Italy; LAMSADE, Universite Paris Dauphine, Place du Marechal de Lattre de Tassigny, Paris Cedex 16, F-75775, France"",
    abstract = ""IusWare (IUStitia SoftWARis) is a methodology designed to evaluate software products in a formal and rigorous way. The methodology is based on the multicriteria decision aid approach and encompasses activities such as comparison, assessment and selection of software artefacts. The methodology defines an evaluation process which consists of two mam phases, designing an evaluation model and applying it. The design phase is made up of the following activities: first, identifying the actors relevant to the evaluation, their role, the purpose of the evaluation, the resources available and the object(s) of the evaluation; secondly, identifying the type of evaluation required: either a formal description of products or the ranking of products from the most preferred to the least preferred or a partitioning into two sets of the best and the remaining products; thirdly, defining a nonredundant hierarchy of evaluation attributes, often corresponding with the quality characteristics of quality models; fourthly, associating a measure, a criterion scale and a function to transform the measure scale into the criterion scale to each basic attribute; and finally, choosing an aggregation technique so as to aggregate values on criteria to form a recommendation for the selection. In the application phase attributes of products are measured, measures are transformed into values on criteria and aggregated to form a recommendation. (c) 2001 by The Institute of Electrical and Electronics Engineers, Inc. All rights reserved."",
    keywords = ""Decision support systems; Product design; Quality assurance; Aggregation techniques; Evaluation and selections; Evaluation modeling; Formal Description; Multi-criteria decision aids; Quality characteristic; Selection of software; Software products; Quality control"",
    publisher = ""Wiley-IEEE Press"",
    isbn = ""978-111815666-7; 0769509991; 978-076950999-0"",
    language = ""English"",
    abbrev_source_title = ""Softw. Process Improvement"",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0""
}
"""	Included	Included				2	Scopus Signed In		IusWare: A methodology for the evaluation and selection of software products	https://www.scopus.com/record/display.uri?eid=2-s2.0-85036521795&origin=resultslist&sort=r-f&src=s&sid=26300861792ffdc333cb6233385df6ad&sot=b&sdt=b&s=TITLE%28iusware+a+methodology+for+the+evaluation+and+selection+of+software+products%29&sl=82&sessionSearchId=26300861792ffdc333cb6233385df6ad&relpos=0	Wiley-IEEE Press	nan; References
219	TrustSE	Theoretical and Empirical Validation of Software Product Measures	"In this paper we present and discuss a concrete method for validating measures of software product internal attributes and provide guidelines for its application. This method integrates much of the relevant previous work, such as measurement theory, properties of measures, and the Goal/Question/Metric paradigm (GQM). We identify two types of validation: theoretical and empirical. The former addresses the question ""is the measure measuring the attribute it is purporting to measure?"", and the latter addresses the question ""is the measure useful in the sense that it is related to other variables in expected ways?"""		Lionel Briand; Khaled El Emam; Sandro Morasca	International Software Engineering Research Network	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=ed6ded5a0881167c374b238cff2a49eb98f918b8			"""nan"""	Excluded	Excluded				2	Google Scholar		Theoretical and empirical validation of software product measures	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=ed6ded5a0881167c374b238cff2a49eb98f918b8	Citeseer	
220	TrustSE	An investigation of 'build vs. buy' decision for software acquisition by small to medium enterprises	Context The prevalence of computing and communication technologies, combined with the availability of sophisticated and highly specialised software packages from software vendors has made package acquisition a viable option for many organisations. While some research has addressed the factors that influence the selection of the software acquisition method in large organisations, little is known about the factors affecting SMEs. Objective To provide an understanding of factors that affect the decision process of software acquisition for SMEs. It is expected that results from this study: (i) will assist the SME decision process for software acquisition, and (ii) will assist policy makers in terms of developing appropriate guidelines for SME software acquisition. Method A positivist research perspective has been adopted involving semi-structured interviews in eight SMEs in Thailand with the interviewees assigning to each of the potential factors. Results The study found that the following factors affect both SMEs and large organisations: requirements fit, cost, scale and complexity, commoditization/flexibility, time, in-house experts, support structure, and operational factors. Factors mainly applying to large organisations were strategic role of the software, intellectual property concerns, and risk, Factors particularly relevant to SMEs (ubiquitous systems, availability of free download, and customizable to specific government/tax regulations). Conclusion The results suggest that: (i) when deciding on their software acquisition method, SMEs are generally less likely to pursue a long-term vision compared with larger organisations, possibly because SMEs mainly serve their local markets; and (ii) contrary to the large organisations, the role that the IT plays in SMEs may not be as vital to the SMEs' core business processes, to their supply chains, and/or to the management of their customer relationship. Furthermore, neither the level of technological intensity nor size of the SME appears to affect the ranks given by the interviewees for the various factors.	Public relations; Societies and institutions; Software packages; Supply chains; Buy vs. build; In-house development; SME; Software acquisition; Thailand; Mergers and acquisitions; Public relations;  Societies and institutions;  Software packages;  Supply chains;  Buy vs. build;  In-house development;  SME;  Software acquisition;  Thailand;  Mergers and acquisitions	Daneshgar, Farhad; Low, Graham C.; Worasinchai, Lugkana	Information and Software Technology	https://doi.org/10.1016/j.infsof.2013.03.009		1741 - 1750	"""@ARTICLE{Daneshgar20131741,
    author = ""Daneshgar, Farhad and Low, Graham C. and Worasinchai, Lugkana"",
    title = ""An investigation of 'build vs. buy' decision for software acquisition by small to medium enterprises"",
    year = ""2013"",
    journal = ""Information and Software Technology"",
    volume = ""55"",
    number = ""10"",
    pages = ""1741 - 1750"",
    doi = ""10.1016/j.infsof.2013.03.009"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880830526\&doi=10.1016\%2fj.infsof.2013.03.009\&partnerID=40\&md5=2d97a2587ee8f10c517deffa6fe3b0c8"",
    affiliations = ""Knowledge and Innovation Center, Bangkok University, Thailand; Australian School of Business, University of New South Wales, Wentworth Point, NSW 2127, 784/33 Hill Road, Australia"",
    abstract = ""Context The prevalence of computing and communication technologies, combined with the availability of sophisticated and highly specialised software packages from software vendors has made package acquisition a viable option for many organisations. While some research has addressed the factors that influence the selection of the software acquisition method in large organisations, little is known about the factors affecting SMEs. Objective To provide an understanding of factors that affect the decision process of software acquisition for SMEs. It is expected that results from this study: (i) will assist the SME decision process for software acquisition, and (ii) will assist policy makers in terms of developing appropriate guidelines for SME software acquisition. Method A positivist research perspective has been adopted involving semi-structured interviews in eight SMEs in Thailand with the interviewees assigning to each of the potential factors. Results The study found that the following factors affect both SMEs and large organisations: requirements fit, cost, scale and complexity, commoditization/flexibility, time, in-house experts, support structure, and operational factors. Factors mainly applying to large organisations were strategic role of the software, intellectual property concerns, and risk, Factors particularly relevant to SMEs (ubiquitous systems, availability of free download, and customizable to specific government/tax regulations). Conclusion The results suggest that: (i) when deciding on their software acquisition method, SMEs are generally less likely to pursue a long-term vision compared with larger organisations, possibly because SMEs mainly serve their local markets; and (ii) contrary to the large organisations, the role that the IT plays in SMEs may not be as vital to the SMEs' core business processes, to their supply chains, and/or to the management of their customer relationship. Furthermore, neither the level of technological intensity nor size of the SME appears to affect the ranks given by the interviewees for the various factors. (c) 2013 Elsevier B.V. All rights reserved."",
    author_keywords = ""Buy vs. build; In-house development; SME; Software acquisition; Software package; Thailand"",
    keywords = ""Public relations; Societies and institutions; Software packages; Supply chains; Buy vs. build; In-house development; SME; Software acquisition; Thailand; Mergers and acquisitions"",
    correspondence_address = ""F. Daneshgar; Australian School of Business, University of New South Wales, Wentworth Point, NSW 2127, 784/33 Hill Road, Australia; email: f.daneshgar@unsw.edu.au"",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 41""
}
"""	Excluded	Excluded				2	Scopus Signed In		An investigation of 'build vs. buy'decision for software acquisition by small to medium enterprises	https://www.scopus.com/record/display.uri?eid=2-s2.0-84880830526&origin=resultslist&sort=r-f&src=s&sid=7ecf47df5ea6e7ac4cee4f236f3ccea3&sot=b&sdt=b&s=TITLE%28an+investigation+of+build+vs+buy+decision+for+software+acquisition+by+small+to+medium+enterprises%29&sl=104&sessionSearchId=7ecf47df5ea6e7ac4cee4f236f3ccea3&relpos=0		nan; References; Publisher
221	TrustSE	A systematic literature review on the barriers faced by newcomers to open source software projects	Context Numerous open source software projects are based on volunteers collaboration and require a continuous influx of newcomers for their continuity. Newcomers face barriers that can lead them to give up. These barriers hinder both developers willing to make a single contribution and those willing to become a project member. Objective This study aims to identify and classify the barriers that newcomers face when contributing to open source software projects. Method We conducted a systematic literature review of papers reporting empirical evidence regarding the barriers that newcomers face when contributing to open source software (OSS) projects. We retrieved 291 studies by querying 4 digital libraries. Twenty studies were identified as primary. We performed a backward snowballing approach, and searched for other papers published by the authors of the selected papers to identify potential studies. Then, we used a coding approach inspired by open coding and axial coding procedures from Grounded Theory to categorize the barriers reported by the selected studies. Results We identified 20 studies providing empirical evidence of barriers faced by newcomers to OSS projects while making a contribution. From the analysis, we identified 15 different barriers, which we grouped into five categories: social interaction, newcomers' previous knowledge, finding a way to start, documentation, and technical hurdles. We also classified the problems with regard to their origin: newcomers, community, or product. Conclusion The results are useful to researchers and OSS practitioners willing to investigate or to implement tools to support newcomers. We mapped technical and non-technical barriers that hinder newcomers' first contributions. The most evidenced barriers are related to socialization, appearing in 75% (15 out of 20) of the studies analyzed, with a high focus on interactions in mailing lists (receiving answers and socialization with other members). There is a lack of in-depth studies on technical issues, such as code issues. We also noticed that the majority of the studies relied on historical data gathered from software repositories and that there was a lack of experiments and qualitative studies in this area.	Digital libraries; Joining; Open systems; Barriers to entry; Newcomers; Non-technical barriers; Onboarding; Open source software projects; Social interactions; Software repositories; Systematic literature review; Open source software; Digital libraries;  Joining;  Open systems;  Barriers to entry;  Newcomers;  Non-technical barriers;  Onboarding;  Open source software projects;  Social interactions;  Software repositories;  Systematic literature review;  Open source software	Steinmacher, Igor; Graciotto Silva, Marco Aurelio; Gerosa, Marco Aurelio; Redmiles, David F.	Information and Software Technology	https://doi.org/10.1016/j.infsof.2014.11.001		67 - 85	"""@ARTICLE{Steinmacher201567,
    author = ""Steinmacher, Igor and Graciotto Silva, Marco Aurelio and Gerosa, Marco Aurelio and Redmiles, David F."",
    title = ""A systematic literature review on the barriers faced by newcomers to open source software projects"",
    year = ""2015"",
    journal = ""Information and Software Technology"",
    volume = ""59"",
    pages = ""67 - 85"",
    doi = ""10.1016/j.infsof.2014.11.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921029939\&doi=10.1016\%2fj.infsof.2014.11.001\&partnerID=40\&md5=47d09c68f25cd15236c4254c86b50b26"",
    affiliations = ""Computing Department, Federal University of Technology - Parana, Brazil; Computer Science Department, University of Sao Paulo, Brazil; Department of Informatics, University of California, Irvine, United States"",
    abstract = ""Context Numerous open source software projects are based on volunteers collaboration and require a continuous influx of newcomers for their continuity. Newcomers face barriers that can lead them to give up. These barriers hinder both developers willing to make a single contribution and those willing to become a project member. Objective This study aims to identify and classify the barriers that newcomers face when contributing to open source software projects. Method We conducted a systematic literature review of papers reporting empirical evidence regarding the barriers that newcomers face when contributing to open source software (OSS) projects. We retrieved 291 studies by querying 4 digital libraries. Twenty studies were identified as primary. We performed a backward snowballing approach, and searched for other papers published by the authors of the selected papers to identify potential studies. Then, we used a coding approach inspired by open coding and axial coding procedures from Grounded Theory to categorize the barriers reported by the selected studies. Results We identified 20 studies providing empirical evidence of barriers faced by newcomers to OSS projects while making a contribution. From the analysis, we identified 15 different barriers, which we grouped into five categories: social interaction, newcomers' previous knowledge, finding a way to start, documentation, and technical hurdles. We also classified the problems with regard to their origin: newcomers, community, or product. Conclusion The results are useful to researchers and OSS practitioners willing to investigate or to implement tools to support newcomers. We mapped technical and non-technical barriers that hinder newcomers' first contributions. The most evidenced barriers are related to socialization, appearing in 75\% (15 out of 20) of the studies analyzed, with a high focus on interactions in mailing lists (receiving answers and socialization with other members). There is a lack of in-depth studies on technical issues, such as code issues. We also noticed that the majority of the studies relied on historical data gathered from software repositories and that there was a lack of experiments and qualitative studies in this area. (c) 2014 Elsevier B.V. All rights reserved."",
    author_keywords = ""Barriers to entry; Joining; Newcomers; Onboarding; Open source software; Systematic literature review"",
    keywords = ""Digital libraries; Joining; Open systems; Barriers to entry; Newcomers; Non-technical barriers; Onboarding; Open source software projects; Social interactions; Software repositories; Systematic literature review; Open source software"",
    correspondence_address = ""I. Steinmacher; UTFPR Campus Campo Mourao, Campo-Mourao, PR, Via Rosalina Maria dos Santos 1233, CEP 87301-899, Brazil; email: igorfs@utfpr.edu.br"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 154""
}
"""	Excluded	Excluded				2	Scopus Signed In		A systematic literature review on the barriers faced by newcomers to open source software projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-84921029939&origin=resultslist&sort=r-f&src=s&sid=c247558aae960629bb3da17810c6de39&sot=b&sdt=b&s=TITLE%28a+systematic+literature+review+on+the+barriers+faced+by+newcomers+to+open+source+software+projects%29&sl=105&sessionSearchId=c247558aae960629bb3da17810c6de39&relpos=0	Elsevier B.V	nan; References
222	TrustSE	Scalable trust establishment with software reputation	Users and administrators are often faced with the choice between different software solutions, sometimes even have to assess the security of complete software systems. With sufficient time and resources, such decisions can be based on extensive testing and review. However, in practice this is often too expensive and time consuming.In this paper, we present a pragmatic, but scalable approach for the trustworthiness assessment of software programs based on their security history. The approach can be used to, e.g. automatically sort programs in an App store by their security record or to assess the trustworthiness of complex software systems in remote attestation schemes. Our prototype implementation for the popular Debian GNU/Linux system achieves good prediction accuracy for individual programs as well as entire systems.	reputation;  software security; reputation, software security	Bugiel, Sven; Davi, Lucas Vincenzo; Schulz, Steffen	STC '11: Proceedings of the sixth ACM workshop on Scalable trusted computing	https://doi.org/10.1145/2046582.2046587		15-24	"""@inproceedings{10.1145/2046582.2046587,
    author = ""Bugiel, Sven and Davi, Lucas Vincenzo and Schulz, Steffen"",
    title = ""Scalable trust establishment with software reputation"",
    year = ""2011"",
    isbn = ""9781450310017"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2046582.2046587"",
    doi = ""10.1145/2046582.2046587"",
    abstract = ""Users and administrators are often faced with the choice between different software solutions, sometimes even have to assess the security of complete software systems. With sufficient time and resources, such decisions can be based on extensive testing and review. However, in practice this is often too expensive and time consuming.In this paper, we present a pragmatic, but scalable approach for the trustworthiness assessment of software programs based on their security history. The approach can be used to, e.g. automatically sort programs in an App store by their security record or to assess the trustworthiness of complex software systems in remote attestation schemes. Our prototype implementation for the popular Debian GNU/Linux system achieves good prediction accuracy for individual programs as well as entire systems."",
    booktitle = ""Proceedings of the Sixth ACM Workshop on Scalable Trusted Computing"",
    pages = ""15-24"",
    numpages = ""10"",
    keywords = ""reputation, software security"",
    location = ""Chicago, Illinois, USA"",
    series = ""STC '11""
}
"""	Included	Included				2	ACM		Scalable trust establishment with software reputation	https://doi.org/10.1145/2046582.2046587	Association for Computing Machinery	nan; References; Link
223	TrustSE	Free/open source software development	The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development.	empirical studies;  free software;  open source software;  socio-technical relationships;  software development practices; empirical studies, free software, open source software, socio-technical relationships, software development practices	Scacchi, Walt	ESEC-FSE '07: Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering	https://doi.org/10.1145/1287624.1287689		459-468	"""@inproceedings{10.1145/1287624.1287689,
    author = ""Scacchi, Walt"",
    title = ""Free/open source software development"",
    year = ""2007"",
    isbn = ""9781595938114"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1287624.1287689"",
    doi = ""10.1145/1287624.1287689"",
    abstract = ""The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development."",
    booktitle = ""Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering"",
    pages = ""459-468"",
    numpages = ""10"",
    keywords = ""empirical studies, free software, open source software, socio-technical relationships, software development practices"",
    location = ""Dubrovnik, Croatia"",
    series = ""ESEC-FSE '07""
}
"""	Excluded	Excluded				2	ACM		Clustering and dependencies in free/open source software development: Methodology and tools	https://doi.org/10.1145/1287624.1287689	Association for Computing Machinery	nan; References; Link
224	TrustSE	The open source movement: A revolution in software development	The open source movement is based on a radical retake on copyright law to create high quality software whose use and development are guaranteed to the public. In this article we trace the history of the movement, highlighting its interaction with intellectual property law. The movement has spawned open source software (OSS) communities where developers and users meet to create software that meets their needs. We discuss the demographic profile of OSS participants, their ideology, their motivations, and the process of OSS development. Then we examine the impacts of OSS on society as a whole from the perspective of the information society, discussing the effects on OSS developers, users of OSS, and society at large, particularly in developing countries.	Computer software; Developing countries; Software design; Software engineering; Virtual reality; Demographic profile; High-quality software; Information society; Open source movement; Open Source Software; Social impact; Software development methodologies; Virtual community; Open systems; Computer software;  Developing countries;  Software design;  Software engineering;  Virtual reality;  Demographic profile;  High-quality software;  Information society;  Open source movement;  Open Source Software;  Social impact;  Software development methodologies;  Virtual community;  Open systems	Carillo, Kevin; Okoli, Chitu	Journal of Computer Information Systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-60849133885&origin=resultslist&sort=r-f&src=s&sid=4d2c26109453d155553ec01f087b8cf1&sot=b&sdt=b&s=TITLE%28the+open+source+movement+a+revolution+in+software+development%29&sl=68&sessionSearchId=4d2c26109453d155553ec01f087b8cf1&relpos=0		1 - 9	"""@ARTICLE{Carillo20081,
    author = ""Carillo, Kevin and Okoli, Chitu"",
    title = ""The open source movement: A revolution in software development"",
    year = ""2008"",
    journal = ""Journal of Computer Information Systems"",
    volume = ""49"",
    number = ""2"",
    pages = ""1 - 9"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-60849133885\&partnerID=40\&md5=fc45878c42200a71b03d52f83343c977"",
    affiliations = ""Concordia University, Montreal, QC, Canada"",
    abstract = ""The open source movement is based on a radical retake on copyright law to create high quality software whose use and development are guaranteed to the public. In this article we trace the history of the movement, highlighting its interaction with intellectual property law. The movement has spawned open source software (OSS) communities where developers and users meet to create software that meets their needs. We discuss the demographic profile of OSS participants, their ideology, their motivations, and the process of OSS development. Then we examine the impacts of OSS on society as a whole from the perspective of the information society, discussing the effects on OSS developers, users of OSS, and society at large, particularly in developing countries."",
    author_keywords = ""Open source software; Social impacts of computing; Software development methodologies; Software engineering; Virtual communities"",
    keywords = ""Computer software; Developing countries; Software design; Software engineering; Virtual reality; Demographic profile; High-quality software; Information society; Open source movement; Open Source Software; Social impact; Software development methodologies; Virtual community; Open systems"",
    issn = ""08874417"",
    language = ""English"",
    abbrev_source_title = ""J. Comput. Inf. Syst."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 32""
}
"""	Excluded	Excluded				2	Scopus Signed In		The open source movement: a revolution in software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-60849133885&origin=resultslist&sort=r-f&src=s&sid=4d2c26109453d155553ec01f087b8cf1&sot=b&sdt=b&s=TITLE%28the+open+source+movement+a+revolution+in+software+development%29&sl=68&sessionSearchId=4d2c26109453d155553ec01f087b8cf1&relpos=0		nan; References; Publisher
225	TrustSE	Effective work practices for software engineering: free/libre open source software development	We review the literature on Free/Libre Open Source Software (FLOSS) development and on software development, distributed work and teams more generally to develop a theoretical model to explain the performance of FLOSS teams. The proposed model is based on Hackman's [34] model of effectiveness of work teams, with coordination theory [52] and collective mind [79] to extend Hackman's model by elaborating team practices relevant to effectiveness in software development. We propose a set of propositions to guide further research.	team effectiveness;  free and open source software;  coordination theory;  collective mind theory; team effectiveness, free and open source software, coordination theory, collective mind theory	Crowston, Kevin; Annabi, Hala; Howison, James; Masango, Chengetai	WISER '04: Proceedings of the 2004 ACM workshop on Interdisciplinary software engineering research	https://doi.org/10.1145/1029997.1030003		18-26	"""@inproceedings{10.1145/1029997.1030003,
    author = ""Crowston, Kevin and Annabi, Hala and Howison, James and Masango, Chengetai"",
    title = ""Effective work practices for software engineering: free/libre open source software development"",
    year = ""2004"",
    isbn = ""1581139888"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1029997.1030003"",
    doi = ""10.1145/1029997.1030003"",
    abstract = ""We review the literature on Free/Libre Open Source Software (FLOSS) development and on software development, distributed work and teams more generally to develop a theoretical model to explain the performance of FLOSS teams. The proposed model is based on Hackman's [34] model of effectiveness of work teams, with coordination theory [52] and collective mind [79] to extend Hackman's model by elaborating team practices relevant to effectiveness in software development. We propose a set of propositions to guide further research."",
    booktitle = ""Proceedings of the 2004 ACM Workshop on Interdisciplinary Software Engineering Research"",
    pages = ""18-26"",
    numpages = ""9"",
    keywords = ""team effectiveness, free and open source software, coordination theory, collective mind theory"",
    location = ""Newport Beach, CA, USA"",
    series = ""WISER '04""
}
"""	Excluded	Excluded				2	ACM		Effective work practices for software engineering: free/libre open source software development	https://doi.org/10.1145/1029997.1030003	Association for Computing Machinery	nan; References; Link
226	TrustSE	A market-based approach to software evolution	"Software correctness has bedeviled the field of computer science since its inception. Software complexity has increased far more quickly than our ability to control it, reaching sizes that are many orders of magnitude beyond the reach of formal or automated verification techniques.We propose a new paradigm for evaluating ""correctness"" based on a rich market ecosystem in which coalitions of users bid for features and fixes. Developers, testers, bug reporters, and analysts share in the rewards for responding to those bids. In fact, we suggest that the entire software development process can be driven by a disintermediated market-based mechanism driven by the desires of users and the capabilities of developers.The abstract, unspecifiable, and unknowable notion of absolute correctness is then replaced by quantifiable notions of correctness demand (the sum of bids for bugs) and correctness potential (the sum of the available profit for fixing those bugs). We then sketch the components of a market design intended to identify bugs, elicit demand for fixing bugs, and source workers for fixing bugs. The ultimate goal is to achieve a more appropriate notion of correctness, in which market forces drive software towards a correctness equilibrium in which all bugs for which there is enough value, and with low enough cost to fix, are fixed."	markets;  mechanism design;  software correctness; markets, mechanism design, software correctness	Bacon, David F.; Chen, Yiling; Parkes, David; Rao, Malvika	OOPSLA '09: Proceedings of the 24th ACM SIGPLAN conference companion on Object oriented programming systems languages and applications	https://doi.org/10.1145/1639950.1640066		973-980	"""@inproceedings{10.1145/1639950.1640066,
    author = ""Bacon, David F. and Chen, Yiling and Parkes, David and Rao, Malvika"",
    title = ""A market-based approach to software evolution"",
    year = ""2009"",
    isbn = ""9781605587684"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1639950.1640066"",
    doi = ""10.1145/1639950.1640066"",
    abstract = {Software correctness has bedeviled the field of computer science since its inception. Software complexity has increased far more quickly than our ability to control it, reaching sizes that are many orders of magnitude beyond the reach of formal or automated verification techniques.We propose a new paradigm for evaluating ""correctness"" based on a rich market ecosystem in which coalitions of users bid for features and fixes. Developers, testers, bug reporters, and analysts share in the rewards for responding to those bids. In fact, we suggest that the entire software development process can be driven by a disintermediated market-based mechanism driven by the desires of users and the capabilities of developers.The abstract, unspecifiable, and unknowable notion of absolute correctness is then replaced by quantifiable notions of correctness demand (the sum of bids for bugs) and correctness potential (the sum of the available profit for fixing those bugs). We then sketch the components of a market design intended to identify bugs, elicit demand for fixing bugs, and source workers for fixing bugs. The ultimate goal is to achieve a more appropriate notion of correctness, in which market forces drive software towards a correctness equilibrium in which all bugs for which there is enough value, and with low enough cost to fix, are fixed.},
    booktitle = ""Proceedings of the 24th ACM SIGPLAN Conference Companion on Object Oriented Programming Systems Languages and Applications"",
    pages = ""973-980"",
    numpages = ""8"",
    keywords = ""markets, mechanism design, software correctness"",
    location = ""Orlando, Florida, USA"",
    series = ""OOPSLA '09""
}
"""	Excluded	Excluded				2	ACM		A market-based approach to software evolution	https://doi.org/10.1145/1639950.1640066	Association for Computing Machinery	nan; References; Link
227	TrustSE	Open Source Software from Commercial Firms - Tools, Complements, and Collective Invention	"In recent years, open source software such as GNU/Linux, Apache, or Perl has received considerable attention. Commonly, the term is understood to imply that the software is developed by geographically dispersed volunteers. While this is true in many cases, corporate interest in and contributions to open source software have recently increased enormously, IBM being the most prominent example. The purpose of this paper is to analyze firms' benefits and risks from contributing to software that does not allow to charge licensing fees, and that can be freely used and even modified by anyone. Corporate contributors to open source software are classified into users of the software and sellers of complements. For both groups, one of the biggest potential benefits from contributing to open source software is that outside parties, individuals as well as other firms, join in the collaborative development of the software. The central question is if this benefit does indeed materialize. Case studies, literature analysis, and a theoretical discussion show that an ""open source community of commercial firms"" is indeed possible, provided certain conditions are fulfilled. Finally, a parallel to the phenomenon of ""collective invention"" is drawn."	open source software; complements; collective invention	Joachim Henkel	Zeitschrift fur Betriebswirtschaft	https://www.researchgate.net/profile/Joachim-Henkel/publication/251228522_Open_Source_Software_from_Commercial_Firms_-_Tools_Complements_and_Collective_Invention/links/54c3bb140cf219bbe4ec1cf5/Open-Source-Software-from-Commercial-Firms-Tools-Complements-and-Collective-Invention.pdf			"""nan"""	Excluded	Excluded				2	Google Scholar		Open source software from commercial firms–tools, complements, and collective invention	https://www.researchgate.net/profile/Joachim-Henkel/publication/251228522_Open_Source_Software_from_Commercial_Firms_-_Tools_Complements_and_Collective_Invention/links/54c3bb140cf219bbe4ec1cf5/Open-Source-Software-from-Commercial-Firms-Tools-Complements-and-Collective-Invention.pdf		
228	TrustSE	Towards a metric for open source software quality	Software quality is more than just conformance to a set of requirements and represents many attributes related to each other that make up a piece of software. An important part of this measure depends on the underlying processes and methodologies used in the engineering of software. We present an early exposition towards a quality model for open source software (OSS). We describe some basic notions of quality for OSS and present a basic model, where quality notions consist of various factors that influence such quality. The purpose of this effort is ultimately to develop a quantitative metric for software quality.	Open source;; Quality model;; Software development;; Software quality	Shaikh, Siraj A.; Cerone, Antonio	Electronic Communications of the EASST	https://doi.org/10.14279/tuj.eceasst.20.279.287	Arief, B., Gacek, C., Lawrie, T.Software Architectures and Open Source Software-Where can Research Leverage the Most?(2001)In Proceedings of 1st Workshop on Open Source Software Engineering, pp. 3-5.Cited 5 times.Toronto, Canada; Breuer, P.T., Pickin, S.; Open Source Report 2008. 2008http://www.coverity.com; Electric Fence debugger. Last Accessed on 7th December 2006http://perens.com/FreeSoftware/ElectricFence/; Foley, R.(2004)Perl Debugger Pocket ReferenceO'Reilly Press, January; Gacek, C., Arief, B.; de Groot, A., Kugler, S., Adams, P.J., Gousios, G.; Gousios, G., Karakoidas, V., Stroggylos, K., Louridas, P., Vlachos, V., Spinellis, D.Software Quality Assessment of Open Source Software(2007)Proceedings of the 11th Panhellenic Conference on Informatics.Cited 12 times.; Hedberg, H., Iivari, N., Rajanen, M., Harjumaa, L.Software Architectures and Open Source Software-Where can Research Leverage the Most?(2007)In Proceedings of First Workshop on Emerging Trends in FLOSS Research and Development, pp. 1-5.Minneapolis, USA (FLOSS'07); Halloran, T.J., Scherlis, W.L.High Quality and Open Source Software Practices(2002)2nd Workshop on Open Source Software Engineering.Cited 41 times.May; (1999)IEEE Std 610.12-1990-IEEE Standard Glossary of Software Engineering Terminology. February; McConnell, S.; Mockus, A., Fielding, R.T., Herbsleb, J.D.; Michlmayr, M., Hunt, F., Probert, D.; Michlmayr, M.; Muffatto, M.(2006)Open Source-A Multidisciplinary Approach.Cited 39 times.Imperial College Press; Pressman, S.R.(2000)Software Engineering-A Practitioner's Approach.Cited 5644 times.McGraw-Hill International, London; Schmidt, D.C., Porter, A.Leveraging Open-Source Communities to improve the Quality and Performance of Open-Source Software(2001)Proceedings of 1st Workshop on Open Source Software Engineering, Toronto, Canada.Cited 32 times.; Stallman, R.M., Pesch, R., Shebs, S.(2002)Debugging with GDB:The GNU Source-Level Debugger.Cited 134 times.Free Software Foundation, January; Porter, A., Yilmaz, C., Memon, A.M., Krishna, A.S., Schmidt, D.C., Gokhale, A.; Zhao, L., Elbaum, S.A survey on quality related activities in open source(2000)ACM SIGSOFT Software Engineering Notes, 25 (3), pp. 53-57.Cited 31 times.May. ACM Press New York, NY, USA; Zhao, L., Elbaum, S.		"""@ARTICLE{Shaikh2009,
    author = ""Shaikh, Siraj A. and Cerone, Antonio"",
    title = ""Towards a metric for open source software quality"",
    year = ""2009"",
    journal = ""Electronic Communications of the EASST"",
    volume = ""20"",
    doi = ""10.14279/tuj.eceasst.20.279.287"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84901752599\&doi=10.14279\%2ftuj.eceasst.20.279.287\&partnerID=40\&md5=4efd647851ecd1dbdee718b86bf2646d"",
    affiliations = ""Department of Computing and the Digital Environment, Faculty of Engineering and Computing, Coventry University, Coventry, United Kingdom; International Institute for Software Technology, United Nations University, Macao"",
    abstract = ""Software quality is more than just conformance to a set of requirements and represents many attributes related to each other that make up a piece of software. An important part of this measure depends on the underlying processes and methodologies used in the engineering of software. We present an early exposition towards a quality model for open source software (OSS). We describe some basic notions of quality for OSS and present a basic model, where quality notions consist of various factors that influence such quality. The purpose of this effort is ultimately to develop a quantitative metric for software quality. (c) Foundations and Techniques for Open Source Certification 2009."",
    author_keywords = ""Open source; Quality model; Software development; Software quality"",
    publisher = ""Universitatsbibliothek TU Berlin"",
    issn = ""18632122"",
    language = ""English"",
    abbrev_source_title = ""Electron. Commun. EASST"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 8""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Towards a metric for Open Source Software Quality	https://www.scopus.com/record/display.uri?eid=2-s2.0-84901752599&origin=resultslist&sort=r-f&src=s&sid=81004a8b64d19c8d218ecb03f6b783e7&sot=b&sdt=b&s=TITLE%28towards+a+metric+for+open+source+software+quality%29&sl=56&sessionSearchId=81004a8b64d19c8d218ecb03f6b783e7&relpos=0	Universitatsbibliothek TU Berlin	nan; Pages
229	TrustSE	Appropriation and appropriability in open source software	Firms in open source software (OSS) are active in a field encompassing all the characteristics of a public good, given the non-excludability and non-rivalry nature of OSS. The fact that many important inputs to the innovative process are public should not be taken to mean that innovators are prevented from capturing private returns. The objective of this paper is to explore how firms appropriate returns from innovations that are created outside the boundaries of firms and in the public domain, using the case of OSS. To do so, the paper draws upon an explorative multiple case study of five small firms that attempt to appropriate returns from OSS, with rich empirical evidence from various data sources. The cases illustrate how firms try a variety of approaches to appropriate adequate returns, and suggest that selling services is the dominant trend. Firms also balance the relative inefficiency of traditional means of intellectual property rights such as patents by putting greater emphasis on first-mover advantages and creating network externalities.	Appropriability regimes;; Appropriating returns;; Open source software;; Private-collective innovation	Dahlander, Linus	Exploiting Intellectual Property to Promote Innovation and Create Value	https://doi.org/10.1142/9781786343512_0002		3 - 31	"""@BOOK{Dahlander20173,
    author = ""Dahlander, Linus"",
    title = ""Appropriation and appropriability in open source software"",
    year = ""2017"",
    journal = ""Exploiting Intellectual Property to Promote Innovation and Create Value"",
    pages = ""3 - 31"",
    doi = ""10.1142/9781786343512\_0002"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041615736\&doi=10.1142\%2f9781786343512\_0002\&partnerID=40\&md5=832f5f592689ba55887e2eb37cd29edc"",
    affiliations = ""Department of Technology Management and Economics, Chalmers University of Technology, Sweden"",
    abstract = ""Firms in open source software (OSS) are active in a field encompassing all the characteristics of a public good, given the non-excludability and non-rivalry nature of OSS. The fact that many important inputs to the innovative process are public should not be taken to mean that innovators are prevented from capturing private returns. The objective of this paper is to explore how firms appropriate returns from innovations that are created outside the boundaries of firms and in the public domain, using the case of OSS. To do so, the paper draws upon an explorative multiple case study of five small firms that attempt to appropriate returns from OSS, with rich empirical evidence from various data sources. The cases illustrate how firms try a variety of approaches to appropriate adequate returns, and suggest that selling services is the dominant trend. Firms also balance the relative inefficiency of traditional means of intellectual property rights such as patents by putting greater emphasis on first-mover advantages and creating network externalities. (c) 2018 by World Scientific Publishing Europe Ltd."",
    author_keywords = ""Appropriability regimes; Appropriating returns; Open source software; Private-collective innovation"",
    publisher = ""World Scientific Publishing Co."",
    isbn = ""978-178634351-2; 978-178634350-5"",
    language = ""English"",
    abbrev_source_title = ""Exploiting Intellect. Property to Promote Innovation and Create Value"",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0""
}
"""	Excluded	Excluded				2	Scopus Signed In		Appropriation and appropriability in open source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-85041615736&origin=resultslist&sort=r-f&src=s&sid=3c9ae19c7532ac1656704e7c530fe412&sot=b&sdt=b&s=TITLE%28appropriation+and+appropriability+in+open+source+software%29&sl=64&sessionSearchId=3c9ae19c7532ac1656704e7c530fe412&relpos=0	World Scientific Publishing Co	nan; References
230	TrustSE	Vulnerability Scrying Method for Software Vulnerability Discovery Prediction Without a Vulnerability Database	Predicting software vulnerability discovery trends can help improve secure deployment of software applications and facilitate backup provisioning, disaster recovery, diversity planning, and maintenance scheduling. Vulnerability discovery models (VDMs) have been studied in the literature as a means to capture the underlying stochastic process. Based on the VDMs, a few vulnerability prediction schemes have been proposed. Unfortunately, all these schemes suffer from the same weaknesses: they require a large amount of historical vulnerability data from a database (hence they are not applicable to a newly released software application), their precision depends on the amount of training data, and they have significant amount of error in their estimates. In this work, we propose vulnerability scrying, a new paradigm for vulnerability discovery prediction based on code properties. Using compiler-based static analysis of a codebase, we extract code properties such as code complexity (cyclomatic complexity), and more importantly code quality (compliance with secure coding rules), from the source code of a software application. Then we propose a stochastic model which uses code properties as its parameters to predict vulnerability discovery. We have studied the impact of code properties on the vulnerability discovery trends by performing static analysis on the source code of four real-world software applications. We have used our scheme to predict vulnerability discovery in three other software applications. The results show that even though we use no historical data in our prediction, vulnerability scrying can predict vulnerability discovery with better precision and less divergence over time.	Software; Predictive models; Mathematical model; Security; Data models; History; Databases; Security Vulnerabilities; Source Code; Real-world Applications; Coded Based; Software Applications; Static Analysis; Prediction Scheme; Impact Of Properties; Software Quality; Coding Properties; Amount Of Historical Data; Vulnerability Prediction; Discovery Rate; Prediction Accuracy; Statistical Models; Compassion; Gross Domestic Product; Rate Of Return; Random Walk; Case Of Model; Control Flow Graph; Vulnerability Assessment; Sequence Of Random Variables; Abstract Syntax Tree; Effect Hypothesis; Half Of The Data; Popular Application; Software Vendors; Constant Model; Dependency Graph; Code security; static analysis; vulnerability discovery model; vulnerability prediction	Sanaz Rahimi; Mehdi Zargham	IEEE Transactions on Reliability	https://doi.org/10.1109/TR.2013.2257052	"1.National Vulnerability Database, 2011. Google Scholar; 2.National Institute of Standards and Technology, 2011. Google Scholar; 3.D. Mellado, E. Fernndez-Medina and M. Piattini, ""A comparison of software designsecurity metrics"", Proc. 4th Eur. Conf. Software Architecture: Companion Volume, pp. 236-242, 2010,  [online]  Available: http://doi.acm.org/10.1145/1842752.1842797. CrossRef  Google Scholar; 4.E. Rescorla, ""Is finding security holes agood idea?"", IEEE Security Privacy, vol. 3, no. 1, pp. 14-19, Jan./Feb. 2005. View Article  Google Scholar; 5.O. Alhazmi and Y. Malaiya, ""Prediction capabilities ofvulnerability discovery models"", Proc. RAMS '06. Annu. Rel. Maintainability Symp., pp. 86-91, 2006. View Article  Google Scholar; 6.The Open Source Vulnerability Database, 2011. Google Scholar; 7.O. Alhazmi and Y. Malaiya, ""Application of vulnerabilitydiscovery models to major operating systems"", IEEE Trans. Rel., vol. 57, no. 1, pp. 14-22, Mar. 2008. View Article  Google Scholar; 8.J. D. Musa and K. Okumoto, ""A logarithmic poisson executiontime model for software reliability measurement"", Proc. 7th Int. Conf. Software Eng., pp. 230-238, 1984. Google Scholar; 9.R. J. Anderson, ""Security in open versus closedsystems--The dance of Boltzmann Coase and Moore"", Proc. Conf. Open Source Software Econ.omics, pp. 5, 2002. Google Scholar; 10.M. Widenius and D. Axmark, Mysql Reference Manual, USA, CA, Sebastopol:O'Reilly Associates, Inc., 2002. Google Scholar; 11.I. Chowdhury and M. Zulkernine, ""Can complexity coupling andcohesion metrics be used as early indicators of vulnerabilities?"", Proc. 2010 ACM Symp. Appl. Comput., pp. 1963-1969, 2010,  [online]  Available: http://doi.acm.org/10.1145/1774088.1774504. CrossRef  Google Scholar; 12.T. J. McCabe, ""A complexity measure"", Proc. 2nd Int. Conf. Software Eng., pp. 407, 1976,  [online]  Available: http://portal.acm.org/citation.cfm?id=800253.807712. View Article  Google Scholar; 13.M. Schordan and D. Quinlan, ""A source-to-source architecturefor user-defined optimizations"", Proc. Joint Modular Lang. Conf. (JMLC'03), pp. 214-223, 2003. CrossRef  Google Scholar; 14.Compass Manual, 2009,  [online]  Available: http://www.rosecompiler.org/compass.pdf. Google Scholar; 15.A. Mockus and L. G. Votta, ""Identifying reasons for softwarechanges using historic databases"", Proc. Int. Conf. Software Maintenance (ICSM'00), pp. 120, 2000. View Article  Google Scholar; 16.M. M. Lehman, D. E. Perry and J. F. Ramil, ""Implications of evolution metricson software maintenance"", Proc. Int. Conf. Software Maintenance, pp. 208, 1998. View Article  Google Scholar; 17.R. Purushothaman and D. E. Perry, ""Toward understanding the rhetoricof small source code changes"", IEEE Trans. Software Eng., vol. 31, no. 6, pp. 511-526, Jun. 2005. View Article  Google Scholar; 18.G. Vache, ""Vulnerability analysis fora quantitative security evaluation"", Proc. 2009 3rd Int. Symp. Empirical Software Eng. Measur., pp. 526-534, 2009,  [online]  Available: http://dx.doi.org/10.1109/ESEM.2009.5315969. View Article  Google Scholar; 19.F. Massacci and V. H. Nguyen, ""Which is the right source forvulnerability studies?: An empirical analysis on mozilla firefox"", Proc. 6th Int. Workshop Security Measur. Metrics, pp. 4:1-4:8, 2010,  [online]  Available: http://doi.acm.org/10.1145/1853919.1853925. CrossRef  Google Scholar; 20.S. Clark, S. Frei, M. Blaze and J. Smith, ""Familiarity breeds contempt: The honeymoon effect and therole of legacy code in zero-day vulnerabilities"", Proc. 26th Annu. Comput. Security Appl. Conf., pp. 251-260, 2010,  [online]  Available: http://doi.acm.org/10.1145/1920261.1920299. CrossRef  Google Scholar; 21.S. Frei, M. May, U. Fiedler and B. Plattner, ""Large-scale vulnerability analysis"", Proc. 2006 SIGCOMM Workshop Large-Scale Attack Defense, pp. 131-138, 2006,  [online]  Available: http://doi.acm.org/10.1145/1162666.1162671. CrossRef  Google Scholar; 22.S. Rehman and K. Mustafa, ""Research on software designlevel security vulnerabilities"", SIGSOFT Softw. Eng. Notes, vol. 34, pp. 1-5, December 2009,  [online]  Available: http://doi.acm.org/10.1145/1640162.1640171. CrossRef  Google Scholar; 23.Y.-C. Zhang, Q. Wei, Z.-L. Liu and Y. Zhou, ""Research on the architecture of vulnerability discoverytechnology"", Proc. Int. Conf. Mach. Learn. Cybern. (ICMLC), vol. 6, pp. 2854-2859, 2010. View Article  Google Scholar; 24.V. Ganapathy, S. Seshia, S. Jha, T. Reps and R. Bryant, ""Automatic discovery of api-level exploits"", Proc. 27th Int. Conf. Software Eng. (ICSE 2005), pp. 312-321, 2005-May. CrossRef  Google Scholar; 25.F. Massacci and V. H. Nguyen, ""Which is the right source forvulnerability studies?: An empirical analysis on mozilla firefox"", Proc. 6th Int. Workshop Security Measur. Metrics, pp. 4:1-4:8, 2010,  [online]  Available: http://doi.acm.org/10.1145/1853919.1853925. CrossRef  Google Scholar; 26.G. Schryen and R. Kadura, ""Open source vs. closed sourcesoftware: Towards measuring security"", Proc. 2009 ACM Symp. Appl. Comput., pp. 2016-2023, 2009,  [online]  Available: http://doi.acm.org/10.1145/1529282.1529731. CrossRef  Google Scholar; 27.M. Bozorgi, L. K. Saul, S. Savage and G. M. Voelker, ""Beyond heuristics: Learningto classify vulnerabilities and predict exploits"", Proc. 16th ACM SIGKDD Int. Conf. Knowledge Discovery Data Mining, pp. 105-114, 2010,  [online]  Available: http://doi.acm.org/10.1145/1835804.1835821. CrossRef  Google Scholar; 28.J. A. Wang and M. Guo, ""Vulnerability categorization using bayesiannetworks"", Proc. 6th Annu. Workshop Cyber Security Inf. Intell. Res., pp. 29:1-29:4, 2010,  [online]  Available: http://doi.acm.org/10.1145/1852666.1852699. CrossRef  Google Scholar; 29.J.-E. J. Tevis and J. A. Hamilton, ""Methods for the preventiondetection and removal of software security vulnerabilities"", Proc. 42nd Annu. Southeast Regional Conf., pp. 197-202, 2004,  [online]  Available: http://doi.acm.org/10.1145/986537.986583. CrossRef  Google Scholar; 30.V. H. Nguyen and L. M. S. Tran, ""Predicting vulnerable softwarecomponents with dependency graphs"", Proc. 6th Int. Workshop Security Measur. Metrics, pp. 3:1-3:8, 2010,  [online]  Available: http://doi.acm.org/10.1145/1853919.1853923. CrossRef  Google Scholar"	395- 407		Excluded	Excluded				2	IEEE		Vulnerability scrying method for software vulnerability discovery prediction without a vulnerability database	https://ieeexplore.ieee.org/document/6502762	IEEE	nan; Year; Bibtex
231	TrustSE	Multi-criteria evaluation of design and manufacturing software packages considering the interdependencies among criteria: the analytic network process approach	Evaluation and selection of software packages are among the important decisions in the manufacturing sector. Design and manufacturing software packages are integral components of manufacturing processes. Since different tangible and intangible criteria should be evaluated in the investment process, it is important to use a suitable multi-criteria decision-making method. This article presents a real case of evaluating and selecting a design and manufacturing software package considering the interdependencies among the selection criteria. The analytic network process was used for the analysis. A group decision setting was adopted and an aggregated decision was derived considering the relative influence of decision makers. The results were compared to the case where interdependencies were ignored. Furthermore, sensitivity analyses were performed to assess the impact of changes in the influence of decision makers and in the interdependencies between criteria on the final decision outcome.	analytic network process;; ANP;; group decision making;; information technology investment;; multiple criteria decision making;; software selection	Assadi, Pooria; Sowlati, Taraneh; Paradi, Joseph C.	International Journal of Information and Decision Sciences	https://doi.org/10.1504/IJIDS.2009.027759	Assadi, P., Sowlati, T.; Awasthi, A., Chauhan, S.S., Hurteau, X., Breuil, D.; Ayag, Z., Ozdemir, R.G.; Canadian Manufacturers and Exporters(2004)The Importance of Manufacturing in Canada.Cited 3 times.Retrieved on August 1,2008http://www.cme-mec.ca/mfg2020/Importance.pdf; Canadian Manufacturers and Exporters(2004)Manufacturing Challenges in Canada.Cited 2 times.Retrieved on August 1, 2008http://www.cme-mec.ca/mfg2020/Challengespdf.pdf; Erdogmus, S., Kapanoglu, M., Koc, E.; Fazlollahtabar, H.; Kengpol, A., Tuominen, M.; Lee, J.W., Kim, S.H.; Liou, J.J.H., Chuang, M.-L.; Mulebeke, J.A.W., Zheng, L.; Renkema, T.J.W., Berghout, E.W.; Roper-Lowe, G.C.; Saaty, T.L.(1980)The Analytic Hierarchy Process..Cited 28040 times.New York, NY: McGrawHill; Saaty, T.L.(1996)Decision Making with Dependence and Feedback: The Analytic Network Process.Cited 3180 times.Pittsburgh, PA: RWS Publications; Saaty, T.L., Vargas, L.G.(2006)Decision Making with the Analytic Network Process: Economic, Political, Social and Technological Applications with Benefits, Opportunities, Costs and Risks.Cited 805 times.New York, NY: Springer; Sarkis, J., Sundarraj, R.P.; Schniederjans, M.J., Hamaker, J.L., Schniederjans, A.M.; Shoval, P., Lugasi, Y.; Sylla, C., Wen, H.J.; The Centre for the Study of Living Standards(2007)Database of Information and Communication Technology (ICT) Investment and Capital Stock Trends: Canada vs United StatesThe Centre for the Study of Living Standards, Retrieved on June 1http://www.csls.ca/data/ICT%20-Canada%202006.pdf; Vaidya, O.S., Kumar, S.; Wen, H.J., Shih, S.C.	397 - 410	"""@ARTICLE{Assadi2009397,
    author = ""Assadi, Pooria and Sowlati, Taraneh and Paradi, Joseph C."",
    title = ""Multi-criteria evaluation of design and manufacturing software packages considering the interdependencies among criteria: the analytic network process approach"",
    year = ""2009"",
    journal = ""International Journal of Information and Decision Sciences"",
    volume = ""1"",
    number = ""4"",
    pages = ""397 - 410"",
    doi = ""10.1504/IJIDS.2009.027759"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84857241841\&doi=10.1504\%2fIJIDS.2009.027759\&partnerID=40\&md5=396aad873e07ab57db258db573d83043"",
    affiliations = ""Department of Wood Science, University of British Columbia, British Columbia, V6T 1Z4, 2943-2424 Main Mall, Vancouver, Canada; Faculty of Applied Science and Engineering, Centre for Management of Technology and Entrepreneurship, University of Toronto, Ontario, M5S 3E5, 200 College Street, Toronto, Canada"",
    abstract = ""Evaluation and selection of software packages are among the important decisions in the manufacturing sector. Design and manufacturing software packages are integral components of manufacturing processes. Since different tangible and intangible criteria should be evaluated in the investment process, it is important to use a suitable multi-criteria decision-making method. This article presents a real case of evaluating and selecting a design and manufacturing software package considering the interdependencies among the selection criteria. The analytic network process was used for the analysis. A group decision setting was adopted and an aggregated decision was derived considering the relative influence of decision makers. The results were compared to the case where interdependencies were ignored. Furthermore, sensitivity analyses were performed to assess the impact of changes in the influence of decision makers and in the interdependencies between criteria on the final decision outcome. (c) 2009 Inderscience Enterprises Ltd."",
    author_keywords = ""analytic network process; ANP; group decision making; information technology investment; multiple criteria decision making; software selection"",
    issn = ""17567017"",
    language = ""English"",
    abbrev_source_title = ""Int. J. Inf. Decis. Sci."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 9""
}
"""	Excluded	Excluded				2	Scopus Signed In		Multi-criteria evaluation of design and manufacturing software packages considering the interdependencies among criteria: the analytic network process approach	https://www.scopus.com/record/display.uri?eid=2-s2.0-84857241841&origin=resultslist&sort=r-f&src=s&sid=5a171c0dc212d993cdfcea0f13817018&sot=b&sdt=b&s=TITLE%28multi+criteria+evaluation+of+design+and+manufacturing+software+packages+considering+the+interdependencies+among+criteria+the+analytic+network+process+approach%29&sl=165&sessionSearchId=5a171c0dc212d993cdfcea0f13817018&relpos=0		nan; Publisher
232	TrustSE	An Open Source Software Evaluation Model	The allure of free, industrial-strength software has many enterprises rethinking their open source strategies. However, selecting an appropriate open source software for a given problem or set of requirements is very challenging. The challenges include a lack of generally accepted evaluation criteria and a multitude of eligible open source software projects. The contribution of this work is a set of criteria and a methodology for assessing candidate open source software for fitness of purpose. To test this evaluation model, several important open source projects were examined. The results of this model were compared against the published results of an evaluation performed by the Defense Research and Development Canada agency. The proposed evaluation model relies on publicly accessible data, is easy to perform, and can be incorporated into any open source strategy.		Joel P. Confino; Phillip A. Laplante	International Journal of Strategic Information Technology and Applications (IJSITA)	https://www.igi-global.com/article/open-source-software-evaluation-model/39113		18	"""nan"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Google Scholar		An open source software evaluation model	https://www.igi-global.com/article/open-source-software-evaluation-model/39113	IGI Global	
233	TrustSE	Survival factors for Free Open Source Software projects: A multi-stage perspective	This paper uses a large data set of Free Open Source Software (FOSS) projects obtained from SourceForge.net to investigate survival factors at various stages of a FOSS project's lifecycle. It distinguishes FOSS projects that are still at the initial stage of development from those at the growth stage, and posits that the relative importance of the identified survival factors changes as FOSS projects evolve from one stage to the next. The results demonstrate the changing effect of factors over time affecting FOSS survival. Restrictive FOSS licenses and large internal and external networks are found to present advantages for projects that are at the initial stage, but the advantages dissipate as the projects move into the growth stage. Projects with high-quality external networks, greater levels of user/developer participation and service quality, and projects targeted at technical users have a higher likelihood of surviving at both stages. These findings show that a FOSS project team needs to be aware of the conditioning effect of time and focus on the appropriate mix of survival factors as the project moves from one stage to the next.	Developer characteristics;; Free Open Source Software;; Social networks;; Software characteristics;; Survival	Wang, Jing	European Management Journal	https://doi.org/10.1016/j.emj.2012.03.001		352 - 371	"""@ARTICLE{Wang2012352,
    author = ""Wang, Jing"",
    title = ""Survival factors for Free Open Source Software projects: A multi-stage perspective"",
    year = ""2012"",
    journal = ""European Management Journal"",
    volume = ""30"",
    number = ""4"",
    pages = ""352 - 371"",
    doi = ""10.1016/j.emj.2012.03.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84862756997\&doi=10.1016\%2fj.emj.2012.03.001\&partnerID=40\&md5=5df87fc127c67d8cdd2fa0427dbdd631"",
    affiliations = ""Department of Decision Sciences, Whittemore School of Business and Economics, University of New Hampshire, United States"",
    abstract = ""This paper uses a large data set of Free Open Source Software (FOSS) projects obtained from SourceForge.net to investigate survival factors at various stages of a FOSS project's lifecycle. It distinguishes FOSS projects that are still at the initial stage of development from those at the growth stage, and posits that the relative importance of the identified survival factors changes as FOSS projects evolve from one stage to the next. The results demonstrate the changing effect of factors over time affecting FOSS survival. Restrictive FOSS licenses and large internal and external networks are found to present advantages for projects that are at the initial stage, but the advantages dissipate as the projects move into the growth stage. Projects with high-quality external networks, greater levels of user/developer participation and service quality, and projects targeted at technical users have a higher likelihood of surviving at both stages. These findings show that a FOSS project team needs to be aware of the conditioning effect of time and focus on the appropriate mix of survival factors as the project moves from one stage to the next. (c) 2012 Elsevier Ltd."",
    author_keywords = ""Developer characteristics; Free Open Source Software; Social networks; Software characteristics; Survival"",
    correspondence_address = ""J. Wang; Department of Decision Sciences, Whittemore School of Business and Economics, University of New Hampshire, United States; email: Jing.wang@unh.edu"",
    issn = ""02632373"",
    language = ""English"",
    abbrev_source_title = ""Eur. Manage. J."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 33""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Survival factors for Free Open Source Software projects: A multi-stage perspective	https://www.scopus.com/record/display.uri?eid=2-s2.0-84862756997&origin=resultslist&sort=r-f&src=s&sid=5f946691d816bae7b456d17191f84ba6&sot=b&sdt=b&s=TITLE%28survival+factors+for+free+open+source+software+projects+a+multi+stage+perspective%29&sl=88&sessionSearchId=5f946691d816bae7b456d17191f84ba6&relpos=0		nan; References; Publisher
234	TrustSE	Impact of Organisational Maturity on Software Quality	Introducing quality process improvements in software development is a challenge. The organisation requires a certain level of maturity to undertake a quality management programme. Often such programme involves a process re-engineering paradigm. It also embodies a new culture that encourages relentless and continuous improvement of the way all the activities are executed. An exploratory study investigating the impact of organizational maturity on software quality practices is conducted on 280 companies in Singapore. The objective of the study is to understand the issues underlying the implementation of software quality management concepts.	Software Engineering, Management; Software Management; System Management; D.2.9; K.6.3; K6.4	Margaret Tan; Chee Yuen Yap	Software Quality and Productivity	https://doi.org/10.1007/978-0-387-34848-3_36		231-234		Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Springer Link		Impact of organisational maturity on software quality	https://link.springer.com/chapter/10.1007/978-0-387-34848-3_36	Springer, Boston, MA	nan; References; Year; Bibtex
235	TrustSE	Software measurement: Uncertainty and causal modeling	"Bayesian networks can represent genuine cause-effect relationships. As a result, incorporating them into predictive models can provide advance warning of potential risks. Furthermore, ""what if"" scenarios can identify potential problems and possible improvements."	Computational complexity; Graphic methods; Mathematical models; Neural networks; Quality control; Regression analysis; Risk management; Bayesian networks; Graphical model; Predictive models; Software measurement; Software engineering; Computational complexity;  Graphic methods;  Mathematical models;  Neural networks;  Quality control;  Regression analysis;  Risk management;  Bayesian networks;  Graphical model;  Predictive models;  Software measurement;  Software engineering	Fenton, Norman; Krause, Paul; Neil, Martin	IEEE Software	https://doi.org/10.1109/MS.2002.1020298	"1.N.E. Fenton and S.L. Pfleeger, Software Metrics: A Rigorous and Practical Approach, Boston,, 1998. Google Scholar; 2.N.E. Fenton and M. Neil, ""A Critique of Software Defect Prediction Research"", IEEE Trans. Software Eng., vol. 25, no. 5, pp. 675-689, Sept./Oct. 1999. View Article  Google Scholar; 3.E. Adams, ""Optimizing Preventive Service of Software Products"", IBM Research J., vol. 28, no. 1, pp. 2-14, Jan. 1984. View Article  Google Scholar; 4.S.L. Lauritzen and D.J. Spiegelhalter, ""Local Computations with Probabilities on Graphical Structures and Their Application to Expert Systems (with Discussion)"", J. Royal Statistical Soc: Series B, vol. 50, no. 5, pp. 157-224, 1988. Google Scholar; 5.M. Neil, N. Fenton and L. Nielson, ""Building Large-Scale Bayesian Networks"", Knowledge Eng. Rev., vol. 15, no. 3, pp. 257-284, Sept. 2000. CrossRef  Google Scholar; 6.N.E. Fenton, P.J. Krause and M. Neil, ""A Probabilistic Model for Software Defect Prediction"". Google Scholar; 7.N.E. Fenton and N. Ohlsson, ""Quantitative Analysis of Faults and Failures in a Complex Software System"", IEEE Trans. Software Eng., vol. 26, no. 8, pp. 797-814, Aug. 2000. View Article  Google Scholar; 8.J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference, San Francisco,, 1988. Google Scholar"	116 - 122	"""@ARTICLE{Fenton2002116,
    author = ""Fenton, Norman and Krause, Paul and Neil, Martin"",
    title = ""Software measurement: Uncertainty and causal modeling"",
    year = ""2002"",
    journal = ""IEEE Software"",
    volume = ""19"",
    number = ""4"",
    pages = ""116 - 122"",
    doi = ""10.1109/MS.2002.1020298"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036642013\&doi=10.1109\%2fMS.2002.1020298\&partnerID=40\&md5=6bf1688814e8e88c7fc64e1171a0c5ea"",
    affiliations = ""Queen Mary, Univ. of London, London E1 4NS, Mile End Rd., United Kingdom; Philips Research Laboratories, Redhill, Surrey RH1 5HA, Crossoak Lane, United Kingdom; Agena, United Kingdom"",
    abstract = {Bayesian networks can represent genuine cause-effect relationships. As a result, incorporating them into predictive models can provide advance warning of potential risks. Furthermore, ""what if"" scenarios can identify potential problems and possible improvements.},
    keywords = ""Computational complexity; Graphic methods; Mathematical models; Neural networks; Quality control; Regression analysis; Risk management; Bayesian networks; Graphical model; Predictive models; Software measurement; Software engineering"",
    correspondence_address = ""N. Fenton; Queen Mary, University of London, London E1 4NS, Mile End Rd., United Kingdom; email: norman@agena.co.uk"",
    issn = ""07407459"",
    coden = ""IESOE"",
    language = ""English"",
    abbrev_source_title = ""IEEE Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 140""
}
"""	Included	Included				2	Scopus Signed In		Software measurement: Uncertainty and causal modeling	https://ieeexplore.ieee.org/document/1020298	IEEE	
236	TrustSE	The Uncertainty Principle in Software Engineering	This paper makes two contributions to software engineering research. First, we observe that un- certainty p ermeates software development but is rarely captured explicitly in software mo dels. We remedy this situation by presenting the Uncertainty Principle in Software Engineering (UPSE), which states that uncertainty is inherent and inevitable in software development pro cesses and pro ducts. We substantiate UPSE by providing examples of uncertainty in select software engineer- ing domains. We present three common sources of uncertainty in software development, namely human participation, concurrency, and problem-domain uncertainties. We explore in detail un- certainty in software testing, including test planning, test enactment, error tracing, and quality estimation. Second, we present a technique for mo deling uncertainty, called Bayesian b elief net- works, and justify its applicabili ty to software systems. We apply the Bayesian approach to a simple network of software artifacts based on an elevator control system. We discuss results, im- plications and p otential b ene ts of the Bayesian approach. The elevator system therefore serves as an example of applying UPSE to a particular software development situation. Finally we discuss additional asp ects of mo deling and managing uncertainty in software engineering in general	Software principles; software testing; uncertainty modeling; Bayesian networks	Hadar Ziv; Debra J. Richardson	ICSE'97, 19th International Conference on Software Engineering	http://jeffsutherland.org/papers/zivchaos.pdf		20	"""nan"""	Excluded	Excluded				2	Google Scholar		The uncertainty principle in software engineering	http://jeffsutherland.org/papers/zivchaos.pdf		
237	TrustSE	Organizational adoption of open source software: barriers and remedies	"IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail."		Nagy, Del; Yassin, Areej M.; Bhattacherjee, Anol	Commun. ACM	https://doi.org/10.1145/1666420.1666457		148-151	"""@article{10.1145/1666420.1666457,
    author = ""Nagy, Del and Yassin, Areej M. and Bhattacherjee, Anol"",
    title = ""Organizational adoption of open source software: barriers and remedies"",
    year = ""2010"",
    issue_date = ""March 2010"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""53"",
    number = ""3"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1666420.1666457"",
    doi = ""10.1145/1666420.1666457"",
    abstract = {IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail.},
    journal = ""Commun. ACM"",
    month = ""March"",
    pages = ""148-151"",
    numpages = ""4""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Organizational adoption of open source software: barriers and remedies	https://doi.org/10.1145/1666420.1666457	Association for Computing Machinery	nan; Keywords; References; Link
238	TrustSE	Software estimation perspectives		Humans; Insects; Uncertainty; Animals; Genetics; Software measurement	B.W. Boehm; R.E. Fairley	IEEE Software	https://doi.org/10.1109/MS.2000.895164		22- 26		Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		Software estimation perspectives	https://ieeexplore.ieee.org/document/895164	IEEE	nan; Abstract; References; Year; Bibtex
239	TrustSE	Coordination of free/libre open source software development	"The apparent success of free/libre open source software (FLOSS) development projects such as Linux, Apache, and many others has raised the question, what lessons from FLOSS development can be transferred to mainstream software development? In this paper, we use coordination theory to analyze coordination mechanisms in FLOSS development and compare our analysis with existing literature on coordination in proprietary software development. We examined developer interaction data from three active and successful FLOSS projects and used content analysis to identify the coordination mechanisms used by the participants. We found that there were similarities between the FLOSS groups and the reported practices of the proprietary project in the coordination mechanisms used to manage task-task dependencies. However, we found clear differences in the coordination mechanisms used to manage task-actor dependencies. While published descriptions of proprietary software development involved an elaborate system to locate the developer who owned the relevant piece of code, we found that ""self-assignment"" was the most common mechanism across three FLOSS projects. This coordination mechanism is consistent with expectations for distributed and largely volunteer teams. We conclude by discussing whether these emergent practices can be usefully transferred to mainstream practice and indicating directions for future research."	Computer operating systems; Information systems; Content analysis; Coordination mechanisms; Coordination theory; FLOSS projects; Free/libre open source software development; Proprietary software; Software design; Computer operating systems;  Information systems;  Content analysis;  Coordination mechanisms;  Coordination theory;  FLOSS projects;  Free/libre open source software development;  Proprietary software;  Software design	Crowston, Kevin; Wei, Kangning; Li, Qing; Yeliz Eseryel, U.; Howison, James	Association for Information Systems - 26th International Conference on Information Systems, ICIS 2005: Forever New Frontiers	https://www.scopus.com/record/display.uri?eid=2-s2.0-84869851257&origin=resultslist&sort=r-f&src=s&sid=3b4ab17c6787f53101f03c952a46e29d&sot=b&sdt=b&s=TITLE%28coordination+of+free+libre+open+source+software+development%29&sl=66&sessionSearchId=3b4ab17c6787f53101f03c952a46e29d&relpos=0		181 - 193	"""@CONFERENCE{Crowston2005181,
    author = ""Crowston, Kevin and Wei, Kangning and Li, Qing and Yeliz Eseryel, U. and Howison, James"",
    title = ""Coordination of free/libre open source software development"",
    year = ""2005"",
    journal = ""Association for Information Systems - 26th International Conference on Information Systems, ICIS 2005: Forever New Frontiers"",
    pages = ""181 - 193"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84869851257\&partnerID=40\&md5=a9fb32089a4d6ab66bd7dc9852f6631b"",
    affiliations = ""Syracuse University, School of Information Studies, Syracuse, NY, United States"",
    abstract = {The apparent success of free/libre open source software (FLOSS) development projects such as Linux, Apache, and many others has raised the question, what lessons from FLOSS development can be transferred to mainstream software development? In this paper, we use coordination theory to analyze coordination mechanisms in FLOSS development and compare our analysis with existing literature on coordination in proprietary software development. We examined developer interaction data from three active and successful FLOSS projects and used content analysis to identify the coordination mechanisms used by the participants. We found that there were similarities between the FLOSS groups and the reported practices of the proprietary project in the coordination mechanisms used to manage task-task dependencies. However, we found clear differences in the coordination mechanisms used to manage task-actor dependencies. While published descriptions of proprietary software development involved an elaborate system to locate the developer who owned the relevant piece of code, we found that ""self-assignment"" was the most common mechanism across three FLOSS projects. This coordination mechanism is consistent with expectations for distributed and largely volunteer teams. We conclude by discussing whether these emergent practices can be usefully transferred to mainstream practice and indicating directions for future research.},
    author_keywords = ""Coordination mechanisms; Coordination theory; Free/libre open source software development"",
    keywords = ""Computer operating systems; Information systems; Content analysis; Coordination mechanisms; Coordination theory; FLOSS projects; Free/libre open source software development; Proprietary software; Software design"",
    correspondence_address = ""K. Crowston; Syracuse University, School of Information Studies, Syracuse, NY, United States; email: crowston@syr.edu"",
    language = ""English"",
    abbrev_source_title = ""Assoc. Inf. Syst. - 26th Int. Conf. Inf. Syst., ICIS 2005: Forever New Front."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 35; Conference name: 26th International Conference on Information Systems, ICIS 2005; Conference date: 11 December 2005 through 14 December 2005; Conference code: 93866""
}
"""	Excluded	Excluded				2	Scopus Signed In		Coordination of free/libre open source software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-84869851257&origin=resultslist&sort=r-f&src=s&sid=3b4ab17c6787f53101f03c952a46e29d&sot=b&sdt=b&s=TITLE%28coordination+of+free+libre+open+source+software+development%29&sl=66&sessionSearchId=3b4ab17c6787f53101f03c952a46e29d&relpos=0		nan; References; Publisher
240	TrustSE	Software quality evaluation based on expert judgement	A method using expert judgement for the evaluation of software quality is presented. The underlying principle of the approach is the encoding of experts' tacit knowledge into probabilistic measures associated with the achievement level of software quality attributes. An aggregated quality measure is obtained based on preference statements related to the quality attributes. The technical objectives of the paper are to develop of a generic and operationally feasible measurement technique to transform the tacit knowledge of a software expert to a probability distribution depicting his/her uncertainty of the level of achievement related to a quality attribute; to develop rules for the construction of a consensus probability measure based on expert-specific probability measures; to derive a framework for specifying software quality strategy and for evaluating the acceptance of a software produced in a software development process; The above technical developments are used to support group decision-making regarding the launch or implementation decision of a software version; the allocation of resources during the software development process.	Expert systems; Integral equations; Motivation; Probability distributions; Quality of service; Software engineering; Expert judgement; Software measurement; Software quality; Software version; Computer software; Expert systems;  Integral equations;  Motivation;  Probability distributions;  Quality of service;  Software engineering;  Expert judgement;  Software measurement;  Software quality;  Software version;  Computer software	Rosqvist, Tony; Koskela, Mika; Harju, Hannu	Software Quality Journal	https://doi.org/10.1023/A:1023741528816	Basili, V.R., Dieter Rombach, H.; Baumert, J.H., McWhinney, M.S.Software measures and the capability maturity model(1992)Technical Report, CMU-SEI-92-TR-25.Cited 23 times.Software Engineering Institute, Carnegie Mellow University, Pittsburgh; Butler, R.W., Finelli, G.B.; Cooke, R.(1991)Experts in Uncertainty.Cited 242 times.Oxford University Press, Oxford; Fenton, N.E., Neil, M.; Fenton, N.E., Pfleeger, S.L.(1997)Software Metrics - A Rigorous and Practical Approach, 2nd Ed..Cited 2281 times.PWS Publishing Company, Boston; Fowler, M., Scott, K.(1997)UML Distilled - Applying the Standard Object Modelling Language.Cited 1809 times.Addison-Wesley Object Technology Series; Garvin, David A.; (1991)ISO 9126 Information Technology - Software Product Evaluations - Quality Characteristics and Guidelines for Their Use.Cited 12 times.ISO 9126. Geneva; Jarvinen, J.(2000)Measurement Based Continuous Assessment of Software Engineering Processes.Cited 8 times.VTT Publications 426 (Dissertation), VTT Technical Research Centre of Finland; Keiller, P.A., Miller, D.R.; Kelly, G.A.(1955)The Psychology of Personal Constructs - A Theory of Personality.Cited 7315 times.Norton, New York; Kilpl, T.; Littlewood, B., Strigini, L.; Mason, D., Woit, D.Software system reliability form component reliability(1998)Proc. of 1998 Workshop on Software Reliability Engineering (SRE'98).Cited 8 times.Ottawa, Ontario; McCall, J.A.Quality factors(1994)Encyclopedia of Software Engineering.Cited 40 times.J.J. Marciniak (ed.), John Wiley & Sons, New York; Musa, J.D.; (1989)NUREG-1150: Reactor Risk Reference Document.Cited 3 times.Report NUREG-1150, U.S. Nuclear Regulatory Commission, Office of Nuclear Regulatory Research, Maryland; (1996)@Risk - Advanced Risk Analysis for Spreadsheets.Cited 20 times.Palisade Corporation, New York; Pulkkinen, U.; Rumbaugh, J., Booch, G., Jacobson, I.(1998)Unified Modelling Language.Cited 535 times.Addison-Wesley Object Technology Series; Saaty, T.L.How to make decisions: The analytic hierarchy process(1994)Interfaces, 24 (6), pp. 19-43.Cited 1534 times.; Tervonen, I.	39 - 55	"""@ARTICLE{Rosqvist200339,
    author = ""Rosqvist, Tony and Koskela, Mika and Harju, Hannu"",
    title = ""Software quality evaluation based on expert judgement"",
    year = ""2003"",
    journal = ""Software Quality Journal"",
    volume = ""11"",
    number = ""1"",
    pages = ""39 - 55"",
    doi = ""10.1023/A:1023741528816"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-3543117256\&doi=10.1023\%2fA\%3a1023741528816\&partnerID=40\&md5=9ac3930469f4b99a473efe219699b98e"",
    affiliations = ""VTT Industrial Systems, 02044 VTT, Espoo, Finland"",
    abstract = ""A method using expert judgement for the evaluation of software quality is presented. The underlying principle of the approach is the encoding of experts' tacit knowledge into probabilistic measures associated with the achievement level of software quality attributes. An aggregated quality measure is obtained based on preference statements related to the quality attributes. The technical objectives of the paper are to develop of a generic and operationally feasible measurement technique to transform the tacit knowledge of a software expert to a probability distribution depicting his/her uncertainty of the level of achievement related to a quality attribute; to develop rules for the construction of a consensus probability measure based on expert-specific probability measures; to derive a framework for specifying software quality strategy and for evaluating the acceptance of a software produced in a software development process; The above technical developments are used to support group decision-making regarding the launch or implementation decision of a software version; the allocation of resources during the software development process."",
    author_keywords = ""Expert judgement; Software measurement; Software quality"",
    keywords = ""Expert systems; Integral equations; Motivation; Probability distributions; Quality of service; Software engineering; Expert judgement; Software measurement; Software quality; Software version; Computer software"",
    publisher = ""Kluwer Academic Publishers"",
    issn = ""09639314"",
    language = ""English"",
    abbrev_source_title = ""Softw. Qual. J."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 51""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software quality evaluation based on expert judgement	https://www.scopus.com/record/display.uri?eid=2-s2.0-3543117256&origin=resultslist&sort=r-f&src=s&sid=624cf5efbc677eaa5cd46c2541f958d5&sot=b&sdt=b&s=TITLE%28software+quality+evaluation+based+on+expert+judgement%29&sl=60&sessionSearchId=624cf5efbc677eaa5cd46c2541f958d5&relpos=0	Kluwer Academic Publishers	
241	TrustSE	SOFTWARE METRICS AND RELIABILITY	"he IEEE defines reliability as ""The ability of a system or component to perform its required functions under stated conditions for a specified period of time."" To most project and software development managers, reliability is equated to correctness, that is, they look to testing and the number of ""bugs"" found and fixed. While finding and fixing bugs discovered in testing is necessary to assure reliability, a better way is to develop a robust, high quality product through all of the stages of the software lifecycle. That is, the reliability of the delivered code is related to the quality of all of the processes and products of software development; the requirements documentation, the code, test plans, and testing. Software reliability is not as well defined as hardware reliability, but the Software Assurance Technology Center (SATC) at NASA is striving to identify and apply metrics to software products that promote and assess reliability. This paper discusses how NASA projects, in conjunction with the SATC, are applying software metrics to improve the quality and reliability of software products. Reliability is a by-product of quality, and software quality can be measured. We will demonstrate how these quality metrics assist in the evaluation of software reliability. We conclude with a brief discussion of the metrics being applied by the SATC to evaluate the reliability ."		Dr. Linda Rosenberg; Ted Hammer; Jack Shaw	9th international symposium on software reliability engineering	https://www.cs.du.edu/~snarayan/sada/teaching/COMP3705/lecture/p1/smandrelaib.pdf		8	"""nan"""	Included	Included				2	Google Scholar		Software metrics and reliability	https://www.cs.du.edu/~snarayan/sada/teaching/COMP3705/lecture/p1/smandrelaib.pdf		
242	TrustSE	Free/Libre and Open Source Software: Survey and Study	"Although Open Source and Free Software are no new phenomenon, they have shown a considerable increase of their importance just in recent years. However, many aspects of this domain still appear unknown or even strange. Economic exchange relations, as they occur within the community of OS/FS developers as well as in the traditional parts of capitalist economies, are usually based on the fundamental principles of private property and monetary payments. However, these principles seem not to be applicable to OS/FS, and still this domains functions very well and gains more and more importance in the leading software markets. Based on an online survey on 2784 Open Source/Free Software developers, this report provides insights in fundamental features of the OS/FS community and its economic principles. It sheds a light on personal features of OS/FS developers, of their work and project organization, their motivations, expectations, and orientations. Finally, it illustrates the fundamental dividing lines that characterise mainly the OS/FS community and cause its outstanding position, which are the distinction between monetary and non-monetary rewards, the distinction between OS/FS and proprietary software, but also the internal distinction between Open Source Software and Free Software. The results of the study have shown that the OS/FS community is a rather young and predominantly male community with a strong professional background in the IT sector and a high educational level. The developers are mostly singles or only loosely associated with their partners. They feature a high degree of mobility, whereby the European Union appears as attractive only for developers from its member states, but not for developers from the United States of America or other world regions. Overall, developing OS/FS still resembles rather a hobby than salaried work. Besides (software) engineers and programmers, students play also a significant role in the community, but project performance and leadership is primarily a matter of professionals. Most of the developers feature networks that consist of rather few people. Nevertheless, we found a considerable large group of OS/FS developers that showed regular contacts to more than 50 other developers and that provided undoubtedly the ""professional elite"" within the community. Comparing the motives to start with the development of OS/FS and the motives to continue with it, we found an initial motivation for participation in the OS/FS community that rather aims at individual skills and the exchange of information and knowledge with other developers, but over time a maturing of the whole community with regard to both, commercial (material) and political aspects. To learn and to share knowledge have also been the most important issues of OS/FS developers' expectations from other developers. Finally, regarding the main dividing lines we found the sample clearly one-sided with respect to the differences between Open Source/Free Software and proprietary software. Positive features are generally associated with OS/FS, and negative features with proprietary software. The difference between monetary and non-monetary rewards does not play a major role within the OS/FS community. The internal differentiation of the community by self-assignments to either the Open Source or to the Free Software community does not provoke a polarization of the community into two different parties. Rather, we found six distinguishable types of orientations in this respect, ranging from those who clearly assign themselves to one of the two domains and claiming fundamental differences between them to those who do not care to which domain they belong."		Rishab A. Ghosh; Ruediger Glott; Bernhard Krieger; Gregorio Robles		https://www.math.unipd.it/~bellio/FLOSS%20Final%20Report%20-%20Part%204%20-%20Survey%20of%20Developers.pdf		69	"""nan"""	Excluded	Excluded				2	Google Scholar		Free/libre and open source software: Survey and study	https://www.math.unipd.it/~bellio/FLOSS%20Final%20Report%20-%20Part%204%20-%20Survey%20of%20Developers.pdf	International Institute of Infonomics	
243	TrustSE	Why develop open-source software? The role of non-pecuniary benefits, monetary rewards, and open-source licence type	A review of the basic theory of optimal open-source software contributions points to three key factors affecting the decision to contribute to the open-source development process: non-pecuniary benefits, future expected monetary returns, and open-source licence type. This paper argues that existing large-scale software developer surveys are inadequate for measuring the relative importance of these three factors. Previous econometric studies that collect their own unique datasets also fall short because they generally measure the importance of only one supply factor in isolation. To fill the gap, I specify an estimable dynamic programming model of joint labour supply and open-source participation decisions that can provide empirical estimates of relative importance within a single unified framework of optimal decision-making.	data set; decision making; empirical analysis; labor supply; monetary policy; software; data set;  decision making;  empirical analysis;  labor supply;  monetary policy;  software	Sauer, Robert M.	Oxford Review of Economic Policy	https://doi.org/10.1093/oxrep/grm034	Firms' Open Source Activities: Motivations and Policy Implications(2002)FLOSS Final ReportBerlecon Research , International Institute of Infonomics, University of Maastricht; Bonaccorsi, A., Rossi, C.; (2003)Boston Consulting Group/OSDN Hacker Survey.Cited 4 times.Boston Consulting Group , Boston, MA, Boston Consulting Group; Fershtman, C., Gandal, N.; Ghosh, R., Glott, R., Kriger, B., Robles, G.(2002)Free/Libre and Open Source Software: Survey and Study.Cited 322 times.University of Maastricht Institute of Infonomics and Berlecon Research, mimeo; Hann, I., Roberts, J., Slaughter, S., Fielding, R.(2004)An Empirical Analysis of the Economic Returns to Open Source Participation.Cited 13 times.Carnegie-Mellon University, unpublished working paper; Harhoff, D., Henkel, J., Von Hippel, E.; Haruvy, E., Wu, F., Chakravarty, S.(2003)Incentives for Developers' Contributions and Product Performance Metrics in Open Source Development: An Empirical Investigation.Cited 10 times.University of Texas at Dallas, unpublished working paper; Hayek, F.A.The Use of Knowledge in Society(1945)American Economic Review, 35 (4), pp. 519-530.Cited 6930 times.; Henkel, J.(2005)The Jukebox Mode of Innovation - A Model of Commercial Open Source Development.Cited 14 times.Technische Universitat Munich, mimeo; Hertel, G., Niedner, S., Herrmann, S.; Johnson, J.P.; Keane, M.P., Wolpin, K.I.; Keane, M.P., Wolpin, K.I.; Lakhani, K.R., Von Hippel, E.; Lakhani, K., Wolf, R.Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects(2005)Perspectives in Free and Open Source Software.Cited 829 times.J. Feller, B. Fitzgerald, S. Hissam, and K. Lakhani eds, Cambridge, MA, and London, MIT Press; Lerner, J., Tirole, J.; Lerner, J., Tirole, J.; Lerner, J., Tirole, J.; MacCormack, A.(2003)Evaluating Total Cost of Ownership for Software Platforms: Comparing Apples, Oranges and Cucumbers.Cited 6 times.AEI-Brookings Joint Center for Regulatory Studies, mimeo; Maurer, S.M., Scotchmer, S.(2005)Open Source Software: The New Intellectual Property.Cited 41 times.Paradigm, NBER Working Paper 12148; Raymond, E.The Cathedral and the Bazaar(1999)The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary, pp. 19-64.Cited 32 times.Cambridge, MA, O'Reilly; Raymond, E.Homesteading the Noosphere(1999)The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary, pp. 65-112.Cited 8 times.Cambridge, MA, O'Reilly; Raymond, E.The Magic Cauldron(1999)The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary, pp. 113-143.Cited 10 times.Cambridge, MA, O'Reilly; Sauer, R.M.; von Hippel, E.(2002)Open Source Projects as Horizontal Innovation Networks - By and For Users.Cited 10 times.MIT Sloan School of Management Working Paper No. 4366-02; West, J., Gallagher, S.(2004)Key Challenges of Open Innovation: Lessons from Open Source Software.Cited 11 times.San Jose State College of Business, mimeo; Wheeler, D.(2004)Why Open Source Software/Free Software (OSS/FS)? Look at the Numbers.Cited 211 times.available at, accessed 12 Decemberhttp:///www.dwheeler.com/ oss_fss_why.html	605 - 619	"""@ARTICLE{Sauer2007605,
    author = ""Sauer, Robert M."",
    title = ""Why develop open-source software? The role of non-pecuniary benefits, monetary rewards, and open-source licence type"",
    year = ""2007"",
    journal = ""Oxford Review of Economic Policy"",
    volume = ""23"",
    number = ""4"",
    pages = ""605 - 619"",
    doi = ""10.1093/oxrep/grm034"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-38149082700\&doi=10.1093\%2foxrep\%2fgrm034\&partnerID=40\&md5=817cb1a25b85079d7a00030b8795ceb2"",
    affiliations = ""University of Southampton, Southampton, United Kingdom"",
    abstract = ""A review of the basic theory of optimal open-source software contributions points to three key factors affecting the decision to contribute to the open-source development process: non-pecuniary benefits, future expected monetary returns, and open-source licence type. This paper argues that existing large-scale software developer surveys are inadequate for measuring the relative importance of these three factors. Previous econometric studies that collect their own unique datasets also fall short because they generally measure the importance of only one supply factor in isolation. To fill the gap, I specify an estimable dynamic programming model of joint labour supply and open-source participation decisions that can provide empirical estimates of relative importance within a single unified framework of optimal decision-making. (c) The Authors 2007. Published by Oxford University Press."",
    author_keywords = ""Dynamic programming; Labour supply; Open source; Software"",
    keywords = ""data set; decision making; empirical analysis; labor supply; monetary policy; software"",
    correspondence_address = ""R.M. Sauer; University of Southampton, Southampton, United Kingdom; email: r.m.sauer@soton.ac.uk"",
    issn = ""14602121"",
    language = ""English"",
    abbrev_source_title = ""Oxf. Rev. Econ. Policy"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 20; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Why develop open-source software? The role of non-pecuniary benefits, monetary rewards, and open-source licence type	https://www.scopus.com/record/display.uri?eid=2-s2.0-38149082700&origin=resultslist&sort=r-f&src=s&sid=d6720c83dd61fb82a9ca9ab5b33088f9&sot=b&sdt=b&s=TITLE%28why+develop+open+source+software+the+role+of+non+pecuniary+benefits+monetary+rewards+and+open+source+licence+type%29&sl=120&sessionSearchId=d6720c83dd61fb82a9ca9ab5b33088f9&relpos=0		nan; Publisher
244	TrustSE	Managerial and technical barriers to the adoption of open source software	"In this paper we focus on managerial and technical decisions for acquisition of OSS and discuss potential approaches to a widespread adoption of OSS. Moving from mainly technical issues in procurement to corporate IS governance presents OSS with new challenges beyond outlining a business case for a particular OSS application. We draw parallels to the business case for commercial software products (COTS). Compared with COTS, OSS products seem to have several advantages, but based on existing literature and a case study, we develop and discuss the hypothesis that a major barrier may be the ""customer's"" uncertainty and unfamiliarity with OSS vendor relationships. We find that corporate governance and architecture needs to be accounted for in both COTS and OSS. This paper should be seen as a first step researching the fit between procurement and delivery models for OSS."	Computer architecture; Customer satisfaction; Mathematical models; Network components; Uncertain systems; OSS; OSS vendor relationship; Decision making; Computer architecture;  Customer satisfaction;  Mathematical models;  Network components;  Uncertain systems;  OSS;  OSS vendor relationship;  Decision making	Holck, Jesper; Larsen, Michael Holm; Pedersen, Mogens Kuhn	Lecture Notes in Computer Science	https://doi.org/10.1007/978-3-540-30587-3_38		289 - 300	"""@CONFERENCE{Holck2005289,
    author = ""Holck, Jesper and Larsen, Michael Holm and Pedersen, Mogens Kuhn"",
    title = ""Managerial and technical barriers to the adoption of open source software"",
    year = ""2005"",
    journal = ""Lecture Notes in Computer Science"",
    volume = ""3412"",
    pages = ""289 - 300"",
    doi = ""10.1007/978-3-540-30587-3\_38"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-24344441194\&doi=10.1007\%2f978-3-540-30587-3\_38\&partnerID=40\&md5=8bfae04c7b1012c3abe366589887d518"",
    affiliations = ""Copenhagen Business School, Informatics, DK-2000 Frederiksberg, Howitzvej 60, Denmark"",
    abstract = {In this paper we focus on managerial and technical decisions for acquisition of OSS and discuss potential approaches to a widespread adoption of OSS. Moving from mainly technical issues in procurement to corporate IS governance presents OSS with new challenges beyond outlining a business case for a particular OSS application. We draw parallels to the business case for commercial software products (COTS). Compared with COTS, OSS products seem to have several advantages, but based on existing literature and a case study, we develop and discuss the hypothesis that a major barrier may be the ""customer's"" uncertainty and unfamiliarity with OSS vendor relationships. We find that corporate governance and architecture needs to be accounted for in both COTS and OSS. This paper should be seen as a first step researching the fit between procurement and delivery models for OSS. (c) Springer-Verlag Berlin Heidelberg 2005.},
    keywords = ""Computer architecture; Customer satisfaction; Mathematical models; Network components; Uncertain systems; OSS; OSS vendor relationship; Decision making"",
    correspondence_address = ""J. Holck; Copenhagen Business School, Informatics, DK-2000 Frederiksberg, Howitzvej 60, Denmark; email: jeh.inf@cbs.dk"",
    publisher = ""Springer Verlag"",
    issn = ""03029743"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 24; Conference name: 4th International Conference on COTS-Based Software Systems, ICCBSS 2005; Conference date: 7 February 2005 through 11 February 2005; Conference code: 65555""
}
"""	Excluded	Excluded				2	Scopus Signed In		Managerial and technical barriers to the adoption of open source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-24344441194&origin=resultslist&sort=r-f&src=s&sid=7294a38a7344425ab6ae424cffa7da3d&sot=b&sdt=b&s=TITLE%28managerial+and+technical+barriers+to+the+adoption+of+open+source+software%29&sl=80&sessionSearchId=7294a38a7344425ab6ae424cffa7da3d&relpos=0	Springer Verlag	nan; References
245	TrustSE	Teams in packaged software development:The Software Corp. experience	Packaged software companies evolve in an environment characterized by ever-shorter product life cycles and ever-increasing competition. Reaching the marketplace first is often the way to gain a competitive advantage. This situation leads many packaged software organizations to change both their (often sequential) software development processes and rely on (often cross-functional) teams. Reports on the software development practices of Software Corp., an organization developing software products for the travel industry, which experimented with several different approaches and finally implemented cross-functional development teams. Data presented show that changes in the software development process deeply affect many aspects of the organization. The conclusions emphasize the importance of considering the work culture and organizational history when implementing a new software development method and highlight the importance of clearly defining the roles and responsibilities of all groups involved and the necessity to modify the company's performance-appraisal system to promote and support the new organizational objectives embodied in the changes in software development methods.	Competition;; Competitive advantage;; Product lifecycle;; Software development	Dube, Line	Information Technology & People	https://doi.org/10.1108/09593849810204530		36 - 61	"""@ARTICLE{Dube199836,
    author = ""Dube, Line"",
    title = ""Teams in packaged software development:The Software Corp. experience"",
    year = ""1998"",
    journal = ""Information Technology \& People"",
    volume = ""11"",
    number = ""1"",
    pages = ""36 - 61"",
    doi = ""10.1108/09593849810204530"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84986113548\&doi=10.1108\%2f09593849810204530\&partnerID=40\&md5=e2ba3d14a176822347fbfd8cf0cf7244"",
    affiliations = ""Departement des sciences administratives, Ecole des sciences de la gestion, Universite du Quebec a Montreal, Quebec, Canada"",
    abstract = ""Packaged software companies evolve in an environment characterized by ever-shorter product life cycles and ever-increasing competition. Reaching the marketplace first is often the way to gain a competitive advantage. This situation leads many packaged software organizations to change both their (often sequential) software development processes and rely on (often cross-functional) teams. Reports on the software development practices of Software Corp., an organization developing software products for the travel industry, which experimented with several different approaches and finally implemented cross-functional development teams. Data presented show that changes in the software development process deeply affect many aspects of the organization. The conclusions emphasize the importance of considering the work culture and organizational history when implementing a new software development method and highlight the importance of clearly defining the roles and responsibilities of all groups involved and the necessity to modify the company's performance-appraisal system to promote and support the new organizational objectives embodied in the changes in software development methods. (c) 1998, MCB UP Limited"",
    author_keywords = ""Competition; Competitive advantage; Product lifecycle; Software development"",
    issn = ""09593845"",
    language = ""English"",
    abbrev_source_title = ""Inf. Technol. People"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 46""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Teams in packaged software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-84986113548&origin=resultslist&sort=r-f&src=s&sid=c126a1068e870a9b94c9c0355c544661&sot=b&sdt=b&s=TITLE%28teams+in+packaged+software+development%29&sl=45&sessionSearchId=c126a1068e870a9b94c9c0355c544661&relpos=0		nan; References; Publisher
246	TrustSE	Collaboration with Lean Media: how open-source software succeeds	Open-source software, usually created by volunteer programmers dispersed worldwide, now competes with that developed by software firms. This achievement is particularly impressive as open-source programmers rarely meet. They rely heavily on electronic media, which preclude the benefits of face-to-face contact that programmers enjoy within firms. In this paper, we describe findings that address this paradox based on observation, interviews and quantitative analyses of two open-source projects. The findings suggest that spontaneous work coordinated afterward is effective, rational organizational culture helps achieve agreement among members and communications media moderately support spontaneous work. These findings can imply a new model of dispersed collaboration.	software engineering;  open-source;  innovation;  electronic media;  distributed work;  cooperative work;  CVS; software engineering, open-source, innovation, electronic media, distributed work, cooperative work, CVS	Yamauchi, Yutaka; Yokozawa, Makoto; Shinohara, Takeshi; Ishida, Toru	CSCW '00: Proceedings of the 2000 ACM conference on Computer supported cooperative work	https://doi.org/10.1145/358916.359004		329-338	"""@inproceedings{10.1145/358916.359004,
    author = ""Yamauchi, Yutaka and Yokozawa, Makoto and Shinohara, Takeshi and Ishida, Toru"",
    title = ""Collaboration with Lean Media: how open-source software succeeds"",
    year = ""2000"",
    isbn = ""1581132220"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/358916.359004"",
    doi = ""10.1145/358916.359004"",
    abstract = ""Open-source software, usually created by volunteer programmers dispersed worldwide, now competes with that developed by software firms. This achievement is particularly impressive as open-source programmers rarely meet. They rely heavily on electronic media, which preclude the benefits of face-to-face contact that programmers enjoy within firms. In this paper, we describe findings that address this paradox based on observation, interviews and quantitative analyses of two open-source projects. The findings suggest that spontaneous work coordinated afterward is effective, rational organizational culture helps achieve agreement among members and communications media moderately support spontaneous work. These findings can imply a new model of dispersed collaboration."",
    booktitle = ""Proceedings of the 2000 ACM Conference on Computer Supported Cooperative Work"",
    pages = ""329-338"",
    numpages = ""10"",
    keywords = ""software engineering, open-source, innovation, electronic media, distributed work, cooperative work, CVS"",
    location = ""Philadelphia, Pennsylvania, USA"",
    series = ""CSCW '00""
}
"""	Excluded	Excluded				2	ACM		Collaboration with Lean Media: how open-source software succeeds	https://doi.org/10.1145/358916.359004	Association for Computing Machinery	nan; References; Link
247	TrustSE	How perceptions of open source software influence adoption: An exploratory study	Much of the assessment of OSS benefits and drawbacks has been based on anecdotal evidence appearing in practitioner publications. Due to its focus on software development, such work neglects whether managerial perceptions of such benefits and drawbacks have any impact on the organisational adoption of OSS. Although some research has been conducted on the topic of OSS adoption, these studies have either focussed on the adoption of specific open source products or have been directed largely at public administrations and companies operating in the primary software sector. Taking the perspective of IS/IT managers, this paper examines the impact of perceived benefits and drawbacks of OSS on its adoption in 13 companies operating in the secondary software sector in Europe. The findings are analysed using the adoption of innovation literature as a lens to reveal how technology, organisational, environmental and individual factors impact OSS adoption.	Computer software; Environmental technology; Industry; Information systems; Management; Managers; Adoption of innovations; Anecdotal evidences; Exploratory studies; Field studies; Individual factors; Open source products; Open Source Software; Perceived benefits; Public administration; Secondary Software Sector; Innovation; Computer software;  Environmental technology;  Industry;  Information systems;  Management;  Managers;  Adoption of innovations;  Anecdotal evidences;  Exploratory studies;  Field studies;  Individual factors;  Open source products;  Open Source Software;  Perceived benefits;  Public administration;  Secondary Software Sector;  Innovation	Morgan, Lorraine; Finnegan, Patrick	Proceedings of the 15th European Conference on Information Systems, ECIS 2007	https://www.scopus.com/record/display.uri?eid=2-s2.0-84869460430&origin=resultslist&sort=r-f&src=s&sid=eeb6ef8742e732ec9108ea4dd5c9ec9b&sot=b&sdt=b&s=TITLE%28how+perceptions+of+open+source+software+influence+adoption+an+exploratory+study%29&sl=86&sessionSearchId=eeb6ef8742e732ec9108ea4dd5c9ec9b&relpos=0		973 - 984	"""@CONFERENCE{Morgan2007973,
    author = ""Morgan, Lorraine and Finnegan, Patrick"",
    title = ""How perceptions of open source software influence adoption: An exploratory study"",
    year = ""2007"",
    journal = ""Proceedings of the 15th European Conference on Information Systems, ECIS 2007"",
    pages = ""973 - 984"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84869460430\&partnerID=40\&md5=0f87ef50ab75c48f72c0a9b61c58e1c5"",
    affiliations = ""University College Cork, Ireland"",
    abstract = ""Much of the assessment of OSS benefits and drawbacks has been based on anecdotal evidence appearing in practitioner publications. Due to its focus on software development, such work neglects whether managerial perceptions of such benefits and drawbacks have any impact on the organisational adoption of OSS. Although some research has been conducted on the topic of OSS adoption, these studies have either focussed on the adoption of specific open source products or have been directed largely at public administrations and companies operating in the primary software sector. Taking the perspective of IS/IT managers, this paper examines the impact of perceived benefits and drawbacks of OSS on its adoption in 13 companies operating in the secondary software sector in Europe. The findings are analysed using the adoption of innovation literature as a lens to reveal how technology, organisational, environmental and individual factors impact OSS adoption."",
    author_keywords = ""Adoption of Innovation; Field Study; Open Source Software; Secondary Software Sector"",
    keywords = ""Computer software; Environmental technology; Industry; Information systems; Management; Managers; Adoption of innovations; Anecdotal evidences; Exploratory studies; Field studies; Individual factors; Open source products; Open Source Software; Perceived benefits; Public administration; Secondary Software Sector; Innovation"",
    correspondence_address = ""L. Morgan; University College Cork, Ireland; email: Lorraine.morgan@ul.ie"",
    language = ""English"",
    abbrev_source_title = ""Proc. Eur. Conf. Inf. Syst., ECIS"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 54; Conference name: 15th European Conference on Information Systems, ECIS 2007; Conference date: 7 June 2007 through 9 June 2007; Conference code: 93851""
}
"""	Included	Included				2	Scopus Signed In		How perceptions of open source software influence adoption: An exploratory study	https://www.scopus.com/record/display.uri?eid=2-s2.0-84869460430&origin=resultslist&sort=r-f&src=s&sid=eeb6ef8742e732ec9108ea4dd5c9ec9b&sot=b&sdt=b&s=TITLE%28how+perceptions+of+open+source+software+influence+adoption+an+exploratory+study%29&sl=86&sessionSearchId=eeb6ef8742e732ec9108ea4dd5c9ec9b&relpos=0		nan; References; Publisher
248	TrustSE	Integrated Software Quality Evaluation: A Fuzzy Multi-Criteria Approach	Software measurement is a key factor in managing, controlling, and improving the software development processes. Software quality is one of the most important factors for assessing the global competitive position of any software company. Thus the quantification of quality parameters and integrating them into quality models is very essential. Software quality criteria are not very easily measured and quantified. Many attempts have been made to exactly quantify the software quality parameters using various models such as ISO/IEC 9126 Quality Model, Boehm's Model, McCall's model, etc. In this paper an attempt has been made to provide a tool for precisely quantifying software quality factors with the help of quality factors stated in ISO/IEC 9126 model. Due to the unpredictable nature of the software quality attributes, the fuzzy multi criteria approach has been used to evolve the quality of the software.	Civil Engineering; Software Quality Evaluation; Fuzzy Multi-Criteria Approach	Singh, Ajit Pratap; Challa, Jagat Sesh	Department of Civil Engineering	http://dspace.bits-pilani.ac.in:8080/jspui/handle/123456789/4096			"""nan"""	Included	Included				2	Google Scholar		Integrated software quality evaluation: a fuzzy multi-criteria approach	http://dspace.bits-pilani.ac.in:8080/jspui/handle/123456789/4096	Korea Science	
249	TrustSE	Knowledge reuse in open source software: An exploratory study of 15 open source projects	To date, there is no investigation of knowledge reuse in open source software projects. This paper focuses on the forms of knowledge reuse and the factors impacting on them. It develops a theory drawn from data of 15 open source software projects and finds that the effort to search, integrate and maintain external knowledge influences the form of knowledge to be reused. Implications for firms and innovation research are discussed.	Data acquisition; Integration; Knowledge acquisition; Project management; Research; Search engines; Software engineering; Firms; Innovation research; Knowledge reuse; Open source software (OSS) projects; Open systems; Data acquisition;  Integration;  Knowledge acquisition;  Project management;  Research;  Search engines;  Software engineering;  Firms;  Innovation research;  Knowledge reuse;  Open source software (OSS) projects;  Open systems	Von Krogh, Georg; Spaeth, Sebastian; Haefliger, Stefan	Proceedings of the Annual Hawaii International Conference on System Sciences	https://doi.org/10.1109/HICSS.2005.378	"1.P. Almeida, A. Phene and R. Grant, ""Innovation and knowledge management: Scanning sourcing and integration"" in Handbook of organizational Learning and Knowledge Management, Baskerville:Blackwell, pp. 356-371, 2003. Google Scholar; 2.L. Argote, ""Organizational learning: Creating retaining and transferring knowledge"" in , Norwell, MA:Knulwer, 1999. Google Scholar; 3.C. Baldwin and K. Clark, ""The Architecture of Cooperation: How Code Architecture Mitigates Free Riding in the Open Source Development Model"", HBS Working paper, 2003. Google Scholar; 4.R.J. Banker and R.J. Kauffman, ""Reuse and productivity in integrated computer-aided software engineering: An empirical study"", MIS Quarterly, vol. 15, no. 3, pp. 375-401, 1991. CrossRef  Google Scholar; 5.B.C. Barnes and T.B. Bollinger, ""Making reuse cost-effective"", IEEE Software, pp. 13-24, January 1991. View Article  Google Scholar; 6.T. Barnes, T. Durek, J. Gaffney and A. Pyster, ""A framework and economic foundation for software reuse"", Proc. Workshop Software Reuse and Maintainability, 1987. Google Scholar; 7.S.L. Brown and K.M. Eisenhardt, ""The Art of Continuous Change: Linking Complexity Theory and Time-Paced Evolution in Relentlessly Shifting Organizations"", Administrative Science Quarterly, vol. 42, no. 1, pp. 1-34, Mar 1997. CrossRef  Google Scholar; 8.Gunnison Carbon, Alex Lesniak and Stoddard Duane, ""Open Source Enterprise Solutions: Developing an E-Business Strategy"" in John Wiley  Sons, New York, 2001. Google Scholar; 9.M. Cusumano, ""Japans software factories"" in , Oxford University Press, 1991. Google Scholar; 10.J.J. Cybulski, R.D. Neal, A. Kram and J.C. Allen, ""Reuse of early life-cycle artifacts: work products and methods and tools"", Annals of Software Engineering, vol. 5, pp. 227-251, 1998. Google Scholar; 11.K.M. Eisenhardt, ""Building Theory from Case Study Research"", Academy of Management Review, vol. 14, no. 4, pp. 532-550, 1989. CrossRef  Google Scholar; 12.L. Fleming, ""Recombinant uncertainty in technological search"", Management Science, vol. 47, no. 1, pp. 117-132, 2001. CrossRef  Google Scholar; 13.W. Frakes and S. Isoda, ""Success factors of systematic reuse"", IEEE Software, vol. 11, no. 5, pp. 15-19, 1994. View Article  Google Scholar; 14.W. Frakes and C.J. Fox, ""Modeling reuse across the software life-cycle"", Journal of Systems Software, vol. 30, pp. 295-301, 1995. CrossRef  Google Scholar; 15.R. Gosh, R. Glogg, B. Krieger and G. Robles, ""Free/Libre and Open Source Software: Survey and Study"" in , The Netherlands:International Institute of Infonomics, University of Maastricht, 2002. Google Scholar; 16.R.M. Grant, ""Toward a Knowledge-Based Theory of the Firm"", Strategic Management Journal, vol. 17, pp. 109-122, 1996. CrossRef  Google Scholar; 17.M.T. Hansen, ""The search-transfer problem: The role of weak ties in sharing knowledge across organization subunits"", Administrative Science Quarterly, vol. 44, pp. 83-111, 1999. CrossRef  Google Scholar; 18.G. Hertel, S. Niedner and S. Herrmann, ""Motivation of software developers in Open Source projects: an Internet-based survey of contributors to the Linux kernel"", Research Policy, vol. 32, no. 7, pp. 1159-1177, 2003. CrossRef  Google Scholar; 19.Y. Kim and E.A. Stohr, ""Software reuse: survey and research directions"", Journal of Management Information Systems, vol. 14, no. 4, pp. 113-147, 1998. CrossRef  Google Scholar; 20.J.C. Knight and M.F. Dunn, ""Software quality through domain-driven certification"", Annals of Software Engineering, vol. 5, pp. 293-315, 1998. Google Scholar; 21.R.N. Langlois, ""Scale scope and the reuse of knowledge"" in Economic Organization and Economic Knowledge, Cheltenham:Edward Elgar, pp. 239-254, 1999. Google Scholar; 22.A. Lynex and P.J. Layzell, ""Organisational considerations for software reuse"", Annals of Software Engineering, vol. 5, pp. 105-124, 1998. Google Scholar; 23.MacKenzie, D. and G. Spinardi, ""Tacit knowledge weapons design and the uninvention of nuclear weapons"", American Journal of Sociology, vol. 101, pp. 44-99, 1995. CrossRef  Google Scholar; 24.A. Majchrak, L.P. Cooper and O.P. Neece, ""Knowledge reuse for innovation"", Management Science, vol. 50, no. 2, pp. 174-188, 2004. CrossRef  Google Scholar; 25.J.G. March, ""exploration and exploitation in organizational learning"", Organization Science, vol. 2, pp. 71-87, 1991. CrossRef  Google Scholar; 26.M.L. Markus, ""Towards a theory of knowledge reuse: Types of knowledge reuse situations and factors in reuse success"", Journal of Management Information Systems, vol. 18, no. 1, pp. 57-93, 2001. CrossRef  Google Scholar; 27.Glyn Moody, ""Rebel code"" in , Cambridge MA:Perseus Publishing, 2001. Google Scholar; 28.A. Narduzzo and A. Rossi, ""Modularity in Action: GNU/Linux and Free/Open Source Software Development Model Unleashed"", Working Paper, 2003. Google Scholar; 29.Siobhan OMahony, ""Guarding the commons: How Open Source contributors protect their work"", Research Policy, vol. 32, no. 7, 2003. CrossRef  Google Scholar; 30.R. Pietro-Diaz, ""Status report: Software reusability"", IEEE Software, vol. 10, no. 3, pp. 61-66, 1993. View Article  Google Scholar"	198	"""@CONFERENCE{VonKrogh2005198,
    author = ""Von Krogh, Georg and Spaeth, Sebastian and Haefliger, Stefan"",
    title = ""Knowledge reuse in open source software: An exploratory study of 15 open source projects"",
    year = ""2005"",
    journal = ""Proceedings of the Annual Hawaii International Conference on System Sciences"",
    pages = ""198"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-27544512340\&partnerID=40\&md5=f188f91204f465e85825270e65c501ff"",
    abstract = ""To date, there is no investigation of knowledge reuse in open source software projects. This paper focuses on the forms of knowledge reuse and the factors impacting on them. It develops a theory drawn from data of 15 open source software projects and finds that the effort to search, integrate and maintain external knowledge influences the form of knowledge to be reused. Implications for firms and innovation research are discussed."",
    keywords = ""Data acquisition; Integration; Knowledge acquisition; Project management; Research; Search engines; Software engineering; Firms; Innovation research; Knowledge reuse; Open source software (OSS) projects; Open systems"",
    issn = ""15301605"",
    language = ""English"",
    abbrev_source_title = ""Proc. Annu. Hawaii Int. Conf. Syst. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 49; Conference name: 38th Annual Hawaii International Conference on System Sciences; Conference date: 3 January 2005 through 6 January 2005; Conference code: 65919""
}
"""	Excluded	Excluded				2	Scopus Signed In		Knowledge reuse in open source software: An exploratory study of 15 open source projects	https://ieeexplore.ieee.org/document/1385643	IEEE	
250	TrustSE	A Process Model for Packaged Software Development	As software development migrates from its roots as a process for building a custom product to a process for building packaged products, there is a greater need for an appropriate product development process model that is market-oriented. Field data, including an exploratory study that we conducted, suggests that process models are not widely used in the package industry. An overview of normative process models in the software engineering, engineering management, and marketing disciplines reveals that all of them fall short in one way or another for packaged software processes. Eight special needs are identified that set the packaged software process model apart from other individual models: addressing multiple user types, differentiating the product, finding the remote customer, involving the remote customer, facilitating speed of development, creating the marketing interface, developing in a highly iterative mode, and releasing a near defect-free product. These needs are operationalized into the proposed packaged software process model. The process model is based on two central constructs: a requirements loop and a quality loop. The loops are separated by a stage in which requirements specifications are frozen. The requirements loop's goal is to discover requirements early and comprehensively. It is incremental (relying on prototyping), has several evaluation and exit points, and structures involvement of customers and other external sources such as marketing. The quality loop addresses the need to reduce defects: it begins with design and coding stages. It is also incremental and has several evaluation and exit points.	Computer software; Data structures; Industrial management; Marketing; Process control; Rapid prototyping; Commercial software; Computer off the shelf software; Engineering management; Packaged software development; Process model; Remote customer; Shrink wrapped software; Software engineering; Computer software;  Data structures;  Industrial management;  Marketing;  Process control;  Rapid prototyping;  Commercial software;  Computer off the shelf software;  Engineering management;  Packaged software development;  Process model;  Remote customer;  Shrink wrapped software;  Software engineering	Carmel, Erran; Becker, Shirley	IEEE Transactions on Engineering Management	https://doi.org/10.1109/17.366403	"1.M. Aoyama, ""Concurrent development process model"", IEEE Software, vol. 10, no. 4, pp. 46-55, July 1993. View Article  Google Scholar; 2.E. H. Bersoff and A. M. Davis, ""Impacts of life cycle models on software configuration management"", Commun. ACM, vol. 34, no. 8, pp. 104-118, Aug. 1991. CrossRef  Google Scholar; 3.D. A. Boag and B. L. Rinholm, ""New product management practices of small high-technology firms"", J. Prod. Innovation Manage., vol. 6, no. 2, pp. 109-122, June 1989. CrossRef  Google Scholar; 4.B. Boehm, ""A spiral model of software development and enhancement"", IEEE Computer, vol. 21, pp. 61-72, May 1988. View Article  Google Scholar; 5.D. H. Bowen, Software Success 1992 Reference Book, San Jose:Software Success, 1992. Google Scholar; 6.F. P. Brooks, ""No silver bullet: essence and accidents of software engineering"", IEEE Computer, vol. 20, pp. 10-19, Apr. 1987. View Article  Google Scholar; 7.B. Bruce, ""Software design dilemma"", The Boulder Co. Bus. Rep., vol. 9, no. 11, Nov. 1990. Google Scholar; 8.E. Carmel, Rapid Development in Software Package Startups, Mar. 1993. Google Scholar; 9.E. Carmel, ""How quality fits into package development"", IEEE Software, vol. 10, no. 5, pp. 85-86, Sept. 1993. View Article  Google Scholar; 10.P. B. Carroll, ""Creating new software was agonizing task for Mitch Kapors firm"", Wall Street J., pp. 1, May 1990. Google Scholar; 11.P. B. Carroll, ""How an IBM attempt to regain PC lead has slid into trouble"", Wall Street J., pp. 1, Dec. 1991. Google Scholar; 12.J. Case, ""How to launch an Inc. 500 company"", Inc., pp. 91-101, Oct. 1992. Google Scholar; 13.R. G. Cooper, ""A process model for industrial new product development"", IEEE Trans. Eng. Management, vol. EM-30, pp. 2-11, Feb. 1983. View Article  Google Scholar; 14.R. G. Cooper and E. J. Kleinschmidt, ""An investigation into the new product process: steps deficiencies and impact"", J. Product Innovation Manage., vol. 3, pp. 71-85, 1986. CrossRef  Google Scholar; 15.R. G. Cooper, ""Stage-gate systems: A new tool for managing new products"", Business Horizons, vol. 33, no. 3, pp. 44-54, May/June 1990. CrossRef  Google Scholar; 16.V. Crandall, ""Product-oriented development methods"" in Proc. Software Development 90, Oakland/San Francisco:Miller Freeman, pp. 421-438, 1990. Google Scholar; 17.C. M. Crawford, New Products Management, IL, Homewood:Irwin, 1987. Google Scholar; 18.M. A. Cusumano, Japans Software Factories: A Challenge to US Management, New York:Oxford Univ. Press, 1991. Google Scholar; 19.R. H. Dunn, Software Quality: Concepts and Plans, NJ, Englewood Cliffs:Prentice Hall, 1990. Google Scholar; 20.A. L. Frank, A Guide for Software Entrepreneurs, NJ, Englewood Cliffs:Prentice Hall, 1982. Google Scholar; 21.D. R. Grahm, ""Incremental development: Review of nonmonolithic lifecycle development models"", Inf. and Software Technol., vol. 31, no. 1, Jan./Feb. 1989. CrossRef  Google Scholar; 22.A. Griffin and Hauser, ""Patterns of communication among marketing engineering and manufacturing--A comparison between two new product teams"", Management Science, vol. 38, no. 3, pp. 360-373, Mar. 1992. CrossRef  Google Scholar; 23.J. Grudin, ""Interactive systems design: Bridging the gap between developers and users"", IEEE Computer, vol. 24, pp. 59-69, Apr. 1991. View Article  Google Scholar; 24.J. Grudin, ""Systematic sources of suboptimal interface design in large product development organizations"", Human Computer Interaction, vol. 6, pp. 147-196, 1991. CrossRef  Google Scholar; 25.L. A. von Hellens, ""Conditions for success in the design and implementation of packaged software: A study of accounting software for small companies in the United Kingdom,"" Unpublished doctoral dissertation, Oxford Institute of Information Management, UK, 1990.; 26.E. von Hippel, The Sources of Innovation, UK, Oxford:Oxford Univ. Press, 1988. Google Scholar; 27.R. T. Hise, L. ONeal, J. U. McNeal and A. Parasuraman, ""The effect of product design activities on commercial success levels of new industrial products"", J. Product Innovation Manage., vol. 6, no. 1, pp. 43-50, 1989. CrossRef  Google Scholar; 28.B. Ives and M. Olson, ""User involvement and MIS success: A review of research"", Manage. Sci., vol. 30, pp. 586-603, 1984. CrossRef  Google Scholar; 29.A. Johne and S. Rowntree, ""High technology product development in small firms: A challenge for marketing specialists"", Technovation, vol. 11, no. 4, pp. 247-259, 1991. CrossRef  Google Scholar; 30.R. K. Lynch, ""The impact of packaged software on user/vendor life cycle concepts"", J. Inf. Syst. Manage., pp. 34-40, 1987. CrossRef  Google Scholar"	50 - 61	"""@ARTICLE{Carmel199550,
    author = ""Carmel, Erran and Becker, Shirley"",
    title = ""A Process Model for Packaged Software Development"",
    year = ""1995"",
    journal = ""IEEE Transactions on Engineering Management"",
    volume = ""42"",
    number = ""1"",
    pages = ""50 - 61"",
    doi = ""10.1109/17.366403"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029256069\&doi=10.1109\%2f17.366403\&partnerID=40\&md5=e152c14af712b80d34068fc56daa3896"",
    affiliations = ""Department of Management, Kogod College of Business Administration, The American University, Washington, DC, 20016, United States"",
    abstract = ""As software development migrates from its roots as a process for building a custom product to a process for building packaged products, there is a greater need for an appropriate product development process model that is market-oriented. Field data, including an exploratory study that we conducted, suggests that process models are not widely used in the package industry. An overview of normative process models in the software engineering, engineering management, and marketing disciplines reveals that all of them fall short in one way or another for packaged software processes. Eight special needs are identified that set the packaged software process model apart from other individual models: addressing multiple user types, differentiating the product, finding the remote customer, involving the remote customer, facilitating speed of development, creating the marketing interface, developing in a highly iterative mode, and releasing a near defect-free product. These needs are operationalized into the proposed packaged software process model. The process model is based on two central constructs: a requirements loop and a quality loop. The loops are separated by a stage in which requirements specifications are frozen. The requirements loop's goal is to discover requirements early and comprehensively. It is incremental (relying on prototyping), has several evaluation and exit points, and structures involvement of customers and other external sources such as marketing. The quality loop addresses the need to reduce defects: it begins with design and coding stages. It is also incremental and has several evaluation and exit points. (c) 1995 IEEE"",
    keywords = ""Computer software; Data structures; Industrial management; Marketing; Process control; Rapid prototyping; Commercial software; Computer off the shelf software; Engineering management; Packaged software development; Process model; Remote customer; Shrink wrapped software; Software engineering"",
    issn = ""00189391"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans Eng Manage"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 72""
}
"""	Excluded	Excluded				2	Scopus Signed In		A process model for packaged software development	https://ieeexplore.ieee.org/document/366403	IEEE	
251	TrustSE	Determinants of the choice of open source software license	In this paper, we examine how the motivations and attitudes of open source software (OSS) developers affect their preference among the three common OSS license types-Strong-Copyleft, Weak-Copyleft, and Non-Copyleft. Despite the importance of the license type and developers to OSS projects, there is little understanding in open source literature of the license choice from a developer's perspective. The results from our empirical study of OSS developers reveal that the intrinsic motivation of challenge (problem solving) is associated with the developers' preference for licenses with moderate restrictions, while the extrinsic motivation of status (through peer recognition) is associated with developers' preference for licenses with least restrictions. We also find that when choosing an OSS license, a developer's attitude toward the software redistribution rights conflicts with his or her attitude toward preserving the social benefits of open source. A major implication of our findings is that OSS managers who want to attract a limited number of highly skilled programmers to their open source project should choose a restrictive OSS license. Similarly, managers of software projects for social programs could attract more developers by choosing a restrictive OSS license.	Copyrights; Managers; Motivation; Open systems; Copyleft; Empirical studies; Extrinsic motivation; FLOSS; Intrinsic motivation; Open source projects; Open sources; Software license; Open source software; Copyrights;  Managers;  Motivation;  Open systems;  Copyleft;  Empirical studies;  Extrinsic motivation;  FLOSS;  Intrinsic motivation;  Open source projects;  Open sources;  Software license;  Open source software	Sen, Ravi; Subramaniam, Chandrasekar; Nelson, Matthew L.	Journal of Management Information Systems	https://doi.org/10.2753/MIS0742-1222250306		207 - 240	"""@ARTICLE{Sen2008207,
    author = ""Sen, Ravi and Subramaniam, Chandrasekar and Nelson, Matthew L."",
    title = ""Determinants of the choice of open source software license"",
    year = ""2008"",
    journal = ""Journal of Management Information Systems"",
    volume = ""25"",
    number = ""3"",
    pages = ""207 - 240"",
    doi = ""10.2753/MIS0742-1222250306"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-66549100192\&doi=10.2753\%2fMIS0742-1222250306\&partnerID=40\&md5=d606f0f5c759f3ed59514246679a1f52"",
    affiliations = ""Department of Information and Operations Management, Mays Business School, Texas AandM University, United States; University of North Carolina, Charlotte, United States; Illinois State University, United States"",
    abstract = ""In this paper, we examine how the motivations and attitudes of open source software (OSS) developers affect their preference among the three common OSS license types-Strong-Copyleft, Weak-Copyleft, and Non-Copyleft. Despite the importance of the license type and developers to OSS projects, there is little understanding in open source literature of the license choice from a developer's perspective. The results from our empirical study of OSS developers reveal that the intrinsic motivation of challenge (problem solving) is associated with the developers' preference for licenses with moderate restrictions, while the extrinsic motivation of status (through peer recognition) is associated with developers' preference for licenses with least restrictions. We also find that when choosing an OSS license, a developer's attitude toward the software redistribution rights conflicts with his or her attitude toward preserving the social benefits of open source. A major implication of our findings is that OSS managers who want to attract a limited number of highly skilled programmers to their open source project should choose a restrictive OSS license. Similarly, managers of software projects for social programs could attract more developers by choosing a restrictive OSS license. (c) 2009 M.E. Sharpe, Inc."",
    author_keywords = ""Copyleft; Copyright; FLOSS; Open source; OSS; Software license"",
    keywords = ""Copyrights; Managers; Motivation; Open systems; Copyleft; Empirical studies; Extrinsic motivation; FLOSS; Intrinsic motivation; Open source projects; Open sources; Software license; Open source software"",
    publisher = ""M.E. Sharpe Inc."",
    issn = ""07421222"",
    coden = ""JMISE"",
    language = ""English"",
    abbrev_source_title = ""J Manage Inf Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 71""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Determinants of the choice of open source software license	https://www.scopus.com/record/display.uri?eid=2-s2.0-66549100192&origin=resultslist&sort=r-f&src=s&sid=4e30fd9a590d12110f62b3ebe7225bba&sot=b&sdt=b&s=TITLE%28determinants+of+the+choice+of+open+source+software+license%29&sl=65&sessionSearchId=4e30fd9a590d12110f62b3ebe7225bba&relpos=0	M.E. Sharpe Inc	nan; References
252	TrustSE	Linux vs. Windows: A Comparison of Application and Platform Innovation Incentives for Open Source and Proprietary Software Platforms	The chapter analyzes and compares the investment incentives of platform and application developers for Linux and Windows. It finds that the level of investment in applications is larger when the operating system is open source rather than proprietary. The comparison of the levels of investment in the operating systems depends on reputation effects and the number of developers. It also develops a short case study comparing Windows and Linux and identifying new directions for open source software research. The chapter analyzes the incentives to invest in application software and an operating system under two different software ecosystems: one based on an open source operating system, such as Linux, and the other based on a proprietary operating system, such as Microsoft Windows.		Economides, Nicholas; Katsamakas, Evangelos	The Economics of Open Source Software Development	https://doi.org/10.1016/B978-044452769-1/50010-X	Bitzer, J.; Bitzer, J., Schroder, P.J.H.Competition and Innovation in a Technology Setting Software Duopoly(2003)DIW Discussion Paper No. 363.Cited 6 times.; Casadesus-Masanell, R., Ghemawat, P.Dynamic Mixed Duopoly: A Model Motivated by Linux vs. Windows(2003)Harvard Business School Working Paper 04-012.Cited 12 times.; Comino, S., Manenti, F.M.; DiBonna, C., Ockman, S.(1999)Open Sources: Voices from the Open Source Revolution.Cited 369 times.O'Reilly & Associates, Sebastopol, USA; Economides, N., Katsamakas, E.Two-sided competition of proprietary vs. open-source technology platforms(2006)Management Scienceforthcoming; Fink, M.(2003)The Business and Economics of Linux and Open Source.Cited 71 times.Prentice Hall, Upper Saddle River, USA; Franke, N., Von Hippel, E.; Johnson, J.P.; Lerner, J., Tirole, J.; Lerner, J., Tirole, J.; Lerner, J., Tirole, J.The Economics of Technology Sharing: Open Source and Beyond(2004)NBER Working Paper No. 10956.Cited 56 times.; Lessig, L.(2001)The Future of Ideas.Cited 193 times.Random House, New York, USA; Mustonen, M.; Mustonen, M.; Raymond, E.S.(2001)The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary.Cited 2844 times.O'Reilly & Associates, Sebastopol, USA; von Hippel, E.(2005)Democratizing Innovation.Cited 4698 times.MIT Press, Cambridge, USA	207 - 218	"""@BOOK{Economides2006207,
    author = ""Economides, Nicholas and Katsamakas, Evangelos"",
    title = ""Linux vs. Windows: A Comparison of Application and Platform Innovation Incentives for Open Source and Proprietary Software Platforms"",
    year = ""2006"",
    journal = ""The Economics of Open Source Software Development"",
    pages = ""207 - 218"",
    doi = ""10.1016/B978-044452769-1/50010-X"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547959581\&doi=10.1016\%2fB978-044452769-1\%2f50010-X\&partnerID=40\&md5=9f276604143ba3707a9f03daa014039b"",
    affiliations = ""Stern School of Business, New York University, United States; Graduate School of Business, Fordham University, New York, United States"",
    abstract = ""The chapter analyzes and compares the investment incentives of platform and application developers for Linux and Windows. It finds that the level of investment in applications is larger when the operating system is open source rather than proprietary. The comparison of the levels of investment in the operating systems depends on reputation effects and the number of developers. It also develops a short case study comparing Windows and Linux and identifying new directions for open source software research. The chapter analyzes the incentives to invest in application software and an operating system under two different software ecosystems: one based on an open source operating system, such as Linux, and the other based on a proprietary operating system, such as Microsoft Windows. (c) 2006 Elsevier B.V. All rights reserved."",
    publisher = ""Elsevier"",
    isbn = ""978-044452769-1"",
    language = ""English"",
    abbrev_source_title = ""The Econ. of Open Source Software Dev."",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 30""
}
"""	Excluded	Excluded				2	Scopus Signed In		Linux vs. Windows: A comparison of application and platform innovation incentives for open source and proprietary software platforms	https://www.scopus.com/record/display.uri?eid=2-s2.0-34547959581&origin=resultslist&sort=r-f&src=s&sid=02fef7dab2629f3eab678a003763b667&sot=b&sdt=b&s=TITLE%28linux+vs+windows+a+comparison+of+application+and+platform+innovation+incentives+for+open+source+and+proprietary+software+platforms%29&sl=137&sessionSearchId=02fef7dab2629f3eab678a003763b667&relpos=0	Elsevier	nan; Keywords
253	TrustSE	Adoption and Utilization of Commercial Software Packages: Exploring Utilization Equilibria, Transitions, Triggers, and Tracks	Researchers and managers are beginning to realize that the full advantages of information technologies are not likely to be realized unless both the information technology and the organizational context are adapted during implementation. This highlights the importance of understanding and managing the relationship between information technology and organizational change. This study takes a new look at an old concept: information system utilization. A theoretical framework grounded in the punctuated equilibrium model contends that the mutual adaptation of commercial software packages and organizational processes follows a discontinuous change pattern where stable periods of utilization are occasionally disturbed by internal and external change triggers. Qualitative data gathered from interviews with software vendor personnel and a representative sample of users provide preliminary support for the existence of utilization equilibrium states. The evidence suggests that, when significant changes occur in the appropriation of technology, the users, or the organization context, the existing equilibrium state is disturbed. Following a temporary transition state characterized by redefinition of the technology and/or its context, the changes are incorporated into altered work processes, and a new equilibrium state develops. Various factors associated with the creation, maintenance, and disruption of equilibrium states are identified. Managers and users can enhance and prolong the useful life of software packages by paying careful attention to implementation efforts that heavily influence initial utilization equilibrium, identifying periods of equilibrium and transition, and managing the internal and external change triggers that influence transitions between equilibrium states.	Information system implementation;; Information system utilization;; Innovation reinvention;; Punctuated equilibrium model;; Structuration model;; Technology assimilation	Lassila, Kathy S.; Brancheau, James C.	Journal of Management Information Systems	https://doi.org/10.1080/07421222.1999.11518246	Amoroso, D.The effect of task characteristics on intended and actual utilization of emerging technologies(1991)Twenty-Fourth Annual Hawaii International Conference on System Sciences, 24 (3), pp. 569-573.; Brancheau, J.C., Wetherbe, J.C.; Clark, T.H., Stoddard, D.B.; Clemons, E.K., Thatcher, M.E., Row, M.C.; Davenport, T.H.(1993)Process Innovation: Reengineering Work Through Information Technology.Cited 3289 times.Boston: Harvard Business School Press; DeLone, W.H., McLean, E.R.; Gersick, C.J.Revolutionary change theories: A multilevel exploration of the punctuated equilibrium paradigm(1991)Academy of Management Review, 16 (1), pp. 10-36.Cited 1469 times.January; Greenwood, R., Hinings, C.R.Understanding strategic change: The contribution of archetypes(1993)Academy of Management Journal, 38 (6), pp. 1052-1081.Cited 606 times.October; Hammer, M., Champy, J.(1993)Reengineering the Corporation.Cited 1158 times.New York: HarperCollins; Hinings, C.R., Greenwood, R.(1988)The Dynamics of Strategic Change.Cited 316 times.New York: Basil Blackwell; Johnson, B.M., Rice, R.E.Reinvention in the innovation process: The case of word processing(1984)The New Media: Communication, Research, and Technology, pp. 157-184.Cited 32 times.R.E. Rice (ed.), Beverly Hills, CA: Sage Publications; Johnson, B.M., Rice, R.E.(1987)Managing Organizational Innovation: The Evolution from Word Processing to Office Information Systems.Cited 120 times.New York: Columbia University Press; Lucas Jr., H.C., Stern, L.N., Walton, E.J., Ginzberg, M.J.; Markus, M.L., Benjamin, R.I.The magic bullet theory in IT-enabled transformation(1997)Sloan Management Review, 39 (2), pp. 55-68.Cited 214 times.Winter; Montazemi, A.R., Cameron, D.A., Gupta, K.M.; Orlikowski, W.J., Hofman, J.D.An improvisational model for change management: The case of groupware technologies(1997)Sloan Management Review, 39 (2), pp. 11-21.Cited 454 times.Winter; Poole, Marshall Scott, DeSanctis, Gerardine; Reinig, B.A., Briggs, R.O., Shepherd, M.M., Yen, J., Nunamaker Jr., J.F.; Rice, R.E., Rogers, E.M.; Rogers, E.M.(1983)The Diffusion of Innovations, 3d Ed..Cited 54888 times.New York: Free Press; Trice, A.W., Treacy, M.E.; Tyre, M.J., Orlikowski, W.J.Exploiting opportunities for technological improvement in organizations(1993)Sloan Management Review, 35 (1), pp. 13-26.Cited 64 times.Fall; Tyre, M.J., Orlikowski, W.J.Windows of opportunity: Temporal patterns of technological adaptation in organizations(1994)Organization Science, 5 (1), pp. 98-118.Cited 699 times.February; Watson, R.T., DeSanctis, G., Poole, M.S.	63 - 90	"""@ARTICLE{Lassila199963,
    author = ""Lassila, Kathy S. and Brancheau, James C."",
    title = ""Adoption and Utilization of Commercial Software Packages: Exploring Utilization Equilibria, Transitions, Triggers, and Tracks"",
    year = ""1999"",
    journal = ""Journal of Management Information Systems"",
    volume = ""16"",
    number = ""2"",
    pages = ""63 - 90"",
    doi = ""10.1080/07421222.1999.11518246"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0033277436\&doi=10.1080\%2f07421222.1999.11518246\&partnerID=40\&md5=a7a3bb8e8e53045a6807f6eed4eb37ee"",
    affiliations = ""Dept. of Comp. Information Systems, Coll. Appl. Sci. and Eng. Technol., University of Southern Colorado, United States; Department of Information Systems, University of Colorado, Boulder, CO, United States; Electronic Commerce Associates; Computer Services, Computer Technology Corporation; University of Colorado, United States"",
    abstract = ""Researchers and managers are beginning to realize that the full advantages of information technologies are not likely to be realized unless both the information technology and the organizational context are adapted during implementation. This highlights the importance of understanding and managing the relationship between information technology and organizational change. This study takes a new look at an old concept: information system utilization. A theoretical framework grounded in the punctuated equilibrium model contends that the mutual adaptation of commercial software packages and organizational processes follows a discontinuous change pattern where stable periods of utilization are occasionally disturbed by internal and external change triggers. Qualitative data gathered from interviews with software vendor personnel and a representative sample of users provide preliminary support for the existence of utilization equilibrium states. The evidence suggests that, when significant changes occur in the appropriation of technology, the users, or the organization context, the existing equilibrium state is disturbed. Following a temporary transition state characterized by redefinition of the technology and/or its context, the changes are incorporated into altered work processes, and a new equilibrium state develops. Various factors associated with the creation, maintenance, and disruption of equilibrium states are identified. Managers and users can enhance and prolong the useful life of software packages by paying careful attention to implementation efforts that heavily influence initial utilization equilibrium, identifying periods of equilibrium and transition, and managing the internal and external change triggers that influence transitions between equilibrium states."",
    author_keywords = ""Information system implementation; Information system utilization; Innovation reinvention; Punctuated equilibrium model; Structuration model; Technology assimilation"",
    publisher = ""M.E. Sharpe Inc."",
    issn = ""07421222"",
    coden = ""JMISE"",
    language = ""English"",
    abbrev_source_title = ""J Manage Inf Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 99""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Adoption and utilization of commercial software packages: Exploring utilization equilibria, transitions, triggers, and tracks	https://www.scopus.com/record/display.uri?eid=2-s2.0-0033277436&origin=resultslist&sort=r-f&src=s&sid=c500a462dda499b3d32c1c60589957e3&sot=b&sdt=b&s=TITLE%28adoption+and+utilization+of+commercial+software+packages+exploring+utilization+equilibria+transitions+triggers+and+tracks%29&sl=128&sessionSearchId=c500a462dda499b3d32c1c60589957e3&relpos=0	M.E. Sharpe Inc	
254	TrustSE	"American hegemony in packaged software trade and the ""culture of software"""	"United States-based companies continue to dominate the global market in packaged software. Although many have predicted this U.S. dominance will wane, particularly as a result of competitive threats from Japan, and more recently from low-wage, developing nations, erosion has yet to be significant. The United States benefits from nine factors that sustain its advantage in this industry: Skilled labor, favorable capital conditions, sophisticated customers, close association with hardware vendors, a competitive marketplace, geographic concentrations, first-mover advantage, a strong intellectual property regime, and English as the software lingua franca. Industry-specific strengths and weaknesses vis-a-vis Europe, Japan, and other nations are also discussed. In addition to these nine better known U.S. competitive advantages, two culturally linked assertions are presented that have received scant attention vis-a-vis competitive analysis. First, the industrial evolution of software development is at an immature stage-still a cottage industry practiced by craftsmen in a cultural milieu of artisans-and thus does not track other global high-technology trends. Second, packaged software is part of the copyright industry (e.g., film and music) in which United States-based firms have a sustained advantage. While manufacturing capabilities are significant for technology industries, culturally related factors, such as creativity, are more important for copyright industries. The U.S. ""culture of software,"" which helps explain U.S. hegemony, is introduced and discussed. The three elements of this culture are the culture of individuals as manifested by the individualistic computer hacker; the entrepreneurial culture and its risk-taking ethos; and the software development culture with its embrace of ad hoc, innovation-driven development as opposed to routinized, production-driven development."	Commercial software;; Competitiveness;; Europe;; Hacker;; Intellectual property;; Japan;; Software development;; United states	Carmel, Erran	Information Society	https://doi.org/10.1080/019722497129322		125 - 142	"""@ARTICLE{Carmel1997125,
    author = ""Carmel, Erran"",
    title = ""American hegemony in packaged software trade and the ""culture of software"""",
    year = ""1997"",
    journal = ""Information Society"",
    volume = ""13"",
    number = ""1"",
    pages = ""125 - 142"",
    doi = ""10.1080/019722497129322"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0031515395\&doi=10.1080\%2f019722497129322\&partnerID=40\&md5=09bafd5e32176d080ad63ac54d19f9fa"",
    affiliations = ""Kogod College of Business Administration, American University, Washington, DC, United States"",
    abstract = ""United States-based companies continue to dominate the global market in packaged software. Although many have predicted this U.S. dominance will wane, particularly as a result of competitive threats from Japan, and more recently from low-wage, developing nations, erosion has yet to be significant. The United States benefits from nine factors that sustain its advantage in this industry: Skilled labor, favorable capital conditions, sophisticated customers, close association with hardware vendors, a competitive marketplace, geographic concentrations, first-mover advantage, a strong intellectual property regime, and English as the software lingua franca. Industry-specific strengths and weaknesses vis-a-vis Europe, Japan, and other nations are also discussed. In addition to these nine better known U.S. competitive advantages, two culturally linked assertions are presented that have received scant attention vis-a-vis competitive analysis. First, the industrial evolution of software development is at an immature stage-still a cottage industry practiced by craftsmen in a cultural milieu of artisans-and thus does not track other global high-technology trends. Second, packaged software is part of the copyright industry (e.g., film and music) in which United States-based firms have a sustained advantage. While manufacturing capabilities are significant for technology industries, culturally related factors, such as creativity, are more important for copyright industries. The U.S. ""culture of software,"" which helps explain U.S. hegemony, is introduced and discussed. The three elements of this culture are the culture of individuals as manifested by the individualistic computer hacker; the entrepreneurial culture and its risk-taking ethos; and the software development culture with its embrace of ad hoc, innovation-driven development as opposed to routinized, production-driven development. (c) 1997 Taylor \& Francis Group, LLC."",
    author_keywords = ""Commercial software; Competitiveness; Europe; Hacker; Intellectual property; Japan; Software development; United states"",
    correspondence_address = ""E. Carmel; Kogod College of Business Administration, American University, Washington, DC, 20016-8044, United States; email: ecarmel@american.edu"",
    issn = ""01972243"",
    language = ""English"",
    abbrev_source_title = ""Inf. Soc."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 58""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		American Hegemony in Packaged Software Trade and the''Culture of Software''	https://www.scopus.com/record/display.uri?eid=2-s2.0-0031515395&origin=resultslist&sort=r-f&src=s&sid=3395aca23edb5edb2b7f52c3afa37414&sot=b&sdt=b&s=TITLE%28american+hegemony+in+packaged+software+trade+and+the+culture+of+software%29&sl=79&sessionSearchId=3395aca23edb5edb2b7f52c3afa37414&relpos=0		nan; References; Publisher
255	TrustSE	A New Method of Model Combination Based on the NHPP Software Reliability Models	For fitting the failure data with non-steady growth trend better, a new method is proposed to establish combinational models by combining two NHPP models, which have better fitting effects in four candidate models including G-O model, S-Shaped model, M-O model and Duane model for the same data. A real-valued genetic algorithm is used to calculate the maximum likelihood estimates of the parameters in combinational models for solving the problem that the traditional maximum likelihood estimation algorithms cannot give parameter estimates when fitting some data sets. Then, five published failure data sets, most of which have non-steady growth trend, are selected to verify the effectiveness of our models. The results show that the MSE of our models are always lower. It reduces at least 3.12\%, and at most 69.31\% compared with the single optimal model. These indicate that our method is feasible and effective.	Software reliability;  NHPP model;  Maximum likelihood estimation;  Genetic algorithm;  Combinational model; Software reliability, NHPP model, Maximum likelihood estimation, Genetic algorithm, Combinational model	Sun, Haiyan; Zhang, Lu; Wu, Jing; Wu, Ji; Yang, Haiyan	ICMSS 2018: Proceedings of the 2018 2nd International Conference on Management Engineering, Software Engineering and Service Sciences	https://doi.org/10.1145/3180374.3181344		153-158	"""@inproceedings{10.1145/3180374.3181344,
    author = ""Sun, Haiyan and Zhang, Lu and Wu, Jing and Wu, Ji and Yang, Haiyan"",
    title = ""A New Method of Model Combination Based on the NHPP Software Reliability Models"",
    year = ""2018"",
    isbn = ""9781450354318"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3180374.3181344"",
    doi = ""10.1145/3180374.3181344"",
    abstract = ""For fitting the failure data with non-steady growth trend better, a new method is proposed to establish combinational models by combining two NHPP models, which have better fitting effects in four candidate models including G-O model, S-Shaped model, M-O model and Duane model for the same data. A real-valued genetic algorithm is used to calculate the maximum likelihood estimates of the parameters in combinational models for solving the problem that the traditional maximum likelihood estimation algorithms cannot give parameter estimates when fitting some data sets. Then, five published failure data sets, most of which have non-steady growth trend, are selected to verify the effectiveness of our models. The results show that the MSE of our models are always lower. It reduces at least 3.12\\%, and at most 69.31\\% compared with the single optimal model. These indicate that our method is feasible and effective."",
    booktitle = ""Proceedings of the 2018 2nd International Conference on Management Engineering, Software Engineering and Service Sciences"",
    pages = ""153-158"",
    numpages = ""6"",
    keywords = ""Software reliability, NHPP model, Maximum likelihood estimation, Genetic algorithm, Combinational model"",
    location = ""Wuhan, China"",
    series = ""ICMSS 2018""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	ACM		Software reliability models	https://doi.org/10.1145/3180374.3181344	Association for Computing Machinery	nan; References; Link
256	TrustSE	Resources contributing to gaining competitive advantage for open source software projects: An application of resource-based theory	Open Source Software (OSS) is an important asset in today's software-intensive society. The success of OSS projects is highly dependent on a number of factors. These factors must be understood and managed as an OSS project progresses. Thus, project management of an OSS project has a decisive role in ensuring the success of its software. The objective of the research is to increase the understanding of the resources affecting the competitiveness of OSS projects. Herewith, the responsiveness of OSS projects to users' needs is assessed via an investigation of the defect-fixing process. A Resource-Based View of the firm (RBV) is used to build theoretical justifications for a set of hypotheses proposed in this study. Data gathered from 427 OSS projects confirmed that developers' interest in and users' contribution to the project as well as frequently updating and releasing the software affect the project's ability to gain competitive advantage through effective defect-fixing. It is also shown that OSS projects that are more popular and have a higher level of organizational communication than others are more likely to gain competitive advantage through effective defect-fixing. Finally, implications of the results for practitioners and the research community are presented.	Computer software; Defects; Industry; Project management; Competitive advantage; Open Source Software; Open source software projects; Open-source softwares; Organizational communication; Project resources; Resource-based theory; Resource-based view of the firm; competitiveness; project management; research; software; theoretical study; Competition; Computer software;  Defects;  Industry;  Project management;  Competitive advantage;  Open Source Software;  Open source software projects;  Open-source softwares;  Organizational communication;  Project resources;  Resource-based theory;  Resource-based view of the firm;  competitiveness;  project management;  research;  software;  theoretical study;  Competition	Ghapanchi, Amir Hossein; Wohlin, Claes; Aurum, Aybuke	International Journal of Project Management	https://doi.org/10.1016/j.ijproman.2013.03.002		139 - 152	"""@ARTICLE{Ghapanchi2014139,
    author = ""Ghapanchi, Amir Hossein and Wohlin, Claes and Aurum, Aybuke"",
    title = ""Resources contributing to gaining competitive advantage for open source software projects: An application of resource-based theory"",
    year = ""2014"",
    journal = ""International Journal of Project Management"",
    volume = ""32"",
    number = ""1"",
    pages = ""139 - 152"",
    doi = ""10.1016/j.ijproman.2013.03.002"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887227813\&doi=10.1016\%2fj.ijproman.2013.03.002\&partnerID=40\&md5=912758af95fde8055aa1e9bbc88cbba5"",
    affiliations = ""School of Information and Communication Technology, Griffith University, Queensland, Australia; Blekinge Institute if Technology, School of Computing, 37179 Karlskrona, Sweden; School of Information Systems, Technology and Management, University of New South Wales, Sydney, Australia"",
    abstract = ""Open Source Software (OSS) is an important asset in today's software-intensive society. The success of OSS projects is highly dependent on a number of factors. These factors must be understood and managed as an OSS project progresses. Thus, project management of an OSS project has a decisive role in ensuring the success of its software. The objective of the research is to increase the understanding of the resources affecting the competitiveness of OSS projects. Herewith, the responsiveness of OSS projects to users' needs is assessed via an investigation of the defect-fixing process. A Resource-Based View of the firm (RBV) is used to build theoretical justifications for a set of hypotheses proposed in this study. Data gathered from 427 OSS projects confirmed that developers' interest in and users' contribution to the project as well as frequently updating and releasing the software affect the project's ability to gain competitive advantage through effective defect-fixing. It is also shown that OSS projects that are more popular and have a higher level of organizational communication than others are more likely to gain competitive advantage through effective defect-fixing. Finally, implications of the results for practitioners and the research community are presented. (c) 2013 Elsevier Ltd."",
    author_keywords = ""Competitive advantage; Open-source software project; Project resources; Resource-based view of the firm"",
    keywords = ""Computer software; Defects; Industry; Project management; Competitive advantage; Open Source Software; Open source software projects; Open-source softwares; Organizational communication; Project resources; Resource-based theory; Resource-based view of the firm; competitiveness; project management; research; software; theoretical study; Competition"",
    correspondence_address = ""A.H. Ghapanchi; School of Information and Communication Technology, Griffith University, Queensland, Australia; email: a.ghapanchi@griffith.edu.au"",
    publisher = ""Elsevier Ltd"",
    issn = ""02637863"",
    language = ""English"",
    abbrev_source_title = ""Int. J. Proj. Manage."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 34; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Resources contributing to gaining competitive advantage for open source software projects: An application of resource-based theory	https://www.scopus.com/record/display.uri?eid=2-s2.0-84887227813&origin=resultslist&sort=r-f&src=s&sid=3a8c831936a0dfd5b3289f2cb9148963&sot=b&sdt=b&s=TITLE%28resources+contributing+to+gaining+competitive+advantage+for+open+source+software+projects+an+application+of+resource+based+theory%29&sl=136&sessionSearchId=3a8c831936a0dfd5b3289f2cb9148963&relpos=0	Elsevier Ltd	nan; References
257	TrustSE	Open Source Software Production: Climbing on the Shoulders of Giants	Open source software production is a successful new production model in which a public good is voluntarily provided. We argue that by studying this new production model we gain valuable insight for organization theory beyond software production. Under specific conditions this model can be generalized, contingent on the interplay of motivational, situational, and institutional factors. It is argued that a production model building on the shoulders of predecessors and peers depends on a well balanced portfolio of intrinsic and extrinsic motivation, low costs for contributors and governance mechanisms that do not crowd out intrinsic motivation.	Networks; open source; intrinsic and extrinsic motivation; public goods; property rights	Margit Osterloh; Sandra Rota; Bernhard Kuster		https://flosshub.org/sites/flosshub.org/files/osterlohrotakuster.pdf		34	"""nan"""	Excluded	Excluded				2	Google Scholar		Open source software production: Climbing on the shoulders of giants	https://flosshub.org/sites/flosshub.org/files/osterlohrotakuster.pdf	Institute for Research in Business Administration, University of Zurich	
258	TrustSE	Governance in Open Source Software development projects: A comparative multi-level analysis	Open source software (OSS) development is a community-oriented, network-centric approach to building complex software systems. OSS projects are typically organized as edge organizations lacking an explicit management regime to control and coordinate decentralized project work. However, a growing number of OSS projects are developing, delivering, and supporting largescale software systems, displacing proprietary software alternatives. Recent empirical studies of OSS projects reveal that OSS developers often self-organize into organizational forms we characterize as evolving socio-technical interaction networks (STINs). STINs emerge in ways that effectively control semi-autonomous OSS developers and coordinate project activities, producing reliable and adaptive software systems. In this paper, we examine how practices and processes enable and govern OSS projects when coalesced and configured as contingent, socio-technical interaction networks. We draw on data sources and results from two ongoing case studies of governance activities and elements in a large OSS project.	Adaptive control systems; Open systems; Software design; Adaptive software systems; Governance activities; Interaction networks; Large-scale software systems; Multi-level analysis; Network-centric approach; Organizational forms; Proprietary software; Open source software; Adaptive control systems;  Open systems;  Software design;  Adaptive software systems;  Governance activities;  Interaction networks;  Large-scale software systems;  Multi-level analysis;  Network-centric approach;  Organizational forms;  Proprietary software;  Open source software	Jensen, Chris; Scacchi, Walt	IFIP Advances in Information and Communication Technology	https://doi.org/10.1007/978-3-642-13244-5_11		130 - 142	"""@ARTICLE{Jensen2010130,
    author = ""Jensen, Chris and Scacchi, Walt"",
    title = ""Governance in Open Source Software development projects: A comparative multi-level analysis"",
    year = ""2010"",
    journal = ""IFIP Advances in Information and Communication Technology"",
    volume = ""319 AICT"",
    pages = ""130 - 142"",
    doi = ""10.1007/978-3-642-13244-5\_11"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867540408\&doi=10.1007\%2f978-3-642-13244-5\_11\&partnerID=40\&md5=d6fa8214867d9325afa42edef95df9fc"",
    affiliations = ""Institute for Software Research, University of California, Irvine, Irvine, CA 92697-3455, United States"",
    abstract = ""Open source software (OSS) development is a community-oriented, network-centric approach to building complex software systems. OSS projects are typically organized as edge organizations lacking an explicit management regime to control and coordinate decentralized project work. However, a growing number of OSS projects are developing, delivering, and supporting largescale software systems, displacing proprietary software alternatives. Recent empirical studies of OSS projects reveal that OSS developers often self-organize into organizational forms we characterize as evolving socio-technical interaction networks (STINs). STINs emerge in ways that effectively control semi-autonomous OSS developers and coordinate project activities, producing reliable and adaptive software systems. In this paper, we examine how practices and processes enable and govern OSS projects when coalesced and configured as contingent, socio-technical interaction networks. We draw on data sources and results from two ongoing case studies of governance activities and elements in a large OSS project. (c) 2010 IFIP International Federation for Information Processing."",
    keywords = ""Adaptive control systems; Open systems; Software design; Adaptive software systems; Governance activities; Interaction networks; Large-scale software systems; Multi-level analysis; Network-centric approach; Organizational forms; Proprietary software; Open source software"",
    correspondence_address = ""C. Jensen; Institute for Software Research, University of California, Irvine, Irvine, CA 92697-3455, United States; email: cjensen@ics.uci.edu"",
    publisher = ""Springer New York LLC"",
    issn = ""18684238"",
    isbn = ""364213243X; 978-364213243-8"",
    language = ""English"",
    abbrev_source_title = ""IFIP Advances in Information and Communication Technology"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 27; Conference name: 6th International IFIP WG 2.13 Conference on Open Source Systems, OSS 2010; Conference date: 30 May 2010 through 2 June 2010; Conference code: 94903; All Open Access, Bronze Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Governance in open source software development projects: A comparative multi-level analysis	https://www.scopus.com/record/display.uri?eid=2-s2.0-84867540408&origin=resultslist&sort=r-f&src=s&sid=a92265f9851e63797729f50dc5631f04&sot=b&sdt=b&s=TITLE%28governance+in+open+source+software+development+projects+a+comparative+multi+level+analysis%29&sl=97&sessionSearchId=a92265f9851e63797729f50dc5631f04&relpos=0	Springer New York LLC	nan; References
259	TrustSE	Software Quality Factors and Software Quality Metrics to Enhance Software Quality Assurance	Aims: Software quality assurance is a formal process for evaluating and documenting the quality of the work products during each stage of the software development lifecycle. The practice of applying software metrics to operational factors and to maintain factors is a complex task. Successful software quality assurance is highly dependent on software metrics. It needs linkage the software quality model and software metrics through quality factors in order to offer measure method for software quality assurance. The contributions of this paper build an appropriate method of Software quality metrics application in quality life cycle with software quality assurance. Design: The purpose approach defines some software metrics in the factors and discussed several software quality assurance model and some quality factors measure method. Methodology: This paper solves customer value evaluation problem are: Build a framework of combination of software quality criteria. Describes software metrics. Build Software quality metrics application in quality life cycle with software quality assurance. Results: From the appropriate method of Software quality metrics application in quality life cycle with software quality assurance, each activity in the software life cycle, there is one or more QA quality measure metrics focus on ensuring the quality of the process and the resulting product. Future research is need to extend and improve the methodology to extend metrics that have been validated on one project, using our criteria, valid measures of quality on future software project	software quality assurance; software metric; software quality factor; software life cycle	Ming-Chang Lee	British Journal of Applied Science & Technology	https://www.researchgate.net/profile/Ming-Chang-Lee-2/publication/263939913_Software_quality_factors_and_software_quality_metrics_to_enhance_software_quality_assurance_BJAST/data/00b4953c64d6e6be8b000000/Software-quality-factors-and-software-quality-metrics-to-enhance-software-quality-assurance-BJAST.pdf		27	"""nan"""	Excluded	Excluded				2	Google Scholar		Software quality factors and software quality metrics to enhance software quality assurance	https://www.researchgate.net/profile/Ming-Chang-Lee-2/publication/263939913_Software_quality_factors_and_software_quality_metrics_to_enhance_software_quality_assurance_BJAST/data/00b4953c64d6e6be8b000000/Software-quality-factors-and-software-quality-metrics-to-enhance-software-quality-assurance-BJAST.pdf		
260	TrustSE	Reputation management in an open source developer social network: An empirical study on determinants of positive evaluations	Successful development of open source software (OSS) projects requires a steady supply of self motivated software developers. Thus a large body of OSS studies focuses on studying the developers' participation motivations. One important motivation is an OSS developer's desire to gain good community reputation which is largely based on positive evaluations from his peers. Therefore, to better motivate developers' project participations through their reputation needs, our empirical analysis adopted a social network perspective to study what factors may affect a developer's decision to positively evaluate one other in a large online open source community called Ohloh. The results surprisingly show that a developer's positive evaluation decision does not depend on his evaluatee's level of OSS-related experience, but rather based on 1) his past reputation (i.e. existing number of positive evaluations), 2) their shared affiliations such as mutual acquaintances, as well as 3) their homophily in location (city), nationality, programming language preference, and community status. We then discuss these findings and their implications for inducing more positive evaluations and better reputation management among open source project members. To the best of our knowledge, this paper is the first research that investigates issues of reputation building and relationship management in an open source development context.	Motivation; Social networking (online); Empirical analysis; Empirical studies; Homophily; Open source communities; Open source developers; Open source development; Open source projects; Open Source Software; Open source software projects; Positive evaluation; Relationship management; Reputation management; Social Network Analysis; Social Networks; Software developer; Computer software; Motivation;  Social networking (online);  Empirical analysis;  Empirical studies;  Homophily;  Open source communities;  Open source developers;  Open source development;  Open source projects;  Open Source Software;  Open source software projects;  Positive evaluation;  Relationship management;  Reputation management;  Social Network Analysis;  Social Networks;  Software developer;  Computer software	Hu, Daning; Zhao, J. Leon; Cheng, Jiesi	Decision Support Systems	https://doi.org/10.1016/j.dss.2012.02.005		526 - 533	"""@ARTICLE{Hu2012526,
    author = ""Hu, Daning and Zhao, J. Leon and Cheng, Jiesi"",
    title = ""Reputation management in an open source developer social network: An empirical study on determinants of positive evaluations"",
    year = ""2012"",
    journal = ""Decision Support Systems"",
    volume = ""53"",
    number = ""3"",
    pages = ""526 - 533"",
    doi = ""10.1016/j.dss.2012.02.005"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84862794851\&doi=10.1016\%2fj.dss.2012.02.005\&partnerID=40\&md5=73996fdbb7ac90ee80786fddd8c28456"",
    affiliations = ""Department of Informatics, University of Zurich, Zurich, Switzerland; Department of Information Systems, City University of Hong Kong, Kowloon, Hong Kong; Department of Management Information Systems, University of Arizona, Tucson AZ 85721, United States"",
    abstract = ""Successful development of open source software (OSS) projects requires a steady supply of self motivated software developers. Thus a large body of OSS studies focuses on studying the developers' participation motivations. One important motivation is an OSS developer's desire to gain good community reputation which is largely based on positive evaluations from his peers. Therefore, to better motivate developers' project participations through their reputation needs, our empirical analysis adopted a social network perspective to study what factors may affect a developer's decision to positively evaluate one other in a large online open source community called Ohloh. The results surprisingly show that a developer's positive evaluation decision does not depend on his evaluatee's level of OSS-related experience, but rather based on 1) his past reputation (i.e. existing number of positive evaluations), 2) their shared affiliations such as mutual acquaintances, as well as 3) their homophily in location (city), nationality, programming language preference, and community status. We then discuss these findings and their implications for inducing more positive evaluations and better reputation management among open source project members. To the best of our knowledge, this paper is the first research that investigates issues of reputation building and relationship management in an open source development context. (c) 2012 Elsevier B.V. All rights reserved."",
    author_keywords = ""Open source software; Positive evaluation; Reputation management; Social network analysis"",
    keywords = ""Motivation; Social networking (online); Empirical analysis; Empirical studies; Homophily; Open source communities; Open source developers; Open source development; Open source projects; Open Source Software; Open source software projects; Positive evaluation; Relationship management; Reputation management; Social Network Analysis; Social Networks; Software developer; Computer software"",
    correspondence_address = ""D. Hu; Department of Informatics, University of Zurich, Zurich, Switzerland; email: hdaning@ifi.uzh.ch"",
    issn = ""01679236"",
    coden = ""DSSYD"",
    language = ""English"",
    abbrev_source_title = ""Decis Support Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 41""
}
"""	Excluded	Excluded				2	Scopus Signed In		Reputation management in an open source developer social network: An empirical study on determinants of positive evaluations	https://www.scopus.com/record/display.uri?eid=2-s2.0-84862794851&origin=resultslist&sort=r-f&src=s&sid=577f42e304b14fa01961b66ce6d704df&sot=b&sdt=b&s=TITLE%28reputation+management+in+an+open+source+developer+social+network+an+empirical+study+on+determinants+of+positive+evaluations%29&sl=130&sessionSearchId=577f42e304b14fa01961b66ce6d704df&relpos=0		nan; References; Publisher
261	TrustSE	Dynamic service selection with reputation management	In open and dynamic internet environments, reputation-based trust is a key issue for service selection which is based on the prediction of services' performance. Typically, the trust and reputation evaluation is based on the feedback of the service quality from all service users. The crucial issue in this evaluation is to detect and deal with false or unfair feedback from dishonest providers and malicious users. In this paper, we first present a dynamic service selection framework then introduce a semantic matching and ranking algorithm to enable the automatic selection. Furthermore, we propose a trust and reputation assessment approach to address trust and reputation of service and service user in various realistic malicious behaviors. Finally, to the best of our knowledge, a set of empirical studies have been conducted to demonstrate that our solution gains good results under collaboration attacks of various malicious behaviors.	Assessment approaches; Automatic selection; Dynamic services; Empirical studies; Internet environment; Key issues; Malicious behavior; Ranking algorithm; Reputation management; Semantic matching; Service matching; Service Quality; Service selection; Trust and reputation; Assessment approaches;  Automatic selection;  Dynamic services;  Empirical studies;  Internet environment;  Key issues;  Malicious behavior;  Ranking algorithm;  Reputation management;  Semantic matching;  Service matching;  Service Quality;  Service selection;  Trust and reputation	Surong, Yan; Xiaolin, Zheng; Deren, Chen	Proceedings - 2010 International Conference on Service Science, ICSS 2010	https://doi.org/10.1109/ICSS.2010.67	"1.M. Palmonari, M. Comerio and F. DePaoli, ""Effective and Flexible NFP-Based Ranking of Web Services"", ICSOC-Service Wave 2009LNCS5900, pp. 546-560. CrossRef  Google Scholar; 2.Y. J. Seo, H. Y. Jeong and Y. J. Song, ""A study on web services selection method based on the negotiation through quality broker: A mautbased approach"", Book Embedded Software and Systems, pp. 65-73, 2005. CrossRef  Google Scholar; 3.Eyhab Al-Masri and Qusay H. Mahmoud, ""Discovering the best web service"", WWW07: Proceedings of the 16th international conference on World Wide Web, pp. 1257-1258, 2007. CrossRef  Google Scholar; 4.U. S. Manikrao and T. V. Prabhakar, ""Dynamic selection of web services with recommendation system"", NWESP05: Proceedings of the International Conference on Next Generation Web Services Practices, pp. 117. View Article  Google Scholar; 5.A. Josang, R. Ismail and C. Boyd, ""A survey of trust and reputation systems for online service provision"", Decision Support Systems, vol. 43, pp. 618-644, 2007. CrossRef  Google Scholar; 6.Y. Wang and J. Vassileva, ""Toward Trust and Reputation Based Web Service Selection: A Survey"", International Transactions on Systems Science and Applications, vol. 3, no. 2, pp. 118-132. Google Scholar; 7.Y. Wang, K. J. Lin, D. Wong and V. Varadharajan, ""Trust management towards service-oriented applications"", SOCA, vol. 3, pp. 129-146, 2009. CrossRef  Google Scholar; 8.Y. Liu, A. Ngu and L. Zheng, ""QoS Computation and Policing in Dynamic Web Service Selection"", Proceedings of WWW 2004 Conf. CrossRef  Google Scholar; 9.L. H Vu, M. Hauswirth and K. Aberer, ""QoS-based Service Selection and Ranking with Trust and Reputation Management"", 13th International Conference on Cooperative Information Systems, pp. 466-483, 2005. CrossRef  Google Scholar; 10.M. G. Uddin, M. Zulkernine and S. Ahamed, ""Collaboration through computation: incorporating trust model into service-based software systems"", SOCA, vol. 3, pp. 47-63, 2009. CrossRef  Google Scholar; 11.H. Q. Yu, S. Reiff-Marganiec and M Tilly, ""Service Selection based on Non-Functional Properties"", ICSOC, pp. 128-138, 2007. Google Scholar"	9 - 16	"""@CONFERENCE{Surong20109,
    author = ""Surong, Yan and Xiaolin, Zheng and Deren, Chen"",
    title = ""Dynamic service selection with reputation management"",
    year = ""2010"",
    journal = ""Proceedings - 2010 International Conference on Service Science, ICSS 2010"",
    pages = ""9 - 16"",
    doi = ""10.1109/ICSS.2010.67"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954948409\&doi=10.1109\%2fICSS.2010.67\&partnerID=40\&md5=933e86b2e2f0eaea8dec0742337acdc5"",
    affiliations = ""College of Computer Science and Technology, Zhejiang University, Zhejiang University of Finance and Economics, Hangzhou, China; College of Computer Science and Technology, Zhejiang University, Hangzhou, China"",
    abstract = ""In open and dynamic internet environments, reputation-based trust is a key issue for service selection which is based on the prediction of services' performance. Typically, the trust and reputation evaluation is based on the feedback of the service quality from all service users. The crucial issue in this evaluation is to detect and deal with false or unfair feedback from dishonest providers and malicious users. In this paper, we first present a dynamic service selection framework then introduce a semantic matching and ranking algorithm to enable the automatic selection. Furthermore, we propose a trust and reputation assessment approach to address trust and reputation of service and service user in various realistic malicious behaviors. Finally, to the best of our knowledge, a set of empirical studies have been conducted to demonstrate that our solution gains good results under collaboration attacks of various malicious behaviors. (c) 2010 IEEE."",
    author_keywords = ""Component; Service matching and ranking; Trust and reputation; Trust and reputation assessment"",
    keywords = ""Assessment approaches; Automatic selection; Dynamic services; Empirical studies; Internet environment; Key issues; Malicious behavior; Ranking algorithm; Reputation management; Semantic matching; Service matching; Service Quality; Service selection; Trust and reputation"",
    correspondence_address = ""Y. Surong; College of Computer Science and Technology, Zhejiang University, Zhejiang University of Finance and Economics, Hangzhou, China; email: persephone@zufe.edu.cn"",
    isbn = ""978-076954017-7"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Int. Conf. Serv. Sci., ICSS"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 6; Conference name: 2010 International Conference on Service Sciences, ICSS 2010; Conference date: 12 May 2010 through 14 May 2010; Conference code: 81201""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Dynamic service selection with reputation management	https://ieeexplore.ieee.org/document/5494369	IEEE	
262	TrustSE	REPUTATION IN OPEN SOURCE SOFTWARE	The 1990s and early 2000s have seen the dramatic rise of open source software, with the Linux operating system as the most salient example. This article focuses on the role of reputation in open source. It describes the importance of the reputations of hackers, software vendors, open source projects, and the open source movement. Although reputation has long been used as an explanation of hacker motivation, this article applies the concept of reputation at multiple levels, and identifies the inter-level relations. The article also emphasizes the particular importance of reputation in inter-firm competition within the open source arena, drawing on strategic management's resource-based view of the firm to do so.		Andrew Watson		https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=10b4374ade427bf9be0287c3faf21adf5fbd249c		30	"""nan"""	Excluded	Excluded				2	Google Scholar		Reputation in open source software	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=10b4374ade427bf9be0287c3faf21adf5fbd249c	Free/Open Source Research Community	
263	TrustSE	Something for nothing: management rejection of open source software in Australia's top firms	Organisations have traditionally relied on commercial software products to support their operations. However, rising software costs and recent corporate failures have brought the provision and value of commercial software into question. Recently, open source software, as a relatively new development in the IS field, has risen in popularity as a possible panacea for these ills. If firms value low acquisition cost, ostensibly plentiful support, and source code access, why have not more firms adopted open source software? The lack of published empirical research in the area means this issue has been inadequately addressed. This paper examines why firms do not adopt open source software. This study surveyed 500 of Australia's top firms to see why managers rejected open source software. The study found that managers rejected open source software because they could not see that it had any relevance to their operations, perceived a lack of reliable ongoing technical support of it and also appeared to see substantial learning costs or had adopted other software that they believed to be incompatible with open source software.	open source software; adoption barriers; open source software;  adoption barriers	Goode, S	INFORMATION \& MANAGEMENT	https://doi.org/10.1016/j.im.2004.01.011		669-681	"""@article{WOS:000229693000003,
    Author = ""Goode, S"",
    Title = ""Something for nothing: management rejection of open source software in Australia's top firms"",
    Journal = ""INFORMATION \\& MANAGEMENT"",
    Year = ""2005"",
    Volume = ""42"",
    Number = ""5"",
    Pages = ""669-681"",
    Month = ""JUL"",
    Abstract = ""Organisations have traditionally relied on commercial software products to support their operations. However, rising software costs and recent corporate failures have brought the provision and value of commercial software into question. Recently, open source software, as a relatively new development in the IS field, has risen in popularity as a possible panacea for these ills. If firms value low acquisition cost, ostensibly plentiful support, and source code access, why have not more firms adopted open source software? The lack of published empirical research in the area means this issue has been inadequately addressed. This paper examines why firms do not adopt open source software. This study surveyed 500 of Australia's top firms to see why managers rejected open source software. The study found that managers rejected open source software because they could not see that it had any relevance to their operations, perceived a lack of reliable ongoing technical support of it and also appeared to see substantial learning costs or had adopted other software that they believed to be incompatible with open source software. (c) 2004 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Australian Natl Univ, Fac Econ \\& Commerce, Sch Business \\& Informat Management, Acton 0200, Australia. Australian Natl Univ, Fac Econ \\& Commerce, Sch Business \\& Informat Management, Acton 0200, Australia."",
    DOI = ""10.1016/j.im.2004.01.011"",
    ISSN = ""0378-7206"",
    EISSN = ""1872-7530"",
    Keywords = ""open source software; adoption barriers"",
    Keywords-Plus = ""INFORMATION-TECHNOLOGY; ORGANIZATIONAL INNOVATION; SUCCESSFUL IMPLEMENTATION; EMPIRICAL-TEST; ADOPTION; SYSTEMS; DIFFUSION; BARRIERS; BUSINESS; DETERMINANTS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""sigi.goode@anu.edu.au"",
    Affiliations = ""Australian National University"",
    ORCID-Numbers = ""Goode, Sigi/0000-0001-5260-746X"",
    Number-of-Cited-References = ""92"",
    Times-Cited = ""80"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""27"",
    Journal-ISO = ""Inf. Manage."",
    Doc-Delivery-Number = ""934FT"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000229693000003"",
    DA = ""2024-11-06""
}
"""	Included	Included				2	Web of Science		Something for nothing: management rejection of open source software in Australia's top firms	https://www.webofscience.com/wos/woscc/full-record/WOS:000229693000003	ELSEVIER	nan; References
264	TrustSE	Trust and Reputation for Successful Software Self-organisation	An increasing number of dynamic software evolution approaches is commonly based on integrating or utilising new pieces of software. This requires resolution of issues such as ensuring awareness of newly available software pieces and selection of most appropriate software pieces to use. Other chapters in this book discuss dynamic software evolution focusing primarily on awareness, integration and utilisation of new software pieces, paying less attention on how selection among different software pieces is made. The selection issue is quite important since in the increasingly dynamic software world quite a few new software pieces occur over time, some of which being of lower utility, lower quality or even potentially harmful and malicious (for example, a new piece of software may contain hidden spyware, or it may be a virus). In this chapter, we describe how computational trust and reputation can be used to avoid choosing new pieces of software that may be malicious or of lower quality. We start by describing computational models of trust and reputation, and subsequently we apply them in two application domains: firstly, in quality assessment of open source software, discussing the case where different trustors have different understandings of trust and trust estimation methods, and secondly, in protection of open collaborative software, such as Wikipedia.	Trust Model; Trust Factor; Computational Trust; Trust Computation; Trust Judgement	Seigneur, Jean-Marc; Dondio, Pierpaolo	Natural Computing Series	https://doi.org/10.1007/978-3-642-17348-6_8		163--192	"""@Inbook{Seigneur2011,
    author = ""Seigneur, Jean-Marc and Dondio, Pierpaolo"",
    editor = ""Di Marzo Serugendo, Giovanna and Gleizes, Marie-Pierre and Karageorgos, Anthony"",
    title = ""Trust and Reputation for Successful Software Self-organisation"",
    bookTitle = ""Self-organising Software: From Natural to Artificial Adaptation"",
    year = ""2011"",
    publisher = ""Springer Berlin Heidelberg"",
    address = ""Berlin, Heidelberg"",
    pages = ""163--192"",
    abstract = ""An increasing number of dynamic software evolution approaches is commonly based on integrating or utilising new pieces of software. This requires resolution of issues such as ensuring awareness of newly available software pieces and selection of most appropriate software pieces to use. Other chapters in this book discuss dynamic software evolution focusing primarily on awareness, integration and utilisation of new software pieces, paying less attention on how selection among different software pieces is made. The selection issue is quite important since in the increasingly dynamic software world quite a few new software pieces occur over time, some of which being of lower utility, lower quality or even potentially harmful and malicious (for example, a new piece of software may contain hidden spyware, or it may be a virus). In this chapter, we describe how computational trust and reputation can be used to avoid choosing new pieces of software that may be malicious or of lower quality. We start by describing computational models of trust and reputation, and subsequently we apply them in two application domains: firstly, in quality assessment of open source software, discussing the case where different trustors have different understandings of trust and trust estimation methods, and secondly, in protection of open collaborative software, such as Wikipedia."",
    isbn = ""978-3-642-17348-6"",
    doi = ""10.1007/978-3-642-17348-6\_8"",
    url = ""https://doi.org/10.1007/978-3-642-17348-6\_8""
}
"""	Excluded	Excluded			Studies that were books or gray literature	2	Springer Link		Trust and reputation for successful software self-organisation	https://link.springer.com/chapter/10.1007/978-3-642-17348-6_8	Springer Berlin Heidelberg	nan; References
265	TrustSE	Do the allocation and quality of intellectual assets affect the reputation of open source software projects?	We study the effect exerted by intellectual asset quality, social interaction, and the (re) allocation of intellectual assets on the reputation of open source software projects by analyzing 3196 software games over twelve months. Our main findings are as follows: (1) the aggregate performance of the individuals involved in a project increases the project's reputation, (2) changes in individual commitment affect project reputation, (3) social interaction increases project reputation, (4) reputation is more sensitive to the performance of individuals than to social interaction, and (5) the quality of intellectual assets and the project's social interaction both moderate the negative effect of changes in individual commitment.	Social networking (online); Social sciences; Aggregate performance; Allocation of assets; Intellectual assets; Open Source Software; Open source software projects; Reputation; Social interactions; Software games; Computer software; Social networking (online);  Social sciences;  Aggregate performance;  Allocation of assets;  Intellectual assets;  Open Source Software;  Open source software projects;  Reputation;  Social interactions;  Software games;  Computer software	Mendez-Duron, Rebeca	Information and Management	https://doi.org/10.1016/j.im.2013.05.006		357 - 368	"""@ARTICLE{Mendez-Duron2013357,
    author = ""Mendez-Duron, Rebeca"",
    title = ""Do the allocation and quality of intellectual assets affect the reputation of open source software projects?"",
    year = ""2013"",
    journal = ""Information and Management"",
    volume = ""50"",
    number = ""7"",
    pages = ""357 - 368"",
    doi = ""10.1016/j.im.2013.05.006"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880299597\&doi=10.1016\%2fj.im.2013.05.006\&partnerID=40\&md5=79edfab454f49b071dce8d31d9a6aaee"",
    affiliations = ""Departament d'Economia de l'Empresa, Universitat de les Illes Balears, 07122 Palma de Mallorca, IB, Carr. de Valldemossa Km 7.5, Spain"",
    abstract = ""We study the effect exerted by intellectual asset quality, social interaction, and the (re) allocation of intellectual assets on the reputation of open source software projects by analyzing 3196 software games over twelve months. Our main findings are as follows: (1) the aggregate performance of the individuals involved in a project increases the project's reputation, (2) changes in individual commitment affect project reputation, (3) social interaction increases project reputation, (4) reputation is more sensitive to the performance of individuals than to social interaction, and (5) the quality of intellectual assets and the project's social interaction both moderate the negative effect of changes in individual commitment. (c) 2013 Elsevier B.V."",
    author_keywords = ""Allocation of assets; Open source software; Reputation; Social networks"",
    keywords = ""Social networking (online); Social sciences; Aggregate performance; Allocation of assets; Intellectual assets; Open Source Software; Open source software projects; Reputation; Social interactions; Software games; Computer software"",
    correspondence_address = ""R. Mendez-Duron; Departament d'Economia de l'Empresa, Universitat de les Illes Balears, 07122 Palma de Mallorca, IB, Carr. de Valldemossa Km 7.5, Spain; email: rebeca.mendez@uib.es"",
    issn = ""03787206"",
    coden = ""IMAND"",
    language = ""English"",
    abbrev_source_title = ""Inf Manage"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 8""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Do the allocation and quality of intellectual assets affect the reputation of open source software projects?	https://www.scopus.com/record/display.uri?eid=2-s2.0-84880299597&origin=resultslist&sort=r-f&src=s&sid=79966e348d7a91c4d6b8e2cf187d962b&sot=b&sdt=b&s=TITLE%28do+the+allocation+and+quality+of+intellectual+assets+affect+the+reputation+of+open+source+software+projects%29&sl=114&sessionSearchId=79966e348d7a91c4d6b8e2cf187d962b&relpos=0		nan; References; Publisher
266	TrustSE	An Approach for Selecting Software-as-a-Service (SaaS) Product	Software-as-a-Service (SaaS) helps organizations avoid capital expenditure and pay for the functionality as an operational expenditure. Though enterprises are unlikely to use SaaS model for all their information systems needs, certain business functionalities such as Sales Force Automation (SFA), are more seen to be implemented using SaaS model. Such demand has prompted quite a few vendors to offer SFA functionality as SaaS. Enterprises need to adopt an objective approach to ensure they select the most appropriate SaaS product for their needs. This paper presents an approach that makes use of Analytic Hierarchy Process (AHP) technique for prioritizing the product features and also for expert-led scoring of the products.	Marketing and sales; Application software; Costs; Automation; Computer architecture; Usability; Subscriptions; Data security; Cloud computing; Conference management; Analytic Hierarchy Process; Operational Expenditure; Parameter Selection; Multi-criteria Decision-making; Comparison Matrix; Global Weight; Product Offerings; Multi-criteria Decision-making Problems; Software-as-a-Service; SaaS; Product Selection; AHP	Manish Godse; Shrikant Mulik	2009 IEEE International Conference on Cloud Computing	https://doi.org/10.1109/CLOUD.2009.74	"1.A. Dubey, and D. Wagle, ""Delivering software as a service, "" McKinsey Quarterly, June 2007. Google Scholar; 2.A. V. Hudli, B. Shivaradhya, and R. V. Hudli, ""Level-4 SaaS applications for healthcare industry, "" COMPUTE '09: Proceedings of the 2nd Bangalore Annual Compute Conference, Proceedings of ACM, January 2009. CrossRef  Google Scholar; 3.C. Mitra, ""Sales Force Automation: Overview of Functional Modules, "" IdeaByte, Giga Information. Google Scholar; 4.L. Herbert, C. F. Ross, and P. Karcher, ""Software- As-A-Service Adoption Expands"", Forrester Research, February 2009. Google Scholar; 5.L. Zeng, B. Benatallah, H. Lei, A. Mgu, D. Flaxer, and H. Chang, ""Flexible Composition of Enterprise Web Services"", Electronic Markets, Volume 13, Number 2, June 2003, pp. 141-152. CrossRef  Google Scholar; 6.Nitu, ""Configurability in SaaS (software as a service) applications"", ISEC '09: Proceeding of the 2nd annual conference on India software engineering conference, February 2009, pp. 19-26. CrossRef  Google Scholar; 7.T. L. Saaty, ""How to make a decision: The Analytic Hierarchy Process"", European Journal of the Operational Research, Volume 48, Issue 1, 5 September 1990, pp. 9-26. CrossRef  Google Scholar; 8.T. L. Saaty, and L. G. Vargas, ""Models, methods, concepts & applications of the Analytical Hierarchy Process"", Kluwer Academic Publisher, 2001. Google Scholar; 9.D. Greschler, T. Mangan, ""Networking lessons in delivering 'Software as a Service': part II"", International Journal of Network Management, Volume 12 Issue 6, John Wiley & Sons Inc., November 2002, pp. 317-321. (Pubitemid 35023085) CrossRef  Google Scholar; 10.H. Liao, C. Tao, ""An Anatomy to SaaS Business Mode Based on Internet, "" ICMECG, 2008 International Conference on Management of e- Commerce and e-Government, 2008, pp.215-220. View Article  Google Scholar; 11.M. S. Bandor, ""Quantitative Methods for Software Selection and Evaluation, "" Technical Note, MU/SEI- 2006-TN-026, September 2006. Google Scholar"			Included	Included				2	IEEE		An approach for selecting software-as-a-service (SaaS) product	https://ieeexplore.ieee.org/document/5284286	IEEE	nan; Pages; Year; Bibtex
267	TrustSE	Motivation, governance, and the viability of hybrid forms in open source software development	Open source software projects rely on the voluntary efforts of thousands of software developers, yet we know little about why developers choose to participate in this collective development process. This paper inductively derives a framework for understanding participation from the perspective of the individual software developer based on data from two software communities with different governance structures. In both communities, a need for software-related improvements drives initial participation. The majority of participants leave the community once their needs are met, however, a small subset remains involved. For this set of developers, motives evolve over time and participation becomes a hobby. These hobbyists are critical to the long-term viability of the software code: They take on tasks that might otherwise go undone and work to maintain the simplicity and modularity of the code. Governance structures affect this evolution of motives. Implications for firms interested in implementing hybrid strategies designed to combine the advantages of open source software development with proprietary ownership and control are discussed.	Behavioral research; Codes (symbols); Data acquisition; Motivation; Software engineering; Governance; Innovations; Open source software development; Volunteers; Hybrid computers; Behavioral research;  Codes (symbols);  Data acquisition;  Motivation;  Software engineering;  Governance;  Innovations;  Open source software development;  Volunteers;  Hybrid computers	Shah, Sonali K.	Management Science	https://doi.org/10.1287/mnsc.1060.0553		1000 - 1014	"""@ARTICLE{Shah20061000,
    author = ""Shah, Sonali K."",
    title = ""Motivation, governance, and the viability of hybrid forms in open source software development"",
    year = ""2006"",
    journal = ""Management Science"",
    volume = ""52"",
    number = ""7"",
    pages = ""1000 - 1014"",
    doi = ""10.1287/mnsc.1060.0553"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745619555\&doi=10.1287\%2fmnsc.1060.0553\&partnerID=40\&md5=a0473aa4aa5c0d2cba82cb69cbcf8945"",
    affiliations = ""University of Illinois at Urbana-Champaign, 465 Wohlers Hall, Champaign, IL 61820, United States"",
    abstract = ""Open source software projects rely on the voluntary efforts of thousands of software developers, yet we know little about why developers choose to participate in this collective development process. This paper inductively derives a framework for understanding participation from the perspective of the individual software developer based on data from two software communities with different governance structures. In both communities, a need for software-related improvements drives initial participation. The majority of participants leave the community once their needs are met, however, a small subset remains involved. For this set of developers, motives evolve over time and participation becomes a hobby. These hobbyists are critical to the long-term viability of the software code: They take on tasks that might otherwise go undone and work to maintain the simplicity and modularity of the code. Governance structures affect this evolution of motives. Implications for firms interested in implementing hybrid strategies designed to combine the advantages of open source software development with proprietary ownership and control are discussed. (c) 2006 INFORMS."",
    author_keywords = ""Governance; Innovation; Motivation; Open source software development; Volunteers"",
    keywords = ""Behavioral research; Codes (symbols); Data acquisition; Motivation; Software engineering; Governance; Innovations; Open source software development; Volunteers; Hybrid computers"",
    correspondence_address = ""S.K. Shah; University of Illinois at Urbana-Champaign, 465 Wohlers Hall, Champaign, IL 61820, United States; email: sonali@uiuc.edu"",
    issn = ""15265501"",
    coden = ""MSCIA"",
    language = ""English"",
    abbrev_source_title = ""Manage Sci"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 674""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Motivation, governance, and the viability of hybrid forms in open source software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-33745619555&origin=resultslist&sort=r-f&src=s&sid=32772e8eb0138f19935159e7d621de7b&sot=b&sdt=b&s=TITLE%28motivation+governance+and+the+viability+of+hybrid+forms+in+open+source+software+development%29&sl=98&sessionSearchId=32772e8eb0138f19935159e7d621de7b&relpos=0		nan; References; Publisher
268	TrustSE	Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects	This chapter contains sections titled: Understanding Motivations of F/OSS Developers, Study Design and Sample Characteristics, Payment Status and Effort in Projects, Creativity and Motivation in Projects, Determinants of Effort, Discussion, Notes		Joseph Feller;; Brian Fitzgerald;; Scott A. Hissam;; Karim R. huff		https://ieeexplore.ieee.org/document/6277090				Excluded	Excluded				2	IEEE		Why hackers do what they do: Understanding motivation and effort in free/open source software projects	https://ieeexplore.ieee.org/document/6277090	MIT Press	nan; Venue; Keywords; References; Pages; Year; Bibtex
269	TrustSE	How social Q&A sites are changing knowledge sharing in open source software communities	Historically, mailing lists have been the preferred means for coordinating development and user support activities. With the emergence and popularity growth of social Q&A sites such as the StackExchange network (e.g., StackOverflow), this is beginning to change. Such sites offer different socio-technical incentives to their participants than mailing lists do, e.g., rich web environments to store and manage content collaboratively, or a place to showcase their knowledge and expertise more vividly to peers or potential recruiters. A key difference between StackExchange and mailing lists is gamification, i.e., StackExchange participants compete to obtain reputation points and badges. In this paper, we use a case study of R (a widely-used tool for data analysis) to investigate how mailing list participation has evolved since the launch of StackExchange. Our main contribution is the assembly of a joint data set from the two sources, in which participants in both the texttt{r-help} mailing list and StackExchange are identifiable. This permits their activities to be linked across the two resources and also over time. With this data set we found that user support activities show a strong shift away from texttt{r-help}. In particular, mailing list experts are migrating to StackExchange, where their behaviour is different. First, participants active both on texttt{r-help} and on StackExchange are more active than those who focus exclusively on only one of the two. Second, they provide faster answers on StackExchange than on texttt{r-help}, suggesting they are motivated by the emph{gamified} environment. To our knowledge, our study is the first to directly chart the changes in behaviour of specific contributors as they migrate into gamified environments, and has important implications for knowledge management in software engineering.	crowdsourced knowledge;  gamification.;  mailing lists;  open source;  social q&a; crowdsourced knowledge, gamification., mailing lists, open source, social q&a	Vasilescu, Bogdan; Serebrenik, Alexander; Devanbu, Prem; Filkov, Vladimir	CSCW '14: Proceedings of the 17th ACM conference on Computer supported cooperative work & social computing	https://doi.org/10.1145/2531602.2531659		342-354	"""@inproceedings{10.1145/2531602.2531659,
    author = ""Vasilescu, Bogdan and Serebrenik, Alexander and Devanbu, Prem and Filkov, Vladimir"",
    title = ""How social Q\&A sites are changing knowledge sharing in open source software communities"",
    year = ""2014"",
    isbn = ""9781450325400"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2531602.2531659"",
    doi = ""10.1145/2531602.2531659"",
    abstract = ""Historically, mailing lists have been the preferred means for coordinating development and user support activities. With the emergence and popularity growth of social Q\&A sites such as the StackExchange network (e.g., StackOverflow), this is beginning to change. Such sites offer different socio-technical incentives to their participants than mailing lists do, e.g., rich web environments to store and manage content collaboratively, or a place to showcase their knowledge and expertise more vividly to peers or potential recruiters. A key difference between StackExchange and mailing lists is gamification, i.e., StackExchange participants compete to obtain reputation points and badges. In this paper, we use a case study of R (a widely-used tool for data analysis) to investigate how mailing list participation has evolved since the launch of StackExchange. Our main contribution is the assembly of a joint data set from the two sources, in which participants in both the texttt{r-help} mailing list and StackExchange are identifiable. This permits their activities to be linked across the two resources and also over time. With this data set we found that user support activities show a strong shift away from texttt{r-help}. In particular, mailing list experts are migrating to StackExchange, where their behaviour is different. First, participants active both on texttt{r-help} and on StackExchange are more active than those who focus exclusively on only one of the two. Second, they provide faster answers on StackExchange than on texttt{r-help}, suggesting they are motivated by the emph{gamified} environment. To our knowledge, our study is the first to directly chart the changes in behaviour of specific contributors as they migrate into gamified environments, and has important implications for knowledge management in software engineering."",
    booktitle = ""Proceedings of the 17th ACM Conference on Computer Supported Cooperative Work \\& Social Computing"",
    pages = ""342-354"",
    numpages = ""13"",
    keywords = ""crowdsourced knowledge, gamification., mailing lists, open source, social q\&a"",
    location = ""Baltimore, Maryland, USA"",
    series = ""CSCW '14""
}
"""	Excluded	Excluded				2	ACM		How social Q&A sites are changing knowledge sharing in open source software communities	https://doi.org/10.1145/2531602.2531659	Association for Computing Machinery	nan; References; Link
270	TrustSE	Towards Reputation-as-a-Service	Reputation is used to regulate relationships of trust in online communities. When deploying a reputation system, it needs to accommodate the requirements and constrains of the specific community in order to assist the community to reach their goals. This paper identifies that there is a need for a framework to define a configurable reputation system with the ability to accommodate the requirements of a variety of online communities. Such a reputation system can be defined as a service on the Cloud, to be composed with the application environment of the online community. This paper introduces the concept of RaaS (Reputation-as-a-Service) and discusses a potential framework for creating a RaaS. In order to achieve such a framework, research is conducted into features of SaaS (Software-as-a-Service) components, user requirements for trust and reputation, and features of current reputation frameworks that can be configured in order to support a reputation service on the Cloud.	Communities; Software as a service; Computer architecture; Organizations; Reliability; Online Communities; User Requirements; Need For Frameworks; Reputation System; Weight Ratio; Information Gathering; Consumer Groups; Access Control; Online Shopping; Specific Algorithm; Set Of Requirements; Good Reputation; Aggregation Algorithm; Representational State Transfer; RaaS; trust; reputation; SaaS; reputation framework	Channel Hillebrand; Marijke Coetzee	2013 Information Security for South Africa	https://doi.org/10.1109/ISSA.2013.6641047	"1.Biz Community, 2012. MasterCard Worldwide reveals online shopping survey. Available at: http://www.bizcommunity.com/ Article/196/168/73927.html [Accessed 02 May 2013]. Google Scholar; 2.Mulpuru, S., Johnson, C. &Roberge, D., 2013. US Online Retail Forecast, 2012 To 2017. http://www.forrester.com/ US+Online+Retail+Forecast+2012+To+2017/ fulltext/-/E-RES93281?objectid=RES93281 [Accessed 16 May 2013]. Google Scholar; 3.Wang, Y. &Vassileva, J., 2007. Toward Trust and Reputation Based Web Service Selection: A Survey. International Transactions on Systems Science and Applications (ITSSA) Journal, 3(2), pp.1-38. Google Scholar; 4.Braithwaite, F. &Woodman, M., 2011. Success Dimensions in Selecting Cloud Software Services. In 37th EUROMICRO Conference on Software Engineering and Advanced Applications., 2011. View Article  Google Scholar; 5.Li, H., 2007. A Configurable Online Reputation Aggregation System. Canada: University of Ottawa. Google Scholar; 6.Gambetta, D., 1990. Can We Trust Trust? In, Trust: Making and. Oxford, 1990. Google Scholar; 7.Huynh, T.D., 2009. A Personalized Framework for Trust Assessment. In SAC' 09. Honolulu, Hawaii, U.S.A., 2009. ACM. CrossRef  Google Scholar; 8.Fahrenholtz, D. &Lamersdorf, W., 2002. Transactional Security for a Distributed Reputation Management System. In Proceedings of the Third International Conference on E-Commerce and Web Technologies (EC-Web)., 2002. Springer. CrossRef  Google Scholar; 9.Vinkovits, M., 2012. Towards Requirements for Trust Management. In 2012 Tenth Annual International Conference on Privacy, Security and Trust., 2012. IEEE Computer Society. View Article  Google Scholar; 10.Marmol, F.G. &Perez, G.M., 2010. Towards pre-standardization of trust and reputation models for distributed and heterogeneous systems. Computer Standards &Interfaces, 32(4), pp.185-96. CrossRef  Google Scholar; 11.Alnemr, R., Schnjakin, M. &Meinel, C., 2011. Towards Context-aware Service-oriented Semantic Reputation Framework. In 2011 International Joint Conference of IEEE TrustCom-11/IEEE ICESS-11/FCST-11., 2011. IEEE Computer Society. View Article  Google Scholar; 12.Sun, W. et al., 2008. Software as a Service: Configuration and Customization Perspectives. In IEEE Congress on Services Part II., 2008. IEEE Computer Society. View Article  Google Scholar; 13.Noorian, Z. &Ulieru, M., 2010. The State of the Art in Trust and Reputation Systems: A Framework for Comparison. Journal of Theoretical and Applied Electronic Commerce Research, 5(2), pp.97-117. CrossRef  Google Scholar; 14.Swamynathan, G., 2006. Reputation management in decentralized networks. Available at: http://www.powershow.com/ view/11e08-Ndu1z/Reputation Management-In-Decentralized Networks-powerpoint-ppt-presentation"" [Accessed 18 March 2013]. Google Scholar; 15.Farmer, F.R. &Glass, B., 2010. Web Reputation Systems. 1st ed. O'Reilly. Google Scholar; 16.Josang, A., Ismail, R. &Boyd, C., 2007. A survey of trust and reputation systems for online service provision. Decision Support Systems, 43(2), pp.618-44. CrossRef  Google Scholar; 17.Desouza, K.C., Jayaraman, A. &Evaristo, J.R., 2003. Knowledge Management in Non-Collocated Environments: A Look at Centralized Vs. Distributed Design Approaches. In Proceedings of the 36th Hawaii International Conference on System Sciences., 2003. IEEE Computer Society. View Article  Google Scholar; 18.Wang, Y., Hori, Y. &SAKURAI, K., 2006. On securing open networks through trust and reputation-architecture, challenges and solutions. In Proceeding of The 1st Joint Workshop on Information Security (JWIS). Seoul Korea,2006. Google Scholar; 19.Marmol, F.M. &Perez, M., 2009. TRMSim-WSN, Trust and Reputation Models Simulator for Wireless Sensor Networks. IEEE. View Article  Google Scholar; 20.Liang, Z. &Shi, W., 2005. Performance Evaluation of Rating Aggregation Algorithms in Reputation Systems. In Collaborative Computing: Networking, Applications and Worksharing. San Jose, CA, 2005. IEEE Computer Society. View Article  Google Scholar; 21.Mell, P. &Grance, T., 2011. The NIST Definition of Cloud Computing (draft). NIST special publication, 145(800). Oracle, 2013. http://www.oracle. com/technetwork/java/javase/jdbc/index.html. Available at: http://www.oracle. com/technetwork/ java/javase/jdbc/index.html [Accessed 19 May 2013]. Google Scholar; 22.Fielding, R.T., 2000. Architectural Styles and the Design of Networkbased Software Architectures. In Doctoral dissertation. University of California, Irvine, 2000. Google Scholar; 23.Liu L, Munro M, 2012, Systematic analysis of centralized online reputation systems, Decision Support Systems, Volume 52, Issue 2, January 2012, pp 438-449, ISSN 0167-9236 CrossRef  Google Scholar; 24.R. Jurca., 2007, Truthful Reputation Mechanisms for Online Systems. PhD thesis, EPFL, 2007. Google Scholar; 25.Z. Liang and W. Shi, ""Analysis of Recommendations on Trust Inference in Open Environment"", Journal of Performance Evaluation, Elsevier 2007. CrossRef  Google Scholar"			Included	Included				2	IEEE		Towards reputation-as-a-service	https://ieeexplore.ieee.org/document/6641047	IEEE	nan; Pages; Year; Bibtex
271	TrustSE	Motivation of software developers in open source projects: An Internet-based survey of contributors to the Linux kernel	The motives of 141 contributors to a large Open Source Software (OSS) project (the Linux kernel) was explored with an Internet-based questionnaire study. Measured factors were both derived from discussions within the Linux community as well as from models from social sciences. Participants' engagement was particularly determined by their identification as a Linux developer, by pragmatic motives to improve own software, and by their tolerance of time investments. Moreover, some of the software development was accomplished by teams. Activities in these teams were particularly determined by participants' evaluation of the team goals as well as by their perceived indispensability and self-efficacy.	Computer operating systems; Motivation; Project management; Social sciences; Software developers; Software engineering; Computer operating systems;  Motivation;  Project management;  Social sciences;  Software developers;  Software engineering	Hertel, Guido; Niedner, Sven; Herrmann, Stefanie	Research Policy	https://doi.org/10.1016/S0048-7333(03)00047-7		1159 - 1177	"""@ARTICLE{Hertel20031159,
    author = ""Hertel, Guido and Niedner, Sven and Herrmann, Stefanie"",
    title = ""Motivation of software developers in open source projects: An Internet-based survey of contributors to the Linux kernel"",
    year = ""2003"",
    journal = ""Research Policy"",
    volume = ""32"",
    number = ""7"",
    pages = ""1159 - 1177"",
    doi = ""10.1016/S0048-7333(03)00047-7"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0038108620\&doi=10.1016\%2fS0048-7333\%2803\%2900047-7\&partnerID=40\&md5=83b4a2cc573e9703156ef6059fce8b0c"",
    affiliations = ""Institut fuer Psychologie, University of Kiel, D-24 098 Kiel, Olshausenstr. 40, Germany"",
    abstract = ""The motives of 141 contributors to a large Open Source Software (OSS) project (the Linux kernel) was explored with an Internet-based questionnaire study. Measured factors were both derived from discussions within the Linux community as well as from models from social sciences. Participants' engagement was particularly determined by their identification as a Linux developer, by pragmatic motives to improve own software, and by their tolerance of time investments. Moreover, some of the software development was accomplished by teams. Activities in these teams were particularly determined by participants' evaluation of the team goals as well as by their perceived indispensability and self-efficacy. (c) 2003 Elsevier Science B.V. All rights reserved."",
    author_keywords = ""Linux; Motivation; Open Source Software; Virtual teams; VIST model"",
    keywords = ""Computer operating systems; Motivation; Project management; Social sciences; Software developers; Software engineering"",
    correspondence_address = ""G. Hertel; Institut fuer Psychologie, University of Kiel, D-24 098 Kiel, Olshausenstr. 40, Germany; email: hertel@psychologie.uni-kiel.de"",
    publisher = ""Elsevier"",
    issn = ""00487333"",
    coden = ""REPYB"",
    language = ""English"",
    abbrev_source_title = ""Res Policy"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 876""
}
"""	Excluded	Excluded				2	Scopus Signed In		Motivation of software developers in Open Source projects: an Internet-based survey of contributors to the Linux kernel	https://www.scopus.com/record/display.uri?eid=2-s2.0-0038108620&origin=resultslist&sort=r-f&src=s&sid=26a6556265eaaa2e9c735ba7d49d0ee5&sot=b&sdt=b&s=TITLE%28motivation+of+software+developers+in+open+source+projects+an+internet+based+survey+of+contributors+to+the+linux+kernel%29&sl=125&sessionSearchId=26a6556265eaaa2e9c735ba7d49d0ee5&relpos=0	Elsevier	nan; References
272	TrustSE	Reputation in open source software virtual communities	Reputation has been considered as a key variable for building successful long-term relationships and is especially relevant in online environments. In this regard, this research aims to analyse the outcomes of this aspect in the field of virtual communities, focusing on open source software (OSS) communities due to their great development in the last years. The data, collected thanks to a web survey using Spanish-speaking members of several OSS virtual communities, showed that reputation exerts a positive and significant effect on both member satisfaction and participation in the community, which are also positively linked. Besides, these two outcomes of reputation boost the member affective commitment to the OSS and, as a consequence, the intention to use OSS products is also increased.	Commerce; Computers; Electronic commerce; Information systems; Open systems; Virtual reality; Open source software; Participation; Reputation; Satisfaction; Virtual communities; Computer software; Commerce;  Computers;  Electronic commerce;  Information systems;  Open systems;  Virtual reality;  Open source software;  Participation;  Reputation;  Satisfaction;  Virtual communities;  Computer software	Casalo, Luis V.; Cisneros, Jesus; Flavian, Carlos; Guinaliu, Miguel	MCCSIS'08 - IADIS Multi Conference on Computer Science and Information Systems; Proceedings e-Commerce 2008	https://www.scopus.com/record/display.uri?eid=2-s2.0-58449118075&origin=resultslist&sort=r-f&src=s&sid=a29fc0d12883ba4e22add581e5fa9c18&sot=b&sdt=b&s=TITLE%28reputation+in+open+source+software+virtual+communities%29&sl=61&sessionSearchId=a29fc0d12883ba4e22add581e5fa9c18&relpos=0		40 - 47	"""@CONFERENCE{Casalo200840,
    author = ""Casalo, Luis V. and Cisneros, Jesus and Flavian, Carlos and Guinaliu, Miguel"",
    title = ""Reputation in open source software virtual communities"",
    year = ""2008"",
    journal = ""MCCSIS'08 - IADIS Multi Conference on Computer Science and Information Systems; Proceedings e-Commerce 2008"",
    pages = ""40 - 47"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-58449118075\&partnerID=40\&md5=241d41ff2691ef24922562e70bc376b7"",
    affiliations = ""University of Zaragoza (Spain), 50.005 Zaragoza, Gran Via 2, Spain"",
    abstract = ""Reputation has been considered as a key variable for building successful long-term relationships and is especially relevant in online environments. In this regard, this research aims to analyse the outcomes of this aspect in the field of virtual communities, focusing on open source software (OSS) communities due to their great development in the last years. The data, collected thanks to a web survey using Spanish-speaking members of several OSS virtual communities, showed that reputation exerts a positive and significant effect on both member satisfaction and participation in the community, which are also positively linked. Besides, these two outcomes of reputation boost the member affective commitment to the OSS and, as a consequence, the intention to use OSS products is also increased. (c) 2008 IADIS."",
    author_keywords = ""Open source software; Participation; Reputation; Satisfaction; Virtual communities"",
    keywords = ""Commerce; Computers; Electronic commerce; Information systems; Open systems; Virtual reality; Open source software; Participation; Reputation; Satisfaction; Virtual communities; Computer software"",
    isbn = ""978-972892466-9"",
    language = ""English"",
    abbrev_source_title = ""MCCSIS - IADIS Multi Conf. Comput. Sci. Inf. Syst.; Proc. e-Commer."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: e-Commerce 2008, MCCSIS'08 - IADIS Multi Conference on Computer Science and Information Systems; Conference date: 25 July 2008 through 27 July 2008; Conference code: 74998""
}
"""	Excluded	Excluded				2	Scopus Signed In		Reputation in Open Source Software Virtual Communities	https://www.scopus.com/record/display.uri?eid=2-s2.0-58449118075&origin=resultslist&sort=r-f&src=s&sid=a29fc0d12883ba4e22add581e5fa9c18&sot=b&sdt=b&s=TITLE%28reputation+in+open+source+software+virtual+communities%29&sl=61&sessionSearchId=a29fc0d12883ba4e22add581e5fa9c18&relpos=0		nan; References; Publisher
273	TrustSE	Reputation in an open source software community: Antecedents and impacts	A developer's reputation in the OSS community is determined by all the evaluations received from his or her peers. While a large body of studies focuses on the importance of developers' reputations in their participation motivations, there is still lack of understanding for two issues. First, which factors can lead to a high developer's reputation? Second, how does the overall reputation of the developers' in a project impact project success? In this study, we develop a theoretical model and conduct an empirical analysis in a large online open source community. The results show that a developer's reputation level is determined by his or her 1) coding quality, 2) the deviation of the commitment behavior, 3) community experience, and 4) collaboration experience. In addition, we find that the group with an overall higher level of reputation would achieve a better performance, while the individual reputation level deviation within the group would impair its technical success. The implications of our findings and the future research directions are then discussed.	Computer software; Open systems; Software engineering; Empirical analysis; Future research directions; Open source communities; Open source software community; Positive evaluation; Project success; Reputation management; Theoretical modeling; Open source software; Computer software;  Open systems;  Software engineering;  Empirical analysis;  Future research directions;  Open source communities;  Open source software community;  Positive evaluation;  Project success;  Reputation management;  Theoretical modeling;  Open source software	Cai, Yuanfeng; Zhu, Dan	Decision Support Systems	https://doi.org/10.1016/j.dss.2016.08.004		103 - 112	"""@ARTICLE{Cai2016103,
    author = ""Cai, Yuanfeng and Zhu, Dan"",
    title = ""Reputation in an open source software community: Antecedents and impacts"",
    year = ""2016"",
    journal = ""Decision Support Systems"",
    volume = ""91"",
    pages = ""103 - 112"",
    doi = ""10.1016/j.dss.2016.08.004"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84993982836\&doi=10.1016\%2fj.dss.2016.08.004\&partnerID=40\&md5=0559932b9842125954e1fa856f82334e"",
    affiliations = ""Zicklin School of Business, Baruch College, City University of New York, New York, NY, United States; College of Business, Iowa State University, Ames, IA, United States"",
    abstract = ""A developer's reputation in the OSS community is determined by all the evaluations received from his or her peers. While a large body of studies focuses on the importance of developers' reputations in their participation motivations, there is still lack of understanding for two issues. First, which factors can lead to a high developer's reputation? Second, how does the overall reputation of the developers' in a project impact project success? In this study, we develop a theoretical model and conduct an empirical analysis in a large online open source community. The results show that a developer's reputation level is determined by his or her 1) coding quality, 2) the deviation of the commitment behavior, 3) community experience, and 4) collaboration experience. In addition, we find that the group with an overall higher level of reputation would achieve a better performance, while the individual reputation level deviation within the group would impair its technical success. The implications of our findings and the future research directions are then discussed. (c) 2016 Elsevier B.V."",
    author_keywords = ""Open source software; Positive evaluation; Project success; Reputation management"",
    keywords = ""Computer software; Open systems; Software engineering; Empirical analysis; Future research directions; Open source communities; Open source software community; Positive evaluation; Project success; Reputation management; Theoretical modeling; Open source software"",
    correspondence_address = ""D. Zhu; College of Business, Iowa State University, Ames, United States; email: dzhu@iastate.edu"",
    publisher = ""Elsevier B.V."",
    issn = ""01679236"",
    coden = ""DSSYD"",
    language = ""English"",
    abbrev_source_title = ""Decis Support Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 38""
}
"""	Included	Included				2	Scopus Signed In		Reputation in an open source software community: Antecedents and impacts	https://www.scopus.com/record/display.uri?eid=2-s2.0-84993982836&origin=resultslist&sort=r-f&src=s&sid=e31ff9be2a629faee6dd3d92d097b8ad&sot=b&sdt=b&s=TITLE%28reputation+in+an+open+source+software+community+antecedents+and+impacts%29&sl=78&sessionSearchId=e31ff9be2a629faee6dd3d92d097b8ad&relpos=0	Elsevier B.V	nan; References
274	TrustSE	Relationships between open source software companies and communities: Observations from Nordic firms	This paper deals with the relationships between firms and communities in open source software (OSS). A particular feature of OSS is that important resources are not directly controlled by firms, but partly reside within communities that co-exist with the firms. Despite this, firms explicitly try to utilize the resources within these communities in order to create and appropriate value. Consequently, the relationships that firms have to these communities influence their way of doing business. Based on case studies of Nordic OSS firms, a typology consisting of symbiotic, commensalistic, and parasitic approaches to handle the firm-community relationship is developed. Depending on the chosen approach, firms encounter different managerial issues and also use different operational means of subtle control. While firms relying on a symbiotic approach have greater possibility to influence the community through subtle means of control, they are also confronted with more challenging managerial issues.	Boundary conditions; Computer software; Economic and social effects; Marketing; Research and development management; Societies and institutions; Topology; Nordic firms; Open source software; Relationships; Source software companies; Electronic communities; Boundary conditions;  Computer software;  Economic and social effects;  Marketing;  Research and development management;  Societies and institutions;  Topology;  Nordic firms;  Open source software;  Relationships;  Source software companies;  Electronic communities	Dahlander, Linus; Magnusson, Mats G.	Research Policy	https://doi.org/10.1016/j.respol.2005.02.003		481 - 493	"""@ARTICLE{Dahlander2005481,
    author = ""Dahlander, Linus and Magnusson, Mats G."",
    title = ""Relationships between open source software companies and communities: Observations from Nordic firms"",
    year = ""2005"",
    journal = ""Research Policy"",
    volume = ""34"",
    number = ""4"",
    pages = ""481 - 493"",
    doi = ""10.1016/j.respol.2005.02.003"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-18844404438\&doi=10.1016\%2fj.respol.2005.02.003\&partnerID=40\&md5=0048529774cdbdcd0e172ce92994cbdc"",
    affiliations = ""Department of Industrial Dynamics, Chalmers University of Technology, Gothenburg 412 96, Sweden; Department of Innovation Engineering and Management, Chalmers University of Technology, Gothenburg 412 96, Sweden"",
    abstract = ""This paper deals with the relationships between firms and communities in open source software (OSS). A particular feature of OSS is that important resources are not directly controlled by firms, but partly reside within communities that co-exist with the firms. Despite this, firms explicitly try to utilize the resources within these communities in order to create and appropriate value. Consequently, the relationships that firms have to these communities influence their way of doing business. Based on case studies of Nordic OSS firms, a typology consisting of symbiotic, commensalistic, and parasitic approaches to handle the firm-community relationship is developed. Depending on the chosen approach, firms encounter different managerial issues and also use different operational means of subtle control. While firms relying on a symbiotic approach have greater possibility to influence the community through subtle means of control, they are also confronted with more challenging managerial issues. (c) 2005 Elsevier B.V. All rights reserved."",
    author_keywords = ""Communities; Open source software; Relationships"",
    keywords = ""Boundary conditions; Computer software; Economic and social effects; Marketing; Research and development management; Societies and institutions; Topology; Nordic firms; Open source software; Relationships; Source software companies; Electronic communities"",
    correspondence_address = ""L. Dahlander; Department of Industrial Dynamics, Chalmers University of Technology, Gothenburg 412 96, Sweden; email: linus.dahlander@mot.chalmers.se"",
    issn = ""00487333"",
    coden = ""REPYB"",
    language = ""English"",
    abbrev_source_title = ""Res Policy"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 343""
}
"""	Excluded	Excluded				2	Scopus Signed In		Relationships between open source software companies and communities: Observations from Nordic firms	https://www.scopus.com/record/display.uri?eid=2-s2.0-18844404438&origin=resultslist&sort=r-f&src=s&sid=9fd53033dc3b7e204fc99f2b7da4535e&sot=b&sdt=b&s=TITLE%28relationships+between+open+source+software+companies+and+communities+observations+from+nordic+firms%29&sl=106&sessionSearchId=9fd53033dc3b7e204fc99f2b7da4535e&relpos=0		nan; References; Publisher
275	TrustSE	A reputation-based mechanism for software vulnerability disclosure	Whether and how to disclose software vulnerability information has been debated intensely. An optimal disclosure policy should balance the tradeoff between its impact on software vendors' incentives and the potential risks imposed on customers. Previous research on software vulnerability primarily focused on the timing aspect of the disclosure policy. In this paper, we investigate another dimension -- the reputation aspect -- of the disclosure policy. We propose a disclosure mechanism integrated with a reputation system which reflects software security level. Reputation by itself can effectively provide an incentive for software vendors to fix vulnerabilities. Furthermore, the reputation operator can partially release vulnerability details to optimize social welfare.	Optimization; Security of data; Disclosure policies; Patch; Potential risks; Reputation systems; Social welfare; Software security; Software vendors; Software vulnerabilities; Timing aspects; Information systems; Optimization;  Security of data;  Disclosure policies;  Patch;  Potential risks;  Reputation systems;  Social welfare;  Software security;  Software vendors;  Software vulnerabilities;  Timing aspects;  Information systems	Zhao, Xia; Chen, Jianqing; Whinston, Andrew B.	Association for Information Systems - 13th Americas Conference on Information Systems, AMCIS 2007: Reaching New Heights	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870158844&origin=resultslist&sort=r-f&src=s&sid=b752ee3e625ce0180174d2a82fbcc9d0&sot=b&sdt=b&s=TITLE%28a+reputation+based+mechanism+for+software+vulnerability+disclosure%29&sl=73&sessionSearchId=b752ee3e625ce0180174d2a82fbcc9d0&relpos=0	Arora, A., Krishman, R., Telang, R., Yang, Y.(2005)An Empirical Analysis of Vendor Response to Software Vulnerability Disclosure.Cited 3 times.Working Paper; Arora, A., Nandkumar, A., Telang, R.; Arora, A., Telang, R., Xu, H.(2005)Optimal Policy For Software Vulnerability Disclosure.Cited 10 times.Working Paper; August, T., Tunca, T.I.; Dellarocas, C.Reputation Mechanism(2006)Handbook On Economics and Information SystemsHendershott, T. ed; Ekmekci, M.(2005)Sustainable Reputations With Rating Systems.Cited 2 times.Working paper; Friedman, E.J., Resnick, P.; Fudenberg, D., Levine, D.K.; Kannan, K., Telang, R.; Mailath, G.J., Samuelson, L.Who wants a good reputation?(2001)Review of Economic Studies, (68), pp. 415-441.Cited 174 times.; Xu, H., Chen, J., Whinston, A.B.(2007)Audited ReputationWorking paper	5053 - 5059	"""@CONFERENCE{Zhao20075053,
    author = ""Zhao, Xia and Chen, Jianqing and Whinston, Andrew B."",
    title = ""A reputation-based mechanism for software vulnerability disclosure"",
    year = ""2007"",
    journal = ""Association for Information Systems - 13th Americas Conference on Information Systems, AMCIS 2007: Reaching New Heights"",
    volume = ""7"",
    pages = ""5053 - 5059"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870158844\&partnerID=40\&md5=c87771660f8f5374319355e786e44f18"",
    affiliations = ""Department of Information, Risk and Operations Management, The University of Texas at Austin, Austin, TX 78712, United States"",
    abstract = ""Whether and how to disclose software vulnerability information has been debated intensely. An optimal disclosure policy should balance the tradeoff between its impact on software vendors' incentives and the potential risks imposed on customers. Previous research on software vulnerability primarily focused on the timing aspect of the disclosure policy. In this paper, we investigate another dimension -- the reputation aspect -- of the disclosure policy. We propose a disclosure mechanism integrated with a reputation system which reflects software security level. Reputation by itself can effectively provide an incentive for software vendors to fix vulnerabilities. Furthermore, the reputation operator can partially release vulnerability details to optimize social welfare."",
    author_keywords = ""Information security; Patch; Reputation systems; Software vulnerability disclosure"",
    keywords = ""Optimization; Security of data; Disclosure policies; Patch; Potential risks; Reputation systems; Social welfare; Software security; Software vendors; Software vulnerabilities; Timing aspects; Information systems"",
    correspondence_address = ""X. Zhao; Department of Information, Risk and Operations Management, The University of Texas at Austin, Austin, TX 78712, United States; email: xia.zhao@phd.mccombs.utexas.edu"",
    isbn = ""978-160423381-0"",
    language = ""English"",
    abbrev_source_title = ""Assoc. Inf. Sys. - Amer. Conf. Inf. Sys., AMCIS: Reaching New Heights"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: 13th Americas Conference on Information Systems, AMCIS 2007; Conference date: 10 August 2007 through 12 August 2007; Conference code: 92969""
}
"""	Excluded	Excluded				2	Scopus Signed In		A Reputation-Based Mechanism for Software Vulnerability Disclosure	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870158844&origin=resultslist&sort=r-f&src=s&sid=b752ee3e625ce0180174d2a82fbcc9d0&sot=b&sdt=b&s=TITLE%28a+reputation+based+mechanism+for+software+vulnerability+disclosure%29&sl=73&sessionSearchId=b752ee3e625ce0180174d2a82fbcc9d0&relpos=0		nan; Publisher
276	TrustSE	Analyzing & Identifying Saas for Development of a Project by Calculating its Reputation	Assessing the quality of external software before integrating it in to the project development is very challenging now days. As IT industry is moving towards newly evolving tool named SaaS(Software as a Service) , the risk of integrating the external software to the project development has been increased . Presently integration of external software is going on, but they use the trad itional way of collecting the feedbacks to identify whether to use that external software into the project or not, which may produce an unfair results at the end of project deployment. So in this perspective we are going to propose an automated framework to rate and select a service by identifying quality and reputation .And we mainly focused on addressing the risk in proposing external software by using quality and reputation of it.	Software as a Service; Quality; Project development; Automation; risks	Bora Rama Rao.	Global Journal of Computer Science and Technology	https://core.ac.uk/download/pdf/539592632.pdf		7	"""nan"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Google Scholar		Analyzing and Identifying SaaS for Development of a Project by calculating its Reputation	https://core.ac.uk/download/pdf/539592632.pdf	Global Journals Inc	
277	TrustSE	Assessing the impact of project founder reputation and project structure on motivation to participate in open source software projects	"Previous literature on Open Source Software (OSS) indicates that participation in Open Source projects is not random; for example, ""Band-wagon"" dynamics, altruism, and technical need in the workplace have been shown to impact individual decisions to participate in OSS projects (Hars and Ou, 2002; Madey, Freeh and Tynan, 2004). Various characteristics of the developer and the project may encourage developers to choose certain projects over others, given the same internal motivating factors. This study investigates the role of the importance of future career benefits to the developer and the developer's OSS ideology in determining the level of participation in OSS projects. We also investigate the moderating role of two factors, project founder reputation and project structure, on developer participation. We propose that a founder's reputation for developing a meritocratic culture and espoused OSS ideology as well as a project's level of decentralization and layered development structure impact developer participation."	Biographies; Computer software; Information systems; Motivation; Founder reputation; Open source projects; Open Source Software; Open source software projects; Open sources; Project structure; Technical needs; Open systems; Biographies;  Computer software;  Information systems;  Motivation;  Founder reputation;  Open source projects;  Open Source Software;  Open source software projects;  Open sources;  Project structure;  Technical needs;  Open systems	Ghosh, Kaushik; Ziegelmayer, Jennifer L.; Ammeter, Anthony P.	Association for Information Systems - 12th Americas Conference On Information Systems, AMCIS 2006	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870046942&origin=resultslist&sort=r-f&src=s&sid=d391055c0613c652d9912c52aa63e11d&sot=b&sdt=b&s=TITLE%28assessing+the+impact+of+project+founder+reputation+and+project+structure+on+motivation+to+participate+in+open+source+software+projects%29&sl=141&sessionSearchId=d391055c0613c652d9912c52aa63e11d&relpos=0	Bergquist, M., Ljungberg, J.; Bitzer, J., Schrettl, W., Schroder, P.J.H.(2004)Intrinsic Motivation In Open Source Software Development.Cited 14 times.Working Paper (No. 2004/19), Diskussionsbeitrage des Fachbereichs Wirtschaftswissenschaft, Freien Universitat Berlin, Retrieved fromhttp://opensource.mit.edu/papers/bitzerschrettlschroder.pdf; Crowston, K., Howison, J.(2004)The Social Structure of Free and Open Source Software.Cited 33 times.Working Paper, FLOSS Research, Retrieved fromhttp://floss.syr.edu; Feller, J., Fitzgerald, B.(2002)Understanding Open Source Software Development.Cited 370 times.Pearson Education, London; Fershtman, C., Gandal, N.(2004)The Determinants of Output Per Contributor In Open Source Projects: An Empirical Examination.Cited 15 times.Working Paper (No. 4329), Center for Economic Policy Research, Retrieved fromhttp://spirit.tau.ac.il/public/gandal/opensource_march1.pdf; Franck, E., Jungwirth, C.(2002)Reconciling Investors and Donators: The Governance Structure of Open Source.Cited 14 times.Working Paper (No. 8), Lehrstuhl fur Unternehmensfuhrung und -politik, Universitat Zurich, Retrieved fromhttp://opensource.mit.edu/papers/jungwirth.pdf; Gacek, C., Arief, B.; Hann, I.-H., Roberts, J., Slaughter, S., Fielding, R.T.(2004)An Empirical Analysis of Economic Returns to Open Source Participation.Cited 13 times.Presented at the American Economic Association Annual Meeting, January 2004, San Diego, CA, USA; Hars, A., Ou, S.; Hertel, G., Niedner, S., Herrmann, S.; Hofstede, G., Neuijen, B., Ohayv, D.D., Sanders, G.Measuring organizational cultures: A qualitative and quantitative study across twenty cases(1990)Administrative Science Quarterly, 35 (2), pp. 286-316.Cited 1480 times.; Lakhani, K.R., Von Hippel, E.; Lerner, J., Tirole, J.; Ljungberg, J.; Madey, G., Freeh, V., Tynan, R.Modeling the free/open source software community: A quantitative investigation(2004)Free/open source software development, pp. 203-220.Cited 58 times.In S. Koch (Ed.), Idea Publishing; Markus, M.L., Manville, B., Agres, C.E.; Mockus, A., Fielding, R.T., Herbsleb, J.D.; Raymond, E.S.; Von Hippel, E., Von Krogh, G.; West, J., O'Mahony, S.	787 - 791	"""@CONFERENCE{Ghosh2006787,
    author = ""Ghosh, Kaushik and Ziegelmayer, Jennifer L. and Ammeter, Anthony P."",
    title = ""Assessing the impact of project founder reputation and project structure on motivation to participate in open source software projects"",
    year = ""2006"",
    journal = ""Association for Information Systems - 12th Americas Conference On Information Systems, AMCIS 2006"",
    volume = ""2"",
    pages = ""787 - 791"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870046942\&partnerID=40\&md5=1af7e833b412cb1c4a7643a5b0d2ee35"",
    affiliations = ""The University of Mississippi, United States"",
    abstract = {Previous literature on Open Source Software (OSS) indicates that participation in Open Source projects is not random; for example, ""Band-wagon"" dynamics, altruism, and technical need in the workplace have been shown to impact individual decisions to participate in OSS projects (Hars and Ou, 2002; Madey, Freeh and Tynan, 2004). Various characteristics of the developer and the project may encourage developers to choose certain projects over others, given the same internal motivating factors. This study investigates the role of the importance of future career benefits to the developer and the developer's OSS ideology in determining the level of participation in OSS projects. We also investigate the moderating role of two factors, project founder reputation and project structure, on developer participation. We propose that a founder's reputation for developing a meritocratic culture and espoused OSS ideology as well as a project's level of decentralization and layered development structure impact developer participation.},
    author_keywords = ""Developer motivation; Founder reputation; Open source ideology; Open source software; Project structure"",
    keywords = ""Biographies; Computer software; Information systems; Motivation; Founder reputation; Open source projects; Open Source Software; Open source software projects; Open sources; Project structure; Technical needs; Open systems"",
    correspondence_address = ""K. Ghosh; The University of Mississippi, United States; email: kghosh@bus.olemiss.edu"",
    isbn = ""978-160423626-2"",
    language = ""English"",
    abbrev_source_title = ""Assoc. Inf. Sys. - Amer. Conf. Inf. Sys., AMCIS"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1; Conference name: 12th Americas Conference on Information Systems, AMCIS 2006; Conference date: 4 August 2006 through 6 August 2006; Conference code: 92965""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Scopus Signed In		Assessing the Impact of Project Founder Reputation and Project Structure on Motivation to Participate in Open Source Software Projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870046942&origin=resultslist&sort=r-f&src=s&sid=d391055c0613c652d9912c52aa63e11d&sot=b&sdt=b&s=TITLE%28assessing+the+impact+of+project+founder+reputation+and+project+structure+on+motivation+to+participate+in+open+source+software+projects%29&sl=141&sessionSearchId=d391055c0613c652d9912c52aa63e11d&relpos=0		nan; Publisher
278	TrustSE	Location, location, location: How network embeddedness affects project success in open source systems	The community-based model for software development in open source environments is becoming a viable JL alternative to traditional firm-based models. To better understand the workings of open source environments, we examine the effects of network embeddedness - or the nature of the relationship among projects and developers - on the success of open source projects. We find that considerable heterogeneity exists in the network embeddedness of open source projects and project managers. We use a visual representation of the affiliation network of projects and developers as well as a formal statistical analysis to demonstrate this heterogeneity and to investigate how these structures differ across projects and project managers. Our main results surround the effect of this differential network embeddedness on project success. We find that network embeddedness has strong and significant effects on both technical and commercial success, but that those effects are quite complex. We use latent class regression analysis to show that multiple regimes exist and that some of the effects of network embeddedness are positive under some regimes and negative under others. We use project age and number of page views to provide insights into the direction of the effect of network embeddedness on project success. Our findings show that different aspects of network embeddedness have powerful but subtle effects on project success and suggest that this is a rich environment for further study.	Computer networks; Mathematical models; Project management; Software engineering; Statistical methods; Visual communication; Affiliation network; Latent class analysis; Network embeddedness; Open source software; Embedded systems; Computer networks;  Mathematical models;  Project management;  Software engineering;  Statistical methods;  Visual communication;  Affiliation network;  Latent class analysis;  Network embeddedness;  Open source software;  Embedded systems	Grewal, Rajdeep; Lilien, Gary L.; Mallapragada, Girish	Management Science	https://doi.org/10.1287/mnsc.1060.0550		1043 - 1056	"""@ARTICLE{Grewal20061043,
    author = ""Grewal, Rajdeep and Lilien, Gary L. and Mallapragada, Girish"",
    title = ""Location, location, location: How network embeddedness affects project success in open source systems"",
    year = ""2006"",
    journal = ""Management Science"",
    volume = ""52"",
    number = ""7"",
    pages = ""1043 - 1056"",
    doi = ""10.1287/mnsc.1060.0550"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745632620\&doi=10.1287\%2fmnsc.1060.0550\&partnerID=40\&md5=816ed585786be646c890542a0c55dce6"",
    affiliations = ""Smeal College of Business, Pennsylvania State University, University Park, PA 16802-1009, United States"",
    abstract = ""The community-based model for software development in open source environments is becoming a viable JL alternative to traditional firm-based models. To better understand the workings of open source environments, we examine the effects of network embeddedness - or the nature of the relationship among projects and developers - on the success of open source projects. We find that considerable heterogeneity exists in the network embeddedness of open source projects and project managers. We use a visual representation of the affiliation network of projects and developers as well as a formal statistical analysis to demonstrate this heterogeneity and to investigate how these structures differ across projects and project managers. Our main results surround the effect of this differential network embeddedness on project success. We find that network embeddedness has strong and significant effects on both technical and commercial success, but that those effects are quite complex. We use latent class regression analysis to show that multiple regimes exist and that some of the effects of network embeddedness are positive under some regimes and negative under others. We use project age and number of page views to provide insights into the direction of the effect of network embeddedness on project success. Our findings show that different aspects of network embeddedness have powerful but subtle effects on project success and suggest that this is a rich environment for further study. (c) 2006 INFORMS."",
    author_keywords = ""Affiliation network; Latent class analysis; Network embeddedness; Open source software"",
    keywords = ""Computer networks; Mathematical models; Project management; Software engineering; Statistical methods; Visual communication; Affiliation network; Latent class analysis; Network embeddedness; Open source software; Embedded systems"",
    correspondence_address = ""R. Grewal; Smeal College of Business, Pennsylvania State University, University Park, PA 16802-1009, United States; email: rug2@psu.edu"",
    issn = ""15265501"",
    coden = ""MSCIA"",
    language = ""English"",
    abbrev_source_title = ""Manage Sci"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 428""
}
"""	Excluded	Excluded				2	Scopus Signed In		Location, location, location: How network embeddedness affects project success in open source systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-33745632620&origin=resultslist&sort=r-f&src=s&sid=5ce8485865068578ff99282cc454d34f&sot=b&sdt=b&s=TITLE%28location+location+location+how+network+embeddedness+affects+project+success+in+open+source+systems%29&sl=105&sessionSearchId=5ce8485865068578ff99282cc454d34f&relpos=0		nan; References; Publisher
279	TrustSE	Collaborative SLA and reputation-based trust management in cloud federations	Industry and academia shift from the single cloud provider paradigm to cloud federations and alternative models, which orchestrate heterogeneous resources, such as Mobile Edge Computing and Fog Computing. In such complex environments, incorrect selection of deployment platform can lead to underwhelming application performance. This dictates the necessity of Service Level Agreements (SLA)and trust management services in order to enforce performance guarantees and enable customers to simultaneously evaluate their application's performance and give performance indicators for future provider selection. In this paper, we propose a collaborative SLA and Reputation-based Trust Management (RTM)solution for federated cloud environment. The SLA service defines clearly the performance metrics and measures the actual performance of the deployed cloud applications. Based on the SLA, the RTM service of the collaborative solution leverages several technical and user's experience metrics to compute the reliability of the cloud providers and the credibility of the customers. A proof of concept of the collaborative solution in a realistic federated environment is provided and validated. The corresponding experimental results demonstrate that it objectively computes the cloud providers' reputation values under various scenarios.	Fog computing; Outsourcing; Application performance; Cloud applications; Federation; Heterogeneous resources; Performance guarantees; Performance indicators; Service Level Agreements; Trust management; Trusted computing; Fog computing;  Outsourcing;  Application performance;  Cloud applications;  Federation;  Heterogeneous resources;  Performance guarantees;  Performance indicators;  Service Level Agreements;  Trust management;  Trusted computing	Papadakis-Vlachopapadopoulos, Konstantinos; Gonzalez, Roman Sosa; Dimolitsas, Ioannis; Dechouniotis, Dimitrios; Ferrer, Ana Juan; Papavassiliou, Symeon	Future Generation Computer Systems	https://doi.org/10.1016/j.future.2019.05.030		498 - 512	"""@ARTICLE{Papadakis-Vlachopapadopoulos2019498,
    author = ""Papadakis-Vlachopapadopoulos, Konstantinos and Gonzalez, Roman Sosa and Dimolitsas, Ioannis and Dechouniotis, Dimitrios and Ferrer, Ana Juan and Papavassiliou, Symeon"",
    title = ""Collaborative SLA and reputation-based trust management in cloud federations"",
    year = ""2019"",
    journal = ""Future Generation Computer Systems"",
    volume = ""100"",
    pages = ""498 - 512"",
    doi = ""10.1016/j.future.2019.05.030"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066067887\&doi=10.1016\%2fj.future.2019.05.030\&partnerID=40\&md5=906891990659c6b3154aae00f878678d"",
    affiliations = ""School of Electrical and Computer Engineering, National Technical University of Athens, Athens, Greece; Research \& Innovation, Atos, Tenerife, Spain; Research \& Innovation, Atos, Barcelona, Spain"",
    abstract = ""Industry and academia shift from the single cloud provider paradigm to cloud federations and alternative models, which orchestrate heterogeneous resources, such as Mobile Edge Computing and Fog Computing. In such complex environments, incorrect selection of deployment platform can lead to underwhelming application performance. This dictates the necessity of Service Level Agreements (SLA)and trust management services in order to enforce performance guarantees and enable customers to simultaneously evaluate their application's performance and give performance indicators for future provider selection. In this paper, we propose a collaborative SLA and Reputation-based Trust Management (RTM)solution for federated cloud environment. The SLA service defines clearly the performance metrics and measures the actual performance of the deployed cloud applications. Based on the SLA, the RTM service of the collaborative solution leverages several technical and user's experience metrics to compute the reliability of the cloud providers and the credibility of the customers. A proof of concept of the collaborative solution in a realistic federated environment is provided and validated. The corresponding experimental results demonstrate that it objectively computes the cloud providers' reputation values under various scenarios. (c) 2019 Elsevier B.V."",
    author_keywords = ""Cloud applications; Federation; SLA; Trust management"",
    keywords = ""Fog computing; Outsourcing; Application performance; Cloud applications; Federation; Heterogeneous resources; Performance guarantees; Performance indicators; Service Level Agreements; Trust management; Trusted computing"",
    correspondence_address = ""K. Papadakis-Vlachopapadopoulos; School of Electrical and Computer Engineering, National Technical University of Athens, Athens, Greece; email: cpapad@netmode.ntua.gr"",
    publisher = ""Elsevier B.V."",
    issn = ""0167739X"",
    coden = ""FGCSE"",
    language = ""English"",
    abbrev_source_title = ""Future Gener Comput Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 42""
}
"""	Excluded	Excluded				2	Scopus Signed In		Collaborative SLA and reputation-based trust management in cloud federations	https://www.scopus.com/record/display.uri?eid=2-s2.0-85066067887&origin=resultslist&sort=r-f&src=s&sid=424fdc5e216c96d4dc6f2265293f4990&sot=b&sdt=b&s=TITLE%28collaborative+sla+and+reputation+based+trust+management+in+cloud+federations%29&sl=83&sessionSearchId=424fdc5e216c96d4dc6f2265293f4990&relpos=0	Elsevier B.V	nan; References
280	TrustSE	The governance of free/open source software projects: Monolithic, multidimensional, or configurational?	This paper presents the results of a qualitative review and synthesis of the literature on open source governance, addressing four key questions: (1) How has open source software (OSS) governance been defined? (2) Has the phenomenon of OSS governance been conceptualized as a monolithic or multidimensional phenomenon? (3) What purposes is OSS governance hypothesized to serve? and (4) What are the dimensions of OSS governance, and how are these dimensions related to each other? The results of the review suggest a framework for future comparative and case study research on OSS governance, and they provide a basis for comparison with research on the governance of other distributed, community-based forms of content and creation.	Collective action;; Common pool resources/public goods;; Coordination theory;; Governance;; Institutional theory;; Motivation;; Open source software	Markus, M. Lynne	Journal of Management and Governance	https://doi.org/10.1007/s10997-007-9021-x		151 - 163	"""@ARTICLE{Markus2007151,
    author = ""Markus, M. Lynne"",
    title = ""The governance of free/open source software projects: Monolithic, multidimensional, or configurational?"",
    year = ""2007"",
    journal = ""Journal of Management and Governance"",
    volume = ""11"",
    number = ""2"",
    pages = ""151 - 163"",
    doi = ""10.1007/s10997-007-9021-x"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547328748\&doi=10.1007\%2fs10997-007-9021-x\&partnerID=40\&md5=e61ae8f3fcba56d1491b56a026b6e254"",
    affiliations = ""Bentley College, Waltham, MA 02452, 175 Forest Street, United States"",
    abstract = ""This paper presents the results of a qualitative review and synthesis of the literature on open source governance, addressing four key questions: (1) How has open source software (OSS) governance been defined? (2) Has the phenomenon of OSS governance been conceptualized as a monolithic or multidimensional phenomenon? (3) What purposes is OSS governance hypothesized to serve? and (4) What are the dimensions of OSS governance, and how are these dimensions related to each other? The results of the review suggest a framework for future comparative and case study research on OSS governance, and they provide a basis for comparison with research on the governance of other distributed, community-based forms of content and creation. (c) Springer Science+Business Media, LLC 2007."",
    author_keywords = ""Collective action; Common pool resources/public goods; Coordination theory; Governance; Institutional theory; Motivation; Open source software"",
    correspondence_address = ""M.L. Markus; Bentley College, Waltham, MA 02452, 175 Forest Street, United States; email: mlmarkus@bentley.edu"",
    issn = ""13853457"",
    language = ""English"",
    abbrev_source_title = ""J. Manage. Gov."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 161""
}
"""	Excluded	Excluded				2	Scopus Signed In		The governance of free/open source software projects: monolithic, multidimensional, or configurational?	https://www.scopus.com/record/display.uri?eid=2-s2.0-34547328748&origin=resultslist&sort=r-f&src=s&sid=146db9b8136fbb96af4e346486eca42b&sot=b&sdt=b&s=TITLE%28the+governance+of+free+open+source+software+projects+monolithic+multidimensional+or+configurational%29&sl=106&sessionSearchId=146db9b8136fbb96af4e346486eca42b&relpos=0		nan; References; Publisher
281	TrustSE	Impacts of license choice and organizational sponsorship on user interest and development activity in open source software projects	What differentiates successful from unsuccessful open source software projects? This paper develops and tests a model of the impacts of license restrictiveness and organizational sponsorship on two indicators of success: user interest in, and development activity on, open source software development projects. Using data gathered from Freshmeat.net and project home pages, the main conclusions derived from the analysis are that (1) license restrictiveness and organizational sponsorship interact to influence user perceptions of the likely utility of open source software in such a way that users are most attracted to projects that are sponsored by nonmarket organizations and that employ nonrestrictive licenses, and (2) licensing and sponsorship address complementary developer motivations such that the influence of licensing on development activity depends on what kind of organizational sponsor a project has. Theoretical and practical implications are discussed, and the paper outlines several avenues for future research.	Computer software; Open systems; Software design; Software engineering; Software testing; Development activity; Open source software projects; Open sources; Organizational sponsorships; Software licensing; Success; User interests; User perceptions; Open source software; Computer software;  Open systems;  Software design;  Software engineering;  Software testing;  Development activity;  Open source software projects;  Open sources;  Organizational sponsorships;  Software licensing;  Success;  User interests;  User perceptions;  Open source software	Stewart, Katherine J.; Ammeter, Anthony P.; Maruping, Likoebe M.	Information Systems Research	https://doi.org/10.1287/isre.1060.0082		126 - 144	"""@ARTICLE{Stewart2006126,
    author = ""Stewart, Katherine J. and Ammeter, Anthony P. and Maruping, Likoebe M."",
    title = ""Impacts of license choice and organizational sponsorship on user interest and development activity in open source software projects"",
    year = ""2006"",
    journal = ""Information Systems Research"",
    volume = ""17"",
    number = ""2"",
    pages = ""126 - 144"",
    doi = ""10.1287/isre.1060.0082"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745038455\&doi=10.1287\%2fisre.1060.0082\&partnerID=40\&md5=dfc8238437c1aff1219420220fa3c068"",
    affiliations = ""Department of Decision and Information Technologies, R. H. Smith School of Business, University of Maryland, College Park, MD 20782, United States; Management Information Systems and Production and Operations Management Department, School of Business Administration, University of Mississippi, University, MS 38677, United States; Information Systems Department, Walton College of Business, University of Arkansas, Fayetteville, AR 72701, United States"",
    abstract = ""What differentiates successful from unsuccessful open source software projects? This paper develops and tests a model of the impacts of license restrictiveness and organizational sponsorship on two indicators of success: user interest in, and development activity on, open source software development projects. Using data gathered from Freshmeat.net and project home pages, the main conclusions derived from the analysis are that (1) license restrictiveness and organizational sponsorship interact to influence user perceptions of the likely utility of open source software in such a way that users are most attracted to projects that are sponsored by nonmarket organizations and that employ nonrestrictive licenses, and (2) licensing and sponsorship address complementary developer motivations such that the influence of licensing on development activity depends on what kind of organizational sponsor a project has. Theoretical and practical implications are discussed, and the paper outlines several avenues for future research. (c) 2006 INFORMS."",
    author_keywords = ""Open source; Software development; Software licensing; Success"",
    keywords = ""Computer software; Open systems; Software design; Software engineering; Software testing; Development activity; Open source software projects; Open sources; Organizational sponsorships; Software licensing; Success; User interests; User perceptions; Open source software"",
    correspondence_address = ""K.J. Stewart; Department of Decision and Information Technologies, R. H. Smith School of Business, University of Maryland, College Park, MD 20782, United States; email: kstewart@rhsmith.umd.edu"",
    publisher = ""INFORMS Inst.for Operations Res.and the Management Sciences"",
    issn = ""10477047"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. Res."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 234""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Impacts of license choice and organizational sponsorship on user interest and development activity in open source software projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-33745038455&origin=resultslist&sort=r-f&src=s&sid=05fbee259ec75c2a5fd5bbbcf38071d1&sot=b&sdt=b&s=TITLE%28impacts+of+license+choice+and+organizational+sponsorship+on+user+interest+and+development+activity+in+open+source+software+projects%29&sl=138&sessionSearchId=05fbee259ec75c2a5fd5bbbcf38071d1&relpos=0	INFORMS Inst.for Operations Res.and the Management Sciences	nan; References
282	TrustSE	Why open source software can succeed	The paper discusses three key economic problems raised by the emergence of Open Source: motivation, co-ordination, and diffusion. First, the movement took off through the activity of a community that did not follow profit motivations. Second, a hierarchical co-ordination emerged without proprietary rights. Third, Open Source systems diffused in environments dominated by proprietary standards. The paper shows that recent developments in the theory of diffusion of technologies with network externality may help to explain these phenomena. A simulation model based on heterogeneous agents is developed in order to identify the relevant factors in the diffusion of the technology.	Codes (symbols); Economics; Hierarchical systems; Motivation; Open software; Software engineering; Codes (symbols);  Economics;  Hierarchical systems;  Motivation;  Open software;  Software engineering	Bonaccorsi, Andrea; Rossi, Cristina	Research Policy	https://doi.org/10.1016/S0048-7333(03)00051-9	Arthur, W.B.Competing technologies, increasing returns, and lock-in by historical events(1989)Economic Journal, 99, pp. 116-131.Cited 4279 times.; Reference information not available.; Baldwin, C.Y., Clark, K.B.; Bensen, S., Farrell, J.Choosing how to compete: Strategies and tactics in standardisation(1994)Journal of Economics Perspectives, 8 (2), pp. 117-131.Cited 511 times.; Reference information not available.; Chamberlin, J.; Reference information not available.; David, P.A.A contribution to the theory of diffusion(1969)Centre for Research in Economic Growth Research Memorandum, 71.Cited 15 times.Stanford University, Stanford; David, P.A.; Economides, N.; Reference information not available.; Reference information not available.; Reference information not available.; Geroski, P.A.; Reference information not available.; Glass, R.Of Open Source, Linux and Hype(1999)IEEE Software, 16 (1), pp. 126-128.Cited 10 times.; Reference information not available.; Reference information not available.; Hecker, Frank; Loch, C.H., Huberman, B.A.; Reference information not available.; Katz, M.L., Shapiro, C.; Koch, S., Schneider, G.; Lakhani, K.R., Von Hippel, E.; Lerner, J., Tirole, J.The simple economy of open source(1999)Working Paper, 7600.Cited 125 times.NBER Working Series. NBER, Cambridge, MA; Reference information not available.; Reference information not available.; Reference information not available.; Perkins, G.; Reference information not available.; Reference information not available.; Reference information not available.; Reference information not available.; Sanders, J.; Reference information not available.; Reference information not available.; Reference information not available.; Reference information not available.; Reference information not available.; Reference information not available.; Witt, U.	1243 - 1258	"""@ARTICLE{Bonaccorsi20031243,
    author = ""Bonaccorsi, Andrea and Rossi, Cristina"",
    title = ""Why open source software can succeed"",
    year = ""2003"",
    journal = ""Research Policy"",
    volume = ""32"",
    number = ""7"",
    pages = ""1243 - 1258"",
    doi = ""10.1016/S0048-7333(03)00051-9"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0037696884\&doi=10.1016\%2fS0048-7333\%2803\%2900051-9\&partnerID=40\&md5=36df132544c1a6b719e2a8e7bb786874"",
    affiliations = ""Lab. of Economics and Management, Sant'anna School of Advanced Studies, P.zza Martiri per la Liberta 33, 56127 Pisa, Italy"",
    abstract = ""The paper discusses three key economic problems raised by the emergence of Open Source: motivation, co-ordination, and diffusion. First, the movement took off through the activity of a community that did not follow profit motivations. Second, a hierarchical co-ordination emerged without proprietary rights. Third, Open Source systems diffused in environments dominated by proprietary standards. The paper shows that recent developments in the theory of diffusion of technologies with network externality may help to explain these phenomena. A simulation model based on heterogeneous agents is developed in order to identify the relevant factors in the diffusion of the technology. (c) 2003 Elsevier Science B.V. All rights reserved."",
    author_keywords = ""Diffusion; Network externality; Open Source"",
    keywords = ""Codes (symbols); Economics; Hierarchical systems; Motivation; Open software; Software engineering"",
    correspondence_address = ""A. Bonaccorsi; Lab. of Economics and Management, Sant'anna School of Advanced Studies, 56127 Pisa, P.zza Martiri per la Liberta 33, Italy; email: bonaccorsi@sssup.it"",
    publisher = ""Elsevier"",
    issn = ""00487333"",
    coden = ""REPYB"",
    language = ""English"",
    abbrev_source_title = ""Res Policy"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 463; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Why open source software can succeed	https://www.scopus.com/record/display.uri?eid=2-s2.0-0037696884&origin=resultslist&sort=r-f&src=s&sid=695b194724363c79147bed134541da3a&sot=b&sdt=b&s=TITLE%28why+open+source+software+can+succeed%29&sl=43&sessionSearchId=695b194724363c79147bed134541da3a&relpos=0	Elsevier	
283	TrustSE	Intrinsic motivation in open source software development	This papers sheds light on the puzzling fact that even though open source software (OSS) is a public good, it is developed for free by highly qualified, young, motivated individuals, and evolves at a rapid pace. We show that when OSS development is understood as the private provision of a public good, these features emerge quite naturally. We adapt a dynamic private-provision-of-public-goods model to reflect key aspects of the OSS phenomenon, such as play value or homo ludens payoff, user-programmers' and gift culture benefits. Such intrinsic motives feature extensively in the wider OSS literature and contribute new insights to the economic analysis. Journal of Comparative Economics 35 (1) (2007) 160-169.	Homo ludens;; Open source software;; Public goods;; War of attrition	Bitzer, Jurgen; Schrettl, Wolfram; Schroder, Philipp J.H.	Journal of Comparative Economics	https://doi.org/10.1016/j.jce.2006.10.001	Reference information not available.; Bilodeau, M., Slivinski, A.; Bitzer, J.; Bitzer, J., Schroder, P.J.H.; Bitzer, J.D., Schroder, P.J.H.; Reference information not available.; Bliss, C., Nalebuff, B.; Deci, E.L., Ryan, R.M.(1985)Intrinsic Motivation and Self-Determination in Human Behavior.Cited 18399 times.Plenum, New York/London; Reference information not available.; Frey, B.S., Osterloh, M.(2002)Successful Management by Motivation: Balancing Intrinsic and Extrinsic Incentives.Cited 173 times.Springer, Berlin; Hars, A., Ou, S.; Hendricks, K., Weiss, A., Wilson, C.The war of attrition in continuous time with complete information(1988)International Economic Review, 29, pp. 663-680.Cited 111 times.; Hertel, G., Niedner, S., Herrmann, S.; Huizinga, J.(1938)Homo Ludens: A Study on the Play Element in Culture.Cited 5177 times.Beacon Press Reprint 1971; Johnson, J.P.; Knuth, D.E.; Krishnamurthy, S.Cave or community? An empirical examination of 100 mature open source projects. First Monday 7. Available athttp://www.firstmonday.org; Lakhani, K.R., Wolf, R.G.Why hackers do what they do: Understanding motivation effort in free/open source software projects(2005)Perspectives on Free and Open Source Software, pp. 3-21.Cited 829 times.Feller J., Fitzgerald B., Hissam S.A., and Lakhani K.R. (Eds), MIT Press, Cambridge; Lerner, J., Tirole, J.; Lerner, J., Tirole, J.; Lindenberg, S.; Luthiger, B.; Mustonen, M.; Myatt, D.P., Wallace, C.; Raymond, E.S.Homesteading the noosphere. Revision 1.22, 2000/08/24, first version 1998. Available athttp://www.catb.org/~esr/writings/cathedral-bazaar/homesteading/; Raymond, E.S.The cathedral and the bazaar. Revision 1.51, 2000/08/24, first version 1997. Available athttp://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/; Rossi, M.A.; Ryan, R.M., Deci, E.L.; Stallman, R.The GNU operating system and the free software movement(1999)Open Sources: Voices from the Open Source Revolution.Cited 179 times.DiBona C., Ockman S., and Stone M. (Eds), O'Reilly, Sebastopol, CA; Torvalds, L., Diamond, D.(2001)Just for Fun: The Story of an Accidental Revolutionary.Cited 192 times.Harper Business; Von Krogh, G., Von Hippel, E.; Zeitlyn, D.	160 - 169	"""@ARTICLE{Bitzer2007160,
    author = ""Bitzer, Jurgen and Schrettl, Wolfram and Schroder, Philipp J.H."",
    title = ""Intrinsic motivation in open source software development"",
    year = ""2007"",
    journal = ""Journal of Comparative Economics"",
    volume = ""35"",
    number = ""1"",
    pages = ""160 - 169"",
    doi = ""10.1016/j.jce.2006.10.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33947730573\&doi=10.1016\%2fj.jce.2006.10.001\&partnerID=40\&md5=989c137dd78fcfd06c7c4143f7b0432d"",
    affiliations = ""Free University Berlin, Berlin, Germany; Aarhus School of Business, Aarhus, Denmark"",
    abstract = ""This papers sheds light on the puzzling fact that even though open source software (OSS) is a public good, it is developed for free by highly qualified, young, motivated individuals, and evolves at a rapid pace. We show that when OSS development is understood as the private provision of a public good, these features emerge quite naturally. We adapt a dynamic private-provision-of-public-goods model to reflect key aspects of the OSS phenomenon, such as play value or homo ludens payoff, user-programmers' and gift culture benefits. Such intrinsic motives feature extensively in the wider OSS literature and contribute new insights to the economic analysis. Journal of Comparative Economics 35 (1) (2007) 160-169. (c) 2006 Association for Comparative Economic Studies."",
    author_keywords = ""Homo ludens; Open source software; Public goods; War of attrition"",
    correspondence_address = ""W. Schrettl; Free University Berlin, Berlin, Germany; email: schrettl@wiwiss.fu-berlin.de"",
    issn = ""10957227"",
    language = ""English"",
    abbrev_source_title = ""J. Comp. Econ."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 127; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Intrinsic motivation in open source software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-33947730573&origin=resultslist&sort=r-f&src=s&sid=699785e29b26d6f043978a6030870738&sot=b&sdt=b&s=TITLE%28intrinsic+motivation+in+open+source+software+development%29&sl=63&sessionSearchId=699785e29b26d6f043978a6030870738&relpos=0		nan; Publisher
284	TrustSE	Emergence of new project teams from open source software developer networks: Impact of prior collaboration ties	Recent years have witnessed a surge in self-organizing voluntary teams collaborating online to produce goods and services. Motivated by this phenomenon, this research investigates how these teams are formed and how individuals make decisions about which teams to join in the context of open source software development (OSSD). The focus of this paper is to explore how the collaborative network affects developers' choice of newly initiated OSS projects to participate in. More specifically by analyzing software project data from real-world OSSD projects, we empirically test the impact of past collaborative ties with and perceived status of project members in the network on the self-assembly of OSSD teams. Overall, we find that a developer is more likely to join a project when he has strong collaborative ties with its initiator. We also find that perceived status of the noninitiator members of a project influences its probability of attracting developers. We discuss the implications of our results with respect to self-organizing teams and OSSD.	Computer software; Open systems; Self assembly; Social sciences computing; Software design; Software engineering; Software testing; Collaborating online; Collaborative network; Collaborative ties; New projects; Real-world; Self-organizing teams; Software project; Team formation; Open source software; Computer software;  Open systems;  Self assembly;  Social sciences computing;  Software design;  Software engineering;  Software testing;  Collaborating online;  Collaborative network;  Collaborative ties;  New projects;  Real-world;  Self-organizing teams;  Software project;  Team formation;  Open source software	Hahn, Jungpil; Moon, Jae Yun; Zhang, Chen	Information Systems Research	https://doi.org/10.1287/isre.1080.0192		369 - 391	"""@ARTICLE{Hahn2008369,
    author = ""Hahn, Jungpil and Moon, Jae Yun and Zhang, Chen"",
    title = ""Emergence of new project teams from open source software developer networks: Impact of prior collaboration ties"",
    year = ""2008"",
    journal = ""Information Systems Research"",
    volume = ""19"",
    number = ""3"",
    pages = ""369 - 391"",
    doi = ""10.1287/isre.1080.0192"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-61349191719\&doi=10.1287\%2fisre.1080.0192\&partnerID=40\&md5=b34a094b1fa470817ac20cc958f3e22f"",
    affiliations = ""Kranncrt Graduate School of Management, Purdue University, West Lafayette, IN 47907, United States; Business School, Hong Kong University of Science and Technology, Kowloon, Clear Water Bay, Hong Kong; Fogelman College of Business and Economics, University of Memphis, Memphis, TN 38152, United States"",
    abstract = ""Recent years have witnessed a surge in self-organizing voluntary teams collaborating online to produce goods and services. Motivated by this phenomenon, this research investigates how these teams are formed and how individuals make decisions about which teams to join in the context of open source software development (OSSD). The focus of this paper is to explore how the collaborative network affects developers' choice of newly initiated OSS projects to participate in. More specifically by analyzing software project data from real-world OSSD projects, we empirically test the impact of past collaborative ties with and perceived status of project members in the network on the self-assembly of OSSD teams. Overall, we find that a developer is more likely to join a project when he has strong collaborative ties with its initiator. We also find that perceived status of the noninitiator members of a project influences its probability of attracting developers. We discuss the implications of our results with respect to self-organizing teams and OSSD. (c) 2008 INFORMS."",
    author_keywords = ""Collaborative ties; Developer social networks; Open source software development (OSSD); Team formation"",
    keywords = ""Computer software; Open systems; Self assembly; Social sciences computing; Software design; Software engineering; Software testing; Collaborating online; Collaborative network; Collaborative ties; New projects; Real-world; Self-organizing teams; Software project; Team formation; Open source software"",
    correspondence_address = ""J. Hahn; Kranncrt Graduate School of Management, Purdue University, West Lafayette, IN 47907, United States; email: jphahn@purdue.edu"",
    publisher = ""INFORMS Inst.for Operations Res.and the Management Sciences"",
    issn = ""10477047"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. Res."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 229""
}
"""	Excluded	Excluded				2	Scopus Signed In		Emergence of new project teams from open source software developer networks: Impact of prior collaboration ties	https://www.scopus.com/record/display.uri?eid=2-s2.0-61349191719&origin=resultslist&sort=r-f&src=s&sid=a9acc699389cf9b08c48ea4488bf7977&sot=b&sdt=b&s=TITLE%28emergence+of+new+project+teams+from+open+source+software+developer+networks+impact+of+prior+collaboration+ties%29&sl=117&sessionSearchId=a9acc699389cf9b08c48ea4488bf7977&relpos=0	INFORMS Inst.for Operations Res.and the Management Sciences	nan; References
285	TrustSE	SLA-Based Resource Allocation for Software as a Service Provider (SaaS) in Cloud Computing Environments	Cloud computing has been considered as a solution for solving enterprise application distribution and configuration challenges in the traditional software sales model. Migrating from traditional software to Cloud enables on-going revenue for software providers. However, in order to deliver hosted services to customers, SaaS companies have to either maintain their own hardware or rent it from infrastructure providers. This requirement means that SaaS providers will incur extra costs. In order to minimize the cost of resources, it is also important to satisfy a minimum service level to customers. Therefore, this paper proposes resource allocation algorithms for SaaS providers who want to minimize infrastructure cost and SLA violations. Our proposed algorithms are designed in a way to ensure that Saas providers are able to manage the dynamic change of customers, mapping customer requests to infrastructure level parameters and handling heterogeneity of Virtual Machines. We take into account the customers' Quality of Service parameters such as response time, and infrastructure level parameters such as service initiation time. This paper also presents an extensive evaluation study to analyze and demonstrate that our proposed algorithms minimize the SaaS provider's cost and the number of SLA violations in a dynamic resource sharing Cloud environment.	Software as a Service;  Service Level Agreement (SLA);  Scheduling;  Resource Allocation;  Cloud computing; Software as a Service, Service Level Agreement (SLA), Scheduling, Resource Allocation, Cloud computing	Wu, Linlin; Garg, Saurabh Kumar; Buyya, Rajkumar	CCGRID '11: Proceedings of the 2011 11th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing	https://doi.org/10.1109/CCGrid.2011.51		195-204	"""@inproceedings{10.1109/CCGrid.2011.51,
    author = ""Wu, Linlin and Garg, Saurabh Kumar and Buyya, Rajkumar"",
    title = ""SLA-Based Resource Allocation for Software as a Service Provider (SaaS) in Cloud Computing Environments"",
    year = ""2011"",
    isbn = ""9780769543956"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    url = ""https://doi.org/10.1109/CCGrid.2011.51"",
    doi = ""10.1109/CCGrid.2011.51"",
    abstract = ""Cloud computing has been considered as a solution for solving enterprise application distribution and configuration challenges in the traditional software sales model. Migrating from traditional software to Cloud enables on-going revenue for software providers. However, in order to deliver hosted services to customers, SaaS companies have to either maintain their own hardware or rent it from infrastructure providers. This requirement means that SaaS providers will incur extra costs. In order to minimize the cost of resources, it is also important to satisfy a minimum service level to customers. Therefore, this paper proposes resource allocation algorithms for SaaS providers who want to minimize infrastructure cost and SLA violations. Our proposed algorithms are designed in a way to ensure that Saas providers are able to manage the dynamic change of customers, mapping customer requests to infrastructure level parameters and handling heterogeneity of Virtual Machines. We take into account the customers' Quality of Service parameters such as response time, and infrastructure level parameters such as service initiation time. This paper also presents an extensive evaluation study to analyze and demonstrate that our proposed algorithms minimize the SaaS provider's cost and the number of SLA violations in a dynamic resource sharing Cloud environment."",
    booktitle = ""Proceedings of the 2011 11th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing"",
    pages = ""195-204"",
    numpages = ""10"",
    keywords = ""Software as a Service, Service Level Agreement (SLA), Scheduling, Resource Allocation, Cloud computing"",
    series = ""CCGRID '11""
}
"""	Excluded	Excluded				2	ACM		SLA-based resource allocation for software as a service provider (SaaS) in cloud computing environments	https://doi.org/10.1109/CCGrid.2011.51	IEEE Computer Society	nan; References; Link
286	TrustSE	Carrots and rainbows: Motivation and social practice in open source software development	Open source software (OSS) is a social and economic phenomenon that raises fundamental questions about the motivations of contributors to information systems development. Some developers are unpaid volunteers who seek to solve their own technical problems, while others create OSS as part of their employment contract. For the past 10 years, a substantial amount of academic work has theorized about and empirically examined developer motivations. We review this work and suggest considering motivation in terms of the values of the social practice in which developers participate. Based on the social philosophy of Alasdair MacIntyre, we construct a theoretical framework that expands our assumptions about individual motivation to include the idea of a long-term, value-informed quest beyond short-term rewards. This motivation-practice framework depicts how the social practice and its supporting institutions mediate between individual motivation and outcome. The framework contains three theoretical conjectures that seek to explain how collectively elaborated standards of excellence prompt developers to produce high-quality software, change institutions, and sustain OSS development. From the framework, we derive six concrete propositions and suggest a new research agenda on motivation in OSS.	Motivation; Open systems; Software design; Employment contracts; Free software; High-quality software; Incentives; Information systems development; MacIntyre; Social practices; Theoretical framework; Open source software; Motivation;  Open systems;  Software design;  Employment contracts;  Free software;  High-quality software;  Incentives;  Information systems development;  MacIntyre;  Social practices;  Theoretical framework;  Open source software	Von Krogh, Georg; Haefliger, Stefan; Spaeth, Sebastian; Wallin, Martin W.	MIS Quarterly: Management Information Systems	https://doi.org/10.2307/41703471		649 - 676	"""@ARTICLE{VonKrogh2012649,
    author = ""Von Krogh, Georg and Haefliger, Stefan and Spaeth, Sebastian and Wallin, Martin W."",
    title = ""Carrots and rainbows: Motivation and social practice in open source software development"",
    year = ""2012"",
    journal = ""MIS Quarterly: Management Information Systems"",
    volume = ""36"",
    number = ""2"",
    pages = ""649 - 676"",
    doi = ""10.2307/41703471"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864961062\&doi=10.2307\%2f41703471\&partnerID=40\&md5=eb9ee0af7c025de674f0428d444e89e8"",
    affiliations = ""ETH Zurich, Zurich, Switzerland"",
    abstract = ""Open source software (OSS) is a social and economic phenomenon that raises fundamental questions about the motivations of contributors to information systems development. Some developers are unpaid volunteers who seek to solve their own technical problems, while others create OSS as part of their employment contract. For the past 10 years, a substantial amount of academic work has theorized about and empirically examined developer motivations. We review this work and suggest considering motivation in terms of the values of the social practice in which developers participate. Based on the social philosophy of Alasdair MacIntyre, we construct a theoretical framework that expands our assumptions about individual motivation to include the idea of a long-term, value-informed quest beyond short-term rewards. This motivation-practice framework depicts how the social practice and its supporting institutions mediate between individual motivation and outcome. The framework contains three theoretical conjectures that seek to explain how collectively elaborated standards of excellence prompt developers to produce high-quality software, change institutions, and sustain OSS development. From the framework, we derive six concrete propositions and suggest a new research agenda on motivation in OSS."",
    author_keywords = ""Free software; Incentives; Innovation; MacIntyre; Motivation; Open source software; Social practice"",
    keywords = ""Motivation; Open systems; Software design; Employment contracts; Free software; High-quality software; Incentives; Information systems development; MacIntyre; Social practices; Theoretical framework; Open source software"",
    correspondence_address = ""G. Von Krogh; ETH Zurich, Zurich, Switzerland; email: gvkrogh@ethz.ch"",
    publisher = ""University of Minnesota"",
    issn = ""02767783"",
    coden = ""MISQD"",
    language = ""English"",
    abbrev_source_title = ""MIS Quart Manage Inf Syst"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 545; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Carrots and rainbows: Motivation and social practice in open source software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-84864961062&origin=resultslist&sort=r-f&src=s&sid=0b5b90362aaee8822d5ffb6f717f2ac4&sot=b&sdt=b&s=TITLE%28carrots+and+rainbows+motivation+and+social+practice+in+open+source+software+development%29&sl=94&sessionSearchId=0b5b90362aaee8822d5ffb6f717f2ac4&relpos=0	University of Minnesota	nan; References
287	TrustSE	Software reuse: From library to factory	Systematic software reuse is a key business strategy that software managers can employ to dramatically improve their software development processes, to decrease time-to-market and costs, and to improve product quality. Effective reuse requires much more than just code and library technology. We have learned that careful consideration must be given to people, process, and technology. One approach to the systematic integration of these three elements is the concept of the software factory. At Hewlett-Packard Co., we have initiated a multifaceted corporate reuse program to help introduce the best practices of systematic reuse into the company, complemented by multidisciplinary research to investigate and develop better methods for domain-specific, reuse-based software engineering. This essay discusses our experiences. Key aspects include domain-specific kits, business modeling, organization design, and technology infrastructure for a flexible software factory.		M. L. Griss	IBM Systems Journal	https://doi.org/10.1147/sj.324.0548		548- 566		Included	Included				2	IEEE		Software reuse: From library to factory	https://ieeexplore.ieee.org/document/5387334	IBM	nan; Keywords; References; Year; Bibtex
288	TrustSE	An Empirical Analysis of the Impact of Software Vulnerability Announcements on Firm Stock Price	Security defects in software cost millions of dollars to firms in terms of downtime, disruptions, and confidentiality breaches. However, the economic implications of these defects for software vendors are not well understood. Lack of legal liability and the presence of switching costs and network externalities may protect software vendors from incurring significant costs in the event of a vulnerability announcement, unlike such industries as auto and pharmaceuticals, which have been known to suffer significant loss in market value in the event of a defect announcement. Although research in software economics has studied firms' incentives to improve overall quality, there have not been any studies which show that software vendors have an incentive to invest in building more secure software. The objectives of this paper are twofold. 1) We examine how a software vendor's market value changes when a vulnerability is announced. 2) We examine how firm and vulnerability characteristics mediate the change in the market value of a vendor. We collect data from leading national newspapers and industry sources, such as the Computer Emergency Response Team (CERT), by searching for reports on published software vulnerabilities. We show that vulnerability announcements lead to a negative and significant change in a software vendor's market value. In our sample, on average, a vendor loses around 0.6 percent value in stock price when a vulnerability is reported. We find that a software vendor loses more market share if the market is competitive or if the vendor is small. To provide further insight, we use the information content of the disclosure announcement to classify vulnerabilities into various types. We find that the change in stock price is more negative if the vendor fails to provide a patch at the time of disclosure. Also, more severe flaws have a significantly greater impact. Our analysis provides many interesting implications for software vendors as well as policy makers.	IEEE news; Software quality; Costs; Security; Computer industry; Internet; Law; Legal factors; Protection; Pharmaceuticals; Stock Price; Security Vulnerabilities; Stock Prices Of Firms; Market Share; Cybersecurity; Market Value; Loss Value; Millions Of Dollars; Industrial Sources; Switching Costs; Legal Liability; Vulnerability Characteristics; Stock Price Changes; Security Flaws; Software Vendors; Coefficients Of Variables; Alpha Coefficient; Market Competition; Stock Market; Defective Production; Cumulative Abnormal Returns; Event Window; Software Product; Denial Of Service; Market Model; Negative Returns; Wall Street Journal; Types Of Vulnerabilities; Custom Loss; Actual Return; Information security; software vulnerability; quality; event-study; patching; software vendors.	Rahul Telang; Sunil Wattal	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2007.70712		544- 557		Excluded	Excluded				2	IEEE		An empirical analysis of the impact of software vulnerability announcements on firm stock price	https://ieeexplore.ieee.org/document/4267025	IEEE	nan; References; Year; Bibtex
289	TrustSE	Secured trust and reputation system : analysis of malicious behaviors and optimization	Reputation mechanisms offer a novel and effective way of ensuring the necessary level of trust which is essential to the functioning of any critical system. They collect information about the history (i.e., past transactions) of participants and make public their reputation. Prospective participants guide their decisions by considering reputation information, and thus make more informative choices. Online reputation mechanisms enjoy huge success. They are present in most e-commerce sites available today, and are seriously taken into consideration by human users. Existing reputation systems were conceived with the assumption that users will share feedback honestly. But, such systems like those in peer to peer are generally compromise of malicious users. This leads to the problem in cooperation, aggregation and evaluation. Some users want to use resources from network but do not want to contribute back to the network. Others manipulate the evaluations of trust and provide wrong estimation. We have recently seen increasing evidence that some users strategically manipulate their reports and behave maliciously. For proper protecting against those users, some kind of reputation management system is required. In some system, a trusted third entity exists and can aggregate the information. However, Peer-to-peer networks don't have any central control or repository. Large size of distributed and hybrid networks makes the reputation management more challenging task. Hence reputation management system should perform all the tasks in distributed fashion. When these kinds of systems are implemented, peers try to deceive them to take maximum advantage. This thesis describes ways of making reputation mechanisms more trustworthy and optimized by providing defense mechanism and analysis. Different kinds of malicious behaviors exist and for each one, we present a complete analysis, simulation and a real use case example in distributed and non-distributed way	Trust management; Reputation system; Distributed system; Game theory; Byzantine model	Amira Bradai	Cryptography and Security	https://theses.hal.science/tel-01127164/			"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Secured trust and reputation system: analysis of malicious behaviors and optimization	https://theses.hal.science/tel-01127164/	Institut National des Telecommunications	
290	TrustSE	Open source software projects as virtual organisations: Competency rallying for software development	This paper contributes to the identification and testing of factors important for the success of open source software (OSS) projects. We present an analysis of OSS communities as virtual organisations, and apply Katzy and Crowston's competency rallying (CR) theory to the case of OSS development projects. CR theory suggests that project participants must develop necessary competencies, identify and understand market opportunities, marshal competencies to meet the opportunity and manage a short-term co-operative process. Using data collected from 7477 OSS projects hosted by the SourceForge system, we formulate and test a set of specific hypotheses derived from CR theory. The empirical data analysis supports the majority of these hypotheses, suggesting that CR theory provides a useful lens for studying OSS projects.	Computer software; Data reduction; Open systems; Project management; Quality control; Research and development management; Societies and institutions; Open source software (OSS); Software engineering; Computer software;  Data reduction;  Open systems;  Project management;  Quality control;  Research and development management;  Societies and institutions;  Open source software (OSS);  Software engineering	Crowston, K.; Scozzi, B.	IEE Proceedings: Software	https://doi.org/10.1049/ip-sen:20020197		3 - 17	"""@ARTICLE{Crowston20023,
    author = ""Crowston, K. and Scozzi, B."",
    title = ""Open source software projects as virtual organisations: Competency rallying for software development"",
    year = ""2002"",
    journal = ""IEE Proceedings: Software"",
    volume = ""149"",
    number = ""1"",
    pages = ""3 - 17"",
    doi = ""10.1049/ip-sen:20020197"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036477323\&doi=10.1049\%2fip-sen\%3a20020197\&partnerID=40\&md5=54507ffc5d8cc4f18948016d92b0cfb6"",
    affiliations = ""School of Information Studies, Syracuse University, 4-206 Center for Sci. and Technology, Syracuse, NY 13244-4100, United States"",
    abstract = ""This paper contributes to the identification and testing of factors important for the success of open source software (OSS) projects. We present an analysis of OSS communities as virtual organisations, and apply Katzy and Crowston's competency rallying (CR) theory to the case of OSS development projects. CR theory suggests that project participants must develop necessary competencies, identify and understand market opportunities, marshal competencies to meet the opportunity and manage a short-term co-operative process. Using data collected from 7477 OSS projects hosted by the SourceForge system, we formulate and test a set of specific hypotheses derived from CR theory. The empirical data analysis supports the majority of these hypotheses, suggesting that CR theory provides a useful lens for studying OSS projects."",
    keywords = ""Computer software; Data reduction; Open systems; Project management; Quality control; Research and development management; Societies and institutions; Open source software (OSS); Software engineering"",
    issn = ""14625970"",
    coden = ""IPSEF"",
    language = ""English"",
    abbrev_source_title = ""IEE Proc Software"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 154""
}
"""	Excluded	Excluded				2	Scopus Signed In		Open source software projects as virtual organisations: competency rallying for software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-0036477323&origin=resultslist&sort=r-f&src=s&sid=572444458b05343fde56af6bbbe70474&sot=b&sdt=b&s=TITLE%28open+source+software+projects+as+virtual+organisations+competency+rallying+for+software+development%29&sl=106&sessionSearchId=572444458b05343fde56af6bbbe70474&relpos=0		nan; References; Publisher
291	TrustSE	Measuring the health of open source software ecosystems: Beyond the scope of project health	Background The livelihood of an open source ecosystem is important to different ecosystem participants: software developers, end-users, investors, and participants want to know whether their ecosystem is healthy and performing well. Currently, there exists no working operationalization available that can be used to determine the health of open source ecosystems. Health is typically looked at from a project scope, not from an ecosystem scope. Objectives With such an operationalization, stakeholders can make better decisions on whether to invest in an ecosystem: developers can select the healthiest ecosystem to join, keystone organizers can establish which governance techniques are effective, and end-users can select ecosystems that are robust, will live long, and prosper. Method Design research is used to create the health operationalization. The evaluation step is done using four ecosystem health projects from literature. Results The Open Source Ecosystem Health Operationalization is provided, which establishes the health of a complete software ecosystem, using the data from collections of open source projects that belong to the ecosystem. Conclusion The groundwork is done, by providing a summary of research challenges, for more research in ecosystem health. With the operationalization in hand, researchers no longer need to start from scratch when researching open source ecosystems' health.	Health; Open source software; Open systems; Software engineering; Design research; Ecosystem health; Open source projects; Open sources; Research challenges; Software developer; Software ecosystems; Software repository mining; Ecosystems; Health;  Open source software;  Open systems;  Software engineering;  Design research;  Ecosystem health;  Open source projects;  Open sources;  Research challenges;  Software developer;  Software ecosystems;  Software repository mining;  Ecosystems	Jansen, Slinger	Information and Software Technology	https://doi.org/10.1016/j.infsof.2014.04.006	Baars, A., Jansen, S.; Barbosa, O., Santos, R., Alves, C., Werner, C., Jansen, S.; Crowston, K., Howison, J., Annabi, H.; Crowston, K., Scozzi, B.; Cusumano, M.(2012)Staying Power: Six Enduring Principles for Managing Strategy and Innovation in An Uncertain World (Lessons from Microsoft, Apple, Intel, Google, Toyota and More).Cited 94 times.Oxford University Press; Den Hartigh, E., Tol, M., Visscher, W.The health measurement of a business ecosystem(2013)Software Ecosystems: Analyzing and Managing Business Networks in the Software Industry.Cited 4 times.S. Jansen, M. Cusumano, S. Brinkkemper (Eds.) Edward Elgar Publishers; Dhungana, D., Groher, I., Schludermann, E., Biffl, S.; Gamalielsson, J., Lundell, B., Lings, B.; Gamalielsson, J., Lundell, B., Lings, B.Responsiveness as a measure for assessing the health of oss ecosystems(2010)Proceedings of the 2nd International Workshop on Building Sustainable Open Source Communities (OSCOMM 2010), pp. 1-8.Cited 8 times.; Gousios, G.; Haenni, N., Lungu, M., Schwarz, N., Nierstrasz, O.; Hoving, R., Slot, G., Jansen, S.; Iansiti, M., Levien, R.(2004)The Keystone Advantage: What the New Dynamics of Business Ecosystems Mean for Strategy, Innovation, and Sustainability.Cited 1144 times.Harvard Business School Press; Iansiti, M., Levien, R.; Jansen, S., Brinkkemper, S., Cusumano, M.A.; Jansen, S., Brinkkemper, S., Souer, J., Luinenburg, L.; Jansen, S., Finkelstein, A., Brinkkemper, S.; Lakhani, K., Wolf, R.(2005)Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects.Cited 241 times.MIT Press Cambridge; Lucassen, G., Rooij, K.V., Jansen, S.Ecosystem health of cloud paas providers(2013)Proceedings of the International Conference on Software BusinessSpringer Berlin Heidelberg; Lundell, B., Forssten, B., Gamalielsson, J., Gustavsson, H., Karlsson, R., Lennerholt, C., Lings, B., (...), Olsson, E.Exploring health within oss ecosystems(2009)Proceedings of the First International Workshop on Building Sustainable Open Source Communities.Cited 9 times.Tampere University of Technology; Lungu, M., Robbes, R., Lanza, M.; Manikas, K., Hansen, K.M.Software ecosystems-A systematic literature review(2012)J. Syst. Software, 85, p. 12941306.Cited 9 times.; Manikas, K., Hansen, K.M.Reviewing the health of software ecosystems: A conceptual framework proposal(2013)Proceedings of the International Workshop on Software Ecosystems.Cited 38 times.; Mens, T., Serebrenik, A., Grosjean, P.; Goeminne, M., Mens, T.; Syed, S., Jansen, S.On clusters in open source ecosystems(2013)Proceedings of the International Workshop on Software Ecosystems.Cited 5 times.; Van Lingen, S., Palomba, A., Lucassen, G.On the software ecosystem health of open source content management systems(2013)The Proceedings of the 5th Workshop on Software Ecosystems; Waltl, J., Henkel, J., Baldwin, C.Y.; West, J., Wood, D.; Wiggins, A., Howison, J., Crowston, K.; Wynn Jr., D.	1508 - 1519	"""@ARTICLE{Jansen20141508,
    author = ""Jansen, Slinger"",
    title = ""Measuring the health of open source software ecosystems: Beyond the scope of project health"",
    year = ""2014"",
    journal = ""Information and Software Technology"",
    volume = ""56"",
    number = ""11"",
    pages = ""1508 - 1519"",
    doi = ""10.1016/j.infsof.2014.04.006"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905495085\&doi=10.1016\%2fj.infsof.2014.04.006\&partnerID=40\&md5=5bfb6ea57f16b9d5655d1265c60243e0"",
    affiliations = ""Department of Information and Computing Sciences, Utrecht University, Netherlands"",
    abstract = ""Background The livelihood of an open source ecosystem is important to different ecosystem participants: software developers, end-users, investors, and participants want to know whether their ecosystem is healthy and performing well. Currently, there exists no working operationalization available that can be used to determine the health of open source ecosystems. Health is typically looked at from a project scope, not from an ecosystem scope. Objectives With such an operationalization, stakeholders can make better decisions on whether to invest in an ecosystem: developers can select the healthiest ecosystem to join, keystone organizers can establish which governance techniques are effective, and end-users can select ecosystems that are robust, will live long, and prosper. Method Design research is used to create the health operationalization. The evaluation step is done using four ecosystem health projects from literature. Results The Open Source Ecosystem Health Operationalization is provided, which establishes the health of a complete software ecosystem, using the data from collections of open source projects that belong to the ecosystem. Conclusion The groundwork is done, by providing a summary of research challenges, for more research in ecosystem health. With the operationalization in hand, researchers no longer need to start from scratch when researching open source ecosystems' health. (c) 2014 Elsevier B.V. All rights reserved."",
    author_keywords = ""Open source ecosystems; Software ecosystem health; Software repository mining"",
    keywords = ""Health; Open source software; Open systems; Software engineering; Design research; Ecosystem health; Open source projects; Open sources; Research challenges; Software developer; Software ecosystems; Software repository mining; Ecosystems"",
    correspondence_address = ""S. Jansen; Department of Information and Computing Sciences, Utrecht University, Netherlands; email: slinger.jansen@uu.nl"",
    publisher = ""Elsevier"",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 121""
}
"""	Included	Included				2	Scopus Signed In		Measuring the health of open source software ecosystems: Beyond the scope of project health	https://www.scopus.com/record/display.uri?eid=2-s2.0-84905495085&origin=resultslist&sort=r-f&src=s&sid=1710a52221465cc398eff5cc46203878&sot=b&sdt=b&s=TITLE%28measuring+the+health+of+open+source+software+ecosystems+beyond+the+scope+of+project+health%29&sl=97&sessionSearchId=1710a52221465cc398eff5cc46203878&relpos=0	Elsevier	
292	TrustSE	The Paradoxes of Free Software	This paper describes the legal structure of open source software and analyzes the likely issues to arise. A combination of copyright law and trademark law serves to permit the free distribution of open source software. The software is kept under copyright, but freely licensed under one of various open source licenses. The legal structure of open source is an elegant and robust use of intellectual property law that turns the customary use of intellectual property on its head, by using intellectual property laws, which normally are used to guard exclusive rights, to safeguard free access to and use of software. The paper further discusses how open source challenges economic and philosophical theories of intellectual property. Ironically, the open source movement, with its early roots in a decidedly socialist view of software, appears to vindicate a rather free-market view of intellectual property--that market mechanisms are more efficient in overcoming market failure than corrective legal measures. Philosophically, open sources may fit best with a natural rights/personality theory, especially where open source authors frequently give away all rights except their rights to attribution and to prevent distortion.  The paper further explores how open source may affect patent litigation, (especially with respect to the profound prior art problems in software patents) and other aspects of regulation of software (ranging from fair use in copyright to enforcement of licensing terms to restrictions on use of certain algorithms, like encryption). The openness of the software can cut both ways with respect to all those subjects.	open source; free software; software; copyright; patent; trademark; licensing; bda	Stephen M. McJohn	George Mason Law Review	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=956647		45	"""nan"""	Excluded	Excluded				2	Google Scholar		The paradoxes of free software	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=956647	SSRN	
293	TrustSE	The infeasibility of quantifying the reliability of life-critical real-time software	"This work affirms that the quantification of life-critical software reliability is infeasible using statistical methods, whether these methods are applied to standard software or fault-tolerant software. The classical methods of estimating reliability are shown to lead to exorbitant amounts of testing when applied to life-critical software. Reliability growth models are examined and also shown to be incapable of overcoming the need for excessive amounts of testing. The key assumption of software fault tolerance-separately programmed versions fail independently-is shown to be problematic. This assumption cannot be justified by experimentation in the ultrareliability region, and subjective arguments in its favor are not sufficiently strong to justify it as an axiom. Also, the implications of the recent multiversion software experiments support this affirmation.<
>"	Software reliability; Application software; Hardware; Software systems; Control systems; Software testing; Fault tolerance; Software design; Computer errors; Costs	R.W. Butler; G.B. Finelli	IEEE Transactions on Software Engineering	https://doi.org/10.1109/32.210303	"1.N. G. Leveson, ""Software safety: What why and how"", Computing Surveys, vol. 18, pp. 126-163, June 1986. CrossRef  Google Scholar; 2.I. Peterson, ""A digital matter of life and death"", Science News, Mar. 1988. CrossRef  Google Scholar; 3.E. Joyce, ""Software bugs: A matter of life and liability"", Datamation, May 1987. Google Scholar; 4.N. R. Mann, R. E. Schafer and N. D. Singpurwalla, Methods for Statistical Analysis of Reliability and Life Data, New York:Wiley, 1974. Google Scholar; 5.A. A. Abdalla-Ghaly and A. B. L. P. Y. Chan, ""Evaluation of competing reliability predictions"", IEEE Trans. Software Eng., pp. 950-967, 1986. View Article  Google Scholar; 6.B. Littlewood and P. A. Keiller, ""Adaptive software reliability modeling"", Proc. 14th Int. Symp. Fault-Tolerant Computing, pp. 108-113, 1984. Google Scholar; 7.B. Littlewood, ""Stochastic reliability-growth: A model for fault-removal in computer programs and hardware designs"", IEEE Trans. Reliability, pp. 313-320, 1981. View Article  Google Scholar; 8.P. A. Keiller and D. R. Miller, ""On the use and the performance of software reliability growth models"", Reliability Engineering and System Safety, pp. 95-117, 1991. CrossRef  Google Scholar; 9.B. Littlewood, ""Predicting software reliability"", Phil. Trans. Roy. Soc. London, pp. 513-526, 1989. CrossRef  Google Scholar; 10.P. M. Nagel and J. A. Skrivan, Software reliability: Repetitive run experimentation and modeling, Feb. 1982. Google Scholar; 11.A. Avizienis, ""The n-version approach to fault-tolerant software"", IEEE Trans. Software Eng., pp. 1491-1501, Dec. 1985. View Article  Google Scholar; 12.R. K. Scott, J. W. Gault and D. F. McAllister, ""Fault-tolerant software reliability modeling"", IEEE Trans. Software Eng., May 1987. View Article  Google Scholar; 13.D. Miller, Making statistical inferences about software reliability, Nov. 1988. Google Scholar; 14.J. C. Knight and N. G. Leveson, ""An experimental evaluation of the assumptions of independence in multiversion programming"", IEEE Trans. Software Eng., vol. SE-12, pp. 96-109, Jan. 1986. View Article  Google Scholar; 15.T. J. Shimeall and N. G. Leveson, ""An empirical comparison of software fault-tolerance and fault elimination"", IEEE Trans. Software Eng., pp. 173-183, Feb. 1991. View Article  Google Scholar; 16.J. C. Knight and N. G. Leveson, ""A reply to the criticisms of the Knight & Leveson experiment"", ACM SIGSOFT Software Eng. Notes, Jan. 1990. CrossRef  Google Scholar"	3- 12		Excluded	Excluded				2	IEEE		The infeasibility of quantifying the reliability of life-critical real-time software	https://ieeexplore.ieee.org/document/210303	IEEE	nan; Year; Bibtex
294	TrustSE	A systematic literature review on fault prediction performance in software engineering	Background: The accurate prediction of where faults are likely to occur in code can help direct test effort, reduce costs, and improve the quality of software. Objective: We investigate how the context of models, the independent variables used, and the modeling techniques applied influence the performance of fault prediction models. Method: We used a systematic literature review to identify 208 fault prediction studies published from January 2000 to December 2010. We synthesize the quantitative and qualitative results of 36 studies which report sufficient contextual and methodological information according to the criteria we develop and apply. Results: The models that perform well tend to be based on simple modeling techniques such as Naive Bayes or Logistic Regression. Combinations of independent variables have been used by models that perform well. Feature selection has been applied to these combinations when models are performing particularly well. Conclusion: The methodology used to build models seems to be influential to predictive performance. Although there are a set of fault prediction studies in which confidence is possible, more studies are needed that use a reliable methodology and which report their context, methodology, and performance comprehensively.	Logistics; Software testing; Accurate prediction; Fault prediction; Independent variables; Logistic regressions; Modeling technique; Naive bayes; Predictive performance; Quality of softwares; Simple modeling; Software fault prediction; Systematic literature review; Software engineering; Logistics;  Software testing;  Accurate prediction;  Fault prediction;  Independent variables;  Logistic regressions;  Modeling technique;  Naive bayes;  Predictive performance;  Quality of softwares;  Simple modeling;  Software fault prediction;  Systematic literature review;  Software engineering	Hall, Tracy; Beecham, Sarah; Bowes, David; Gray, David; Counsell, Steve	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2011.103	"1.N. Nagappan and T. Ball, ""Use of Relative Code Churn Measures to Predict System Defect Density"", Proc. 27th Intl Conf. Software Eng., pp. 284-292, 2005. View Article  Google Scholar; 2.N. Nagappan, T. Ball and A. Zeller, ""Mining Metrics to Predict Component Failures"", Proc. 28th Intl Conf. Software Eng., pp. 452-461, 2006. CrossRef  Google Scholar; 3.N.K. Nagwani and S. Verma, ""Predictive Data Mining Model for Software Bug Estimation Using Average Weighted Similarity"", Proc. IEEE Second Intl Advance Computing Conf., pp. 373-378, 2010. View Article  Google Scholar; 4.A. Neufelder, ""How to Measure the Impact of Specific Development Practices on Fielded Defect Density"", Proc. 11th Intl Symp. Software Reliability Eng., pp. 148-160, 2000. View Article  Google Scholar; 5.A. Nikora and J. Munson, ""Developing Fault Predictors for Evolving Software Systems"", Proc. Ninth Intl Software Metrics Symp., pp. 338-350, 2003-Sept. View Article  Google Scholar; 6.A. Nikora and J. Munson, ""The Effects of Fault Counting Methods on Fault Model Quality"", Proc. 28th Ann. Intl Computer Software and Applications Conf., vol. 1, pp. 192-201, 2004-Sept. View Article  Google Scholar; 7.A. Nugroho, M.R.V. Chaudron and E. Arisholm, ""Assessing UML Design Metrics for Predicting Fault-Prone Classes in a Java System"", Proc. IEEE Seventh Working Conf. Mining Software Repositories, pp. 21-30, 2010. View Article  Google Scholar; 8.H. Olague, L. Etzkorn, S. Gholston and S. Quattlebaum, ""Empirical Validation of Three Software Metrics Suites to Predict Fault-Proneness of Object-Oriented Classes Developed Using Highly Iterative or Agile Software Development Processes"", IEEE Trans. Software Eng., vol. 33, no. 6, pp. 402-419, June 2007. View Article  Google Scholar; 9.A. Oral and A. Bener, ""Defect Prediction for Embedded Software"", Proc. 22nd Intl Symp. Computer and Information Sciences, pp. 1-6, 2007-Nov. View Article  Google Scholar; 10.T.J. Ostrand and E.J. Weyuker, ""The Distribution of Faults in a Large Industrial Software System"", SIGSOFT Software Eng. Notes, vol. 27, pp. 55-64, July 2002. CrossRef  Google Scholar; 11.T.J. Ostrand, E.J. Weyuker and R.M. Bell, ""Locating Where Faults Will Be"", Proc. Conf. Diversity in Computing, pp. 48-50, 2005. View Article  Google Scholar; 12.T.J. Ostrand, E.J. Weyuker and R.M. Bell, ""Automating Algorithms for the Identification of Fault-Prone Files"", Proc. Intl Symp. Software Testing and Analysis, pp. 219-227, 2007. CrossRef  Google Scholar; 13.T.J. Ostrand, E.J. Weyuker and R. Bell, ""Where the Bugs Are"", ACM SIGSOFT Software Eng. Notes, vol. 29, pp. 86-96, 2004. CrossRef  Google Scholar; 14.T.J. Ostrand, E.J. Weyuker and R. Bell, ""Predicting the Location and Number of Faults in Large Software Systems"", IEEE Trans. Software Eng., vol. 31, no. 4, pp. 340-355, Apr. 2005. View Article  Google Scholar; 15.T. Ostrand, E. Weyuker and R. Bell, ""Programmer-Based Fault Prediction"", Proc. Sixth Intl Conf. Predictive Models in Software Eng., pp. 1-10, 2010. CrossRef  Google Scholar; 16.T. Ostrand, E. Weyuker, R. Bell and R. Ostrand, ""A Different View of Fault Prediction"", Proc. 29th Ann. Intl Computer Software and Applications Conf., vol. 2, pp. 3-4, 2005-July. View Article  Google Scholar; 17.F. Padberg, T. Ragg and R. Schoknecht, ""Using Machine Learning for Estimating the Defect Content After an Inspection"", IEEE Trans. Software Eng., vol. 30, no. 1, pp. 17-28, Jan. 2004. View Article  Google Scholar; 18.G. Pai and J. Dugan, ""Empirical Analysis of Software Fault Content and Fault Proneness Using Bayesian Methods"", IEEE Trans. Software Eng., vol. 33, no. 10, pp. 675-686, Oct. 2007. View Article  Google Scholar; 19.A.K. Pandey and N.K. Goyal, ""Test Effort Optimization by Prediction and Ranking of Fault-Prone Software Modules"", Proc. Second Intl Conf. Reliability Safety and Hazard, pp. 136-142, 2010. View Article  Google Scholar; 20.L. Pelayo and S. Dick, ""Applying Novel Resampling Strategies to Software Defect Prediction"", Proc. Ann. Meeting of the North Amer. Fuzzy Information Processing Soc., pp. 69-72, 2007-June. View Article  Google Scholar; 21.P. Pendharkar, ""Exhaustive and Heuristic Search Approaches for Learning a Software Defect Prediction Model"", J. Eng. Applications of Artificial Intelligence, vol. 23, no. 1, pp. 34-40, 2010. CrossRef  Google Scholar; 22.H. Peng and Z. Jie, ""Predicting Defect-Prone Software Modules at Different Logical Levels"", Proc. Intl Conf. Research Challenges in Computer Science, pp. 37-40, 2009. Google Scholar; 23.Y. Jiang, J. Lin, B. Cukic and T. Menzies, ""Variance Analysis in Software Fault Prediction Models"", Proc. 20th Intl Symp. Software Reliability Eng., pp. 99-108, 2009-Nov. View Article  Google Scholar; 24.M. Pighin and A. Marzona, ""An Empirical Analysis of Fault Persistence through Software Releases"", Proc. Intl Symp. Empirical Software Eng., pp. 206-212, 2003-Sept.-Oct. View Article  Google Scholar; 25.M. Pinzger, N. Nagappan and B. Murphy, ""Can Developer-Module Networks Predict Failures?"", Proc. 16th ACM SIGSOFT Intl Symp. Foundations of Software Eng., pp. 2-12, 2008. CrossRef  Google Scholar; 26.R. Ramler, S. Larndorfer and T. Natschlager, ""What Software Repositories Should Be Mined for Defect Predictors?"", Proc. 35th Euromicro Conf. Software Eng. and Advanced Applications, pp. 181-187, 2009. View Article  Google Scholar; 27.Z. Rana, S. Shamail and M. Awais, ""Ineffectiveness of Use of Software Science Metrics as Predictors of Defects in Object Oriented Software"", Proc. WRI World Congress Software Eng., vol. 4, pp. 3-7, 2009-May. View Article  Google Scholar; 28.J. Ratzinger, T. Sigmund and H.C. Gall, ""On the Relation of Refactorings and Software Defect Prediction"", Proc. Intl Working Conf. Mining Software Repositories, pp. 35-38, 2008. CrossRef  Google Scholar; 29.M. Reformat, A Fuzzy-Based Meta-model for Reasoning about the Number of Software Defects., 2003. CrossRef  Google Scholar; 30.D. Rodriguez, R. Ruiz, J. Cuadrado-Gallego and J. Aguilar-Ruiz, ""Detecting Fault Modules Applying Feature Selection to Classifiers"", Proc. IEEE Intl Conf. Information Reuse and Integration, pp. 667-672, 2007-Aug. View Article  Google Scholar"	1276 - 1304	"""@ARTICLE{Hall20121276,
    author = ""Hall, Tracy and Beecham, Sarah and Bowes, David and Gray, David and Counsell, Steve"",
    title = ""A systematic literature review on fault prediction performance in software engineering"",
    year = ""2012"",
    journal = ""IEEE Transactions on Software Engineering"",
    volume = ""38"",
    number = ""6"",
    pages = ""1276 - 1304"",
    doi = ""10.1109/TSE.2011.103"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870561393\&doi=10.1109\%2fTSE.2011.103\&partnerID=40\&md5=31c5c83d993f4e293a6e46b487c88f08"",
    affiliations = ""Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex UB8 3PH, United Kingdom; Lero, Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland; Science and Technology Research Institute, University of Hertfordshire, Hatfield, Hertfordshire AL10 9AB, United Kingdom"",
    abstract = ""Background: The accurate prediction of where faults are likely to occur in code can help direct test effort, reduce costs, and improve the quality of software. Objective: We investigate how the context of models, the independent variables used, and the modeling techniques applied influence the performance of fault prediction models. Method: We used a systematic literature review to identify 208 fault prediction studies published from January 2000 to December 2010. We synthesize the quantitative and qualitative results of 36 studies which report sufficient contextual and methodological information according to the criteria we develop and apply. Results: The models that perform well tend to be based on simple modeling techniques such as Naive Bayes or Logistic Regression. Combinations of independent variables have been used by models that perform well. Feature selection has been applied to these combinations when models are performing particularly well. Conclusion: The methodology used to build models seems to be influential to predictive performance. Although there are a set of fault prediction studies in which confidence is possible, more studies are needed that use a reliable methodology and which report their context, methodology, and performance comprehensively. (c) 2012 IEEE."",
    author_keywords = ""software fault prediction; Systematic literature review"",
    keywords = ""Logistics; Software testing; Accurate prediction; Fault prediction; Independent variables; Logistic regressions; Modeling technique; Naive bayes; Predictive performance; Quality of softwares; Simple modeling; Software fault prediction; Systematic literature review; Software engineering"",
    correspondence_address = ""T. Hall; Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex UB8 3PH, United Kingdom; email: tracy.hall@brunel.ac.uk"",
    issn = ""00985589"",
    coden = ""IESED"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans Software Eng"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 875; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		A systematic literature review on fault prediction performance in software engineering	https://ieeexplore.ieee.org/document/6035727	IEEE	
295	TrustSE	Software fault prediction metrics: A systematic literature review	Context: Software metrics may be used in fault prediction models to improve software quality by predicting fault location. Objective: This paper aims to identify software metrics and to assess their applicability in software fault prediction. We investigated the influence of context on metrics' selection and performance. Method: This systematic literature review includes 106 papers published between 1991 and 2011. The selected papers are classified according to metrics and context properties. Results: Object-oriented metrics (49%) were used nearly twice as often compared to traditional source code metrics (27%) or process metrics (24%). Chidamber and Kemerer's (CK) object-oriented metrics were most frequently used. According to the selected studies there are significant differences between the metrics used in fault prediction performance. Object-oriented and process metrics have been reported to be more successful in finding faults compared to traditional size and complexity metrics. Process metrics seem to be better at predicting post-release faults compared to any static code metrics. Conclusion: More studies should be performed on large industrial software systems to find metrics more relevant for the industry and to answer the question as to which metrics should be used in a given context.	Information systems; Software engineering; Fault prediction models; Industrial software; Object oriented metrics; Significant differences; Software fault prediction; Software metrices; Source code metrics; Systematic literature review; Computer software selection and evaluation; Information systems;  Software engineering;  Fault prediction models;  Industrial software;  Object oriented metrics;  Significant differences;  Software fault prediction;  Software metrices;  Source code metrics;  Systematic literature review;  Computer software selection and evaluation	Radjenovic, Danijel; Hericko, Marjan; Torkar, Richard; Zivkovic, Ales	Information and Software Technology	https://doi.org/10.1016/j.infsof.2013.02.009		1397 - 1418	"""@ARTICLE{Radjenovic20131397,
    author = ""Radjenovic, Danijel and Hericko, Marjan and Torkar, Richard and Zivkovic, Ales"",
    title = ""Software fault prediction metrics: A systematic literature review"",
    year = ""2013"",
    journal = ""Information and Software Technology"",
    volume = ""55"",
    number = ""8"",
    pages = ""1397 - 1418"",
    doi = ""10.1016/j.infsof.2013.02.009"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84878309998\&doi=10.1016\%2fj.infsof.2013.02.009\&partnerID=40\&md5=35a2a45a64b778548046bebb4a23a301"",
    affiliations = ""Pro-bit Programska Oprema D.o.o., SI-3210 Slovenske Konjice, Stari trg 15, Slovenia; University of Maribor, Faculty of Electrical Engineering and Computer Science, SI-2000 Maribor, Smetanova ulica 17, Slovenia; Blekinge Institute of Technology, SE-371 79 Karlskrona, Sweden; Chalmers University of Technology, University of Gothenburg, SE-412 96 Gothenburg, Sweden"",
    abstract = ""Context: Software metrics may be used in fault prediction models to improve software quality by predicting fault location. Objective: This paper aims to identify software metrics and to assess their applicability in software fault prediction. We investigated the influence of context on metrics' selection and performance. Method: This systematic literature review includes 106 papers published between 1991 and 2011. The selected papers are classified according to metrics and context properties. Results: Object-oriented metrics (49\%) were used nearly twice as often compared to traditional source code metrics (27\%) or process metrics (24\%). Chidamber and Kemerer's (CK) object-oriented metrics were most frequently used. According to the selected studies there are significant differences between the metrics used in fault prediction performance. Object-oriented and process metrics have been reported to be more successful in finding faults compared to traditional size and complexity metrics. Process metrics seem to be better at predicting post-release faults compared to any static code metrics. Conclusion: More studies should be performed on large industrial software systems to find metrics more relevant for the industry and to answer the question as to which metrics should be used in a given context. (c) 2013 Elsevier B.V. All rights reserved."",
    author_keywords = ""Software fault prediction; Software metric; Systematic literature review"",
    keywords = ""Information systems; Software engineering; Fault prediction models; Industrial software; Object oriented metrics; Significant differences; Software fault prediction; Software metrices; Source code metrics; Systematic literature review; Computer software selection and evaluation"",
    correspondence_address = ""D. Radjenovic; Pro-bit Programska Oprema D.o.o., SI-3210 Slovenske Konjice, Stari trg 15, Slovenia; email: danijel.radjenovic@pro-bit.si"",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 417""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software fault prediction metrics: A systematic literature review	https://www.scopus.com/record/display.uri?eid=2-s2.0-84878309998&origin=resultslist&sort=r-f&src=s&sid=d87f31176ff2fa63e0a0b783de9454a7&sot=b&sdt=b&s=TITLE%28software+fault+prediction+metrics+a+systematic+literature+review%29&sl=71&sessionSearchId=d87f31176ff2fa63e0a0b783de9454a7&relpos=0		nan; References; Publisher
296	TrustSE	The infeasibility of experimental quantification of life-critical software reliability			Butler, Ricky W.; Finelli, George B.	SIGSOFT '91: Proceedings of the conference on Software for citical systems	https://doi.org/10.1145/125083.123054		66-76	"""@inproceedings{10.1145/125083.123054,
    author = ""Butler, Ricky W. and Finelli, George B."",
    title = ""The infeasibility of experimental quantification of life-critical software reliability"",
    year = ""1991"",
    isbn = ""0897914554"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/125083.123054"",
    doi = ""10.1145/125083.123054"",
    booktitle = ""Proceedings of the Conference on Software for Citical Systems"",
    pages = ""66-76"",
    numpages = ""11"",
    location = ""New Orleans, Louisiana, USA"",
    series = ""SIGSOFT '91""
}

@article{10.1145/123041.123054,
    author = ""Butler, Ricky W. and Finelli, George B."",
    title = ""The infeasibility of experimental quantification of life-critical software reliability"",
    year = ""1991"",
    issue_date = ""Dec. 1991"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""16"",
    number = ""5"",
    issn = ""0163-5948"",
    url = ""https://doi.org/10.1145/123041.123054"",
    doi = ""10.1145/123041.123054"",
    journal = ""SIGSOFT Softw. Eng. Notes"",
    month = ""September"",
    pages = ""66-76"",
    numpages = ""11""
}
"""	Excluded	Excluded				2	ACM		The infeasibility of experimental quantification of life-critical software reliability	https://doi.org/10.1145/125083.123054	Association for Computing Machinery	nan; Abstract; Keywords; References; Link
297	TrustSE	Open Source Software for the Public Administration	Open Source Software (OSS) and of Open Data Standards (ODS) are getting to be more and more accepted world wide in Public Administration (PA). A European joint project (COSPA) with the participation of eight countries studies the application advantages (and drawbacks) of OSS and ODS in PAs, as PAs are among the biggest computer- and software consumers, thus they should be very careful what to use, how to use. PAs spend every year a considerable amount of money for commercial off-the-shelf software licenses. By using appropriate technologies, such expenses might be either dramatically reduced, or re-routed to further develop local business ecosystems. This project aims at introducing, analyzing, and supporting the use of ODS and OS software for personal productivity and document management in European Pas		George L. Kovacs; Sylvester Drozdik; Paolo Zuliani; Giancarlo Succi	Workshop on Computer Science and Information Technologies CSIT'2004	https://www.researchgate.net/profile/Giancarlo-Succi/publication/228770161_Open_source_software_for_the_public_administration/links/09e4150a4226bae31e000000/Open-source-software-for-the-public-administration.pdf		8	"""nan"""	Excluded	Excluded				2	Google Scholar		Open source software for the public administration	https://www.researchgate.net/profile/Giancarlo-Succi/publication/228770161_Open_source_software_for_the_public_administration/links/09e4150a4226bae31e000000/Open-source-software-for-the-public-administration.pdf	Institute for Contemporary Education JMSUICE	
298	TrustSE	Temporal metrics for software vulnerabilities	It is widely recognized that metrics are important to information security. Metrics can be an effective tool for companies and information security professionals to measure, control, and improve their security control and mechanisms. However, common security metrics are often qualitative, subjective, and informal in the sense that they are lacking formal models and automated support. This paper discussed our work on temporal metrics for software vulnerabilities based on the Common Vulnerability Scoring System 2.0. A mathematical model is provided to calculate the severity and risk of a vulnerability, which is time dependent including exploitability, remediation level, and report confidence attributes of an information asset in a computing environment. A prototype of an automated tool, CVSSWizzard, is illustrated with examples.	threats and vulnerabilities;  metrics and measurement;  information security;  common vulnerability scoring system; threats and vulnerabilities, metrics and measurement, information security, common vulnerability scoring system	Wang, Ju An; Zhang, Fengwei; Xia, Min	CSIIRW '08: Proceedings of the 4th annual workshop on Cyber security and information intelligence research: developing strategies to meet the cyber security and information intelligence challenges ahead	https://doi.org/10.1145/1413140.1413191		1-3	"""@inproceedings{10.1145/1413140.1413191,
    author = ""Wang, Ju An and Zhang, Fengwei and Xia, Min"",
    title = ""Temporal metrics for software vulnerabilities"",
    year = ""2008"",
    isbn = ""9781605580982"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1413140.1413191"",
    doi = ""10.1145/1413140.1413191"",
    abstract = ""It is widely recognized that metrics are important to information security. Metrics can be an effective tool for companies and information security professionals to measure, control, and improve their security control and mechanisms. However, common security metrics are often qualitative, subjective, and informal in the sense that they are lacking formal models and automated support. This paper discussed our work on temporal metrics for software vulnerabilities based on the Common Vulnerability Scoring System 2.0. A mathematical model is provided to calculate the severity and risk of a vulnerability, which is time dependent including exploitability, remediation level, and report confidence attributes of an information asset in a computing environment. A prototype of an automated tool, CVSSWizzard, is illustrated with examples."",
    booktitle = ""Proceedings of the 4th Annual Workshop on Cyber Security and Information Intelligence Research: Developing Strategies to Meet the Cyber Security and Information Intelligence Challenges Ahead"",
    articleno = ""44"",
    numpages = ""3"",
    keywords = ""threats and vulnerabilities, metrics and measurement, information security, common vulnerability scoring system"",
    location = ""Oak Ridge, Tennessee, USA"",
    series = ""CSIIRW '08""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	ACM		Temporal metrics for software vulnerabilities	https://doi.org/10.1145/1413140.1413191	Association for Computing Machinery	nan; References; Link
299	TrustSE	Open source software and open data standards in public administration	A European joint project (COSPA) with the participation of eight countries from all parts of Europe studies the application advantages (and drawbacks) of open source software (OS) and of open data standards (ODS) in public administration (PA). PAs are among the biggest computer- and software consumers world-wide, thus they should be very careful what to use, how to use. PAs spend every year a considerable amount of money for commercial off-the-shelf software licenses. By using appropriate technologies, such expenses might be either dramatically reduced, or re-routed to further develop local business ecosystems. This project aims at introducing, analyzing, and supporting the use of ODS and OS software for personal productivity and document management in European PAs	Open source software; Software standards; Europe; Application software; Operating systems; Licenses; Appropriate technology; Business; Ecosystems; Productivity; Open-source; Open-source Software; Public Administration; Open Data Standards; Business; Use Of Software; Appropriate Technology; Software License; Knowledge Base; Operating System; Public Sector; Source Code; Data Storage; Commercial Software; Interoperability; Data Exchange; Desktop Computer; Software Platform; European Level; City Council; Open Standards; Corporate Environmental; Commercial Vendors; Software Solutions; Licensing Fees; Training Costs; Regions Of Spain; Desktop Application; Savings; Trained Personnel	G.L. Kovacs; S. Drozdik; P. Zuliani; G. Succi	Second IEEE International Conference on Computational Cybernetics, 2004. ICCC 2004.	https://doi.org/10.1109/ICCCYB.2004.1437766	1.Barbara Russo, Paolo Zuliani, Giancarlo Succi: Toward an Empirical Assessment of the Benefits of Open Source Software, http://conferences.iee.org/ icse2003/ Google Scholar; 2.http://www.linex.org/linex2/linex/ingles/index_ing.html; 3.IDA, eGovernment Newsletter No 6 - December 2003 Google Scholar; 4.http://europa.eu.int/ISPO/ida/jsps/; 5.http://www.idc.nl/; 6.http://europa.eu.int/ISPO/ida/; 7.http://www.infonomics.nl/FLOSS/; 8.http://www.redhat.com/; 9.http://www.suse.com/us/; 10.http://www.ximian.com/; 11.http://multisync.sourceforge.net/; 12.http://www.prelude-portal.org/3roses/; 13.http://www.geekfinder.hu/news.php?id=266; 14.http://www.webopedia.com/TERM/o/open_source.html; 15.http://index.hu/tech/szoftver/linux0204/			Excluded	Excluded				2	IEEE		Open source software and open data standards in public administration	https://ieeexplore.ieee.org/document/1437766	IEEE	nan; Pages; Year; Bibtex
300	TrustSE	Government Preferences for Promoting Open-Source Software: A Solution in Search of a Problem	Governments around the world are making or considering efforts to promote open-source software (typically produced by cooperatives of individuals) at the expense of proprietary software (generally sold by for-profit software developers). This article examines the economic basis for these kinds of government interventions in the market. It first provides some background on the software industry. The article discusses the industrial organization and performance of the proprietary software business and describes how the open-source movement produces and distributes software. It then surveys current government proposals and initiatives to support open-source software and examines whether there is a significant market failure that would justify such intervention in the software industry. The article concludes that the software industry has performed remarkably well over the past 20 years in the absence of government intervention. There is no evidence of any significant market failures in the provision of commercial software and no evidence that the establishment of policy preferences in favor of open-source software on the part of governments would increase consumer welfare.		David S. Evans; Bernard J. Reddy	Mich. Telecomm. & Tech. L. Rev.	https://repository.law.umich.edu/mttlr/vol9/iss2/3/			"""nan"""	Excluded	Excluded				2	Google Scholar		Government preferences for promoting open-source software: A solution in search of a problem	https://repository.law.umich.edu/mttlr/vol9/iss2/3/	Michigan Telecommunications and Technology Law Review	
301	TrustSE	Research on testing-based software credibility measurement and assessment	It's one of the important approaches to measure and assess software credibility by testing in trustworthy software study. From the perspective of effective management and credibility analysis supporting the test process, this article describes a basic framework for its management and discusses the assessment techniques and methods of credible test process and software product.	Assessment technique; Effective management; Software products; Test process; Computer software; Assessment technique;  Effective management;  Software products;  Test process;  Computer software	Hongbing, Qian; Xiaojie, Zhu; Maozhong, Jin	2009 WRI World Congress on Software Engineering, WCSE 2009	https://doi.org/10.1109/WCSE.2009.192	1.CHEN Huo-wang; WANG Ji; Dong Wei, High Confidence Software Engineering Technologies, Acta Electronica Sinica, Vol.31 No 12A Dec, 2003 Google Scholar; 2.Trustworthy Software Systems: A Discussion of Basic Concepts and Terminology ACM SIGSOFT Software Engineering Notes Page 1 November 2006 Volume 31 Number 6; 3.J. McGarry, D. Card, et al., Practical Software Measurement, Addison Wesley, 2002. Google Scholar; 4.Wang Q, Li MS, Liu X. An active measurement model for software process control and improvement, Journal of Software, 2005,16(3):407-418. CrossRef  Google Scholar; 5.Jim Lawler, Barbara Kitchenham, Measurement Modeling Technology, IEEE, 2003; 6.Yutao He, Herbert Hecht, Raymond A. Paul, Measuring and Assessing Software Test Processes Using Test Data, IEEE, 2000; 7.ZHOU Minghui, MEI Hong, J IAO Wenpin, A Customizable Trust Management Framework Ba sed on Middleware, Acta Electronica Sinica, Vol.33, No 5 May, 2005 Google Scholar; 8.Zheng Yan, Predicting Trustworthiness for Component Software. Third International Workshop on Security Privacy and Trust in Pervasive and Ubiquitous Computing (SecPerU 2007), IEEE, 2007 View Article  Google Scholar; 9.Zhengping, Liang; Xiaoli, Liu; Guoqing, Wu; Min, Yang; Fan, Zhang, A formal Framework for Trust management of Service-oriented Systems, Service-Oriented Computing and Applications, 2007. SOCA apos;07. IEEE International Conference on Digital Object Identifier Volume, Issue, 19-20 June 2007 Page(s):241 - 24; 10.NSF:CISE-Trusted Computing, www.nsf.cov, March 2003 Google Scholar; 11.ZHOU Minghui, MEI Hong, Research and Development of Trusted Computing, Computer Science, Vol.31, No 7, 2004 Google Scholar; 12.QIN Zhidong, Research on Testing and Evaluating Theory of Reliability and Safety for High Dependability Software, Dr. Paper, Nov, 2005 Google Scholar; 13.Liang Shengjie, Zhang Zhihua, Influence Research on Operational Profile to Credibility of the Software Reliability Estimated Result, Computer Engineering and Applications, No14,2006. Google Scholar; 14.Norman F. Schneidewind, Reliability Modeling for Safety-Critical Software, IEEE TRANSACTIONS ON RELIABILITY, VOL. 46, NO. 1, 1997 MARCH View Article  Google Scholar; 15.Nachiappan, Toward a Software Testing and Reliability Early Warning Metric Suite, Proceedings of the 26th International Conference on Software Engineering (ICSE' 04). IEEE 2004 View Article  Google Scholar; 16.Musa D J. Software Reliability Engineering. McGraw-Hill Companies, Inc, 1999. Google Scholar; 17.William A.Florac, etc., Measuring the Software Process-Statistical Process control for Software Process Improvement, Addison-Wesley, 1999 Google Scholar	59 - 64	"""@CONFERENCE{Hongbing200959,
    author = ""Hongbing, Qian and Xiaojie, Zhu and Maozhong, Jin"",
    title = ""Research on testing-based software credibility measurement and assessment"",
    year = ""2009"",
    journal = ""2009 WRI World Congress on Software Engineering, WCSE 2009"",
    volume = ""4"",
    pages = ""59 - 64"",
    doi = ""10.1109/WCSE.2009.192"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-72849144320\&doi=10.1109\%2fWCSE.2009.192\&partnerID=40\&md5=76cde51449dfa02457557a71a91903ae"",
    affiliations = ""School of Computer, Beihang University, Beijing 100083, China"",
    abstract = ""It's one of the important approaches to measure and assess software credibility by testing in trustworthy software study. From the perspective of effective management and credibility analysis supporting the test process, this article describes a basic framework for its management and discusses the assessment techniques and methods of credible test process and software product. (c) 2009 IEEE."",
    keywords = ""Assessment technique; Effective management; Software products; Test process; Computer software"",
    isbn = ""978-076953570-8"",
    language = ""English"",
    abbrev_source_title = ""WRI World Congr. Softw. Eng., WCSE"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3; Conference name: 2009 WRI World Congress on Software Engineering, WCSE 2009; Conference date: 19 May 2009 through 21 May 2009; Conference code: 78770""
}
"""	Excluded	Excluded				2	Scopus Signed In		Research on testing-based software credibility measurement and assessment	https://ieeexplore.ieee.org/document/5319501	IEEE	
302	TrustSE	Software metrics: successes, failures and new directions	The history of software metrics is almost as old as the history of software engineering. Yet, the extensive research and literature on the subject has had little impact on industrial practice. This is worrying given that the major rationale for using metrics is to improve the software engineering decision making process from a managerial and technical perspective. Industrial metrics activity is invariably based around metrics that have been around for nearly 30 years (notably Lines of Code or similar size counts, and defects counts). While such metrics can be considered as massively successful given their popularity, their limitations are well known, and mis-applications are still common. The major problem is in using such metrics in isolation. We argue that it is possible to provide genuinely improved management decision support systems based on such simplistic metrics, but only by adopting a less isolationist approach. Specifically, we feel it is important to explicitly model: (a) cause and effect relationships and (b) uncertainty and combination of evidence. Our approach uses Bayesian Belief nets, which are increasingly seen as the best means of handling decision-making under uncertainty. The approach is already having an impact in Europe.	Computer software selection and evaluation; Decision support systems; Mathematical models; Probability; Software engineering; Systems analysis; Bayesian belief nets; Software engineering decision making; Software metrics; Computer software; Computer software selection and evaluation;  Decision support systems;  Mathematical models;  Probability;  Software engineering;  Systems analysis;  Bayesian belief nets;  Software engineering decision making;  Software metrics;  Computer software	Fenton, Norman E.; Neil, Martin	Journal of Systems and Software	https://doi.org/10.1016/S0164-1212(99)00035-7		149 - 157	"""@ARTICLE{Fenton1999149,
    author = ""Fenton, Norman E. and Neil, Martin"",
    title = ""Software metrics: successes, failures and new directions"",
    year = ""1999"",
    journal = ""Journal of Systems and Software"",
    volume = ""47"",
    number = ""2"",
    pages = ""149 - 157"",
    doi = ""10.1016/S0164-1212(99)00035-7"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0032663370\&doi=10.1016\%2fS0164-1212\%2899\%2900035-7\&partnerID=40\&md5=115314fb8e038008e79829de7ff61d21"",
    affiliations = ""Centre for Software Reliability, City Univ., Northampton Sq., EC1V O., London, United Kingdom"",
    abstract = ""The history of software metrics is almost as old as the history of software engineering. Yet, the extensive research and literature on the subject has had little impact on industrial practice. This is worrying given that the major rationale for using metrics is to improve the software engineering decision making process from a managerial and technical perspective. Industrial metrics activity is invariably based around metrics that have been around for nearly 30 years (notably Lines of Code or similar size counts, and defects counts). While such metrics can be considered as massively successful given their popularity, their limitations are well known, and mis-applications are still common. The major problem is in using such metrics in isolation. We argue that it is possible to provide genuinely improved management decision support systems based on such simplistic metrics, but only by adopting a less isolationist approach. Specifically, we feel it is important to explicitly model: (a) cause and effect relationships and (b) uncertainty and combination of evidence. Our approach uses Bayesian Belief nets, which are increasingly seen as the best means of handling decision-making under uncertainty. The approach is already having an impact in Europe."",
    keywords = ""Computer software selection and evaluation; Decision support systems; Mathematical models; Probability; Software engineering; Systems analysis; Bayesian belief nets; Software engineering decision making; Software metrics; Computer software"",
    publisher = ""Elsevier Science Inc"",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 176; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software metrics: successes, failures and new directions	https://www.scopus.com/record/display.uri?eid=2-s2.0-0032663370&origin=resultslist&sort=r-f&src=s&sid=4fc3411687ca4883b6e5f81ec11b1d3a&sot=b&sdt=b&s=TITLE%28software+metrics+successes+failures+and+new+directions%29&sl=61&sessionSearchId=4fc3411687ca4883b6e5f81ec11b1d3a&relpos=0	Elsevier Science Inc	nan; References
303	TrustSE	Understanding broadcast based peer review on open source software projects	Software peer review has proven to be a successful technique in open source software (OSS) development. In contrast to industry, where reviews are typically assigned to specific individuals, changes are broadcast to hundreds of potentially interested stakeholders. Despite concerns that reviews may be ignored, or that discussions will deadlock because too many uninformed stakeholders are involved, we find that this approach works well in practice. In this paper, we describe an empirical study to investigate the mechanisms and behaviours that developers use to find code changes they are competent to review. We also explore how stakeholders interact with one another during the review process. We manually examine hundreds of reviews across five high profile OSS projects. Our findings provide insights into the simple, community-wide techniques that developers use to effectively manage large quantities of reviews. The themes that emerge from our study are enriched and validated by interviewing long-serving core developers.	peer review;  open source software;  grounded theory;  case studies; peer review, open source software, grounded theory, case studies	Rigby, Peter C.; Storey, Margaret-Anne	ICSE '11: Proceedings of the 33rd International Conference on Software Engineering	https://doi.org/10.1145/1985793.1985867		541-550	"""@inproceedings{10.1145/1985793.1985867,
    author = ""Rigby, Peter C. and Storey, Margaret-Anne"",
    title = ""Understanding broadcast based peer review on open source software projects"",
    year = ""2011"",
    isbn = ""9781450304450"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1985793.1985867"",
    doi = ""10.1145/1985793.1985867"",
    abstract = ""Software peer review has proven to be a successful technique in open source software (OSS) development. In contrast to industry, where reviews are typically assigned to specific individuals, changes are broadcast to hundreds of potentially interested stakeholders. Despite concerns that reviews may be ignored, or that discussions will deadlock because too many uninformed stakeholders are involved, we find that this approach works well in practice. In this paper, we describe an empirical study to investigate the mechanisms and behaviours that developers use to find code changes they are competent to review. We also explore how stakeholders interact with one another during the review process. We manually examine hundreds of reviews across five high profile OSS projects. Our findings provide insights into the simple, community-wide techniques that developers use to effectively manage large quantities of reviews. The themes that emerge from our study are enriched and validated by interviewing long-serving core developers."",
    booktitle = ""Proceedings of the 33rd International Conference on Software Engineering"",
    pages = ""541-550"",
    numpages = ""10"",
    keywords = ""peer review, open source software, grounded theory, case studies"",
    location = ""Waikiki, Honolulu, HI, USA"",
    series = ""ICSE '11""
}
"""	Excluded	Excluded				2	ACM		Understanding broadcast based peer review on open source software projects	https://doi.org/10.1145/1985793.1985867	Association for Computing Machinery	nan; References; Link
304	TrustSE	Understanding the sources of variation in software inspections	"In a previous experiment, we determined how various changes in three structural elements of the software inspection process (team size and the number and sequencing of sessions) altered effectiveness and interval. Our results showed that such changes did not significantly influence the defect detection rate, but that certain combinations of changes dramatically increased the inspection interval. We also observed a large amount of unexplained variance in the data, indicating that other factors must be affecting inspection performance. The nature and extent of these other factors now have to be determined to ensure that they had not biased our earlier results. Also, identifying these other factors might suggest additional ways to improve the efficiency of inspections. Acting on the hypothesis that the ""inputs"" into the inspection process (reviewers, authors, and code units) were significant sources of variation, we modeled their effects on inspection performance. We found that they were responsible for much more variation in detect detection than was process structure. This leads us to conclude that better defect detection techniques, not better process structures, are the key to improving inspection effectiveness. The combined effects of process inputs and process structure on the inspection interval accounted for only a small percentage of the variance in inspection interval. Therefore, there must be other factors which need to be identified."	statistical models;  software process;  software inspection;  empirical studies; statistical models, software process, software inspection, empirical studies	Porter, Adam; Siy, Harvey; Mockus, Audris; Votta, Lawrence	ACM Trans. Softw. Eng. Methodol.	https://doi.org/10.1145/268411.268421		41-79	"""@article{10.1145/268411.268421,
    author = ""Porter, Adam and Siy, Harvey and Mockus, Audris and Votta, Lawrence"",
    title = ""Understanding the sources of variation in software inspections"",
    year = ""1998"",
    issue_date = ""Jan. 1998"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""7"",
    number = ""1"",
    issn = ""1049-331X"",
    url = ""https://doi.org/10.1145/268411.268421"",
    doi = ""10.1145/268411.268421"",
    abstract = ""In a previous experiment, we determined how various changes in three structural elements of the software inspection process (team size and the number and sequencing of sessions) altered effectiveness and interval. Our results showed that such changes did not significantly influence the defect detection rate, but that certain combinations of changes dramatically increased the inspection interval. We also observed a large amount of unexplained variance in the data, indicating that other factors must be affecting inspection performance. The nature and extent of these other factors now have to be determined to ensure that they had not biased our earlier results. Also, identifying these other factors might suggest additional ways to improve the efficiency of inspections. Acting on the hypothesis that the ""inputs"" into the inspection process (reviewers, authors, and code units) were significant sources of variation, we modeled their effects on inspection performance. We found that they were responsible for much more variation in detect detection than was process structure. This leads us to conclude that better defect detection techniques, not better process structures, are the key to improving inspection effectiveness. The combined effects of process inputs and process structure on the inspection interval accounted for only a small percentage of the variance in inspection interval. Therefore, there must be other factors which need to be identified."",
    journal = ""ACM Trans. Softw. Eng. Methodol."",
    month = ""January"",
    pages = ""41-79"",
    numpages = ""39"",
    keywords = ""statistical models, software process, software inspection, empirical studies""
}
"""	Included	Included				2	ACM		Understanding the sources of variation in software inspections	https://doi.org/10.1145/268411.268421	Association for Computing Machinery	nan; References; Link
305	TrustSE	The Collaborative Integrity of Open-Source Software	This Article analyzes legal protection for open-source software by comparing it to the venerable civil law tradition of moral rights. The comparison focuses on the moral right of integrity, with which one may object to mutilations of her work, even after having parted with the copyright and the object that embodies the work. The parallel apparatus in open-source licensing is conditional permission to use a copyrighted work. The conditions include that source code be available and that software use be royalty free. These conditions facilitate open-source collaborative software development. At the heart of both systems is the right for creators to control the view that a work presents. In the open-source system, this is the Collaborative Integrity of open-source software. The history and legacy of moral rights help us better understand Collaborative Integrity in open-source software. The right of integrity in some international jurisdictions may apply to software, thus raising questions whether it hurts or helps open-source software. Building from these insights, this Article evaluates whether the Collaborative Integrity in open-source software deserves protection as a separate right, just as the right of integrity developed separately from pecuniary copyright in civil law jurisdictions.	Software; foss; f/oss; open source; software development; oss; moral right; right of integrity; collaboration; programming; linux; GNU/Linux; GPL; general public license; OSD; open code; apache; SCO	Greg R. Vetter	University of Houston Law Center No. 2004-A-11	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=585921		139	"""nan"""	Included	Included				2	Google Scholar		The Collaborative Integrity of Open-Source Software	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=585921	SSRN	
306	TrustSE	Auditing and maintaining provenance in software packages	Science projects are increasingly investing in computational reproducibility. Constructing software pipelines to demonstrate reproducibility is also becoming increasingly common. To aid the process of constructing pipelines, science project members often adopt reproducible methods and tools. One such tool is CDE, which is a software packaging tool that encapsulates source code, datasets and environments. However, CDE does not include information about origins of dependencies. Consequently when multiple CDE packages are combined and merged to create a software pipeline, several issues arise requiring an author to manually verify compatibility of distributions, environment variables, software dependencies and compiler options. In this work, we propose software provenance to be included as part of CDE so that resulting provenance-included CDE packages can be easily used for creating software pipelines. We describe provenance attributes that must be included and how they can be efficiently stored in a light-weight CDE package. Furthermore, we show how a provenance in a package can be used for creating software pipelines and maintained as new packages are created. We experimentally evaluate the overhead of auditing and maintaining provenance and compare with heavy weight approaches for reproducibility such as virtualization. Our experiments indicate minimal overheads.	Packaging machines; Pipelines; Computational reproducibility; Reproducibilities; Science projects; Software dependencies; Software packaging; Software pipeline; Tools and methods; Virtualizations; Packaging; Packaging machines;  Pipelines;  Computational reproducibility;  Reproducibilities;  Science projects;  Software dependencies;  Software packaging;  Software pipeline;  Tools and methods;  Virtualizations;  Packaging	Pham, Quan; Malik, Tanu; Foster, Ian	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/978-3-319-16462-5_8	Linux man pagehttp://linux.die.net/man/2/ptrace; http://uninformed.org/index.cgi?v=4&a=3&p=14; http://scienceclouds.org/appliances/swiftappliance/; Belhajjame, K., Corcho, O.Workflow-centric research objects: First class citizens in scholarly discourse(2012)Proceedings of Workshop on the Semantic Publishing (Sepublica).Cited 33 times.; Chirigati, F., Shasha, D., Freire, J.; Cordella, L.P., Foggia, P., Sansone, C., Vento, M.; Davies, J., German, D.M., Godfrey, M.W., Hindle, A.; Davison, A.; Elliott, J.Constraints and potentials of future irrigation water availability on agricultural production under climate change(2013)Proceedings of the National Academy of Sciences.Cited 4 times.; Emeras, J., Richard, O., Bzeznik, B.(2011)Reconstructing the Software Environment of an Experiment with Kameleon.Cited 2 times.; Fourer, R., Gay, D.M., Kernighan, B.W.(1987)AMPL: A Mathematical Programming Language.Cited 162 times.ATT Bell Laboratories, Murray Hill; Guo, P.(2011)CDE: Run Any Linux Application On-Demand without InstallationTechnical. report, USENIX Association, Boston, Massachusetts; Guo, P.J., Engler, D.(2011)CDE: Using System Call Interposition to Automatically Create Portable Software Packages.Cited 32 times.USENIX Association, Portland; Keniston, J., Mavinakayanahalli, A., Panchamukhi, P., Prasad, V.Ptrace, utrace, uprobes: Lightweight, dynamic tracing of user apps(2007)Linux Symposium.Cited 23 times.; Krampis, K., Booth, T., Chapman, B., Tiwari, B., Bicak, M., Field, D., Nelson, K.E.; Lohner, A.(2012)Lico-Project Information; Pham, Q., Malik, T., Foster, I.; Prasad, V., Cohen, W., Eigler, F., Hunt, M., Keniston, J., Chen, B.(2005)Locating System Problems Using Dynamic Instrumentation.Cited 92 times.; Seiler, J.(2013)Research Compendia: Connecting Computation to Publication; Singh, J.; Stodden, V., Hurlin, C., Perignon, C.; Wegener, I.	97 - 109	"""@ARTICLE{Pham201597,
    author = ""Pham, Quan and Malik, Tanu and Foster, Ian"",
    editor = ""B., Plale and B., Ludascher and {Department of Computer Science, University of California, One Shields Avenue, Davis, 95616, CA} and B., Ludascher"",
    title = ""Auditing and maintaining provenance in software packages"",
    year = ""2015"",
    journal = ""Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)"",
    volume = ""8628"",
    pages = ""97 - 109"",
    doi = ""10.1007/978-3-319-16462-5\_8"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928795222\&doi=10.1007\%2f978-3-319-16462-5\_8\&partnerID=40\&md5=8f44e073c3a02f6a77e23db02c6350fa"",
    affiliations = ""Department of Computer Science, The University of Chicago, Chicago, 60637, IL, United States; Computation Institute, The University of Chicago, Chicago, 60637, IL, United States"",
    abstract = ""Science projects are increasingly investing in computational reproducibility. Constructing software pipelines to demonstrate reproducibility is also becoming increasingly common. To aid the process of constructing pipelines, science project members often adopt reproducible methods and tools. One such tool is CDE, which is a software packaging tool that encapsulates source code, datasets and environments. However, CDE does not include information about origins of dependencies. Consequently when multiple CDE packages are combined and merged to create a software pipeline, several issues arise requiring an author to manually verify compatibility of distributions, environment variables, software dependencies and compiler options. In this work, we propose software provenance to be included as part of CDE so that resulting provenance-included CDE packages can be easily used for creating software pipelines. We describe provenance attributes that must be included and how they can be efficiently stored in a light-weight CDE package. Furthermore, we show how a provenance in a package can be used for creating software pipelines and maintained as new packages are created. We experimentally evaluate the overhead of auditing and maintaining provenance and compare with heavy weight approaches for reproducibility such as virtualization. Our experiments indicate minimal overheads. (c) Springer International Publishing Switzerland 2015."",
    author_keywords = ""Reproducibility; Software packaging tools; Software provenance; Tools and methods"",
    keywords = ""Packaging machines; Pipelines; Computational reproducibility; Reproducibilities; Science projects; Software dependencies; Software packaging; Software pipeline; Tools and methods; Virtualizations; Packaging"",
    publisher = ""Springer Verlag"",
    issn = ""03029743"",
    isbn = ""978-331916461-8"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3; Conference name: 5th International Provenance and Annotation Workshop, IPAW 2014; Conference date: 10 June 2014 through 11 June 2014; Conference code: 115879; All Open Access, Bronze Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Auditing and maintaining provenance in software packages	https://link.springer.com/chapter/10.1007/978-3-319-16462-5_8	Springer Verlag	
307	TrustSE	Software processes analysis with provenance	Companies have been increasing the amount of data that they collect from their systems and processes, considering the decrease in the cost of memory and storage technologies in recent years. The emergence of technologies such as Big Data, Cloud Computing, E-Science, and the growing complexity of information systems made evident that traceability and provenance are promising approaches. Provenance has been successfully used in complex domains, like health sciences, chemical industries, and scientific computing, considering that these areas require a comprehensive semantic traceability mechanism. Based on these, we investigate the use of provenance in the context of Software Process (SP) and introduce a novel approach based on provenance concepts to model and represent SP data. It addresses SP provenance data capturing, storing, new information inferencing and visualization. The main contribution of our approach is PROV-SwProcess, a provenance model to deal with the specificities of SP and its ability in supporting process managers to deal with vast amounts of execution data during the process analysis and data-driven decision-making. A set of analysis possibilities were derived from this model, using SP goals and questions. A case study was conducted in collaboration with a software development company to instantiate the PROV-SwProcess model (using the proposed approach) with real-word process data. This study showed that 87.5% of the analysis possibilities using real data was correct and can assist in decision-making, while 62.5% of them are not possible to be performed by the process manager using his currently dashboard or process management tool.	Chemical analysis; Chemical industry; Data visualization; Decision making; Digital storage; Distributed computer systems; Managers; Process engineering; Semantics; Software design; Word processing; Data driven decision; Data provenance; Process management tool; Provenance models; Software process; Software Process Improvement; Storage technology; Systems and process; Big data; Chemical analysis;  Chemical industry;  Data visualization;  Decision making;  Digital storage;  Distributed computer systems;  Managers;  Process engineering;  Semantics;  Software design;  Word processing;  Data driven decision;  Data provenance;  Process management tool;  Provenance models;  Software process;  Software Process Improvement;  Storage technology;  Systems and process;  Big data	Costa, Gabriella Castro Barbosa; Dalpra, Humberto L. O.; Teixeira, Eldanae N.; Werner, Claudia M. L.; Braga, Regina M. M.; Miguel, Marcos A.	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/978-3-030-03673-7_8	Aversano, L., De Lucia, A., Gaeta, M., Ritrovato, P., Stefanucci, S., Villani, M.L.; Avrilionis, D., Belkhatir, N., Cunin, P.-Y.; Basili, V.Goal question metric paradigm(1994)Encyclopedia of Software Engineering, pp. 528-532.Cited 2257 times.Marciniak, J.J. (ed.), Wiley, New York; Bosch, J.; Cook, J.E.Software process analysis(2000)ACM SIGSOFT Softw. Eng. Notes., 25 (1), p. 44.Cited 2 times.; Costa, G.C.B., Werner, C.M.L., Braga, R.; Cuevas-Vicenttin, V.(2016)Provone: A PROV Extension Data Model for Scientific Workflow Provenance.Cited 48 times.https://purl.dataone.org/provone-v1-dev; Dalpra, H.L.Using ontology and data provenance to improve software processes(2015)Brazilian Ontology Research Seminar, Sao Paulo, Brazil, pp. 10-21.Cited 8 times.; Dang, Y.B., Cheng, P., Luo, L., Cho, A.; Davies, J., German, D.M., Godfrey, M.W., Hindle, A.; Derniame, J.C.(1999)Software Process: Principles, Methodology, and Technology.Cited 77 times.Springer, Heidelberghttps://doi.org/10.1007/3-540-49205-4; De Almeida Falbo, R., Bertollo, G.; Falci, M.L., Braga, R., Stroele, V., David, J.M.N.; Freire, J., Koop, D., Santos, E., Silva, C.T.; Ghoshal, D., Plale, B.; Godfrey, M.W.; Miles, S.(2011)Prime. ACM Trans. Softw. Eng. Methodol., 20 (3), pp. 1-42.; Missier, P., Belhajjame, K., Cheney, J.; Missier, P., Dey, S., Belhajjame, K., Cuevas-Vicenttin, V., Ludascher, B.; Moreau, L., Clifford, B., Freire, J., Futrelle, J., Gil, Y., Groth, P., Kwasnikowska, N., (...), Den Bussche, J.V.; Moreau, L., Ludascher, B., Altintas, I., Barga, R.S., Bowers, S., Callahan, S., Chin Jr., G., (...), Zhao, Y.; Shull, F., Rus, I., Basili, V.; Sun, L., Park, J., Sandhu, R.; Teixeira, E.N., De Mello, R.M., Motta, R.C., Werner, C.L.M., Vasconcelos, A.; Wendel, H., Kunde, M., Schreiber, A.; Wolf, A.L., Rosenblum, D.S.; Xu, P., Sengupta, A.	106 - 122	"""@ARTICLE{Costa2018106,
    author = ""Costa, Gabriella Castro Barbosa and Dalpra, Humberto L. O. and Teixeira, Eldanae N. and Werner, Claudia M. L. and Braga, Regina M. M. and Miguel, Marcos A."",
    editor = ""M., Ciolkowski and R., Hebig and M., Kuhrmann and D., Pfahl and P., Tell and S., Amasaki and S., Kupper and K., Schneider and J., Klunder"",
    title = ""Software processes analysis with provenance"",
    year = ""2018"",
    journal = ""Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)"",
    volume = ""11271 LNCS"",
    pages = ""106 - 122"",
    doi = ""10.1007/978-3-030-03673-7\_8"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057270306\&doi=10.1007\%2f978-3-030-03673-7\_8\&partnerID=40\&md5=ee4fd24c95496012e960f495dbfb253f"",
    affiliations = ""COPPE - Federal University of Rio de Janeiro, Rio de Janeiro, RJ, Brazil; Computing and Mechanics Department, Federal Center for Technological Education of Minas Gerais, Minas Gerais, MG, Brazil; Computer Science Department, Federal University of Juiz de Fora, Juiz de Fora, MG, Brazil; Projetus Information Technology, Juiz de Fora, 36120000, Brazil"",
    abstract = ""Companies have been increasing the amount of data that they collect from their systems and processes, considering the decrease in the cost of memory and storage technologies in recent years. The emergence of technologies such as Big Data, Cloud Computing, E-Science, and the growing complexity of information systems made evident that traceability and provenance are promising approaches. Provenance has been successfully used in complex domains, like health sciences, chemical industries, and scientific computing, considering that these areas require a comprehensive semantic traceability mechanism. Based on these, we investigate the use of provenance in the context of Software Process (SP) and introduce a novel approach based on provenance concepts to model and represent SP data. It addresses SP provenance data capturing, storing, new information inferencing and visualization. The main contribution of our approach is PROV-SwProcess, a provenance model to deal with the specificities of SP and its ability in supporting process managers to deal with vast amounts of execution data during the process analysis and data-driven decision-making. A set of analysis possibilities were derived from this model, using SP goals and questions. A case study was conducted in collaboration with a software development company to instantiate the PROV-SwProcess model (using the proposed approach) with real-word process data. This study showed that 87.5\% of the analysis possibilities using real data was correct and can assist in decision-making, while 62.5\% of them are not possible to be performed by the process manager using his currently dashboard or process management tool. (c) Springer Nature Switzerland AG 2018."",
    author_keywords = ""Data provenance; Software process analysis; Software process improvement"",
    keywords = ""Chemical analysis; Chemical industry; Data visualization; Decision making; Digital storage; Distributed computer systems; Managers; Process engineering; Semantics; Software design; Word processing; Data driven decision; Data provenance; Process management tool; Provenance models; Software process; Software Process Improvement; Storage technology; Systems and process; Big data"",
    correspondence_address = ""G.C.B. Costa; COPPE - Federal University of Rio de Janeiro, Rio de Janeiro, Brazil; email: gabriellacbc@cos.ufrj.br"",
    publisher = ""Springer Verlag"",
    issn = ""03029743"",
    isbn = ""978-303003672-0"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; Conference name: 19th International Conference on Product-Focused Software Process Improvement, PROFES 2018; Conference date: 28 November 2018 through 30 November 2018; Conference code: 221089""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software processes analysis with provenance	https://www.scopus.com/record/display.uri?eid=2-s2.0-85057270306&origin=resultslist&sort=r-f&src=s&sid=bb1b0cdefc32ceeb7cf56e6ef50a5ec2&sot=b&sdt=b&s=TITLE%28software+processes+analysis+with+provenance%29&sl=50&sessionSearchId=bb1b0cdefc32ceeb7cf56e6ef50a5ec2&relpos=0	Springer Verlag	
308	TrustSE	Software Provenance: Track the Reality Not the Virtual Machine	The growing use of computers and massive storage by individuals is driving interest in digital preservation. The scientific method demands accountability through digital reproducibility, adding another strong motivation for preservation. However, data alone can become obsolete if the interactivity of software required to interpret the data is lost. Virtual machines (VMs) may preserve interactivity however do so at the cost of obscuring the nature of what lies within. Occam, instead, builds VMs on-the-fly while storing and distributing well-described software packages. Thus, the system can track the exact components inside VMs without storing the machines themselves, allowing software to be repeatably built and executed. For Occam to recreate VMs, it needs to know exactly what software was used within. Through this tracking, such software can even be modified and rebuilt. Occam keeps track of all such components in manifests, allowing anybody to know exactly what is in each VM, and the origins of each component.		Wilkinson, David; Oliveira, Lu\'{\i}s; Moss\'{e}, Daniel; Childers, Bruce	P-RECS'18: Proceedings of the First International Workshop on Practical Reproducible Evaluation of Computer Systems	https://doi.org/10.1145/3214239.3214244		1-6	"""@inproceedings{10.1145/3214239.3214244,
    author = ""Wilkinson, David and Oliveira, Lu\'{\i}s and Moss\'{e}, Daniel and Childers, Bruce"",
    title = ""Software Provenance: Track the Reality Not the Virtual Machine"",
    year = ""2018"",
    isbn = ""9781450358613"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3214239.3214244"",
    doi = ""10.1145/3214239.3214244"",
    abstract = ""The growing use of computers and massive storage by individuals is driving interest in digital preservation. The scientific method demands accountability through digital reproducibility, adding another strong motivation for preservation. However, data alone can become obsolete if the interactivity of software required to interpret the data is lost. Virtual machines (VMs) may preserve interactivity however do so at the cost of obscuring the nature of what lies within. Occam, instead, builds VMs on-the-fly while storing and distributing well-described software packages. Thus, the system can track the exact components inside VMs without storing the machines themselves, allowing software to be repeatably built and executed. For Occam to recreate VMs, it needs to know exactly what software was used within. Through this tracking, such software can even be modified and rebuilt. Occam keeps track of all such components in manifests, allowing anybody to know exactly what is in each VM, and the origins of each component."",
    booktitle = ""Proceedings of the First International Workshop on Practical Reproducible Evaluation of Computer Systems"",
    articleno = ""5"",
    numpages = ""6"",
    location = ""Tempe, AZ, USA"",
    series = ""P-RECS'18""
}
"""	Excluded	Excluded				2	ACM		Software Provenance: Track the Reality Not the Virtual Machine	https://doi.org/10.1145/3214239.3214244	Association for Computing Machinery	nan; Keywords; References; Link
309	TrustSE	Modeling Library Dependencies and Updates in Large Software Repository Universes	Popular (re)use of third-party open-source software (OSS) is evidence of the impact of hosting repositories like maven on software development today. Updating libraries is crucial, with recent studies highlighting the associated vulnerabilities with aging OSS libraries. The decision to migrate to a newer library can range from trivial (security threat) to complex (assessment of work required to accommodate the changes). By leveraging the `wisdom of the software repository crowd' we propose a simple and efficient approach to recommending `consented' library updates. Our Software Universe Graph (SUG) models library dependency and update information mined from super repositories to provide different metrics and visualizations that aid in the update decision. To evaluate, we first constructed a SUG from 188,951 nodes of 6,374 maven unique artifacts. Then, we demonstrate how our metrics and visualizations are applied through real-world examples. As an extension, we show how the SUG can compare dependencies between different super repositories. From a sample of 100 GitHub applications, our method found that on average 79% similar overlapping dependencies combinations exist between the maven and github super repository universes.		Raula Gaikovina Kula; Coen De Roover; Daniel M. German; Takashi Ishio; Katsuro Inoue	arXiv	https://doi.org/10.48550/arXiv.1709.04626				Excluded	Excluded			Studies that were not peer-reviewed	2	arXiv		Modeling library dependencies and updates in large software repository universes	https://arxiv.org/abs/1709.04626	arXiv	nan; Keywords; References; Pages; Year; Bibtex
310	TrustSE	The Spack package manager: bringing order to HPC software chaos	Large HPC centers spend considerable time supporting software for thousands of users, but the complexity of HPC software is quickly outpacing the capabilities of existing software management tools. Scientific applications require specific versions of compilers, MPI, and other dependency libraries, so using a single, standard software stack is infeasible. However, managing many configurations is difficult because the configuration space is combinatorial in size.We introduce Spack, a tool used at Lawrence Livermore National Laboratory to manage this complexity. Spack provides a novel, recursive specification syntax to invoke parametric builds of packages and dependencies. It allows any number of builds to coexist on the same system, and it ensures that installed packages can find their dependencies, regardless of the environment. We show through real-world use cases that Spack supports diverse and demanding applications, bringing order to HPC software chaos.		Gamblin, Todd; LeGendre, Matthew; Collette, Michael R.; Lee, Gregory L.; Moody, Adam; de Supinski, Bronis R.; Futral, Scott	SC '15: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis	https://doi.org/10.1145/2807591.2807623		1-12	"""@inproceedings{10.1145/2807591.2807623,
    author = ""Gamblin, Todd and LeGendre, Matthew and Collette, Michael R. and Lee, Gregory L. and Moody, Adam and de Supinski, Bronis R. and Futral, Scott"",
    title = ""The Spack package manager: bringing order to HPC software chaos"",
    year = ""2015"",
    isbn = ""9781450337236"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2807591.2807623"",
    doi = ""10.1145/2807591.2807623"",
    abstract = ""Large HPC centers spend considerable time supporting software for thousands of users, but the complexity of HPC software is quickly outpacing the capabilities of existing software management tools. Scientific applications require specific versions of compilers, MPI, and other dependency libraries, so using a single, standard software stack is infeasible. However, managing many configurations is difficult because the configuration space is combinatorial in size.We introduce Spack, a tool used at Lawrence Livermore National Laboratory to manage this complexity. Spack provides a novel, recursive specification syntax to invoke parametric builds of packages and dependencies. It allows any number of builds to coexist on the same system, and it ensures that installed packages can find their dependencies, regardless of the environment. We show through real-world use cases that Spack supports diverse and demanding applications, bringing order to HPC software chaos."",
    booktitle = ""Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis"",
    articleno = ""40"",
    numpages = ""12"",
    location = ""Austin, Texas"",
    series = ""SC '15""
}
"""	Excluded	Excluded				2	ACM		The Spack package manager: bringing order to HPC software chaos	https://doi.org/10.1145/2807591.2807623	Association for Computing Machinery	nan; Keywords; References; Link
311	TrustSE	Secure Dependency Enforcement in Package Management Systems	Package management systems play an essential role in pursuing systems dependability by ensuring that software is correctly installed and kept up-to-date according to vendor-defined installation policies. Circumventing such policies could make the system unhealthy and insecure and can constitute a serious security threat. In many application scenarios, e.g., distribution of commercial software, the confidentiality of the software must be guaranteed against non-authorized players. In some cases, the installation policy itself is considered a sensitive information, e.g., when it reveals required hardware in military contexts. In this paper we address the problem of strongly enforcing software dependencies in package management systems, to prevent that a malicious user forces the system to install any package despite its requirements are not completely fulfilled. The enforcement is strong in the sense that the encrypted software package cannot be even decrypted if the dependencies are not satisfied. Once a new package is decrypted and installed, our protocol non-interactively updates the key material on the target device. This key update will allow the decryption of further packages that depend on the newly installed one. We further present 'policy-hiding' variants of our protocol. Finally we provide an experimental evaluation of the system performance.	Cryptography; Network protocols; Servers; Software packages; Application scenario; Commercial software; Dependency Enforcement; Experimental evaluation; Package managements; Secure software; Sensitive informations; Software dependencies; Application programs; Cryptography;  Network protocols;  Servers;  Software packages;  Application scenario;  Commercial software;  Dependency Enforcement;  Experimental evaluation;  Package managements;  Secure software;  Sensitive informations;  Software dependencies;  Application programs	Catuogno, Luigi; Galdi, Clemente; Persiano, Giuseppe	IEEE Transactions on Dependable and Secure Computing	https://doi.org/10.1109/TDSC.2017.2777991	"1.L. Catuogno, C. Galdi and G. Persiano, ""Guaranteeing dependency enforcement in software updates"", Proc. 20th Nordic Conf. Secure IT Syst., pp. 205-212, 2015. CrossRef  Google Scholar; 2.T. Dumitras, S. Kavulya and P. Narasimhan, ""A fault model for upgrades in distributed systems (cmu-pdl-08-115)"", 2008. Google Scholar; 3.A. D. Rubin, ""Trusted distribution of software over the internet"", Proc. Symp. Netw. Distrib. Syst. Security, pp. 47-53, 1995. View Article  Google Scholar; 4.J. Samuel and J. Cappos, ""Package managers still vulnerable: How to protect your systems"", Login: Usenix Mag., vol. 34, no. 1, pp. 7-15, 2009. Google Scholar; 5.J. Cappos, J. Samuel, S. Baker and J. H. Hartman, ""A look in the mirror: Attacks on package managers"", Proc. 15th ACM Conf. Comput. Commun. Security, pp. 565-574, 2008. CrossRef  Google Scholar; 6.A. Bellissimo, J. Burgess and K. Fu, ""Secure software updates: Disappointments and new challenges"", Proc. 6th USENIX Workshop Hot Topics Security, pp. 7-7, 2006. Google Scholar; 7.J. Samuel, N. Mathewson, J. Cappos and R. Dingledine, ""Survivable key compromise in software update systems"", Proc. 17th ACM Conf. Comput. Commun. Security, pp. 61-72, 2010. CrossRef  Google Scholar; 8.L. Catuogno, R. Gassira, M. Masullo and I. Visconti, ""SmartK: Smart cards in operating systems at kernel level"", Inform. Security Tech. Rep., vol. 17, no. 3, pp. 93-104, 2013. CrossRef  Google Scholar; 9.""Introduction to code signing."",  [online]  Available: https://msdn.microsoft.com/en-us/library/ms537361.aspx. Google Scholar; 10.""Signing your applications"", 2005,  [online]  Available: http://developer.android.com/tools/publishing/app-signing.html. Google Scholar; 11.J. Cappos, ""Avoiding theoretical optimality to efficiently and privately retrieve security updates"", Proc. 17th Int. Conf. Financial Cryptography Data Security, pp. 386-394, 2013. CrossRef  Google Scholar; 12.B. Chor, E. Kushilevitz, O. Goldreich and M. Sudan, ""Private information retrieval"", J. ACM, vol. 45, no. 6, pp. 965-981, Nov. 1998. CrossRef  Google Scholar; 13.E. Dolstra, M. De Jonge and E. Visser, ""Nix: A safe and policy-free system for software deployment"", Proc. 18th USENIX Conf. Syst. Administration, vol. 4, pp. 79-92, 2004. Google Scholar; 14.E. Foster-Johnson, ""Red Hat RPM Guide"", 2003.; 15.J. Hart and J. DAmelia, ""An analysis of RPM validation drift"", Proc. 18th USENIX Conf. Syst. Administration, vol. 2, pp. 155-166, 2002. Google Scholar; 16.S. Neuhaus and T. Zimmermann, ""The beauty and the beast: Vulnerabilities in Red Hats packages"", Proc. USENIX Annu. Tech. Conf., pp. 383-396, 2009. Google Scholar; 17.M. Ambrosin, C. Busold, M. Conti, A.-R. Sadeghi and M. Schunter, ""Updaticator: Updating billions of devices by an efficient scalable and secure software update distribution over untrusted cache-enabled networks"", Proc. 16th Eur. Conf. Res. Comput. Security, pp. 76-93, 2014. CrossRef  Google Scholar; 18.J. Bethencourt, A. Sahai and B. Waters, ""Ciphertext-policy attribute-based encryption"", Proc. IEEE Symp. Security Privacy, pp. 321-334, 2007. View Article  Google Scholar; 19.A. Sahai and B. Waters, ""Fuzzy identity-based encryption"" in Advances in Cryptology, Berlin Heidelberg, Germany:Springer, vol. 3494, pp. 457-473, 2005,  [online]  Available: http://dx.doi.org/10.1007/11426639_27. CrossRef  Google Scholar; 20.R. Ostrovsky, A. Sahai and B. Waters, ""Attribute-based encryption with non-monotonic access structures"", Proc. 14th ACM Conf. Comput. Commun. Security, pp. 195-203, 2007. CrossRef  Google Scholar; 21.S. Muller, S. Katzenbeisser and C. Eckert, Distributed Attribute-Based Encryption, Berlin, Heidelberg, Germany:Springer, pp. 20-36, 2009,  [online]  Available: http://dx.doi.org/10.1007/978-3-642-00730-9_2. Google Scholar; 22.M. Chase, ""Multi-authority attribute based encryption"", Proc. 4th Conf. Theory Cryptography, pp. 515-534, 2007. CrossRef  Google Scholar; 23.J. Han, W. Susilo, Y. Mu, J. Zhou and M. H. Au, ""PPDCP-ABE: privacy-preserving decentralized ciphertext-policy attribute-based encryption"", Proc. 19th Eur. Symp. Res. Comput. Security, pp. 73-90, 2014. CrossRef  Google Scholar; 24.""Tee system architecture v1.0"", Dec. 2011,  [online]  Available: http://www.globalplatform.org. Google Scholar; 25.L. Catuogno and C. Galdi, ""Ensuring application integrity: A survey on techniques and tools"", Proc. 9th Int. Conf. Innovative Mobile Internet Serv. Ubiquitous Comput., pp. 192-199, Jul. 2015. View Article  Google Scholar; 26.R. Sailer, X. Zhang, T. Jaeger and L. Van Doorn, ""Design and implementation of a TCG-based integrity measurement architecture"", Proc. USENIX Security Symp., vol. 13, pp. 223-238, 2004. Google Scholar; 27.""Unified extensible firmware interface specification"", pp. 1967-2000, May 2017,  [online]  Available: http://www.uefi.org/sites/default/files/resources/UEFI_Spec_2_7.pdf. Google Scholar; 28.""TEE System Architecture (version 1.1)"", Jan. 2017. Google Scholar; 29.J. C. Benaloh and J. Leichter, ""Generalized secret sharing and monotone functions"", Proc. 8th Annu. Int. Cryptology Conf., pp. 27-35, 1988. Google Scholar; 30.A. Shamir, ""How to share a secret"", Commun. ACM, vol. 22, no. 11, pp. 612-613, 1979. CrossRef  Google Scholar"	377 - 390	"""@ARTICLE{Catuogno2020377,
    author = ""Catuogno, Luigi and Galdi, Clemente and Persiano, Giuseppe"",
    title = ""Secure Dependency Enforcement in Package Management Systems"",
    year = ""2020"",
    journal = ""IEEE Transactions on Dependable and Secure Computing"",
    volume = ""17"",
    number = ""2"",
    pages = ""377 - 390"",
    doi = ""10.1109/TDSC.2017.2777991"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059048037\&doi=10.1109\%2fTDSC.2017.2777991\&partnerID=40\&md5=b7f83260a172219988b1a841ccdd8ef5"",
    affiliations = ""Dipartimento di Informatica, Universita Degli Studi di Salerno, Fisciano, Salerno, 84084, Italy; Dipartimento di Ingegneria Elettrica e Tecnologie dell'Informazione, Universita Degli Studi di Napoli 'Federico II', Napoli, 80138, Italy; Dipartimento di Scienze Aziendali - Management Innovation Systems, Universita di Salerno, Fisciano, Salerno, 84084, Italy"",
    abstract = ""Package management systems play an essential role in pursuing systems dependability by ensuring that software is correctly installed and kept up-to-date according to vendor-defined installation policies. Circumventing such policies could make the system unhealthy and insecure and can constitute a serious security threat. In many application scenarios, e.g., distribution of commercial software, the confidentiality of the software must be guaranteed against non-authorized players. In some cases, the installation policy itself is considered a sensitive information, e.g., when it reveals required hardware in military contexts. In this paper we address the problem of strongly enforcing software dependencies in package management systems, to prevent that a malicious user forces the system to install any package despite its requirements are not completely fulfilled. The enforcement is strong in the sense that the encrypted software package cannot be even decrypted if the dependencies are not satisfied. Once a new package is decrypted and installed, our protocol non-interactively updates the key material on the target device. This key update will allow the decryption of further packages that depend on the newly installed one. We further present 'policy-hiding' variants of our protocol. Finally we provide an experimental evaluation of the system performance. (c) 2004-2012 IEEE."",
    author_keywords = ""dependency enforcement; Package management systems; secure software update"",
    keywords = ""Cryptography; Network protocols; Servers; Software packages; Application scenario; Commercial software; Dependency Enforcement; Experimental evaluation; Package managements; Secure software; Sensitive informations; Software dependencies; Application programs"",
    correspondence_address = ""C. Galdi; Dipartimento di Ingegneria Elettrica e Tecnologie dell'Informazione, Universita Degli Studi di Napoli 'Federico II', Napoli, 80138, Italy; email: clemente.galdi@unina.it"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    issn = ""15455971"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans. Dependable Secure Comput."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 7""
}
"""	Included	Included				2	Scopus Signed In		Secure dependency enforcement in package management systems	https://ieeexplore.ieee.org/document/8120104	Institute of Electrical and Electronics Engineers Inc	
312	TrustSE	Automatic polymorphic exploit generation for software vulnerabilities	Generating exploits from the perspective of attackers is an effective approach towards severity analysis of known vulnerabilities. However, it remains an open problem to generate even one exploit using a program binary and a known abnormal input that crashes the program, not to mention multiple exploits. To address this issue, in this paper, we propose PolyAEG, a system that automatically generates multiple exploits for a vulnerable program using one corresponding abnormal input. To generate polymorphic exploits, we fully leverage different trampoline instructions to hijack control flow and redirect it to malicious code in the execution context. We demonstrate that, given a vulnerable program and one of its abnormal inputs, our system can generate polymorphic exploits for the program. We have successfully generated control flow hijacking exploits for 8 programs in our experiment. Particularly, we have generated 4,724 exploits using only one abnormal input for IrfanView, a widely used picture viewer.	Computer science; Computers; Industrial engineering; Dynamic Taint Analysis; Effective approaches; Execution context; Exploit generation; Malicious codes; Program binary; Severity analysis; Software vulnerabilities; Engineering; Computer science;  Computers;  Industrial engineering;  Dynamic Taint Analysis;  Effective approaches;  Execution context;  Exploit generation;  Malicious codes;  Program binary;  Severity analysis;  Software vulnerabilities;  Engineering	Wang, Minghua; Su, Purui; Li, Qi; Ying, Lingyun; Yang, Yi; Feng, Dengguo	Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST	https://doi.org/10.1007/978-3-319-04283-1_14	Metasploithttp://www.metasploit.com; Avgerinos, T., Cha, S.K., Hao, B.L.T., Brumley, D.; Barrett, C., Stump, A., Tinelli, C.The smt-lib standard: Version 2.0(2010)Proceedings of the 8Th International Workshop on Satisfiability Modulo Theories, 13.Cited 610 times.; Bellard, F.; Bosman, E., Slowinska, A., Bos, H.; Brumley, D., Newsome, J., Song, D., Wang, H., Jha, S.; Brumley, D., Newsome, J., Song, D., Wang, H., Jha, S.; Brumley, D., Poosankam, P., Song, D., Zheng, J.; Cha, S.K., Avgerinos, T., Rebert, A., Brumley, D.; Clause, J., Li, W., Orso, A.; De Moura, L., Bjorner, N.; Heelan, S.(2009)Automatic Generation of Control Flow Hijacking Exploits for Software Vulnerabilities.Cited 64 times.PhD thesis, University of Oxford; Kemerlis, V.P., Portokalidis, G., Jee, K., Keromytis, A.D.; Lin, Z., Zhang, X., Xu, D.; Newsome, J., Song, D.; Schwartz, E.J., Avgerinos, T., Brumley, D.; Zavou, A., Portokalidis, G., Keromytis, A.D.; Zhu, D.Y., Jung, J., Song, D., Kohno, T., Wetherall, D.Tainteraser: Protecting sensitive data leaks using application-level taint tracking(2011)ACM SIGOPS Operating Systems Review, 45 (1), pp. 142-154.Cited 138 times.	216 - 233	"""@ARTICLE{Wang2013216,
    author = ""Wang, Minghua and Su, Purui and Li, Qi and Ying, Lingyun and Yang, Yi and Feng, Dengguo"",
    editor = ""T., Zia and A., Zomaya and V., Varadharajan and M., Mao"",
    title = ""Automatic polymorphic exploit generation for software vulnerabilities"",
    year = ""2013"",
    journal = ""Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST"",
    volume = ""127 LNICST"",
    pages = ""216 - 233"",
    doi = ""10.1007/978-3-319-04283-1\_14"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908115463\&doi=10.1007\%2f978-3-319-04283-1\_14\&partnerID=40\&md5=7ab5a4e910a1d20fd99fea869abcbf00"",
    affiliations = ""Trusted Computing and Information Assurance Laboratory, Institute of Software, Chinese Academy of Sciences, Beijing, 100190, China; Institute of Information Security, ETH Zurich, Switzerland"",
    abstract = ""Generating exploits from the perspective of attackers is an effective approach towards severity analysis of known vulnerabilities. However, it remains an open problem to generate even one exploit using a program binary and a known abnormal input that crashes the program, not to mention multiple exploits. To address this issue, in this paper, we propose PolyAEG, a system that automatically generates multiple exploits for a vulnerable program using one corresponding abnormal input. To generate polymorphic exploits, we fully leverage different trampoline instructions to hijack control flow and redirect it to malicious code in the execution context. We demonstrate that, given a vulnerable program and one of its abnormal inputs, our system can generate polymorphic exploits for the program. We have successfully generated control flow hijacking exploits for 8 programs in our experiment. Particularly, we have generated 4,724 exploits using only one abnormal input for IrfanView, a widely used picture viewer. (c) Institute for Computer Sciences, Social Informatics and Telecommunications Engineering 2013."",
    author_keywords = ""Dynamic taint analysis; Exploit generation; Software vulnerability"",
    keywords = ""Computer science; Computers; Industrial engineering; Dynamic Taint Analysis; Effective approaches; Execution context; Exploit generation; Malicious codes; Program binary; Severity analysis; Software vulnerabilities; Engineering"",
    correspondence_address = ""P. Su; Trusted Computing and Information Assurance Laboratory, Institute of Software, Chinese Academy of Sciences, Beijing, 100190, China; email: supurui@is.iscas.ac.cn"",
    publisher = ""Springer Verlag"",
    issn = ""18678211"",
    isbn = ""978-331904282-4"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Inst. Comput. Sci. Soc. Informatics Telecommun. Eng."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 38; Conference name: 9th International Conference on Security and Privacy in Communication Networks, SecureComm 2013; Conference date: 25 September 2013 through 28 September 2013; Conference code: 194799""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Automatic polymorphic exploit generation for software vulnerabilities	https://www.scopus.com/record/display.uri?eid=2-s2.0-84908115463&origin=resultslist&sort=r-f&src=s&sid=1a0d0fb8924278ece912fa059767fdb1&sot=b&sdt=b&s=TITLE%28automatic+polymorphic+exploit+generation+for+software+vulnerabilities%29&sl=76&sessionSearchId=1a0d0fb8924278ece912fa059767fdb1&relpos=0	Springer Verlag	
313	TrustSE	Software applications have on average 24 vulnerabilities inherited from buggy components		Network Security; Security; Small and Medium Business	Lucian Constantin	News	https://www.networkworld.com/article/940160/software-applications-have-on-average-24-vulnerabilities-inherited-from-buggy-components.html			"""nan"""	Excluded	Excluded				2	Google Scholar		Software applications have on average 24 vulnerabilities inherited from buggy components	https://www.networkworld.com/article/940160/software-applications-have-on-average-24-vulnerabilities-inherited-from-buggy-components.html	Net Work World	
314	TrustSE	Large-scale Modeling, Analysis, and Preservation of Free and Open Source Software			Stefano Zacchiroli		https://upsilon.cc/~zack/talks/2017/2017-11-27-hdr.pdf		65	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Large-scale Modeling, Analysis, and Preservation of Free and Open Source Software	https://upsilon.cc/~zack/talks/2017/2017-11-27-hdr.pdf	IRIF, Universite Paris Diderot	
315	TrustSE	'Computing' requirements in open source software projects	Due to high dissimilarity with traditional software development, Requirements Engineering (RE) in Open Source Software (OSS) remains poorly understood, despite the visible success of many OSS projects. In this study, we approach OSS RE as a sociotechnical and distributed cognitive activity where multiple actors deploy heterogeneous artifacts to 'compute' requirements as to reach a collectively-held understanding of what the software is going to do. We conduct a case study of a popular OSS project, Rubinius (a Ruby programming language runtime environment). Specifically, we investigate the ways in which this project exhibits distribution of cognitive efforts along social, structural, and temporal dimensions and how its requirements computation takes place accordingly. In particular, we seek to generalize to a theoretical framework that explains how three temporally-ordered processes of distributed cognition in OSS projects, denoted excavation, instantiation, and testing-inthe- wild, tie together to form a powerful distributed computational structure to manage requirements.	Information systems; Requirements engineering; Cognitive activities; Computational structure; Distributed cognition; Open Source Software; Open source software projects; Runtime environments; Temporal dimensions; Theoretical framework; Computer software; Information systems;  Requirements engineering;  Cognitive activities;  Computational structure;  Distributed cognition;  Open Source Software;  Open source software projects;  Runtime environments;  Temporal dimensions;  Theoretical framework;  Computer software	Xiao, Xuan; Lindberg, Aron; Hansen, Sean; Lyytinen, Kalle; Wang, Tienan	International Conference on Information Systems (ICIS 2013): Reshaping Society Through Information Systems Design	https://www.scopus.com/record/display.uri?eid=2-s2.0-84897691197&origin=resultslist&sort=r-f&src=s&sid=1860c6b11f7128b21a22a46f95a82a45&sot=b&sdt=b&s=TITLE%28computing+requirements+in+open+source+software+projects%29&sl=62&sessionSearchId=1860c6b11f7128b21a22a46f95a82a45&relpos=0		1 - 17	"""@CONFERENCE{Xiao20131,
    author = ""Xiao, Xuan and Lindberg, Aron and Hansen, Sean and Lyytinen, Kalle and Wang, Tienan"",
    title = ""'Computing' requirements in open source software projects"",
    year = ""2013"",
    journal = ""International Conference on Information Systems (ICIS 2013): Reshaping Society Through Information Systems Design"",
    volume = ""1"",
    pages = ""1 - 17"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84897691197\&partnerID=40\&md5=573923cbc43999e98afa71483d03c770"",
    affiliations = ""Harbin Institute of Technology, Harbin, Heilongjiang, China; Case Western Reserve University, Cleveland, OH, United States; Rochester Institute of Technology, Rochester, NY, United States"",
    abstract = ""Due to high dissimilarity with traditional software development, Requirements Engineering (RE) in Open Source Software (OSS) remains poorly understood, despite the visible success of many OSS projects. In this study, we approach OSS RE as a sociotechnical and distributed cognitive activity where multiple actors deploy heterogeneous artifacts to 'compute' requirements as to reach a collectively-held understanding of what the software is going to do. We conduct a case study of a popular OSS project, Rubinius (a Ruby programming language runtime environment). Specifically, we investigate the ways in which this project exhibits distribution of cognitive efforts along social, structural, and temporal dimensions and how its requirements computation takes place accordingly. In particular, we seek to generalize to a theoretical framework that explains how three temporally-ordered processes of distributed cognition in OSS projects, denoted excavation, instantiation, and testing-inthe- wild, tie together to form a powerful distributed computational structure to manage requirements. (c) (2013) by the AIS/ICIS Administrative Office All rights reserved."",
    author_keywords = ""Distributed cognition; Open source software; Requirements computation; Requirements engineering"",
    keywords = ""Information systems; Requirements engineering; Cognitive activities; Computational structure; Distributed cognition; Open Source Software; Open source software projects; Runtime environments; Temporal dimensions; Theoretical framework; Computer software"",
    isbn = ""978-162993426-6"",
    language = ""English"",
    abbrev_source_title = ""Intl. Conf. Info. Syst. (ICIS 2013): Reshaping Soc. Info. Syst. Des."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 6; Conference name: International Conference on Information Systems, ICIS 2013; Conference date: 15 December 2013 through 18 December 2013; Conference code: 103049""
}
"""	Excluded	Excluded				2	Scopus Signed In		'Computing'Requirements in Open Source Software Projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-84897691197&origin=resultslist&sort=r-f&src=s&sid=1860c6b11f7128b21a22a46f95a82a45&sot=b&sdt=b&s=TITLE%28computing+requirements+in+open+source+software+projects%29&sl=62&sessionSearchId=1860c6b11f7128b21a22a46f95a82a45&relpos=0		nan; References; Publisher
316	TrustSE	User and developer mediation in an Open Source Software community: Boundary spanning through cross participation in online discussions	"The aim of this research is to analyse how design and use are mediated in Open Source Software (OSS) design. Focusing on the Python community, our study examines a ""pushed-by-users"" design proposal through the discussions occurring in two mailing-lists: one, user-oriented and the other, developer-oriented. To characterize the links between users and developers, we investigate the activities and references (knowledge sharing) performed by the contributors to these two mailing-lists. We found that the participation of users remains local to their community. However, several key participants act as boundary spanners between the user and the developer communities. This emerging role is characterized by cross-participation in parallel same-topic discussions in both mailing-lists, cohesion between cross-participants, the occupation of a central position in the social network linking users and developers, as well as active, distinctive and adapted contributions. The user championing the proposal acts as a key boundary spanner coordinating the process and using explicit linking strategies. We argue that OSS design may be considered as a form of ""role emerging design"", i.e. design organized and pushed through emerging roles and through a balance between these roles. The OSS communities seem to provide a suitable socio-technical environment to enable such role emergence."	Computer software; Economic and social effects; Parallel processing systems; Systems analysis; Boundary spanners; Cross-participants; Distributed design; Open Source Software Community; Role emerging design; Online systems; Computer software;  Economic and social effects;  Parallel processing systems;  Systems analysis;  Boundary spanners;  Cross-participants;  Distributed design;  Open Source Software Community;  Role emerging design;  Online systems	Barcellini, Flore; Detienne, Francoise; Burkhardt, Jean-Marie	International Journal of Human Computer Studies	https://doi.org/10.1016/j.ijhcs.2007.10.008	D'Astous, P., Detienne, F., Visser, W., Robillard, P.N.; Baker, M., Detienne, F., Lund, K. & Sejourne, A. (2003). Articulation entre elaboration de solutions et argumentation polyphonique. [Articulation between elaboration of solutions and polyphonic argumentation]. In J.M.C. Bastien (Ed.), Actes des Deuxieme Journees d'Etude en Psychologie Ergonomique - EPIQUE'2003 (Boulogne-Billancourt, 2-3 octobre) (pp. 235-240). Rocquencourt: Inria. [ISBN 2-7261-1265-X].; Bansler, J.P., Havn, E.; Barcellini, F., Detienne, F., Burkhardt, J.-M., Sack, W.; Barcellini, F., Detienne, F., Burkhardt, J.M., 2006. Users' participation to the design process in a Free Open Source Software Online Community. In: Romero, P., Good, J., Bryant, S.A., Chapparo, E. (Eds.), Proceedings of the 18th Workshop Psychology of Programming PPIG'06, pp. 99-114.; Cohendet, P., Creplet, F., Dupouet, O.Organizational innovation, communities of practice and epistemic communities: the case of Linux(2000)Economics With Heterogeneous Interacting agents.Cited 46 times.Kirman A., and Zimmermann J.B. (Eds), Springer, The Netherlands; Detienne, F., Boujut, J.-F., Hohmann, B.Characterization of collaborative design and interaction management activities in a distant engineering design situation(2004)Cooperative Systems Design, pp. 83-98.Cited 34 times.Darses F., Dieng R., Simone C., and Zaklad M. (Eds), IOS Press; Detienne, F., Martin, G., Lavigne, E.; Ducheneaut, N.; Falzon, P., 2005. Ergonomics, knowledge developpement and the design of enabling environments. In: Conference on Humanizing Work and Work Environment, Guwahati, Inde.; Gacek, C., Arief, B.; Gasser, L., Scacchi, W., Ripoche, G., Penne, B., 2003. Understanding continuous design in F/OSS project. Communication at ICSSEA-03, Paris, France, 2003.; Grinter, R., 1999. Systems Architecture: Product Designing and Social Engineering, San Francisco, CA, USA.; Gutwin, C., Penner, R., Schneider, K.; Herbsleb, J.D., Klein, H., Olson, G.M., Brunner, H., Olson, J.S., Harding, J.; Herring, Susan C.; Kollock, P., Smith, M.Managing the virtual commons(1996)Computer-Mediated Communication: Linguistic, Social, and Cross-Cultural Perspectives, pp. 109-128.Cited 316 times.Herring S. (Ed), John Benjamins, Amsterdam, The Netherlands; Krasner, H., Curtis, B., Iscoe, N.Communication breakdowns and boundary spanning activities on large programming projects(1987)Empirical Studies of Programmers: Second Workshop, pp. 47-64.Cited 34 times.Olson G., Sheppard S., and Soloway E. (Eds), Ablex, UK; Mahendran, D., 2002. Serpents and primitives: an ethnographic excursion into an Open Source Community. Master's Thesis, School of Information Management and Systems, University of California at Berkeley.; Mockus, A., Fielding, R.T., Herbsleb, J.D.; Olson, G.M., Olson, J.S.; Olson, G.M., Olson, J.S., Carter, M.R., Storrsten, M.; Preece, J.(2000)Online Communities: Designing Usability and Supporting Sociabily.Cited 1496 times.Wiley, New York, USA; Preece, J., Nonnecke, B., Andrews, D.; Raymond, E.S., 1999. The cathedral and the bazaar (web page), June 20, 2005.; Ripoche, G., Sansonnet, J.-P.; Sack, W., Detienne, F., Ducheneaut, N., Burkhardt, J.-M., Mahendran, D., Barcellini, F.; Sarant, S.A., 2004. The role of organizational boundary spanners in industry/university collaborative relationship. Doctor of Philosophy in Psychology Dissertation Thesis. North Carolina State University, 2004.; O'Shea, P., Exton, P., 2005. The role of source code within program summaries describing maintenance activities. In: Romero, P., Good, J., Acosta Chaparro, E., Bryant, S. (Eds.), Proceedings of PPIG 17, pp. 160-172.; Sonnenwald, D.H.; Stempfle, J., Badke-Schaub, P.; Twidale, M.B., Nichols, D.M.; Wenger, E.(1998)Communities of Practice: Learning, Meaning and Identity.Cited 25612 times.Cambridge University Press, NY, USA; Whittaker, Steve, Terveen, Loren, Hill, Will, Cherny, Lynn	558 - 570	"""@ARTICLE{Barcellini2008558,
    author = ""Barcellini, Flore and Detienne, Francoise and Burkhardt, Jean-Marie"",
    title = ""User and developer mediation in an Open Source Software community: Boundary spanning through cross participation in online discussions"",
    year = ""2008"",
    journal = ""International Journal of Human Computer Studies"",
    volume = ""66"",
    number = ""7"",
    pages = ""558 - 570"",
    doi = ""10.1016/j.ijhcs.2007.10.008"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-44449152070\&doi=10.1016\%2fj.ijhcs.2007.10.008\&partnerID=40\&md5=97c830f8828e6ab04cd34536b3c4416e"",
    affiliations = ""INRIA Eiffel Group, Domaine de Voluceau, 78153 Le Chesnay Cedex, France; Cnam, Laboratoire d'Ergonomie, Centre de Recherche sur le Travail et le Developpement, 75005 Paris, 41 rue Gay-Lussac, France; Laboratoire Ergonomie-Comportement-Interactions, Universite Paris 5, 75270 Paris, 45 rue des Saints-Peres, France"",
    abstract = {The aim of this research is to analyse how design and use are mediated in Open Source Software (OSS) design. Focusing on the Python community, our study examines a ""pushed-by-users"" design proposal through the discussions occurring in two mailing-lists: one, user-oriented and the other, developer-oriented. To characterize the links between users and developers, we investigate the activities and references (knowledge sharing) performed by the contributors to these two mailing-lists. We found that the participation of users remains local to their community. However, several key participants act as boundary spanners between the user and the developer communities. This emerging role is characterized by cross-participation in parallel same-topic discussions in both mailing-lists, cohesion between cross-participants, the occupation of a central position in the social network linking users and developers, as well as active, distinctive and adapted contributions. The user championing the proposal acts as a key boundary spanner coordinating the process and using explicit linking strategies. We argue that OSS design may be considered as a form of ""role emerging design"", i.e. design organized and pushed through emerging roles and through a balance between these roles. The OSS communities seem to provide a suitable socio-technical environment to enable such role emergence. (c) 2007 Elsevier Ltd. All rights reserved.},
    author_keywords = ""Boundary spanners; Cross-participants; Distributed design; Open Source Software Community; Role emerging design"",
    keywords = ""Computer software; Economic and social effects; Parallel processing systems; Systems analysis; Boundary spanners; Cross-participants; Distributed design; Open Source Software Community; Role emerging design; Online systems"",
    correspondence_address = ""F. Barcellini; INRIA Eiffel Group, Domaine de Voluceau, 78153 Le Chesnay Cedex, France; email: flore.barcellini@inria.fr"",
    issn = ""10959300"",
    coden = ""IHSTE"",
    language = ""English"",
    abbrev_source_title = ""Int J Hum Comput Stud"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 48; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		User and developer mediation in an Open Source Software community: Boundary spanning through cross participation in online discussions	https://www.scopus.com/record/display.uri?eid=2-s2.0-44449152070&origin=resultslist&sort=r-f&src=s&sid=c190f882abe18ef24cbf8f2d7db0f80b&sot=b&sdt=b&s=TITLE%28user+and+developer+mediation+in+an+open+source+software+community+boundary+spanning+through+cross+participation+in+online+discussions%29&sl=140&sessionSearchId=c190f882abe18ef24cbf8f2d7db0f80b&relpos=0		nan; Publisher
317	TrustSE	Creating and evolving developer documentation: understanding the decisions of open source contributors	Developer documentation helps developers learn frameworks and libraries. To better understand how documentation in open source projects is created and maintained, we performed a qualitative study in which we interviewed core contributors who wrote developer documentation and developers who read documentation. In addition, we studied the evolution of 19 documents by analyzing more than 1500 document revisions. We identified the decisions that contributors make, the factors influencing these decisions and the consequences for the project. Among many findings, we observed how working on the documentation could improve the code quality and how constant interaction with the projects' community positively impacted the documentation.	software documentation;  qualitative studies;  open source projects;  grounded theory;  framework;  developer documentation; software documentation, qualitative studies, open source projects, grounded theory, framework, developer documentation	Dagenais, Barth\'{e}l\'{e}my; Robillard, Martin P.	FSE '10: Proceedings of the eighteenth ACM SIGSOFT international symposium on Foundations of software engineering	https://doi.org/10.1145/1882291.1882312		127-136	"""@inproceedings{10.1145/1882291.1882312,
    author = ""Dagenais, Barth\'{e}l\'{e}my and Robillard, Martin P."",
    title = ""Creating and evolving developer documentation: understanding the decisions of open source contributors"",
    year = ""2010"",
    isbn = ""9781605587912"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1882291.1882312"",
    doi = ""10.1145/1882291.1882312"",
    abstract = ""Developer documentation helps developers learn frameworks and libraries. To better understand how documentation in open source projects is created and maintained, we performed a qualitative study in which we interviewed core contributors who wrote developer documentation and developers who read documentation. In addition, we studied the evolution of 19 documents by analyzing more than 1500 document revisions. We identified the decisions that contributors make, the factors influencing these decisions and the consequences for the project. Among many findings, we observed how working on the documentation could improve the code quality and how constant interaction with the projects' community positively impacted the documentation."",
    booktitle = ""Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering"",
    pages = ""127-136"",
    numpages = ""10"",
    keywords = ""software documentation, qualitative studies, open source projects, grounded theory, framework, developer documentation"",
    location = ""Santa Fe, New Mexico, USA"",
    series = ""FSE '10""
}
"""	Excluded	Excluded				2	ACM		Creating and evolving developer documentation: understanding the decisions of open source contributors	https://doi.org/10.1145/1882291.1882312	Association for Computing Machinery	nan; References; Link
318	TrustSE	A model of open source developer foundations	Many community open source projects are of high economic relevance. As these projects mature, their leaders face a choice of continuing the project as is, making the project join an existing foundation, or creating their own foundation for the project. This article presents a model of open source developer foundations that project leaders can use to compare existing foundations with their needs or to design their own. The model is based on a three-iteration qualitative study involving interviews and supplementary materials review. To demonstrate its usefulness, we apply the model to nine foundations and present their organizational choices in a comparative table format.	Foundations; Sustainable development; Foundations; Sustainable development; Open source developers; Open source projects; Project leaders; Qualitative study; Open source developers; Open source projects; Project leaders; Qualitative study; Open systems; Open systems; Foundations;  Sustainable development;  Foundations;  Sustainable development;  Open source developers;  Open source projects;  Project leaders;  Qualitative study;  Open source developers;  Open source projects;  Project leaders;  Qualitative study;  Open systems;  Open systems	Riehle, Dirk; Berschneider, Sebastian	IFIP Advances in Information and Communication Technology	https://doi.org/10.1007/978-3-642-33442-9_2	Aldrich, H.E., Bolton, M.K., Baker, T., Sasaki, T.; How It Works.Cited 309 times.accessed December 25, 2011, http://www.webcitation.org/64CSTesolThe Apache Software Foundation; Baker, M.(2010)The State of Mozilla: SustainabilityNovember 18, accessed December 25, 2011, http://www.webcitation.org/ 64CSdMEdUhttp://www.mozilla.org/foundation/annualreport/2009/sustainability.html; Corbin, J., Strauss, A.(2008)Qualitative Research.Cited 44 times.Sage Publications; German, D.M., Di Penta, M., Davies, J.; Open Source Licenses.Cited 15 times.accessed December 25, 2011, http://www.webcitation.org/64CSEJk8GOpen Source Initiative; Riehle, D.(2010)A New Developer Career.Cited 2 times.June 10, accessed December 25, 2011, http://www.webcitation.org/64CSLWhEVhttp://dirkriehle.com/2010/06/10/linux-tag-keynote-slides-a-new- developer-career; Riehle, D.; Riehle, D.; Riehle, D.; Stallman, R.(2011)Why Open Source Misses the PointSeptember 20, accessed December 25, 2011, http://www.webcitation.org/ 64CRzMBMqhttp://www.gnu.org/philosophy/open-source-misses-the-point.html; West, J., O'mahony, S.; Xia, M., Zhao, K., Mahoney, J.T.Enhancing Value via Cooperation: Firms' Process Benefits from Participation in a Consortium(2008)UIUC College of Business Working Paper 08-0109	15 - 28	"""@ARTICLE{Riehle201215,
    author = ""Riehle, Dirk and Berschneider, Sebastian"",
    title = ""A model of open source developer foundations"",
    year = ""2012"",
    journal = ""IFIP Advances in Information and Communication Technology"",
    volume = ""378 AICT"",
    pages = ""15 - 28"",
    doi = ""10.1007/978-3-642-33442-9\_2"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870358554\&doi=10.1007\%2f978-3-642-33442-9\_2\&partnerID=40\&md5=bfef0cfff5109af5a5af8dda28ac21f5"",
    affiliations = ""Computer Science Department, Friedrich-Alexander University Erlangen-Nurnberg, Erlangen 90158, Martensstr. 3, Germany"",
    abstract = ""Many community open source projects are of high economic relevance. As these projects mature, their leaders face a choice of continuing the project as is, making the project join an existing foundation, or creating their own foundation for the project. This article presents a model of open source developer foundations that project leaders can use to compare existing foundations with their needs or to design their own. The model is based on a three-iteration qualitative study involving interviews and supplementary materials review. To demonstrate its usefulness, we apply the model to nine foundations and present their organizational choices in a comparative table format. (c) 2012 IFIP International Federation for Information Processing."",
    keywords = ""Foundations; Sustainable development; Foundations; Sustainable development; Open source developers; Open source projects; Project leaders; Qualitative study; Open source developers; Open source projects; Project leaders; Qualitative study; Open systems; Open systems"",
    correspondence_address = ""D. Riehle; Computer Science Department, Friedrich-Alexander University Erlangen-Nurnberg, Erlangen 90158, Martensstr. 3, Germany; email: dirk@riehle.org"",
    issn = ""18684238"",
    isbn = ""978-364233441-2"",
    language = ""English"",
    abbrev_source_title = ""IFIP Advances in Information and Communication Technology"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 12; Conference name: 8th IFIP WG 2.13 International Conference on Open Source Systems: Long-Term Sustainability, OSS 2012; Conference date: 10 September 2012 through 13 September 2012; Conference code: 94201; All Open Access, Bronze Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		A model of open source developer foundations	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870358554&origin=resultslist&sort=r-f&src=s&sid=31a2c28e5a909bab638d8fceeabfbb00&sot=b&sdt=b&s=TITLE%28a+model+of+open+source+developer+foundations%29&sl=51&sessionSearchId=31a2c28e5a909bab638d8fceeabfbb00&relpos=0		nan; Publisher
319	TrustSE	Research of trustworthy software system in the network	This paper first analyzes the credibility of human society issues, gives a credible model, revealing the essence of credibility, that man's morality, competence and confidentiality of three aspects. Based on these we analyze the credible issue of the network software, and establish the credibility of a general model and a utility model, give the definition of software credibility and credible degree, and propose the key attributes or evidence of the software credibility: the identity evidence, the evidence of the basic norms and the capability. And finally with the general reliability, anti-aggressive and the basic norms to measure the software credibility is proposed. The software faults and vulnerabilities are classified in this paper, and an assessment method and a credibility formula to the credibility of the network software are given.	Algorithms; Parallel architectures; anti-aggressive; Assessment methods; credibility; General reliabilities; Key attributes; Methods of measurement; Software fault; Trustworthy software systems; Software reliability; Algorithms;  Parallel architectures;  anti-aggressive;  Assessment methods;  credibility;  General reliabilities;  Key attributes;  Methods of measurement;  Software fault;  Trustworthy software systems;  Software reliability	Liu, Yanzhao; Zhang, Lei; Luo, Ping; Yao, Yao	Proceedings - International Symposium on Parallel Architectures, Algorithms and Programming, PAAP	https://doi.org/10.1109/PAAP.2012.47	1.Trustworthiness, http://en.wikipedia.org/wiki/Trustworthiness. Google Scholar; 2.Anderson J.P. Computer Security Technology Planning Study. ESD-TR-73-51, Vol. 1, AD-758 206, ESD/AFSC, Hanscom AFB, Bedford MA, 1972. Google Scholar; 3.ISO/IEC, Information Technology-Security Techniques-Evaluation Criteria for IT Security. Part 1: Introduction and General Model. 2nd ed. 2005. Google Scholar; 4.Trusted Computing Group, TCG Architecture Overview, v1.2, 2004. Google Scholar; 5.Gates B. Trustworthy Computing. Wired News, Jan. 17, 2002. Google Scholar; 6.Lin Chuang. Study of Trustworthy Network. Chinese Journal of Computers, 2005, 28(5): 751-758. CrossRef  Google Scholar; 7.Algirdas A, Jean-Claude L, Brian R, et al. Basic Concepts and Taxonomy of Dependable and Secure Computing. IEEE Trans Dependable Secure, 2004, 1(1): 11-33. View Article  Google Scholar; 8.Wang Huaimin, Tang Yangbin, Yin Gang, Li Lei. Trustworthiness of Internet-based Software. Science in China Series F: Information Sciences, 2006, 49(6): 759-773. CrossRef  Google Scholar; 9.Peter G. Neumann. System and Network Trustworthiness in Perspective. In: CCS06. CrossRef  Google Scholar; 10.Computer Security (redirected from Software Security). http://en.wikipedia.org/wiki/Software security. Google Scholar; 11.G. McGraw. Software Security: Building Security in. Addison-Wesley Software Security Series. Pap/Cdr edition, February 2, 2006. View Article  Google Scholar; 12.J. Ramachandran. Design Secure Architecture Solutions. Wiley, 1st Edition, March 1, 2002. Google Scholar; 13.M. Dowd, J. McDonald and J. Schuh. The Art of Software Security Assessment. Upper Saddle River, NJ: Addison-Wesley, 2007. Google Scholar; 14.Amoroso E, Nguyen T, Weiss J. Toward an approach to measuring software trust. Proceedings of the IEEE. 1991,198-218. View Article  Google Scholar; 15.Amoroso E, Taylor C, Watson J, et al. Process-Oriented Methodology for Assessing and Improving Software Trustworthiness. Proceedings of the ACM Conference on Computer and Communications Security, 1994. 39-50. CrossRef  Google Scholar; 16.Audun Jsang. Trust and Reputation Systems, http://www.fit.qut.edu.au/ josang/. Google Scholar; 17.K. Thompson. Reflections on Trusting Trust. CACM, Vol. 27, No. 8, August, 1984, pp.761-763. CrossRef  Google Scholar; 18.E. Amoroso et al.Toward An Approach to Measuring Software Trust, Proc. IEEE Symp. Research in Security and Privacy, May 1991, pp. 198-218. View Article  Google Scholar; 19.J. Watson and E. Amoroso. A Trusted Software Development Methodology, Proc. 13th Natl. Computer Security Conf, Oct. 1990, pp. 717-727. Google Scholar; 20.Edwurd Amoroso, John Watson, Martin Marietta. A Process-Oriented Methodology for Assessing and Improving Software Trustworthiness, CCS 94-11194, Fairfax Va., USA, O-89791-7324/94/0011,39-50. CrossRef  Google Scholar; 21.Steffen Backer, Marko Boskovic et al. Trustworthy software systems: A discussion of basic concepts and terminology. ACM SIGSOFT Software Engineering Notes, Volume 31 Number 6,1-18, 2006. CrossRef  Google Scholar; 22.Larson D, Miller K. Silver bullets for little monsters: making software more trustworthy. IT Professional by IEEE Computer Society. 2005, 7(2):9-13. (Pubitemid 40750780) View Article  Google Scholar; 23.Hasselbring W, Reussner R. Toward trustworthy software systems. Computer by IEEE Computer Society, 2006, 39(4): 91-92. View Article  Google Scholar	287 - 294	"""@CONFERENCE{Liu2012287,
    author = ""Liu, Yanzhao and Zhang, Lei and Luo, Ping and Yao, Yao"",
    title = ""Research of trustworthy software system in the network"",
    year = ""2012"",
    journal = ""Proceedings - International Symposium on Parallel Architectures, Algorithms and Programming, PAAP"",
    pages = ""287 - 294"",
    doi = ""10.1109/PAAP.2012.47"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877713806\&doi=10.1109\%2fPAAP.2012.47\&partnerID=40\&md5=d8d75c310dcdc95b94e810f12b608599"",
    affiliations = ""China Information Technology Security Evaluation Center, Beijing, China; Key Laboratory for Information System Security, School of Software, Tsinghua University, Beijing, China"",
    abstract = ""This paper first analyzes the credibility of human society issues, gives a credible model, revealing the essence of credibility, that man's morality, competence and confidentiality of three aspects. Based on these we analyze the credible issue of the network software, and establish the credibility of a general model and a utility model, give the definition of software credibility and credible degree, and propose the key attributes or evidence of the software credibility: the identity evidence, the evidence of the basic norms and the capability. And finally with the general reliability, anti-aggressive and the basic norms to measure the software credibility is proposed. The software faults and vulnerabilities are classified in this paper, and an assessment method and a credibility formula to the credibility of the network software are given. (c) 2012 IEEE."",
    author_keywords = ""anti-aggressive; credibility; general reliability; methods of measurement and evaluation; network software"",
    keywords = ""Algorithms; Parallel architectures; anti-aggressive; Assessment methods; credibility; General reliabilities; Key attributes; Methods of measurement; Software fault; Trustworthy software systems; Software reliability"",
    issn = ""21683042"",
    isbn = ""978-076954898-2"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Int. Symp. Parallel Archit., Algorithms and Program., PAAP"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; Conference name: 2012 5th International Symposium on Parallel Architectures, Algorithms and Programming, PAAP 2012; Conference date: 17 December 2012 through 20 December 2012; Conference code: 96877""
}
"""	Excluded	Excluded				2	Scopus Signed In		Research of trustworthy software system in the network	https://ieeexplore.ieee.org/document/6424769	IEEE	
320	TrustSE	Study on credibility level of trustworthy software development process based on grey nonlinear cluster	Purpose: This paper attempts to put forward a convincing and flexible grey cluster method that can be used in confirming credibility level of trustworthy software development process. Design/methodology/approach: Determination on credibility level in the software development process is dynamic, as credibility of the results may be different at different times and under different project requirements. Qualitative methods are not entirely convincing, and most quantitative methods are not flexible enough. Grey cluster based on nonlinear grey whitening weight function put forward in this paper is both convincing and flexible. Finally eight projects from the ISBSG database are used for empirical analysis, which confirm that the method put forward in this paper is available and credible. Findings: The results are convincing: not only that grey cluster based on nonlinear grey whitening weight function put forward in this paper is both convincing and flexible, but it can be used in confirming credibility level of trustworthy software development process. Practical implications: Eight projects from the ISBSG database are used for empirical analysis, which confirms that the method put forward in this paper is available and credible. Originality/value: Nonlinear grey whitening weight function is derivable except endpoint. Grey cluster based on nonlinear grey whitening weight function put forward in this paper is both convincing and flexible.	Computer software;; Grey cluster;; Nonlinear grey whitening weight function;; Reliability management;; Trustworthy software	Mi, Chuanmin; Tian, Min; Li, Xuemei	Kybernetes	https://doi.org/10.1108/03684921211257757	Bannerman, P.L.; Cheng, P., Liu, W., Chen, Y.Current situation and countermeasures of trustworthy software industry in China(2010)Science & Technology Progress and Policy, 27 (3), pp. 51-54.Cited 2 times.; Chittister, C., Haimes, Y.Y.; Dong, F.-Y., Xiao, M.-D., Liu, B.Construction method of whitenization weight function in grey system teaching(2010)Journal of North China Institute of Water Conservancy and Hydroelectric Power, 31 (3), pp. 97-99.Cited 22 times.; Houmb, S.H., Franqueira, V.N.L., Engum, E.A.; Huang, M.-Y., Wang, Y.-L., Zhang, H.-L.The application of Bayesian network in evaluation index system of software dependability(2008)Information Technology and Informatization, (12), pp. 109-110.; Lang, B., Liu, X., Wang, H., Xie, B., Mao, X.A classification model for software trustworthiness(2010)Journal of Frontiers of Computer Science & Technology, 4 (3), pp. 231-239.Cited 15 times.; Mi, C., Liu, S., Yuan, X.Study on 2-tuple linguistic assessment method based on grey cluster(2007)The Journal of Grey System, 19 (3), pp. 257-268.Cited 11 times.; Shi, L., Yu, B.-G., Yang, Y.Establishing evaluation model of software trustworthiness based on FAHP and FMCDM(2010)Application Research of Computers, 27 (3), pp. 933-937.; Tang, Q.Gray ash class clustering methods to determine the function of albino(1996)Journal of Sichuan Ordnance, 17 (4), pp. 4-7.; Wang, Q.Y.The grey relational analysis of B-mode(1987)Huazhong University of Technology, 17 (6), pp. 77-82.Cited 114 times.; Zhang, R., Liu, S.Extension of gray cluster evaluation methods(2007)Statistics and Decision, (9), pp. 24-26.Cited 7 times.; Liu, S.-F., Dang, Y.-G., Fang, Z.-G.(2004)Grey System Theory and Its Applications.Cited 2837 times.Science Press, Beijing; Liu, S., Xie, N., Forrest, J.; Liu, S.-F., Zhao, L., Wang, Z.-Y.A new method for venturous capital pricing(2001)Chinese Journal of Management Science, 9 (2), pp. 22-26.Cited 5 times.; Rahimnia, F., Moghadasian, M., Mashreghi, E.	908 - 919	"""@ARTICLE{Mi2012908,
    author = ""Mi, Chuanmin and Tian, Min and Li, Xuemei"",
    title = ""Study on credibility level of trustworthy software development process based on grey nonlinear cluster"",
    year = ""2012"",
    journal = ""Kybernetes"",
    volume = ""41"",
    number = ""7"",
    pages = ""908 - 919"",
    doi = ""10.1108/03684921211257757"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866344109\&doi=10.1108\%2f03684921211257757\&partnerID=40\&md5=6128cac2828401d0bd10a4058ff84a03"",
    affiliations = ""College of Economics and Management, Nanjing University of Aeronautics and Astronautics, Nanjing, China; Institute of Policy and Management, Chinese Academy of Sciences, Beijing, China"",
    abstract = ""Purpose: This paper attempts to put forward a convincing and flexible grey cluster method that can be used in confirming credibility level of trustworthy software development process. Design/methodology/approach: Determination on credibility level in the software development process is dynamic, as credibility of the results may be different at different times and under different project requirements. Qualitative methods are not entirely convincing, and most quantitative methods are not flexible enough. Grey cluster based on nonlinear grey whitening weight function put forward in this paper is both convincing and flexible. Finally eight projects from the ISBSG database are used for empirical analysis, which confirm that the method put forward in this paper is available and credible. Findings: The results are convincing: not only that grey cluster based on nonlinear grey whitening weight function put forward in this paper is both convincing and flexible, but it can be used in confirming credibility level of trustworthy software development process. Practical implications: Eight projects from the ISBSG database are used for empirical analysis, which confirms that the method put forward in this paper is available and credible. Originality/value: Nonlinear grey whitening weight function is derivable except endpoint. Grey cluster based on nonlinear grey whitening weight function put forward in this paper is both convincing and flexible. (c) Emerald Group Publishing Limited."",
    author_keywords = ""Computer software; Grey cluster; Nonlinear grey whitening weight function; Reliability management; Trustworthy software"",
    correspondence_address = ""C. Mi; College of Economics and Management, Nanjing University of Aeronautics and Astronautics, Nanjing, China; email: michuanmin@163.com"",
    issn = ""0368492X"",
    language = ""English"",
    abbrev_source_title = ""Kybernetes"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Study on credibility level of trustworthy software development process based on grey nonlinear cluster	https://www.scopus.com/record/display.uri?eid=2-s2.0-84866344109&origin=resultslist&sort=r-f&src=s&sid=71208b12e1d1c14cc8405d5024b64bd4&sot=b&sdt=b&s=TITLE%28study+on+credibility+level+of+trustworthy+software+development+process+based+on+grey+nonlinear+cluster%29&sl=109&sessionSearchId=71208b12e1d1c14cc8405d5024b64bd4&relpos=0		nan; Publisher
321	TrustSE	Estimating development effort in Free/Open source software projects by mining software repositories: a case study of OpenStack	Because of the distributed and collaborative nature of free / open source software (FOSS) projects, the development effort invested in a project is usually unknown, even after the software has been released. However, this information is becoming of major interest, especially ---but not only--- because of the growth in the number of companies for which FOSS has become relevant for their business strategy. In this paper we present a novel approach to estimate effort by considering data from source code management repositories. We apply our model to the OpenStack project, a FOSS project with more than 1,000 authors, in which several tens of companies cooperate. Based on data from its repositories and together with the input from a survey answered by more than 100 developers, we show that the model offers a simple, but sound way of obtaining software development estimations with bounded margins of error.	Effort estimation;  free software;  mining software repositories;  open source; Effort estimation, free software, mining software repositories, open source	Robles, Gregorio; Gonz\'{a}lez-Barahona, Jes\'{u}s M.; Cervig\'{o}n, Carlos; Capiluppi, Andrea; Izquierdo-Cort\'{a}zar, Daniel	MSR 2014: Proceedings of the 11th Working Conference on Mining Software Repositories	https://doi.org/10.1145/2597073.2597107		222-231	"""@inproceedings{10.1145/2597073.2597107,
    author = ""Robles, Gregorio and Gonz\'{a}lez-Barahona, Jes\'{u}s M. and Cervig\'{o}n, Carlos and Capiluppi, Andrea and Izquierdo-Cort\'{a}zar, Daniel"",
    title = ""Estimating development effort in Free/Open source software projects by mining software repositories: a case study of OpenStack"",
    year = ""2014"",
    isbn = ""9781450328630"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2597073.2597107"",
    doi = ""10.1145/2597073.2597107"",
    abstract = ""Because of the distributed and collaborative nature of free / open source software (FOSS) projects, the development effort invested in a project is usually unknown, even after the software has been released. However, this information is becoming of major interest, especially ---but not only--- because of the growth in the number of companies for which FOSS has become relevant for their business strategy. In this paper we present a novel approach to estimate effort by considering data from source code management repositories. We apply our model to the OpenStack project, a FOSS project with more than 1,000 authors, in which several tens of companies cooperate. Based on data from its repositories and together with the input from a survey answered by more than 100 developers, we show that the model offers a simple, but sound way of obtaining software development estimations with bounded margins of error."",
    booktitle = ""Proceedings of the 11th Working Conference on Mining Software Repositories"",
    pages = ""222-231"",
    numpages = ""10"",
    keywords = ""Effort estimation, free software, mining software repositories, open source"",
    location = ""Hyderabad, India"",
    series = ""MSR 2014""
}
"""	Excluded	Excluded				2	ACM		Estimating development effort in free/open source software projects by mining software repositories: a case study of openstack	https://doi.org/10.1145/2597073.2597107	Association for Computing Machinery	nan; References; Link
322	TrustSE	Resistance as Motivation for Innovation: Open Source Software	"Resistance is frequently viewed as a negative aspect of human interaction. Although resistance manifests itself in numerous ways, resistance to change is frequent when individuals are introduced to new ideas or innovations. This form of resistance can limit forward progress of either an individual or an organization. However, a few papers investigated possible positive roles of resistance in human life. This paper proposes that resistance can be a positive motivator to achieve change. Open source software (OSS) is a technological innovation that is laden with aspects of resistance. One of the initial motivations for the development of open source software was ""psychological reactance"" on the part of a few software developers. Reactance is a limited part of the overall construct of resistance; specifically, resistance caused by external threats to an individual's freedom of choice, which generally manifests itself affectively. This paper looks at the role of resistance as a motivator for technological innovation from the perspective of open source softwre development. It also presents techniques for overcoming resistance to the adoption of open source software. Specific techniques presented are the Alpha and Omega strategies for overcoming resistance. Alpha strategies work by attempting to increase the approach forces towards some goal. Conversely, Omega strategies attempt to decrease the avoidance forces, thereby removing resistance to change. Both techniques are used in the context of open source software development to motivate participants."		Joseph F. Kavanagh	Communications of the Association for Information Systems	https://aisel.aisnet.org/cais/vol13/iss1/36/		13	"""nan"""	Excluded	Excluded				2	Google Scholar		Resistance as motivation for innovation: Open source software	https://aisel.aisnet.org/cais/vol13/iss1/36/	Communications of the Association for Information Systems	
323	TrustSE	Bounty Programs in Free/Libre/Open Source Software	This chapter describes the impact of a bounty program on a corporation, an individual developer and a project. Bounty programs are commonly used in Free/Libre/Open Source Software (FLOSS) communities to motivate developers for the tasks which are not of their primary interest by providing monetary incentives. These tasks include creating new programs, improving the security of an existing software, solving a specific bug, giving product improvement suggestions, helping maintain the codebase, and preparing documentation. The rational response to a bounty by applying the model is analyzed. This chapter focuses on the financial rewards to FLOSS developers via bounty programs. They are used to improve the security of an existing product, to solve a specific bug, to obtain product improvement suggestions, to help maintain the code base and to prepare documentation. Agents that offer bounties benefit by a favorable reprioritization of project development tasks and, influence the agenda of the project.		Krishnamurthy, Sandeep; Tripathi, Arvind K.	The Economics of Open Source Software Development	https://doi.org/10.1016/B978-044452769-1/50008-1	Albert, P.(2004)CA's Ingres Challenge: Programming on ContingencyLinux Insiderhttp://www.linuxinsider.com/story/36056.html; Besaha, B.; Deci, E.L., Ryan, R.M., Koestner, R.; Ferziger, M.J., Currell, D.G.; Ferziger Nagorsky, M.(2004)Expert Report for the Federal Trade Commissionhttp://www.ftc.gov/reports/rewardsys/expertrpt_nagorsky.pdf; Frey, B.S.(1997)Not Just for the Money: An Economic Theory of Personal Motivation.Cited 1468 times.Edward Elgar Publishing, Cheltenham/Brookfield, USA; Yaniv, G.; Krishnamurthy, S.On the Intrinsic and Extrinsic Motivation of Free/Libre/Open Source (FLOSS) Developers(2005)Knowledge, Technology & Policy.Cited 65 times.forthcoming; Krishnamurthy, S., Tripathi, A.Why Do Open Source Developers turn Down Financial Rewards?(2005)University of Washington working paperavailable from the authors; Lakhani, K.R., Wolf, R.Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects(2005)Perspectives on Free and Open Source Software, pp. 3-21.Cited 829 times.MIT Press, Cambridge, USA, F. J., F. B., H. S., L. K.R. (Eds.); Lerner, J., Tirole, J.; Moody, G.(2001)Rebel Code and the Open Source Revolution.Cited 209 times.Perseus Publishing, Cambridge; Ozment, A.Bug Auctions: Vulnerability Markets Reconsidered(2004)Working Paperhttp://www.dtc.umn.edu/wei004/ozment.pdf; Payne, C.; Schechter, S.Quantitatively differentiating system security(2002)Workshop on Economics and Information Security.Cited 32 times.http://www.cl.cam.ac.uk/users/rjal4/econws/31.pdf; Selby, E., Bernanek, W.Sweepstakes Contests: Analysis, Strategies, and Survey(1981)The American Economic Review, 71 (1), pp. 189-195.Cited 13 times.; Shapiro, B.R.Sweepstakes or Lottery?(1995)Marketing Management, 3 (4), pp. 54-57.; Vemuri, V.K., Bertone, V.Will the Open Source Movement Survive a Litigious Society?(2004)Electronic Markets, 14 (2), pp. 114-123.Cited 5 times.	165 - 183	"""@BOOK{Krishnamurthy2006165,
    author = ""Krishnamurthy, Sandeep and Tripathi, Arvind K."",
    title = ""Bounty Programs in Free/Libre/Open Source Software"",
    year = ""2006"",
    journal = ""The Economics of Open Source Software Development"",
    pages = ""165 - 183"",
    doi = ""10.1016/B978-044452769-1/50008-1"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-36849055591\&doi=10.1016\%2fB978-044452769-1\%2f50008-1\&partnerID=40\&md5=e54a4b35b97642442f6d2120626b3236"",
    affiliations = ""University of Washington, Bothell, United States; University of Washington, Seattle, United States"",
    abstract = ""This chapter describes the impact of a bounty program on a corporation, an individual developer and a project. Bounty programs are commonly used in Free/Libre/Open Source Software (FLOSS) communities to motivate developers for the tasks which are not of their primary interest by providing monetary incentives. These tasks include creating new programs, improving the security of an existing software, solving a specific bug, giving product improvement suggestions, helping maintain the codebase, and preparing documentation. The rational response to a bounty by applying the model is analyzed. This chapter focuses on the financial rewards to FLOSS developers via bounty programs. They are used to improve the security of an existing product, to solve a specific bug, to obtain product improvement suggestions, to help maintain the code base and to prepare documentation. Agents that offer bounties benefit by a favorable reprioritization of project development tasks and, influence the agenda of the project. (c) 2006 Elsevier B.V. All rights reserved."",
    publisher = ""Elsevier"",
    isbn = ""978-044452769-1"",
    language = ""English"",
    abbrev_source_title = ""The Econ. of Open Source Software Dev."",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 16""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Bounty programs in free/libre/open source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-36849055591&origin=resultslist&sort=r-f&src=s&sid=cb7f1569664bc824d2757d7d9582c47d&sot=b&sdt=b&s=TITLE%28bounty+programs+in+free+libre+open+source+software%29&sl=57&sessionSearchId=cb7f1569664bc824d2757d7d9582c47d&relpos=0	Elsevier	nan; Keywords
324	TrustSE	A non-functional requirements tradeoff model in Trustworthy Software	This paper proposes a fuzzy qualitative and quantitative softgoal interdependency graphs (FQQSIG) model for non-functional requirements (NFRs) correlations analysis in Trustworthy Software (TS), which is considered a critical issue by academia, government, and industry. First, the FQQSIG model constructs an NFRs criteria decomposition hierarchy graph in the complex TS situation. Subsequently, it draws on trapezoidal fuzzy number and introduces a simulation algorithm named RAGE (RAndom GEneration) to transform the qualitative degree of importance assessments on NFRs in the form of experts' fuzzy linguistic variables into quantitative values. Using a new algorithm named Relationship Matrix, this model can calculate all NFRs contribution values by which developers could make tradeoff decisions among NFRs competing alternatives. The credibility and advantages of the FQQSIG model are discussed and an example is given to illustrate the FQQSIG model.	Algorithms; Fuzzy sets; FQQSIG; Fuzzy linguistic variable; Non-functional requirements (NFRs); Tradeoffs; Trustworthy softwares; Linguistics; Algorithms;  Fuzzy sets;  FQQSIG;  Fuzzy linguistic variable;  Non-functional requirements (NFRs);  Tradeoffs;  Trustworthy softwares;  Linguistics	Zhu, Ming-Xun; Luo, Xin-Xing; Chen, Xiao-Hong; Wu, Desheng Dash	Information Sciences	https://doi.org/10.1016/j.ins.2011.07.046		61 - 75	"""@ARTICLE{Zhu201261,
    author = ""Zhu, Ming-Xun and Luo, Xin-Xing and Chen, Xiao-Hong and Wu, Desheng Dash"",
    title = ""A non-functional requirements tradeoff model in Trustworthy Software"",
    year = ""2012"",
    journal = ""Information Sciences"",
    volume = ""191"",
    pages = ""61 - 75"",
    doi = ""10.1016/j.ins.2011.07.046"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84857535073\&doi=10.1016\%2fj.ins.2011.07.046\&partnerID=40\&md5=5088de4ce0908121d4f61765d2b7be36"",
    affiliations = ""Central South University Business School, ChangSha 410083, China; RiskLab, University of Toronto, Toronto, M5S3G3, Canada"",
    abstract = ""This paper proposes a fuzzy qualitative and quantitative softgoal interdependency graphs (FQQSIG) model for non-functional requirements (NFRs) correlations analysis in Trustworthy Software (TS), which is considered a critical issue by academia, government, and industry. First, the FQQSIG model constructs an NFRs criteria decomposition hierarchy graph in the complex TS situation. Subsequently, it draws on trapezoidal fuzzy number and introduces a simulation algorithm named RAGE (RAndom GEneration) to transform the qualitative degree of importance assessments on NFRs in the form of experts' fuzzy linguistic variables into quantitative values. Using a new algorithm named Relationship Matrix, this model can calculate all NFRs contribution values by which developers could make tradeoff decisions among NFRs competing alternatives. The credibility and advantages of the FQQSIG model are discussed and an example is given to illustrate the FQQSIG model. (c) 2011 Elsevier Inc. All rights reserved."",
    author_keywords = ""FQQSIG; Fuzzy linguistic variable; Non-functional requirements (NFRs); Tradeoffs; Trustworthy Software requirement"",
    keywords = ""Algorithms; Fuzzy sets; FQQSIG; Fuzzy linguistic variable; Non-functional requirements (NFRs); Tradeoffs; Trustworthy softwares; Linguistics"",
    correspondence_address = ""M.-X. Zhu; Central South University Business School, ChangSha 410083, China; email: zhumingxun@163.com"",
    issn = ""00200255"",
    coden = ""ISIJB"",
    language = ""English"",
    abbrev_source_title = ""Inf Sci"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 39""
}
"""	Included	Included				2	Scopus Signed In		A non-functional requirements tradeoff model in trustworthy software	https://www.scopus.com/record/display.uri?eid=2-s2.0-84857535073&origin=resultslist&sort=r-f&src=s&sid=5b39802fc93250af71ea40570e81278c&sot=b&sdt=b&s=TITLE%28a+non+functional+requirements+tradeoff+model+in+trustworthy+software%29&sl=75&sessionSearchId=5b39802fc93250af71ea40570e81278c&relpos=0		nan; References; Publisher
325	TrustSE	Using innovative instructions to create trustworthy software solutions	Software developers face a number of challenges when creating applications that attempt to keep important data confidential. Even with diligent attention paid to correct software design and implementation practices, secrets can still be exposed through a single flaw in any of the privileged code on the platform, code which may have been written by thousands of developers from hundreds of organizations throughout the world. Intel is developing innovative security technology which provides the ability for software developers to maintain control of the security of sensitive code and data by creating trusted domains within applications to protect critical information during execution and at rest. This paper will describe how this technology has been effectively used in lab exercises to protect private information in applications including enterprise rights management, video chat, trusted financial transactions, and others. Examples will include both protection of local processing and the establishment of secure communication with cloud services. It will illustrate useful software design patterns that can be followed to create many additional types of trusted software solutions.		Hoekstra, Matthew; Lal, Reshma; Pappachan, Pradeep; Phegade, Vinay; Del Cuvillo, Juan	HASP '13: Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy	https://doi.org/10.1145/2487726.2488370			"""@inproceedings{10.1145/2487726.2488370,
    author = ""Hoekstra, Matthew and Lal, Reshma and Pappachan, Pradeep and Phegade, Vinay and Del Cuvillo, Juan"",
    title = ""Using innovative instructions to create trustworthy software solutions"",
    year = ""2013"",
    isbn = ""9781450321181"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2487726.2488370"",
    doi = ""10.1145/2487726.2488370"",
    abstract = ""Software developers face a number of challenges when creating applications that attempt to keep important data confidential. Even with diligent attention paid to correct software design and implementation practices, secrets can still be exposed through a single flaw in any of the privileged code on the platform, code which may have been written by thousands of developers from hundreds of organizations throughout the world. Intel is developing innovative security technology which provides the ability for software developers to maintain control of the security of sensitive code and data by creating trusted domains within applications to protect critical information during execution and at rest. This paper will describe how this technology has been effectively used in lab exercises to protect private information in applications including enterprise rights management, video chat, trusted financial transactions, and others. Examples will include both protection of local processing and the establishment of secure communication with cloud services. It will illustrate useful software design patterns that can be followed to create many additional types of trusted software solutions."",
    booktitle = ""Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy"",
    articleno = ""11"",
    numpages = ""1"",
    location = ""Tel-Aviv, Israel"",
    series = ""HASP '13""
}
"""	Excluded	Excluded				2	ACM		Using innovative instructions to create trustworthy software solutions.	https://doi.org/10.1145/2487726.2488370	Association for Computing Machinery	nan; Keywords; References; Pages; Link
326	TrustSE	A Software Component Quality Model: A Preliminary Evaluation	Component-based software development is becoming more generalized, representing a considerable market for the software industry. The perspective of reduced development costs and shorter life cycles acts as a motivation for this expansion. However, several technical issues remain unsolved before software component's industry reaches the maturity exhibited by other component industries. Problems such as the component selection by their integrators and the uncertain quality of third-party developed components, bring new challenges to the software engineering community. By the other hand, the software components certification area is still immature and further research is needed in order to obtain well-defined standards for certification. In this way, we aim to propose a component quality model, describing consistent and well-defined characteristics, quality attributes and related metrics for the components evaluation. A preliminary evaluation to analyze the results of using the component quality model proposed is also presented	Software quality; Certification; Computer industry; Programming; Software engineering; Software standards; Mathematical model; Predictive models; Costs; Assembly; Model Quality; Software Components; Quality Attributes; Software Engineering; Related Metrics; Objective Of This Study; Null Hypothesis; Alternative Hypothesis; Development Of Applications; Quality Characteristics; Kind Of Information; Target Market; Components In Order; Considerable Information; Software Product; Market Characteristics; Technological Quality; Boolean Variable; Ability Of Components	Alexandre Alvaro; Eduardo Santana De Almeida; Silvio Lemos Meira	32nd EUROMICRO Conference on Software Engineering and Advanced Applications (EUROMICRO'06)	https://doi.org/10.1109/EUROMICRO.2006.13	"1.C.W. Krueger, ""Software Reuse"", ACM Computing Surveys, Vol. 24, No. 02, June, 1992, pp. 131-183. CrossRef  Google Scholar; 2.K.C. Wallnau, ""Volume III: A Technology for Predictable Assembly from Certifiable Components"", Software Engineering Institute (SEI), Technical Report, Vol. III, April, 2003. Google Scholar; 3.G.T. Heineman, W.T. Councill, Component-Based Software Engineering: Putting the Pieces Together, Addison-Wesley, USA, 2001. Google Scholar; 4.M. Goulao, F.B. Abreu, ""Towards a Component Quality Model"", Work in Progress Session of the 28 IEEE Euromicro Conference, Dortmund, Germany, 2002. Google Scholar; 5.J.M. Jezequel, B. Meyer, ""Design by Contract: The Lessons of Ariane"", IEEE Computer, Vol. 30, No. 02, 1997, pp. 129-130. View Article  Google Scholar; 6.A. Alvaro, E.S. Almeida, S.L. Meira, ""A Software Component Certification: A Survey"", In the 31"" IEEE EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA), CBSE Track, Portugal, 2005, pp. 117-125.; 7.M. Bertoa, A. Vallecillo, ""Quality Attributes for COTS Components"", Proc. of the 6 International ECOOP Workshop on Quantitative Approaches in Object-Oriented Software Engineering (QAOOSE), Spain, 2002. Google Scholar; 8.M. Goulao, F. Brito e Abreu, ""The Quest for Software Components Quality"", Proc. of the 26th IEEE Annual International Computer Software and Applications Conference (COMPSAC), England, August, 2002, pp. 313-318.; 9.ISO/IEC 9126: Information Technology - Product Quality - Part1: Quality Model, International Standard ISO/IEC 9126, International Standard Organization, June, 2001. Google Scholar; 10.R.P.S. Simao, A. Belchior, ""Quality Characteristics for Software Components: Hierarchy and Quality Guides"", Component-Based Software Quality: Methods and Techniques, Lecture Notes in Computer Science (LNCS) Springer-Verlag, Vol. 2693, 2003, pp. pp. 188-211. CrossRef  Google Scholar; 11.M. Torchiano, L. Jaccheri, C.-F. Sorensen, A.I. Wang, ""COTS Products Characterization"", Proc. of the 14 International Conference on Software Engineering and Knowledge Engineering (SEKE), 2002, pp. pp. 335-338. CrossRef  Google Scholar; 12.A. Alvaro, E.S. Almeida, S.L. Meira, ""Quality Attributes for a Component Quality Model"", In the 10 International Workshop on Component Oriented Programming (WCOP) in conjunction with the 19th ACM European Conference on Object Oriented Programming (ECCOP), Glasgow, Scotland, 2005.; 13.M.F. Bertoa, J.M. Troya, A. Vallecillo, ""A Survey on the Quality Information Provided by Software Component Vendors"", Proc. of the 7 ECOOP Workshop on Quantitative Approaches in Object-Oriented Software Engineering (QAOOSE), Germany, 2003. Google Scholar; 14.C. Wohlin, P. Runeson, M. Host, C. Ohlsson, B. Regnell, A. Wesslen, Experimenta-tion in Software Engineering: An Introduction, Kluver Academic Publishers, 2000. CrossRef  Google Scholar; 15.M.O. Barros, C.M.L. Werner, G.H. Travassos, ""An Experimental Study about Modeling Use and Simulation in support to the Software Project Management"" (in Portuguese), Proc. Of the 16 Brazilian Symposium in Software Engineering, Rio de Janeiro, Brazil, 2002. Google Scholar; 16.V.R. Basili, R. Selby, D. Hutchens, ""Experimentation in Software Engineering"", IEEE Transactions on Software Engineering, Vol. 12, No. 07, 1986, pp. 733-743. View Article  Google Scholar; 17.ISO/IEC 25000, 2005, Software Engineering - Software product Quality Requirements and Evaluation (SQuaRE) - Guide to SQuaRE, International Standard Organization, July, 2005. Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		A software component quality model: A preliminary evaluation	https://ieeexplore.ieee.org/document/1690122	IEEE	nan; Pages; Year; Bibtex
327	TrustSE	THE TAKEOFF OF OPEN SOURCE SOFTWARE: A SIGNALING PERSPECTIVE BASED ON COMMUNITY ACTIVITIES	A few open source software (OSS) products exhibit an abrupt and significant increase in downloads. However, the majority of OSS products fail to gain much interest. Identifying early success is important for catalyzing growth in OSS markets. However, previous OSS research has not examined early product success dynamics and assumes adoption to be a continuous process. We propose OSS takeoff in adoptions as a measure of eventual product success. Takeoff is a nonlinear inflection point separating the early development from the growth phase in the product lifecycle. Using arguments from the signaling literature, we propose that community activities send signals about product quality and reduce information asymmetry faced by potential adopters of OSS products. Estimating a Cox proportional hazard model using a large sample of OSS products from SourceForge, we find that takeoff times are significantly associated with signals of quality deficiency and improvement. Further, we find that target audience and product innovativeness moderate this relationship.	Open source software; takeoff; signaling; product quality; Open source software;  takeoff;  signaling;  product quality	Setia, Pankaj; Bayus, Barry L.; Rajagopalan, Balaji	MIS QUARTERLY	https://doi.org/10.25300/MISQ/2020/12576		1439-1458	"""@article{WOS:000576761700013,
    Author = ""Setia, Pankaj and Bayus, Barry L. and Rajagopalan, Balaji"",
    Title = ""THE TAKEOFF OF OPEN SOURCE SOFTWARE: A SIGNALING PERSPECTIVE BASED ON COMMUNITY ACTIVITIES"",
    Journal = ""MIS QUARTERLY"",
    Year = ""2020"",
    Volume = ""44"",
    Number = ""3"",
    Pages = ""1439-1458"",
    Month = ""SEP"",
    Abstract = ""A few open source software (OSS) products exhibit an abrupt and significant increase in downloads. However, the majority of OSS products fail to gain much interest. Identifying early success is important for catalyzing growth in OSS markets. However, previous OSS research has not examined early product success dynamics and assumes adoption to be a continuous process. We propose OSS takeoff in adoptions as a measure of eventual product success. Takeoff is a nonlinear inflection point separating the early development from the growth phase in the product lifecycle. Using arguments from the signaling literature, we propose that community activities send signals about product quality and reduce information asymmetry faced by potential adopters of OSS products. Estimating a Cox proportional hazard model using a large sample of OSS products from SourceForge, we find that takeoff times are significantly associated with signals of quality deficiency and improvement. Further, we find that target audience and product innovativeness moderate this relationship."",
    Publisher = ""SOC INFORM MANAGE-MIS RES CENT"",
    Address = ""UNIV MINNESOTA-SCH MANAGEMENT 271 19TH AVE SOUTH, MINNEAPOLIS, MN 55455 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Setia, P (Corresponding Author), Indian Inst Management Ahmedabad, Ahmadabad 380015, Gujarat, India. Setia, P (Corresponding Author), Univ Arkansas, Fayetteville, AR 72701 USA. Setia, Pankaj, Indian Inst Management Ahmedabad, Ahmadabad 380015, Gujarat, India. Setia, Pankaj, Univ Arkansas, Fayetteville, AR 72701 USA. Bayus, Barry L., Univ N Carolina, Kenan Flagler Business Sch, Chapel Hill, NC 27599 USA. Rajagopalan, Balaji, Northern Illinois Univ, Coll Business, De Kalb, IL 60115 USA."",
    DOI = ""10.25300/MISQ/2020/12576"",
    ISSN = ""0276-7783"",
    Keywords = ""Open source software; takeoff; signaling; product quality"",
    Keywords-Plus = ""KNOWLEDGE CONTRIBUTION; USER ACCEPTANCE; INNOVATION; ASSIMILATION; TECHNOLOGY; ORGANIZATIONS; DIFFUSION; DESIGN; MODEL; ANTECEDENTS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""pankajsetia@iima.ac.in Barry\\_Bayus@unc.edu brajagopalan@niu.edu"",
    Affiliations = ""Indian Institute of Management (IIM System); Indian Institute of Management Ahmedabad; University of Arkansas System; University of Arkansas Fayetteville; University of North Carolina; University of North Carolina Chapel Hill; Northern Illinois University"",
    ResearcherID-Numbers = ""Setia, Pankaj/AAN-5765-2021"",
    Number-of-Cited-References = ""82"",
    Times-Cited = ""12"",
    Usage-Count-Last-180-days = ""9"",
    Usage-Count-Since-2013 = ""65"",
    Journal-ISO = ""MIS Q."",
    Doc-Delivery-Number = ""NZ0DY"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000576761700013"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		THE TAKEOFF OF OPEN SOURCE SOFTWARE: A SIGNALING PERSPECTIVE BASED ON COMMUNITY ACTIVITIES.	https://www.webofscience.com/wos/woscc/full-record/WOS:000576761700013	SOC INFORM MANAGE-MIS RES CENT	nan; References
328	TrustSE	How peripheral developers contribute to open-source software development	Open-source software development is the next stage in the evolution of product development, particularly software products. Compared with the prevailing proprietary approaches, open-source software products are developed by co-opting external developers and prospective users. Although a core group of developers might still play a key role in the initial design and development, a notable aspect of the open-source software paradigm is the role of peripheral developers in the enhancement and popularization of the product. Peripheral developers are not formal members of the core development team. They voluntarily contribute their time and creative talent in improving the quality of the product or in popularizing the product through word-of-mouth advocacy. As volunteers, they are not subject to the traditional hierarchical controls, nor are they contractually obligated. Peripheral developers represent a novel and unique aspect of open-source software development, and there is a greater interest in tapping their potential. However, there has been limited evidence about how and when their participation has beneficial impacts. We examine how peripheral developers contribute to product quality and diffusion by utilizing longitudinal data on 147 open-source software products. Hierarchical linear modeling analysis indicates that peripheral developers make significant contributions to product quality and diffusion, especially on projects that are in the more mature stages of product development.	Adoption;; Diffusion;; New product development;; Open source;; Peripheral developers;; Quality;; Software development	Setia, Pankaj; Rajagopalan, Balaji; Sambamurthy, Vallabh; Calantone, Roger	Information Systems Research	https://doi.org/10.1287/isre.1100.0311		144 - 163	"""@ARTICLE{Setia2012144,
    author = ""Setia, Pankaj and Rajagopalan, Balaji and Sambamurthy, Vallabh and Calantone, Roger"",
    title = ""How peripheral developers contribute to open-source software development"",
    year = ""2012"",
    journal = ""Information Systems Research"",
    volume = ""23"",
    number = ""1"",
    pages = ""144 - 163"",
    doi = ""10.1287/isre.1100.0311"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865078334\&doi=10.1287\%2fisre.1100.0311\&partnerID=40\&md5=2dd8feb9dd685a1286b313d24dce3407"",
    affiliations = ""Sam M. Walton College of Business, University of Arkansas, Fayetteville, AK 72701, United States; School of Business Administration, Oakland University, Rochester, MI 48309, United States; Eli Broad School of Business, Michigan State University, East Lansing, MI 48824, United States"",
    abstract = ""Open-source software development is the next stage in the evolution of product development, particularly software products. Compared with the prevailing proprietary approaches, open-source software products are developed by co-opting external developers and prospective users. Although a core group of developers might still play a key role in the initial design and development, a notable aspect of the open-source software paradigm is the role of peripheral developers in the enhancement and popularization of the product. Peripheral developers are not formal members of the core development team. They voluntarily contribute their time and creative talent in improving the quality of the product or in popularizing the product through word-of-mouth advocacy. As volunteers, they are not subject to the traditional hierarchical controls, nor are they contractually obligated. Peripheral developers represent a novel and unique aspect of open-source software development, and there is a greater interest in tapping their potential. However, there has been limited evidence about how and when their participation has beneficial impacts. We examine how peripheral developers contribute to product quality and diffusion by utilizing longitudinal data on 147 open-source software products. Hierarchical linear modeling analysis indicates that peripheral developers make significant contributions to product quality and diffusion, especially on projects that are in the more mature stages of product development. (c) 2012 INFORMS."",
    author_keywords = ""Adoption; Diffusion; New product development; Open source; Peripheral developers; Quality; Software development"",
    correspondence_address = ""P. Setia; Sam M. Walton College of Business, University of Arkansas, Fayetteville, AK 72701, United States; email: psetia@walton.uark.edu"",
    publisher = ""INFORMS Inst.for Operations Res.and the Management Sciences"",
    issn = ""10477047"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. Res."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 94""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		How peripheral developers contribute to open-source software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-84865078334&origin=resultslist&sort=r-f&src=s&sid=40a64adaf8f8ba164148fdc25c6de48e&sot=b&sdt=b&s=TITLE%28how+peripheral+developers+contribute+to+open+source+software+development%29&sl=79&sessionSearchId=40a64adaf8f8ba164148fdc25c6de48e&relpos=0	INFORMS Inst.for Operations Res.and the Management Sciences	nan; References
329	TrustSE	Research Note---Lock-In Strategy in Software Competition: Open-Source Software vs. Proprietary Software	"Open-source software poses a serious challenge to proprietary software vendors. ""Lock in customers"" seems a tempting strategy for proprietary software vendors, who attempt to lock in customers by creating switching costs. This paper examines whether such a lock-in strategy will indeed benefit proprietary software vendors facing competition from open-source software, who can credibly commit future prices. Developing a two-period duopoly model in which software products are differentiated and customers are heterogeneous, we find that the lock-in strategy is actually counterproductive in competing against open-source software. In fact, giving customers the freedom of choice may end up benefiting the proprietary software vendor. In terms of the broader effect, we find that lock-in reduces overall social welfare, but certain customers may actually be better off with it. Finally, we show that the lock-in strategy works differently for different types of customers in the software market (i.e., foresighted versus myopic customers). This suggests that customer behavior could significantly alter the equilibrium strategy of software vendors."	competition;  game theory;  lock-in;  open-source software;  proprietary software;  software;  switching cost; competition, game theory, lock-in, open-source software, proprietary software, software, switching cost	Zhu, Kevin Xiaoguo; Zhou, Zach Zhizhong	Info. Sys. Research	https://doi.org/10.1287/isre.1110.0358		536-545	"""@article{10.1287/isre.1110.0358,
    author = ""Zhu, Kevin Xiaoguo and Zhou, Zach Zhizhong"",
    title = ""Research Note---Lock-In Strategy in Software Competition: Open-Source Software vs. Proprietary Software"",
    year = ""2012"",
    issue_date = ""06 2012"",
    publisher = ""INFORMS"",
    address = ""Linthicum, MD, USA"",
    volume = ""23"",
    number = ""2"",
    issn = ""1526-5536"",
    url = ""https://doi.org/10.1287/isre.1110.0358"",
    doi = ""10.1287/isre.1110.0358"",
    abstract = ""Open-source software poses a serious challenge to proprietary software vendors. ""Lock in customers"" seems a tempting strategy for proprietary software vendors, who attempt to lock in customers by creating switching costs. This paper examines whether such a lock-in strategy will indeed benefit proprietary software vendors facing competition from open-source software, who can credibly commit future prices. Developing a two-period duopoly model in which software products are differentiated and customers are heterogeneous, we find that the lock-in strategy is actually counterproductive in competing against open-source software. In fact, giving customers the freedom of choice may end up benefiting the proprietary software vendor. In terms of the broader effect, we find that lock-in reduces overall social welfare, but certain customers may actually be better off with it. Finally, we show that the lock-in strategy works differently for different types of customers in the software market (i.e., foresighted versus myopic customers). This suggests that customer behavior could significantly alter the equilibrium strategy of software vendors."",
    journal = ""Info. Sys. Research"",
    month = ""June"",
    pages = ""536-545"",
    numpages = ""10"",
    keywords = ""competition, game theory, lock-in, open-source software, proprietary software, software, switching cost""
}
"""	Excluded	Excluded				2	ACM		Research note—Lock-in strategy in software competition: Open-source software vs. proprietary software	https://dl.acm.org/doi/10.1287/isre.1110.0358	INFORMS	nan; References
330	TrustSE	Software reliability and system reliability	"The chapter is mainly aimed at showing that, by using deliberately simple mathematics, the classical reliability theory can be extended in order to be interpreted from both hardware and software viewpoints. This being referred to as ""X-ware"". It will be shown that, even though the action mechanisms of the various classes of faults may be different from a physical viewpoint according to their causes, a single formulation can be used from the reliability modeling and statistical estimation viewpoints. Having a single formulation exhibit several advantages, both theoretical and practical, such as a) easier and more consistent modeling of hardware-software systems and of hardware-software interactions, b) adaptability of models for hardware dependability to software systems and vice versa, and c) mathematical tractabliiy. The second Section gives a general overview of the dependability concepts. The third Section is devoted to the failure behavior of an X-ware system disregarding the effect of restoration actions."		Jean-Claude Laprie; Karama Kanoun	Handbook for Software Reliability Engineering	https://hal.science/hal-00761643/		27-69	"""nan"""	Excluded	Excluded				2	Google Scholar		Software reliability and system reliability	https://hal.science/hal-00761643/	HAL Open Science	
331	TrustSE	A systematic examination of knowledge loss in open source software projects	Context Open Source Software (OSS) development is a knowledge focussed activity which relies heavily on contributors who can be volunteers or paid workers and are geographically distributed. While working on OSS projects contributors acquire project related individualistic knowledge and gain experience and skills, which often remains unshared with others and is usually lost once contributors leave a project. All software development organisations face the problem of knowledge loss as employees leave, but this situation is exasperated in OSS projects where most contributors are volunteers with largely unpredictable engagement durations. Contributor turnover is inevitable due to the transient nature of OSS project workforces causing knowledge loss, which threatens the overall sustainability of OSS projects and impacts negatively on software quality and contributor productivity. Objective: The objective of this work is to deeply and systematically investigate the phenomenon of knowledge loss due to contributor turnover in OSS projects as presented in the state-of-the-art literature and to synthesise the information presented on the topic. Furthermore, based on the learning arising from our investigation it is our intention to identify mechanisms to reduce the overall effects of knowledge loss in OSS projects. Methodology: We use the snowballing methodology to identify the relevant literature on knowledge loss due to contributor turnover in OSS projects. This robust methodology for a literature review includes research question, search strategy, inclusion, exclusion, quality criteria, and data synthesis. The search strategy, and inclusion, exclusions and quality criteria are applied as a part of snowballing procedure. Snowballing is considered an efficient and reliable way to conduct a systematic literature review, providing a robust alternative to mechanically searching individual databases for given topics. Result: Knowledge sharing in OSS projects is abundant but there is no evidence of a formal strategy or practice to manage knowledge. Due to the dynamic and diverse nature of OSS projects, knowledge management is considered a challenging task and there is a need for a proactive mechanism to share knowledge in the OSS community for knowledge to be reused in the future by the OSS project contributors. From the collection of papers found using snowballing, we consolidated various themes on knowledge loss due to contributor turnover in OSS projects and identified 11 impacts due to knowledge loss in OSS projects, and 10 mitigations to manage with knowledge loss in OSS projects. Conclusion: In this paper, we propose future research directions to investigate integration of proactive knowledge retention practices with the existing OSS practices to reduce the current knowledge loss problem. We suggest that there is insufficient attention paid to KM in general in OSS, in particular there would appear to an absence of proactive measures to reduce the potential impact of knowledge loss. We also propose the need for a KM evaluation metric in OSS projects, similar to the ones that evaluate health of online communities, which should help to inform potential consumers of the OSS of the KM status on a project, something that is not existent today.	Computer software selection and evaluation; Knowledge management; Open systems; Software design; Contributor turnover; Future research directions; Knowledge loss impact; Knowledge retention; On-line communities; Open source software projects; Research questions; Systematic literature review; Open source software; Computer software selection and evaluation;  Knowledge management;  Open systems;  Software design;  Contributor turnover;  Future research directions;  Knowledge loss impact;  Knowledge retention;  On-line communities;  Open source software projects;  Research questions;  Systematic literature review;  Open source software	Rashid, Mehvish; Clarke, Paul M.; O'Connor, Rory V.	International Journal of Information Management	https://doi.org/10.1016/j.ijinfomgt.2018.11.015		104 - 123	"""@ARTICLE{Rashid2019104,
    author = ""Rashid, Mehvish and Clarke, Paul M. and O'Connor, Rory V."",
    title = ""A systematic examination of knowledge loss in open source software projects"",
    year = ""2019"",
    journal = ""International Journal of Information Management"",
    volume = ""46"",
    pages = ""104 - 123"",
    doi = ""10.1016/j.ijinfomgt.2018.11.015"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058057400\&doi=10.1016\%2fj.ijinfomgt.2018.11.015\&partnerID=40\&md5=773eecfb42d5a1ae2e3f472da6b90df9"",
    affiliations = ""L1.21, School of Computing, Dublin City University, Glasnevin, Dublin 9, Ireland; L2.27, School of Computing, Lero the Irish Software Research Centre, Tierney Building, University of Limerick, Ireland"",
    abstract = ""Context Open Source Software (OSS) development is a knowledge focussed activity which relies heavily on contributors who can be volunteers or paid workers and are geographically distributed. While working on OSS projects contributors acquire project related individualistic knowledge and gain experience and skills, which often remains unshared with others and is usually lost once contributors leave a project. All software development organisations face the problem of knowledge loss as employees leave, but this situation is exasperated in OSS projects where most contributors are volunteers with largely unpredictable engagement durations. Contributor turnover is inevitable due to the transient nature of OSS project workforces causing knowledge loss, which threatens the overall sustainability of OSS projects and impacts negatively on software quality and contributor productivity. Objective: The objective of this work is to deeply and systematically investigate the phenomenon of knowledge loss due to contributor turnover in OSS projects as presented in the state-of-the-art literature and to synthesise the information presented on the topic. Furthermore, based on the learning arising from our investigation it is our intention to identify mechanisms to reduce the overall effects of knowledge loss in OSS projects. Methodology: We use the snowballing methodology to identify the relevant literature on knowledge loss due to contributor turnover in OSS projects. This robust methodology for a literature review includes research question, search strategy, inclusion, exclusion, quality criteria, and data synthesis. The search strategy, and inclusion, exclusions and quality criteria are applied as a part of snowballing procedure. Snowballing is considered an efficient and reliable way to conduct a systematic literature review, providing a robust alternative to mechanically searching individual databases for given topics. Result: Knowledge sharing in OSS projects is abundant but there is no evidence of a formal strategy or practice to manage knowledge. Due to the dynamic and diverse nature of OSS projects, knowledge management is considered a challenging task and there is a need for a proactive mechanism to share knowledge in the OSS community for knowledge to be reused in the future by the OSS project contributors. From the collection of papers found using snowballing, we consolidated various themes on knowledge loss due to contributor turnover in OSS projects and identified 11 impacts due to knowledge loss in OSS projects, and 10 mitigations to manage with knowledge loss in OSS projects. Conclusion: In this paper, we propose future research directions to investigate integration of proactive knowledge retention practices with the existing OSS practices to reduce the current knowledge loss problem. We suggest that there is insufficient attention paid to KM in general in OSS, in particular there would appear to an absence of proactive measures to reduce the potential impact of knowledge loss. We also propose the need for a KM evaluation metric in OSS projects, similar to the ones that evaluate health of online communities, which should help to inform potential consumers of the OSS of the KM status on a project, something that is not existent today. (c) 2018 Elsevier Ltd"",
    author_keywords = ""Contributor turnover; Knowledge loss; Knowledge loss impact; Knowledge Management; Knowledge retention; Open Source Software"",
    keywords = ""Computer software selection and evaluation; Knowledge management; Open systems; Software design; Contributor turnover; Future research directions; Knowledge loss impact; Knowledge retention; On-line communities; Open source software projects; Research questions; Systematic literature review; Open source software"",
    correspondence_address = ""M. Rashid; L1.21, School of Computing, Dublin City University, Glasnevin, Dublin 9, Ireland; email: Mehvish.Rashid2@mail.dcu.ie"",
    publisher = ""Elsevier Ltd"",
    issn = ""02684012"",
    coden = ""IJMAE"",
    language = ""English"",
    abbrev_source_title = ""Int J Inf Manage"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 41; All Open Access, Green Open Access""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		A systematic examination of knowledge loss in open source software projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-85058057400&origin=resultslist&sort=r-f&src=s&sid=24c21574c5848d222ab9b5c91c6a2f9d&sot=b&sdt=b&s=TITLE%28a+systematic+examination+of+knowledge+loss+in+open+source+software+projects%29&sl=82&sessionSearchId=24c21574c5848d222ab9b5c91c6a2f9d&relpos=0	Elsevier Ltd	nan; References
332	TrustSE	Open Source Software Research and Blockchain	This short paper investigates ways in which earlier open source software (OSS) research can help us explain blockchain-related phenomena. We review OSS literature and identify three such areas: 1) blockchain and OSS 2.0, 2) community development, and 3) forks.		Juho Lindman	Opportunities and Risks of Blockchain Technologies	https://acris.aalto.fi/ws/portalfiles/portal/16141610/dagrep_v007_i003_p099_s17132.pdf#page=17		3	"""nan"""	Excluded	Excluded				2	Google Scholar		3.5 Open Source Software Research and Blockchain	https://acris.aalto.fi/ws/portalfiles/portal/16141610/dagrep_v007_i003_p099_s17132.pdf#page=17	Aalto University	
333	TrustSE	"""Constructing the users"" in open source software development: An interpretive case study of user participation"	"Purpose: The purpose of this paper is to report findings from an interpretive case study on user participation in the open source software (OSS) development context. Design/methodology/approach: Through an empirical, interpretive case study and a literature review utilising the metaphor of text in the analysis, this paper provides a refined conceptualisation of user participation in OSS development. Findings: The paper reveals that different kinds of meanings have been attached to users and to their participation. User participation is both direct and indirect in the OSS development context. Some user groups actively take part in OSS development, while others are merely represented in it. Different kinds of intermediaries ""representing the users"" are identified. Research limitations/implications: The research is based on one case study on a small but active OSS project with an interest in users. Other kinds of OSS projects should be analysed. The analysis was focused on a discussion forum, but users can take part in OSS development by other means as well. Paths for future work should include the gathering of more varied empirical data. Practical implications: The findings indicate that users can provide feedback to the development through discussion forums in the distributed environment, but there is a need to support the users in doing so and the developers in analysing the data. The importance of different kinds of intermediaries ""representing the users"" is highlighted. Originality/value: The paper provides thorough empirical insights and a refined conceptualisation of user participation addressing the currently weakly empirically explored OSS development context."	Case studies;; Computer software;; Software engineering;; User studies	Iivari, Netta	Information Technology and People	https://doi.org/10.1108/09593840910962203		132 - 156	"""@ARTICLE{Iivari2009132,
    author = ""Iivari, Netta"",
    title = {""Constructing the users"" in open source software development: An interpretive case study of user participation},
    year = ""2009"",
    journal = ""Information Technology and People"",
    volume = ""22"",
    number = ""2"",
    pages = ""132 - 156"",
    doi = ""10.1108/09593840910962203"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-69549126247\&doi=10.1108\%2f09593840910962203\&partnerID=40\&md5=64e016d37824bd4609cd59c168703262"",
    affiliations = ""Department of Information Processing Science, University of Oulu, Oulu, Finland"",
    abstract = {Purpose: The purpose of this paper is to report findings from an interpretive case study on user participation in the open source software (OSS) development context. Design/methodology/approach: Through an empirical, interpretive case study and a literature review utilising the metaphor of text in the analysis, this paper provides a refined conceptualisation of user participation in OSS development. Findings: The paper reveals that different kinds of meanings have been attached to users and to their participation. User participation is both direct and indirect in the OSS development context. Some user groups actively take part in OSS development, while others are merely represented in it. Different kinds of intermediaries ""representing the users"" are identified. Research limitations/implications: The research is based on one case study on a small but active OSS project with an interest in users. Other kinds of OSS projects should be analysed. The analysis was focused on a discussion forum, but users can take part in OSS development by other means as well. Paths for future work should include the gathering of more varied empirical data. Practical implications: The findings indicate that users can provide feedback to the development through discussion forums in the distributed environment, but there is a need to support the users in doing so and the developers in analysing the data. The importance of different kinds of intermediaries ""representing the users"" is highlighted. Originality/value: The paper provides thorough empirical insights and a refined conceptualisation of user participation addressing the currently weakly empirically explored OSS development context. (c) Emerald Group Publishing Limited.},
    author_keywords = ""Case studies; Computer software; Software engineering; User studies"",
    correspondence_address = ""N. Iivari; Department of Information Processing Science, University of Oulu, Oulu, Finland; email: netta.iivari@oulu.fi"",
    issn = ""09593845"",
    language = ""English"",
    abbrev_source_title = ""Inf. Technol. People"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 36""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		“Constructing the users” in open source software development	https://doi.org/10.1108/09593840910962203		nan; References; Link; Publisher
334	TrustSE	Hackers vs. Testers: A Comparison of Software Vulnerability Discovery Processes	Identifying security vulnerabilities in software is a critical task that requires significant human effort. Currently, vulnerability discovery is often the responsibility of software testers before release and white-hat hackers (often within bug bounty programs) afterward. This arrangement can be ad-hoc and far from ideal; for example, if testers could identify more vulnerabilities, software would be more secure at release time. Thus far, however, the processes used by each group - and how they compare to and interact with each other - have not been well studied. This paper takes a first step toward better understanding, and eventually improving, this ecosystem: we report on a semi-structured interview study (n=25) with both testers and hackers, focusing on how each group finds vulnerabilities, how they develop their skills, and the challenges they face. The results suggest that hackers and testers follow similar processes, but get different results due largely to differing experiences and therefore different underlying knowledge of security concepts. Based on these results, we provide recommendations to support improved security training for testers, better communication between hackers and developers, and smarter bug bounty policies to motivate hacker participation.	Computer privacy; Personal computing; Interview study; security workers; Software vulnerabilities; Usable security; Vulnerability discovery; Software testing; Computer privacy;  Personal computing;  Interview study;  security workers;  Software vulnerabilities;  Usable security;  Vulnerability discovery;  Software testing	Votipka, Daniel; Stevens, Rock; Redmiles, Elissa; Hu, Jeremy; Mazurek, Michelle	Proceedings - IEEE Symposium on Security and Privacy	https://doi.org/10.1109/SP.2018.00003	"1.Y. Shoshitaishvili, M. Weissbacher, L. Dresel, C. Salls, R. Wang, C. Kruegel, et al., ""Rise of the hacrs: Augmenting autonomous cyber reasoning systems with human assistance"", Proc. of the 24th ACM SIGSAC Conference on Computer and Communications Security ser. CCS 17. ACM, 2017.Show in Context CrossRef  Google Scholar; 2.N. Rutar, C. B. Almazan and J. S. Foster, ""A comparison of bug finding tools for java"", Proc. of the 15th International Symposium on Software Reliability Engineering ser. ISSRE 04. IEEE Computer Society, pp. 245-256, 2004.Show in Context View Article  Google Scholar; 3.D. Baca, B. Carlsson, K. Petersen and L. Lundberg, ""Improving software security with static automated code analysis in an industry setting"", Software: Practice and Experience, vol. 43, no. 3, pp. 259-279, 2013.Show in Context CrossRef  Google Scholar; 4.A. Doupe, M. Cova and G. Vigna, ""Why johnny cant pentest: An analysis of black-box web vulnerability scanners"", Proc. of the 7th International Conference on Detection of Intrusions and Malware and Vulnerability Assessment ser. DIMVA10. Springer-Verlag, pp. 111-131, 2010.Show in Context CrossRef  Google Scholar; 5.A. Austin and L. Williams, ""One technique is not enough: A comparison of vulnerability discovery techniques"", Proc. of the Fifth International Symposium on Empirical Software Engineering and Measurement ser. ESEM 11. IEEE Computer Society, pp. 97-106, 2011.Show in Context View Article  Google Scholar; 6.N. Antunes and M. Vieira, ""Comparing the effectiveness of penetration testing and static code analysis on the detection of sql injection vulnerabilities in web services"", Proc. of the 2009 15th IEEE Pacific Rim International Symposium on Dependable Computing ser. PRDC 09. IEEE Computer Society, pp. 301-306, 2009.Show in Context View Article  Google Scholar; 7.L. Suto, ""Analyzing the effectiveness and coverage of web application security scanners"", BeyondTrust Inc Tech. Rep., 2007.Show in Context Google Scholar; 8.L. Suto, ""Analyzing the accuracy and time costs of web application security scanners"", BeyondTrust Inc Tech. Rep., 2010.Show in Context Google Scholar; 9.G. McGraw and J. Steven, Software [in by security: Comparing apples oranges and aardvarks (or all static analysis tools are not created equal,  [online]  Available: http://www.informit.com/articles/article.aspx?p=1680863.Show in Context Google Scholar; 10.A. Edmundson, B. Holtkamp, E. Rivera, M. Finifter, A. Mettler and D. Wagner, ""An empirical study on the effectiveness of security code review"", Proc. of the 5th International Conference on Engineering secure Software and Systems ser. ESSoS13, pp. 197-212, 2013.Show in Context CrossRef  Google Scholar; 11.Z. Xu, Q. Hu and C. Zhang, ""Why computer talents become computer hackers"", Communications of the ACM, vol. 56, no. 4, pp. 64-74, Apr. 2013.Show in Context CrossRef  Google Scholar; 12.T. Maillart, M. Zhao, J. Grossklags and J. Chuang, ""Given enough eyeballs all bugs are shallow? revisiting eric raymond with bug bounty programs"", Proc. of the 15th Workshop on the Economics of Information Security ser. WEIS 16, 2016.Show in Context Google Scholar; 13.""2016 bug bounty hacker report"", Hackerone Tech. Rep., September 2016.Show in Context Google Scholar; 14.A. Mein and C. Evans, ""Dosh4vulns: Googles vulnerability reward programs"", Google.Show in Context Google Scholar; 15.""The state of bug bounty"", Bugcrowd Tech. Rep., June 2016.Show in Context Google Scholar; 16.M. Finifter, D. Akhawe and D. Wagner, ""An empirical study of vulnerability rewards programs"", Proc. of the 22nd USENIX Security Symposium ser. USENIX Security' 13, pp. 273-288, 2013.Show in Context Google Scholar; 17.M. Zhao, J. Grossklags and P. Liu, ""An empirical study of web vulnerability discovery ecosystems"", Proc. of the 22nd ACM SIGSAC Conference on Computer and Communications Security ser. CCS 15, pp. 1105-1117, 2015.Show in Context CrossRef  Google Scholar; 18.G. Tassey, ""The economic impacts of inadequate infrastructure for software testing"", National Institute of Standards and Technology RTI Project, vol. 7007, no. 011, 2002.Show in Context Google Scholar; 19.M. Zhivich and R. K. Cunningham, ""The real cost of software errors"", IEEE Security  Privacy, vol. 7, no. 2, 2009.Show in Context View Article  Google Scholar; 20.M. Soni, Defect prevention: reducing costs and enhancing quality, vol. 19, 2006,  [online]  Available: https://www.isixsigma.com/industries/software-it/defect-prevention-reducing-costs-and-enhancing-quality/.Show in Context Google Scholar; 21.W. Baziuk, ""BNR/NORTEL: path to improve product quality reliability and customer satisfaction"", Sixth International Symposium on Software Reliability Engineering ISSRE 1995, pp. 256-262, October 24-27, 1995.Show in Context View Article  Google Scholar; 22.M. M. Lehman, ""Programs life cycles and laws of software evolution"", Proc. of the IEEE, vol. 68, no. 9, pp. 1060-1076, Sept 1980.Show in Context View Article  Google Scholar; 23.K. Olmstead and A. Smith, Americans and cybersecurity,  [online]  Available: http://www.pewinternet.org/2017/011261americans-and-cybersecurity/.Show in Context Google Scholar; 24.J. Surowiecki, ""The wisdom of crowds"", Anchor, 2005.Show in Context Google Scholar; 25.M. Zhao, A. Laszka, T. Maillart and J. Grossklags, ""Crowdsourced security vulnerability discovery: Modeling and organizing bug-bounty programs"", Proc. of the 4th AAAI Workshop on Mathematical Foundations of Human Computation ser. HCOMP 16, November 2016.Show in Context Google Scholar; 26.K. Huang, M. Siegel, S. Madnick, X. Li and Z. Feng, ""Poster: Diversity or concentration? hackers strategy for working across multiple bug bounty programs"", Proc. of the 37th IEEE Symposium on Security and Privacy ser. SP 16, 2016.Show in Context CrossRef  Google Scholar; 27.S. Ransbotham, S. Mitra and J. Ramsey, ""Are markets for vulnerabilities effective"", MIS Quarterly, vol. 36, no. 1, pp. 43-64, 2012.Show in Context CrossRef  Google Scholar; 28.A. Ozment, ""Bug auctions: Vulnerability markets reconsidered"", Third Workshop on the Economics of Information Security, 2004.Show in Context Google Scholar; 29.K. Kannan and R. Telang, ""Market for software vulnerabilities? think again"", Manage. Sci., vol. 51, no. 5, pp. 726-740, May 2005.Show in Context CrossRef  Google Scholar; 30.A. Algarni and Y. Malaiya, ""Software vulnerability markets: Discoverers and buyers"", International Journal of Computer Information Science and Engineering, vol. 8, no. 3, pp. 71-81, 2014.Show in Context Google Scholar"	374 - 391	"""@CONFERENCE{Votipka2018374,
    author = ""Votipka, Daniel and Stevens, Rock and Redmiles, Elissa and Hu, Jeremy and Mazurek, Michelle"",
    title = ""Hackers vs. Testers: A Comparison of Software Vulnerability Discovery Processes"",
    year = ""2018"",
    journal = ""Proceedings - IEEE Symposium on Security and Privacy"",
    volume = ""2018-May"",
    pages = ""374 - 391"",
    doi = ""10.1109/SP.2018.00003"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051046847\&doi=10.1109\%2fSP.2018.00003\&partnerID=40\&md5=1857e58a793ef04fdbc5350ded5e5035"",
    affiliations = ""Department of Computer Science, University of Maryalnd, College Park, 20742, MD, United States"",
    abstract = ""Identifying security vulnerabilities in software is a critical task that requires significant human effort. Currently, vulnerability discovery is often the responsibility of software testers before release and white-hat hackers (often within bug bounty programs) afterward. This arrangement can be ad-hoc and far from ideal; for example, if testers could identify more vulnerabilities, software would be more secure at release time. Thus far, however, the processes used by each group - and how they compare to and interact with each other - have not been well studied. This paper takes a first step toward better understanding, and eventually improving, this ecosystem: we report on a semi-structured interview study (n=25) with both testers and hackers, focusing on how each group finds vulnerabilities, how they develop their skills, and the challenges they face. The results suggest that hackers and testers follow similar processes, but get different results due largely to differing experiences and therefore different underlying knowledge of security concepts. Based on these results, we provide recommendations to support improved security training for testers, better communication between hackers and developers, and smarter bug bounty policies to motivate hacker participation. (c) 2018 IEEE."",
    author_keywords = ""interview study; security workers; software testing; software vulnerabilities; usable security; vulnerability discovery"",
    keywords = ""Computer privacy; Personal computing; Interview study; security workers; Software vulnerabilities; Usable security; Vulnerability discovery; Software testing"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    issn = ""10816011"",
    isbn = ""978-153864352-5"",
    language = ""English"",
    abbrev_source_title = ""Proc. IEEE Symp. Secur. Privacy"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 115; Conference name: 39th IEEE Symposium on Security and Privacy, SP 2018; Conference date: 21 May 2018 through 23 May 2018; Conference code: 138182; All Open Access, Bronze Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Hackers vs. testers: A comparison of software vulnerability discovery processes	https://ieeexplore.ieee.org/document/8418614	Institute of Electrical and Electronics Engineers Inc	
335	TrustSE	Agents of responsibility in software vulnerability processes	Modern software is infested with flaws having information security aspects. Pervasive computing has made us and our society vulnerable. However, software developers do not fully comprehend what is at stake when faulty software is produced and flaws causing security vulnerabilites are discovered. To address this problem, the main actors involved with software vulnerability processes and the relevant roles inside these groups are identified. This categorisation is illustrated through a fictional case study, which is scrutinised in the light of ethical codes of professional software engineers and common principles of responsibility attribution. The focus of our analysis is on the acute handling of discovered vulnerabilities in software, including reporting, correcting and disclosing these vulnerabilities. We recognise a need for guidelines and mechanisms to facilitate further improvement in resolving processes leading to and in handling software vulnerabilities. In the spirit of disclosive ethics we call for further studies of the complex issues involved.	Philosophical aspects; Security of data; Software design; Software engineering; Software testing; Ubiquitous computing; Professional ethics; Professional software engineers; Security evaluation; Software developer; Software vulnerabilities; Vulnerabilites; Software agents; Philosophical aspects;  Security of data;  Software design;  Software engineering;  Software testing;  Ubiquitous computing;  Professional ethics;  Professional software engineers;  Security evaluation;  Software developer;  Software vulnerabilities;  Vulnerabilites;  Software agents	Takanen, Ari; Vuorijarvi, Petri; Laakso, Marko; Roning, Juha	Ethics and Information Technology	https://doi.org/10.1007/s10676-004-1266-3	Del Amo Calvo, A.The liability of professional experts like risk managers(2000)Advances in Electronical Government, Pre-proceedings of the Working Conference of the International Federation of Information Processing WG 8.5 and the Center for Computers and Law, pp. 10-11.F. Galindo and G. Quirchmayr, editors, Zaragoza, Spain, February; Arbaugh, W.A., Fithen, W.L., McHugh, J.; Baase, S.(1997)A Gift of Fire: Social Legal and Ethical Issues in Computing.Cited 132 times.Prentice-Hall Inc.; Brey, P.; Collins, W.R., Miller, K.W., Spielman, B.J., Wherry, P.; Gotterbarn, D., Miller, K., Rogerson, S.Computer society and ACM approve software engineering code of ethics(1999)Computer, 32 (10), pp. 84-88.Cited 45 times.; Johnson, T.F.Ethical issues: In whose best interest(1999)Handbook on Ethical Issues in Aging, pp. 17-18.Cited 3 times.T. F. Johnson, editor, Greenwood Press, Westport, Connecticut London; Kaner, C.Software engineering and UCITA(1999)Computer & Information Law, 18 (2).Cited 5 times.; Laakso, M., Takanen, A., Roning, J.The vulnerability process: A tiger team approach to resolving vulnerability cases(1999)Proceedings of the 11th FIRST Conference on Computer Security Incident Handling and Response, pp. 13-18.Cited 14 times.Brisbane, June; Ladd, J.; Leveson, N.G.(1995)Safeware: System Safety and Computers.Cited 1525 times.Addison-Wesley Publishing Company; MOOR, J.H.; Neumann, P.G.(1995)Computer-related Risks.Cited 318 times.ACM Press/ Addison-Wesley Publishing Company; Takanen, A., Laakso, M., Eronen, J., Roning, J.(2000)Running Malicious Code by Exploiting Buffer Overflows: A Survey of Publicly Available Exploits. in Proceedings of the 9th Annual EICAR ConferenceBrussels, Belgium, 4-7 March; Vedder, A.	93 - 110	"""@ARTICLE{Takanen200493,
    author = ""Takanen, Ari and Vuorijarvi, Petri and Laakso, Marko and Roning, Juha"",
    title = ""Agents of responsibility in software vulnerability processes"",
    year = ""2004"",
    journal = ""Ethics and Information Technology"",
    volume = ""6"",
    number = ""2"",
    pages = ""93 - 110"",
    doi = ""10.1007/s10676-004-1266-3"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33947398937\&doi=10.1007\%2fs10676-004-1266-3\&partnerID=40\&md5=9bdf14dfa82887e44c31a400edc8ec2b"",
    affiliations = ""University of Oulu, Finland"",
    abstract = ""Modern software is infested with flaws having information security aspects. Pervasive computing has made us and our society vulnerable. However, software developers do not fully comprehend what is at stake when faulty software is produced and flaws causing security vulnerabilites are discovered. To address this problem, the main actors involved with software vulnerability processes and the relevant roles inside these groups are identified. This categorisation is illustrated through a fictional case study, which is scrutinised in the light of ethical codes of professional software engineers and common principles of responsibility attribution. The focus of our analysis is on the acute handling of discovered vulnerabilities in software, including reporting, correcting and disclosing these vulnerabilities. We recognise a need for guidelines and mechanisms to facilitate further improvement in resolving processes leading to and in handling software vulnerabilities. In the spirit of disclosive ethics we call for further studies of the complex issues involved. (c) 2004 Kluwer Academic Publishers."",
    author_keywords = ""Information security; Professional ethics; Security evaluation; Software development; Software vulnerability; Softwaretesting"",
    keywords = ""Philosophical aspects; Security of data; Software design; Software engineering; Software testing; Ubiquitous computing; Professional ethics; Professional software engineers; Security evaluation; Software developer; Software vulnerabilities; Vulnerabilites; Software agents"",
    publisher = ""Kluwer Academic Publishers"",
    issn = ""13881957"",
    language = ""English"",
    abbrev_source_title = ""Ethics Inf. Technol."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 16""
}
"""	Excluded	Excluded				2	Scopus Signed In		Agents of responsibility in software vulnerability processes	https://www.scopus.com/record/display.uri?eid=2-s2.0-33947398937&origin=resultslist&sort=r-f&src=s&sid=b905e495b18ebff9f31dff221d6d90a6&sot=b&sdt=b&s=TITLE%28agents+of+responsibility+in+software+vulnerability+processes%29&sl=67&sessionSearchId=b905e495b18ebff9f31dff221d6d90a6&relpos=0	Kluwer Academic Publishers	
336	TrustSE	Code forking in open-source software: a requirements perspective	To fork a project is to copy the existing code base and move in a direction different than that of the erstwhile project leadership. Forking provides a rapid way to address new requirements by adapting an existing solution. However, it can also create a plethora of similar tools, and fragment the developer community. Hence, it is not always clear whether forking is the right strategy. In this paper, we describe a mixed-methods exploratory case study that investigated the process of forking a project. The study concerned the forking of an open-source tool for managing software projects, Trac. Trac was forked to address differing requirements in an academic setting. The paper makes two contributions to our understanding of code forking. First, our exploratory study generated several theories about code forking in open source projects, for further research. Second, we investigated one of these theories in depth, via a quantitative study. We conjectured that the features of the OSS forking process would allow new requirements to be addressed. We show that the forking process in this case was successful at fulfilling the new projects requirements.		Neil A. Ernst; Steve Easterbrook; John Mylopoulos	arXiv	https://doi.org/10.48550/arXiv.1004.2889				Excluded	Excluded				2	arXiv		Code forking in open-source software: a requirements perspective	https://arxiv.org/abs/1004.2889	arXiv	nan; Keywords; References; Pages; Year; Bibtex
337	TrustSE	A theory-grounded framework of Open Source Software adoption in SMEs	The increasing popularity and use of Open Source Software (OSS) has led to significant interest from research communities and enterprise practitioners, notably in the small business sector where this type of software offers particular benefits given the financial and human capital constraints faced. However, there has been little focus on developing valid frameworks that enable critical evaluation and common understanding of factors influencing OSS adoption. This paper seeks to address this shortcoming by presenting a theory-grounded framework for exploring these factors and explaining their influence on OSS adoption, with the context of study being small- to medium-sized Information Technology (IT) businesses in the U.K. The framework has implications for this type of business and, we will suggest, more widely as a frame of reference for understanding, and as tool for evaluating benefits and challenges in, OSS adoption. It also offers researchers a structured way of investigating adoption issues and a base from which to develop models of OSS adoption. The study reported in this paper used the Decomposed Theory of Planned Behaviour (DTPB) as a basis for the research propositions, with the aim of: (i) developing a framework of empirical factors that influence OSS adoption; and (ii) appraising it through case study evaluation with 10 U.K. Small- to medium-sized enterprises in the IT sector. The demonstration of the capabilities of the framework suggests that it is able to provide a reliable explanation of the complex and subjective factors that influence attitudes, subjective norms and control over the use of OSS. The paper further argues that the DTPB proved useful in this research area and that it can provide a variety of situation-specific insights related to factors that influence the adoption of OSS. European Journal of Information Systems (2011) 20, 237-250. doi:10.1057/ejis.2010.60; published online I February 2011	Open Source Software (OSS); small- to medium-sized enterprises (SMEs); adoption; innovation; Decomposed Theory of Planned Behaviour; case study evaluation; Open Source Software (OSS);  small- to medium-sized enterprises (SMEs);  adoption;  innovation;  Decomposed Theory of Planned Behaviour;  case study evaluation	Macredie, Robert D.; Mijinyawa, Kabiru	EUROPEAN JOURNAL OF INFORMATION SYSTEMS	https://doi.org/10.1057/ejis.2010.60		237-250	"""@article{WOS:000288361000008,
    Author = ""Macredie, Robert D. and Mijinyawa, Kabiru"",
    Title = ""A theory-grounded framework of Open Source Software adoption in SMEs"",
    Journal = ""EUROPEAN JOURNAL OF INFORMATION SYSTEMS"",
    Year = ""2011"",
    Volume = ""20"",
    Number = ""2"",
    Pages = ""237-250"",
    Month = ""MAR"",
    Abstract = ""The increasing popularity and use of Open Source Software (OSS) has led to significant interest from research communities and enterprise practitioners, notably in the small business sector where this type of software offers particular benefits given the financial and human capital constraints faced. However, there has been little focus on developing valid frameworks that enable critical evaluation and common understanding of factors influencing OSS adoption. This paper seeks to address this shortcoming by presenting a theory-grounded framework for exploring these factors and explaining their influence on OSS adoption, with the context of study being small- to medium-sized Information Technology (IT) businesses in the U.K. The framework has implications for this type of business and, we will suggest, more widely as a frame of reference for understanding, and as tool for evaluating benefits and challenges in, OSS adoption. It also offers researchers a structured way of investigating adoption issues and a base from which to develop models of OSS adoption. The study reported in this paper used the Decomposed Theory of Planned Behaviour (DTPB) as a basis for the research propositions, with the aim of: (i) developing a framework of empirical factors that influence OSS adoption; and (ii) appraising it through case study evaluation with 10 U.K. Small- to medium-sized enterprises in the IT sector. The demonstration of the capabilities of the framework suggests that it is able to provide a reliable explanation of the complex and subjective factors that influence attitudes, subjective norms and control over the use of OSS. The paper further argues that the DTPB proved useful in this research area and that it can provide a variety of situation-specific insights related to factors that influence the adoption of OSS. European Journal of Information Systems (2011) 20, 237-250. doi:10.1057/ejis.2010.60; published online I February 2011"",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Macredie, RD (Corresponding Author), Brunel Univ, Sch Informat Syst Comp \\& Math, Uxbridge UB8 3PH, Middx, England. Macredie, Robert D.; Mijinyawa, Kabiru, Brunel Univ, Sch Informat Syst Comp \\& Math, Uxbridge UB8 3PH, Middx, England."",
    DOI = ""10.1057/ejis.2010.60"",
    ISSN = ""0960-085X"",
    EISSN = ""1476-9344"",
    Keywords = ""Open Source Software (OSS); small- to medium-sized enterprises (SMEs); adoption; innovation; Decomposed Theory of Planned Behaviour; case study evaluation"",
    Keywords-Plus = ""USER ACCEPTANCE; INFORMATION-TECHNOLOGY; INTERNET ADOPTION; PLANNED BEHAVIOR; MODEL; SYSTEMS; USAGE"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""Robert.Macredie@brunel.ac.uk"",
    Affiliations = ""Brunel University"",
    ResearcherID-Numbers = ""Macredie, Robert/F-4928-2013"",
    ORCID-Numbers = ""Macredie, Robert/0000-0001-5066-425X"",
    Number-of-Cited-References = ""60"",
    Times-Cited = ""57"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""60"",
    Journal-ISO = ""Eur. J. Inform. Syst."",
    Doc-Delivery-Number = ""734TK"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000288361000008"",
    OA = ""Green Accepted"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		A theory-grounded framework of Open Source Software adoption in SMEs	https://www.webofscience.com/wos/woscc/full-record/WOS:000288361000008	TAYLOR \& FRANCIS LTD	nan; References
338	TrustSE	From closed to open: Job role changes, individual predispositions, and the adoption of commercial open source software development	When trying to attain the benefits of open source software (OSS), proprietary closed source software (PCSS) firms are struggling to adopt this radically different practice of software development. We approach these adoption challenges as a problem of gaining support for organizational innovation. Through a mixed-method research design consisting of qualitative interviews and a survey of employees of a large telecommunications firm, we find that the organizational innovation to commercially engage in OSS has different impacts on technical and administrative dimensions of different job roles. Accordingly, individuals enacting different job roles are-on average-more or less well aligned with the OSS practice and OSS processes per se. We find that individual-level attributes can counterbalance the job role changes that weaken support for adopting OSS, while perceived organizational commitment has no effect. Suggestions for PCSS firms are presented and implications for innovation literature are discussed.	Open source software; Organizational innovation; Organizational change; Open innovation; R\&D; Open source software;  Organizational innovation;  Organizational change;  Open innovation;  R\&D	Alexy, Oliver; Henkel, Joachim; Wallin, Martin W.	RESEARCH POLICY	https://doi.org/10.1016/j.respol.2013.04.007		1325-1340	"""@article{WOS:000324453300002,
    Author = ""Alexy, Oliver and Henkel, Joachim and Wallin, Martin W."",
    Title = ""From closed to open: Job role changes, individual predispositions, and the adoption of commercial open source software development"",
    Journal = ""RESEARCH POLICY"",
    Year = ""2013"",
    Volume = ""42"",
    Number = ""8"",
    Pages = ""1325-1340"",
    Month = ""SEP"",
    Abstract = ""When trying to attain the benefits of open source software (OSS), proprietary closed source software (PCSS) firms are struggling to adopt this radically different practice of software development. We approach these adoption challenges as a problem of gaining support for organizational innovation. Through a mixed-method research design consisting of qualitative interviews and a survey of employees of a large telecommunications firm, we find that the organizational innovation to commercially engage in OSS has different impacts on technical and administrative dimensions of different job roles. Accordingly, individuals enacting different job roles are-on average-more or less well aligned with the OSS practice and OSS processes per se. We find that individual-level attributes can counterbalance the job role changes that weaken support for adopting OSS, while perceived organizational commitment has no effect. Suggestions for PCSS firms are presented and implications for innovation literature are discussed. (C) 2013 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Alexy, O (Corresponding Author), Tech Univ Munich, TUM Sch Management, Arcisstr 21, D-80333 Munich, Germany. Alexy, Oliver; Henkel, Joachim, Tech Univ Munich, TUM Sch Management, D-80333 Munich, Germany. Henkel, Joachim, CEPR, London, England. Wallin, Martin W., Swiss Fed Inst Technol, Dept Management Technol \\& Econ, CH-8092 Zurich, Switzerland."",
    DOI = ""10.1016/j.respol.2013.04.007"",
    ISSN = ""0048-7333"",
    EISSN = ""1873-7625"",
    Keywords = ""Open source software; Organizational innovation; Organizational change; Open innovation; R\\&D"",
    Keywords-Plus = ""OPEN INNOVATION; ORGANIZATIONAL INNOVATION; MODEL; PERFORMANCE; TECHNOLOGY; FIRM; PARTICIPATION; OPPORTUNITIES; ARCHITECTURE; COMMUNITIES"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Management"",
    Author-Email = ""o.alexy@tum.de henkel@wi.tum.de mwallin@ethz.ch"",
    Affiliations = ""Technical University of Munich; Centre for Economic Policy Research - UK; Swiss Federal Institutes of Technology Domain; ETH Zurich"",
    ResearcherID-Numbers = ""Wallin, Martin/AAD-6175-2020 Alexy, Oliver/E-9819-2010"",
    ORCID-Numbers = ""Henkel, Joachim/0000-0002-6065-0983 Wallin, Martin/0000-0002-5263-1483"",
    Funding-Acknowledgement = ""ESRC {[}ES/G042993/1] Funding Source: UKRI"",
    Number-of-Cited-References = ""80"",
    Times-Cited = ""50"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""108"",
    Journal-ISO = ""Res. Policy"",
    Doc-Delivery-Number = ""218SR"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000324453300002"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		From closed to open: Job role changes, individual predispositions, and the adoption of commercial open source software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000324453300002	ELSEVIER	nan; References
339	TrustSE	Predicting Software Reliability from Testing Taking into Account Other Knowledge about a Program	Inference from statistical testing is the only sound method available for estimating software reliability. However, if one ignores evidence other than testing (e.g., evidence from the track record of a developer, or from the quality of the development process), the results are going to be so conservative that they are often felt to be useless for decision-making. Bayesian inference is the main mathematical tool for taking into account such knowledge. Evidence from sources other than testing is modelled as prior probabilities (for values of the failure rate of the program) and is updated on the basis of test results to produce posterior probabilities. We explain these methods and demonstrate their use on simple examples. The measure of interest is the probability that a program satisfies a given reliability requirement, given that it has passed a certain number of tests. The procedures of Bayesian inference explicitly show the weights of prior assumptions vs. test results in determining this probability. We also demonstrate how one can model different assumptions about the fault- revealing efficacy of testing. We believe that these methods are a powerful aid for improving the quality of decision-making in matters related to software reliability.		Antonia Bertolino; Lorenzo Strigini	Quality Week'96	http://www.staff.city.ac.uk/~sm377/ls.papers/QW96BertolinoStrigini/QW96BertolinoStrigini.pdf		17	"""nan"""	Excluded	Excluded				2	Google Scholar		Predicting software reliability from testing taking into account other knowledge about a program	http://www.staff.city.ac.uk/~sm377/ls.papers/QW96BertolinoStrigini/QW96BertolinoStrigini.pdf		
340	TrustSE	Why do commercial companies contribute to open source software?	Many researchers have pointed out that the open source movement is an interesting phenomenon that is difficult to explain with conventional economic theories. However, while there is no shortage on research on individuals' motivation for contributing to open source, few have investigated the commercial companies' motivations for doing the same. A case study was conducted at three different companies from the IT service industry, to investigate three possible drivers: sale of complimentary services, innovation and opensourcing (outsourcing). We offer three conclusions. First, we identified three main drivers for contributing to open source, which are (a) selling complimentary services, (b) building greater innovative capability and	C (programming language); Cost reduction; Motivation; Open systems; Truck drivers; Commercial; Economic theories; External community; Innovative capability; IT services; Moral obligations; Open source movement; Open sources; Open source software; C (programming language);  Cost reduction;  Motivation;  Open systems;  Truck drivers;  Commercial;  Economic theories;  External community;  Innovative capability;  IT services;  Moral obligations;  Open source movement;  Open sources;  Open source software	Andersen-Gott, Morten; Ghinea, Gheorghita; Bygstad, Bendik	International Journal of Information Management	https://doi.org/10.1016/j.ijinfomgt.2011.10.003		106 - 117	"""@ARTICLE{Andersen-Gott2012106,
    author = ""Andersen-Gott, Morten and Ghinea, Gheorghita and Bygstad, Bendik"",
    title = ""Why do commercial companies contribute to open source software?"",
    year = ""2012"",
    journal = ""International Journal of Information Management"",
    volume = ""32"",
    number = ""2"",
    pages = ""106 - 117"",
    doi = ""10.1016/j.ijinfomgt.2011.10.003"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84857785050\&doi=10.1016\%2fj.ijinfomgt.2011.10.003\&partnerID=40\&md5=38c8951d7c5ad5930dd992d2a975cbad"",
    affiliations = ""Brunel University, Uxbridge, Middlesex, Kingston Lane, United Kingdom; Norwegian School of Information Technology, Norway"",
    abstract = ""Many researchers have pointed out that the open source movement is an interesting phenomenon that is difficult to explain with conventional economic theories. However, while there is no shortage on research on individuals' motivation for contributing to open source, few have investigated the commercial companies' motivations for doing the same. A case study was conducted at three different companies from the IT service industry, to investigate three possible drivers: sale of complimentary services, innovation and opensourcing (outsourcing). We offer three conclusions. First, we identified three main drivers for contributing to open source, which are (a) selling complimentary services, (b) building greater innovative capability and (c) cost reduction through opensourcing to an external community. Second, while previous research has documented that the most important driver is selling complimentary services, we found that this picture is too simple. Our evidence points to a broader set of motivations, in the sense that all our cases exhibit combinations of the three drivers. Finally, our findings suggest that there might be a shift in how commercial companies view open source software. The companies interviewed have all expressed a moral obligation to contribute to open source. (c) 2011 Elsevier Ltd. All rights reserved."",
    author_keywords = ""Commercial; Drivers; Open source software"",
    keywords = ""C (programming language); Cost reduction; Motivation; Open systems; Truck drivers; Commercial; Economic theories; External community; Innovative capability; IT services; Moral obligations; Open source movement; Open sources; Open source software"",
    correspondence_address = ""G. Ghinea; Brunel University, Uxbridge, Middlesex, Kingston Lane, United Kingdom; email: george.ghinea@brunel.ac.uk"",
    publisher = ""Elsevier Ltd"",
    issn = ""02684012"",
    coden = ""IJMAE"",
    language = ""English"",
    abbrev_source_title = ""Int J Inf Manage"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 43; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Why do commercial companies contribute to open source software?	https://www.scopus.com/record/display.uri?eid=2-s2.0-84857785050&origin=resultslist&sort=r-f&src=s&sid=00a113c2238d0ff4fb4932e6af0e5ffa&sot=b&sdt=b&s=TITLE%28why+do+commercial+companies+contribute+to+open+source+software%29&sl=69&sessionSearchId=00a113c2238d0ff4fb4932e6af0e5ffa&relpos=0	Elsevier Ltd	nan; References
341	TrustSE	Learning and best practices for learning in open-source software communities	This research is about participants who use open-source software (OSS) discussion forums for learning. Learning in online communities of education as well as non-education-related online communities has been studied under the lens of social learning theory and situated learning for a long time. In this research, we draw parallels among these two types of communities and explore what can be learned from open-source software communities about online learning. Thematic network analysis was used to code the qualitative data from the open-ended questions in the survey and the interviews. The results indicate that learning in online open-source software communities encompasses much more than just learning about the software being discussed. 283 Open-source forum participants were surveyed, and 21 were interviewed to develop an understanding of the challenges to learning in these communities as well as to identify the practices that promote learning. Identifying these practices helps to understand online learning and enables the integration of best practices into online education.	Computer aided instruction; Online systems; Surveys; Websites; Computer-mediated communication; Cooperative/collaborative learning; Interactive learning environment; Learning community; Teaching/learning strategy; E-learning; Computer aided instruction;  Online systems;  Surveys;  Websites;  Computer-mediated communication;  Cooperative/collaborative learning;  Interactive learning environment;  Learning community;  Teaching/learning strategy;  E-learning	Singh, Vandana; Holt, Lila	Computers and Education	https://doi.org/10.1016/j.compedu.2012.12.002		98 - 108	"""@ARTICLE{Singh201398,
    author = ""Singh, Vandana and Holt, Lila"",
    title = ""Learning and best practices for learning in open-source software communities"",
    year = ""2013"",
    journal = ""Computers and Education"",
    volume = ""63"",
    pages = ""98 - 108"",
    doi = ""10.1016/j.compedu.2012.12.002"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871804005\&doi=10.1016\%2fj.compedu.2012.12.002\&partnerID=40\&md5=de3e78bbc80934a8cca6d11ed3e962f9"",
    affiliations = ""School of Information Sciences, University of Tennessee, Knoxville, 449 Communications Building, Knoxville, TN 37996-0341, 1345 Circle Park Drive, United States; Instructional Technology, 415 Claxton Complex, Knoxville, TN 37996-3400, 1122 Volunteer Boulevard, United States"",
    abstract = ""This research is about participants who use open-source software (OSS) discussion forums for learning. Learning in online communities of education as well as non-education-related online communities has been studied under the lens of social learning theory and situated learning for a long time. In this research, we draw parallels among these two types of communities and explore what can be learned from open-source software communities about online learning. Thematic network analysis was used to code the qualitative data from the open-ended questions in the survey and the interviews. The results indicate that learning in online open-source software communities encompasses much more than just learning about the software being discussed. 283 Open-source forum participants were surveyed, and 21 were interviewed to develop an understanding of the challenges to learning in these communities as well as to identify the practices that promote learning. Identifying these practices helps to understand online learning and enables the integration of best practices into online education. (c) 2012 Elsevier Ltd. All rights reserved."",
    author_keywords = ""Computer-mediated communication; Cooperative/collaborative learning; Interactive learning environments; Learning communities; Teaching/learning strategies"",
    keywords = ""Computer aided instruction; Online systems; Surveys; Websites; Computer-mediated communication; Cooperative/collaborative learning; Interactive learning environment; Learning community; Teaching/learning strategy; E-learning"",
    correspondence_address = ""V. Singh; School of Information Sciences, University of Tennessee, Knoxville, 449 Communications Building, Knoxville, TN 37996-0341, 1345 Circle Park Drive, United States; email: vandana@utk.edu"",
    issn = ""03601315"",
    coden = ""COMED"",
    language = ""English"",
    abbrev_source_title = ""Comput Educ"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 28""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Learning and best practices for learning in open-source software communities	https://www.scopus.com/record/display.uri?eid=2-s2.0-84871804005&origin=resultslist&sort=r-f&src=s&sid=8d02a9fe7094e3bd83576a89053b41d4&sot=b&sdt=b&s=TITLE%28learning+and+best+practices+for+learning+in+open+source+software+communities%29&sl=83&sessionSearchId=8d02a9fe7094e3bd83576a89053b41d4&relpos=0		nan; References; Publisher
342	TrustSE	OSS opportunities in open source software - CRM and OSS standards	In many industry verticals, open source software is proving to be a credible alternative to proprietary software. When compared to proprietary software, open source software can offer a number of benefits such as stronger customer involvement, lower costs and better quality. Despite these benefits, the take-up of open source software by incumbent telecommunications providers has been virtually zero, choosing instead to focus on major proprietary commercial-off-the-shelf (COTS) packages due to prior strategic investments and negative preconceptions about open source software. Although an immediate change in take-up is not expected, the pressure to reduce operational support systems (OSS) costs is steering telecommunications providers to research potential opportunities for using open source software within their OSS. This paper addresses some of those opportunities. The general opportunities are presented using specific examples from current research. Potential short-term opportunities, using readily available open source customer relationship management (CRM) applications, and potential mid-to long-term opportunities, using open source OSS integration software, are analysed and evaluated. The paper concludes with a recommendation on what telecommunications providers should do to further investigate the opportunities presented by open source OSS.		Bruce, G; Robson, P; Spaven, R	BT TECHNOLOGY JOURNAL	https://doi.org/10.1007/s10550-006-0028-9		127-140	"""@article{WOS:000237661100015,
    Author = ""Bruce, G and Robson, P and Spaven, R"",
    Title = ""OSS opportunities in open source software - CRM and OSS standards"",
    Journal = ""BT TECHNOLOGY JOURNAL"",
    Year = ""2006"",
    Volume = ""24"",
    Number = ""1"",
    Pages = ""127-140"",
    Month = ""JAN"",
    Abstract = ""In many industry verticals, open source software is proving to be a credible alternative to proprietary software. When compared to proprietary software, open source software can offer a number of benefits such as stronger customer involvement, lower costs and better quality. Despite these benefits, the take-up of open source software by incumbent telecommunications providers has been virtually zero, choosing instead to focus on major proprietary commercial-off-the-shelf (COTS) packages due to prior strategic investments and negative preconceptions about open source software. Although an immediate change in take-up is not expected, the pressure to reduce operational support systems (OSS) costs is steering telecommunications providers to research potential opportunities for using open source software within their OSS. This paper addresses some of those opportunities. The general opportunities are presented using specific examples from current research. Potential short-term opportunities, using readily available open source customer relationship management (CRM) applications, and potential mid-to long-term opportunities, using open source OSS integration software, are analysed and evaluated. The paper concludes with a recommendation on what telecommunications providers should do to further investigate the opportunities presented by open source OSS."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Bruce, G (Corresponding Author), BT, OSS, BT GCTO Res Dev \\& Exploitat Open Source Software, London, England. BT, OSS, BT GCTO Res Dev \\& Exploitat Open Source Software, London, England. BT, OpenOSS Project, London, England. Univ Southampton, Southampton SO9 5NH, Hants, England."",
    DOI = ""10.1007/s10550-006-0028-9"",
    ISSN = ""1358-3948"",
    Research-Areas = ""Engineering; Telecommunications"",
    Web-of-Science-Categories = ""Engineering, Electrical \\& Electronic; Telecommunications"",
    Affiliations = ""University of Southampton"",
    ResearcherID-Numbers = ""Robson, Paula/Q-3351-2017"",
    Number-of-Cited-References = ""13"",
    Times-Cited = ""11"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""5"",
    Journal-ISO = ""BT Technol. J."",
    Doc-Delivery-Number = ""044GT"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000237661100015"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		OSS opportunities in open source software—CRM and OSS standards	https://doi.org/10.1007/s10550-006-0028-9	SPRINGER	nan; Keywords; References; Link
343	TrustSE	Participant Satisfaction with Open Source Software	Open source software is increasingly seen as a viable alternative to conventional closed- source software. Developer/user satisfaction and involvement are common suggestions for measures of an open source project's success; however, as yet no substantive research has been done on this topic.The purpose of this two-phase, sequential mixed methods research project will be to develop and test theory about factors that influence participant satisfaction with open source software. The central question of the proposed study is: What factors influence participant satisfaction with an open source application software project? The conceptual model for the proposed research will be based on McKeen, Guimaraes, and Wetherbe's (1994) model of factors that influence the relationship between participa- tion in systems development and user satisfaction, modified and extended for an open source context. Previous research into the structure of open source projects has largely focused on identifying activities and roles that relate to code generation, rather than com- munity building or user support. The proposed research is intended to extend the descrip- tion of project participation to include community building and user support activities. Therefore, the first sub-question for the proposed research is: What types of contributions do participants make to open source application projects? In a typical open source project, community members have varying levels of participa- tion, ranging from passive users to core developers. This research also proposes to see if there are differences in satisfaction between users who take on different roles within projects, and the second sub-question is therefore: Do the factors that influence satisfaction with an open source application software project differ for different roles? If they do, in what way? The first qualitative phase of the proposed research will use key informant interviews combined with observation of a purposive sample of projects to gain a better understand- ing of the type and frequency of different types of participation in the projects. This phase will also confirm the preliminary model of overall factors that influence participant satis- ii faction with open source application software projects. The results of this phase will be used to develop a web-based questionnaire to gather quantitative data to test the model and associated propositions/hypotheses as phase 2. The results of this research will have both practical and theoretical implications. They will help developers of open source application software identify opportunities to increase user satisfaction, and they will help users identify ways in which they might contribute to projects. They will also contribute to the growing body of theory about open source soft- ware development and communities, as well as the literature about user satisfaction with information systems.		Brenda Lynne Chawner	Information Systems in the School of Information Management	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=8773b26c0ca957da2d2d9951ff42f29173a17f6a		82	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Participant satisfaction with open source software	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=8773b26c0ca957da2d2d9951ff42f29173a17f6a	Victoria University of Wellington	
344	TrustSE	Maintenance effort estimation for open source software: A systematic literature review	Open Source Software (OSS) is distributed and maintained collaboratively by developers all over the world. However, frequent personnel turnover and lack of organizational management makes it difficult to capture the actual development effort. Various OSS maintenance effort estimation approaches have been developed to provide a way to understand and estimate development effort. The goal of this study is to identify the current state of art of the existing maintenance effort estimation approaches for OSS. We performed a systematic literature review on the relevant studies published in the period between 2000-2015 by both automatic and manual searches from different sources. We derived a set of keywords from the research questions and established selection criteria to carefully choose the papers to evaluate. 29 out of 3,312 papers were selected based on a well designed selection process. Our results show that the commonly used OSS maintenance effort estimation methods are actual effort estimation and maintenance activity time prediction; the most commonly used metrics and factors for actual effort estimation are source code measurements and people related metrics; the most commonly mentioned activity for maintenance activity time prediction is bug fixing. Accuracy measures and cross validation is used for validating the estimation models. Based on the above findings, we identified the issues in evaluation methods for actual maintenance effort estimations and the needs for quantitative OSS maintenance effort inference from size-related metrics. Meanwhile, we highlighted individual contribution and performance measurement as a novel and promising research area.	Computer software; Computer software maintenance; Estimation; Human resource management; Maintenance; Open systems; Software engineering; Evaluation methods; Maintenance activity; Maintenance efforts; Organizational management; Performance measurements; Research questions; Selection criteria; Systematic literature review; Open source software; Computer software;  Computer software maintenance;  Estimation;  Human resource management;  Maintenance;  Open systems;  Software engineering;  Evaluation methods;  Maintenance activity;  Maintenance efforts;  Organizational management;  Performance measurements;  Research questions;  Selection criteria;  Systematic literature review;  Open source software	Wu, Hong; Shi, Lin; Chen, Celia; Wang, Qing; Boehm, Barry	Proceedings - 2016 IEEE International Conference on Software Maintenance and Evolution, ICSME 2016	https://doi.org/10.1109/ICSME.2016.87	"1.""ISO/IEC 14764:2006"", Software engineering - software life cycle processes - maintenance, 2006. Google Scholar; 2.W. Abdelmoez, M. Kholief and F. M. Elsalmy, ""Bug fix-time prediction model using naive bayes classifier"", Computer Theory and Applications (ICCTA) 2012 22nd International Conference on, pp. 167-172, 2012. CrossRef  Google Scholar; 3.S. N. Ahsan, J. Ferzund and F. Wotawa, ""Program file bug fix effort estimation using machine learning methods for oss"", SEKE, pp. 129-134, 2009. Google Scholar; 4.H. Alomari, ""A slicing-based effort estimation approach for open-source software projects"", International Journal of Advance Computational Engineering and Networking (IJACEN), vol. 3, no. 8, pp. 1-7, 2015. Google Scholar; 5.J. J. Amor, G. Robles and J. M. Gonzalez-Barahona, ""Effort estimation by characterizing developer activity"", Proceedings of the 2006 international workshop on Economics driven software engineering research, pp. 3-6, 2006. CrossRef  Google Scholar; 6.P. Anbalagan and M. Vouk, ""On predicting the time taken to correct bug reports in open source projects"", Software Maintenance 2009. ICSM 2009. IEEE International Conference on, pp. 523-526, 2009. View Article  Google Scholar; 7.J. Asundi, ""The need for effort estimation models for open source software projects"" in ACM SIGSOFT Software Engineering Notes, ACM, vol. 30, pp. 1-3, 2005. CrossRef  Google Scholar; 8.D. Badampudi, C. Wohlin and K. Petersen, ""Experiences from using snowballing and database searches in systematic literature studies"", EASE '15: Proceedings of the 19th International Conference on Evaluation and Assessment in Software Engineering, pp. 17:1-17:10, 2015. CrossRef  Google Scholar; 9.B. W. Boehm, R. Madachy, B. Steece et al., Software cost estimation with Cocomo II with Cdrom, Prentice Hall PTR, 2000. Google Scholar; 10.G. Bougie, C. Treude, D. M. German and M.-A. Storey, ""A Comparative Exploration of Freebsd Bug Lifetimes"", Mining Software Repositories (MSR) 2010 7th IEEE Working Conference on, pp. 106-109, 2010. CrossRef  Google Scholar; 11.A. Capiluppi and D. Izquierdo-Cortazar, ""Effort estimation of floss projects: a study of the linux kernel"", Empirical Software Engineering, vol. 18, no. 1, pp. 60-88, 2013. CrossRef  Google Scholar; 12.E. Capra, C. Francalanci and F. Merlo, ""The economics of community open source software projects: an empirical analysis of maintenance effort"", Advances in Software Engineering, vol. 2010, 2010. CrossRef  Google Scholar; 13.N. Duc Anh, D. S. Cruzes, R. Conradi and C. Ayala, ""Empirical Validation of Human Factors in Predicting Issue Lead Time in Open Source Projects"", Proceedings of the 7th International Conference on Predictive Models in Software Engineering, pp. 13, 2011. CrossRef  Google Scholar; 14.E. Giger, M. Pinzger and H. Gall, ""Predicting the fix time of bugs"", Proceedings of the 2nd International Workshop on Recommendation Systems for Software Engineering, pp. 52-56, 2010. CrossRef  Google Scholar; 15.G. Gousios, E. Kalliamvakou and D. Spinellis, ""Measuring developer contribution from software repository data"", Proceedings of the 2008 international working conference on Mining software repositories, pp. 129-132, 2008. CrossRef  Google Scholar; 16.A. Hassouna and L. Tahvildari, ""An effort prediction framework for software defect correction"", Information and Software Technology, vol. 52, no. 2, pp. 197-209, 2010. CrossRef  Google Scholar; 17.M. Jorgensen and M. Shepperd, ""A systematic review of software development cost estimation studies"", Software Engineering IEEE Transactions on, vol. 33, no. 1, pp. 33-53, Jan 2007. View Article  Google Scholar; 18.M. Jorgensen and M. Shepperd, ""A systematic review of software development cost estimation studies"", Software Engineering IEEE Transactions on, vol. 33, no. 1, pp. 33-53, 2007. View Article  Google Scholar; 19.B. Kitchenham and S. Charters, ""Guidelines for performing systematic literature reviews in software engineering"", Technical report Ver. 2.3 EBSE Technical Report, 2007. Google Scholar; 20.S. Koch, ""Effort modeling and programmer participation in open source software projects"", Information Economics and Policy, vol. 20, no. 4, pp. 345-355, 2008. CrossRef  Google Scholar; 21.S. Koch and G. Schneider, ""Effort co-operation and coordination in an open source software project: Gnome"", Information Systems Journal, vol. 12, no. 1, pp. 27-42, 2002. CrossRef  Google Scholar; 22.R. G. Kula, K. Fushida, N. Yoshida and H. Iida, ""Micro process analysis of maintenance effort: an open source software case study using metrics based on program slicing"", Journal of Software: Evolution and Process, vol. 25, no. 9, pp. 935-955, 2013. CrossRef  Google Scholar; 23.R. G. Kula, K. Fushida, N. Yoshida and H. Iida, ""Micro process analysis of maintenance effort: an open source software case study using metrics based on program slicing"", Journal of Software: Evolution and Process, vol. 25, no. 9, pp. 935-955, 2013. CrossRef  Google Scholar; 24.L. Marks, Y. Zou and A. E. Hassan, ""Studying the fix-time for bugs in large open source projects"", Proceedings of the 7th International Conference on Predictive Models in Software Engineering, pp. 11, 2011. CrossRef  Google Scholar; 25.R. Mishra and A. Sureka, ""Mining peer code review system for computing effort and contribution metrics for patch reviewers"", Mining Unstructured Data (MUD) 2014 IEEE 4th Workshop on, pp. 11-15, 2014. View Article  Google Scholar; 26.A. Murgia, G. Concas, R. Tonelli, M. Ortu, S. Demeyer and M. Marchesi, ""On the influence of maintenance activity types on the issue resolution time"", Proceedings of the 10th International Conference on Predictive Models in Software Engineering, pp. 12-21, 2014. CrossRef  Google Scholar; 27.N. K. Nagwani and S. Verma, ""Predictive data mining model for software bug estimation using average weighted similarity"", Advance Computing Conference (IACC) 2010 IEEE 2nd International, pp. 373-378, 2010. CrossRef  Google Scholar; 28.V. Nguyen, Improved size and effort estimation models for software maintenance, 2010. View Article  Google Scholar; 29.M. Ohira, A. E. Hassan, N. Osawa and K. Matsumoto, ""The impact of bug management patterns on bug fixing: A case study of eclipse projects"", Software Maintenance (ICSM) 2012 28th IEEE International Conference on, pp. 264-273, 2012. View Article  Google Scholar; 30.L. D. Panjer, ""Predicting eclipse bug lifetimes"", Proceedings of the Fourth International Workshop on mining software repositories, pp. 29, 2007. View Article  Google Scholar"	32 - 43	"""@CONFERENCE{Wu201732,
    author = ""Wu, Hong and Shi, Lin and Chen, Celia and Wang, Qing and Boehm, Barry"",
    title = ""Maintenance effort estimation for open source software: A systematic literature review"",
    year = ""2017"",
    journal = ""Proceedings - 2016 IEEE International Conference on Software Maintenance and Evolution, ICSME 2016"",
    pages = ""32 - 43"",
    doi = ""10.1109/ICSME.2016.87"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013059756\&doi=10.1109\%2fICSME.2016.87\&partnerID=40\&md5=b00f95aa739c69d49e9fdf27eb43af76"",
    affiliations = ""Laboratory for Internet Software Technologies, Institute of Software, Chinese Academy of Sciences, Beijing, China; University of Chinese Academy of Sciences, Beijing, China; State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, Beijing, China; Center for Systems and Software Engineering, University of Southern California, Los Angeles, United States"",
    abstract = ""Open Source Software (OSS) is distributed and maintained collaboratively by developers all over the world. However, frequent personnel turnover and lack of organizational management makes it difficult to capture the actual development effort. Various OSS maintenance effort estimation approaches have been developed to provide a way to understand and estimate development effort. The goal of this study is to identify the current state of art of the existing maintenance effort estimation approaches for OSS. We performed a systematic literature review on the relevant studies published in the period between 2000-2015 by both automatic and manual searches from different sources. We derived a set of keywords from the research questions and established selection criteria to carefully choose the papers to evaluate. 29 out of 3,312 papers were selected based on a well designed selection process. Our results show that the commonly used OSS maintenance effort estimation methods are actual effort estimation and maintenance activity time prediction; the most commonly used metrics and factors for actual effort estimation are source code measurements and people related metrics; the most commonly mentioned activity for maintenance activity time prediction is bug fixing. Accuracy measures and cross validation is used for validating the estimation models. Based on the above findings, we identified the issues in evaluation methods for actual maintenance effort estimations and the needs for quantitative OSS maintenance effort inference from size-related metrics. Meanwhile, we highlighted individual contribution and performance measurement as a novel and promising research area. (c) 2016 IEEE."",
    keywords = ""Computer software; Computer software maintenance; Estimation; Human resource management; Maintenance; Open systems; Software engineering; Evaluation methods; Maintenance activity; Maintenance efforts; Organizational management; Performance measurements; Research questions; Selection criteria; Systematic literature review; Open source software"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-150903806-0"",
    language = ""English"",
    abbrev_source_title = ""Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 29; Conference name: 32nd IEEE International Conference on Software Maintenance and Evolution, ICSME 2016; Conference date: 2 October 2016 through 10 October 2016; Conference code: 125963""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Maintenance effort estimation for open source software: A systematic literature review	https://ieeexplore.ieee.org/document/7816452	Institute of Electrical and Electronics Engineers Inc	
345	TrustSE	Understanding open source software peer review: Review processes, parameters and statistical models, and underlying behaviours and mechanisms	Peer review is seen as an important quality assurance mechanism in both  industrial development and the open source software (OSS) community. The  techniques for performing inspections have been well studied in industry; in  OSS development, peer review practices are less well understood.  In contrast to industry, where reviews are typically assigned to specific  individuals, in OSS, changes are broadcast to hundreds of potentially  interested stakeholders. What is surprising is that this approach works very  well, despite concerns that reviews may be ignored, or that discussions will  deadlock because too many uninformed stakeholders are involved.    In this work we use a multi-case study methodology to develop a theory of OSS  peer review. There are three research stages. In the first stage, we examine the policies of 25 OSS projects to understand  the review processes used on successful OSS projects. We also select six  projects for further analysis: Apache, Subversion, Linux, FreeBSD, KDE, and  Gnome. In the second stage, using archival records from the six projects, we construct  a series of metrics that produces measures similar to those used in traditional  inspection experiments.  We measure the frequency of review, the size and  complexity of the contribution under review, the level of participation during  review, the experience and expertise of the individuals involved in the review,  the review interval, and number of issues discussed during review.  We create  statistical models of the review efficiency, review interval, and  effectiveness, the issues discussed during review, to determine which measures  have the largest impact on review efficacy. In the third stage, we use grounded theory to analyze 500 instances of peer  review and interview ten core developers across the six projects. This approach  allows us to understand why developers decide to perform reviews, what happens  when reviews are ignored, how developers interact during a review, what happens  when too many stakeholders are involved during review, and the effect of  project size on the review techniques. Our findings provide insights into the  simple, community-wide mechanisms and behaviours that developers use to  effectively manage large quantities of reviews and other development  discussions.    The primary contribution of this work is a theory of OSS peer review. We find  that OSS reviews can be described as (1) early, frequent reviews (2) of small,  independent, complete contributions (3) that, despite being asynchronously  broadcast to a large group of stakeholders, are reviewed by a small group of  self-selected experts (4) resulting in an efficient and effective peer review  technique.	OSS; Peer Review	Rigby, Peter C	Electronic Theses and Dissertations (ETD)	https://dspace.library.uvic.ca/items/85f2c7ee-88e0-4709-a977-03bb0e2447b4			"""nan"""	Excluded	Excluded				2	Google Scholar		Understanding open source software peer review: Review processes, parameters and statistical models, and underlying behaviours and mechanisms	https://dspace.library.uvic.ca/items/85f2c7ee-88e0-4709-a977-03bb0e2447b4	University of Victoria	
346	TrustSE	New Perspectives on Public Goods Production: Policy Implications of Open Source Software	"For a variety of policy reasons, governments throughout the world are now adopting different legislative and administrative strategies that support the development of open source software (OSS). Some governments have actually begun to procure OSS, whereas others have channeled public funds to large-scale OSS projects. This paper summarizes the various legislative and administrative approaches taken by governments to promote OSS, and categorizes these activities into government procurement of OSS and public subsidies for OSS projects. Despite the fact that more and more public sectors have begun to migrate from proprietary software to OSS, this study reveals that governments find it difficult to legislate an explicit preference for open source software. Promoting OSS by administrative efforts, rather than by legislative action or subsidy, appears to be the most common practice among countries that have OSS policies. Moreover, this study finds that, although the ""consideration"" type of OSS legislation is much less controversial than the ""preference"" type of legislation, most of the proposed legislation is of the ""preference"" type. This paper argues that there are numerous factors affecting governmental policies toward OSS. Such factors may be economic, technical, political, or legal. The most fundamental argument of the study is that, in lending its support to OSS, the difference between a government user and a business user is that the government should take into account society's long-term interests, not merely its own interests as a consumer. Although strong network effects do not necessarily imply software market failure, this study holds that other types of market failure may justify government intervention in the software market through support of OSS. OSS is preferable to proprietary software when the goal is to increase compatibility and network effects for consumers. Furthermore, in some developing countries, OSS can serve to bridge the digital divide between the ""tech-haves"" and the ""tech have-nots"" and facilitate domestic software development. Therefore, when two systems have similar suitability, this study argues that government should choose OSS over proprietary software."		Jyh-An Lee	STANFORD PROGRAM IN INTERNATIONAL LEGAL STUDIES	https://law.stanford.edu/wp-content/uploads/2015/03/LeeJyhAn2005.pdf			"""nan"""	Excluded	Excluded				2	Google Scholar		New Perspectives on Public Goods Production: Policy Implications of Open Source Software	https://law.stanford.edu/wp-content/uploads/2015/03/LeeJyhAn2005.pdf	STANFORD UNIVERSITY	
347	TrustSE	A business model for commercial open source software: A systematic literature review	Context: Commercial open source software (COSS) and community open source software (OSS) are two types of open source software. The former is the newer concept with the grounds for research such as business model. However, in the literature of open source software, the revenue model has been studied as a business model, which is one component of the business model. Therefore, there is a need for a more complete review of the COSS business model with all components. Objective: The purpose of this research is to describe and present the COSS business model with all its components. Method: A systematic literature review of the COSS business model was conducted and 1157 studies were retrieved through search in six academic databases. The result of the process of selecting the primary studies was 21 studies. By backward snowballing, we discovered 10 other studies, and thus a total of 31 studies were found. Then, the grounded theory coding procedures were used to determine the characteristics and components of the COSS business model. Results: The COSS business model was presented with value proposition, value creation & delivery, and value capture. This business model includes eight components: COSS products and complementarities, COSS clients and users, COSS competitive strategies, organizational aspects of COSS, position of COSS producers in the value network, resources and capabilities of COSS business, COSS revenue sources, and COSS cost-benefit. Conclusion: This study provides a complete illustration of the COSS business model. Identifies COSS generic competitive strategies. By cost-benefit component, we have considered both tangible and intangible components. This business model is especially effective in developing countries. In future research, it is necessary to review the management of the COSS community, the organization, the new revenue models for disruptive ability of open source software, and the localization of open source software.	Cost benefit analysis; Developing countries; Open systems; Business modeling; Commercial open source software (COSS); Competitive strategy; Grounded theory; Organizational aspects; Resources and capabilities; Systematic literature review; Value proposition; Open source software; Cost benefit analysis;  Developing countries;  Open systems;  Business modeling;  Commercial open source software (COSS);  Competitive strategy;  Grounded theory;  Organizational aspects;  Resources and capabilities;  Systematic literature review;  Value proposition;  Open source software	Shahrivar, Shahrokh; Elahi, Shaban; Hassanzadeh, Alireza; Montazer, Gholamali	Information and Software Technology	https://doi.org/10.1016/j.infsof.2018.06.018		202 - 214	"""@ARTICLE{Shahrivar2018202,
    author = ""Shahrivar, Shahrokh and Elahi, Shaban and Hassanzadeh, Alireza and Montazer, Gholamali"",
    title = ""A business model for commercial open source software: A systematic literature review"",
    year = ""2018"",
    journal = ""Information and Software Technology"",
    volume = ""103"",
    pages = ""202 - 214"",
    doi = ""10.1016/j.infsof.2018.06.018"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050096121\&doi=10.1016\%2fj.infsof.2018.06.018\&partnerID=40\&md5=7c61465cdd8a64273c85de39d2ef570d"",
    affiliations = ""Department of Information Technology Management, School of Management and Economics, Tarbiat Modares University, Tehran, Iran; Department of Information Technology Engineering, Tarbiat Modares University, Tehran, Iran"",
    abstract = ""Context: Commercial open source software (COSS) and community open source software (OSS) are two types of open source software. The former is the newer concept with the grounds for research such as business model. However, in the literature of open source software, the revenue model has been studied as a business model, which is one component of the business model. Therefore, there is a need for a more complete review of the COSS business model with all components. Objective: The purpose of this research is to describe and present the COSS business model with all its components. Method: A systematic literature review of the COSS business model was conducted and 1157 studies were retrieved through search in six academic databases. The result of the process of selecting the primary studies was 21 studies. By backward snowballing, we discovered 10 other studies, and thus a total of 31 studies were found. Then, the grounded theory coding procedures were used to determine the characteristics and components of the COSS business model. Results: The COSS business model was presented with value proposition, value creation \& delivery, and value capture. This business model includes eight components: COSS products and complementarities, COSS clients and users, COSS competitive strategies, organizational aspects of COSS, position of COSS producers in the value network, resources and capabilities of COSS business, COSS revenue sources, and COSS cost-benefit. Conclusion: This study provides a complete illustration of the COSS business model. Identifies COSS generic competitive strategies. By cost-benefit component, we have considered both tangible and intangible components. This business model is especially effective in developing countries. In future research, it is necessary to review the management of the COSS community, the organization, the new revenue models for disruptive ability of open source software, and the localization of open source software. (c) 2018"",
    author_keywords = ""Business model; Commercial open source software (COSS); Systematic literature review"",
    keywords = ""Cost benefit analysis; Developing countries; Open systems; Business modeling; Commercial open source software (COSS); Competitive strategy; Grounded theory; Organizational aspects; Resources and capabilities; Systematic literature review; Value proposition; Open source software"",
    correspondence_address = ""S. Elahi; Department of Information Technology Management, School of Management and Economics, Tarbiat Modares University, Tehran, Iran; email: elahi@modares.ac.ir"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 22""
}
"""	Excluded	Excluded				2	Scopus Signed In		A business model for commercial open source software: A systematic literature review	https://www.scopus.com/record/display.uri?eid=2-s2.0-85050096121&origin=resultslist&sort=r-f&src=s&sid=ae12f227abf600d807ee3ce0e0469425&sot=b&sdt=b&s=TITLE%28a+business+model+for+commercial+open+source+software+a+systematic+literature+review%29&sl=90&sessionSearchId=ae12f227abf600d807ee3ce0e0469425&relpos=0	Elsevier B.V	nan; References
348	TrustSE	Design and evaluation of a process for identifying architecture patterns in open source software	"Architecture patterns have a direct effect (positive or negative) on a system's quality attributes (e.g., performance). Therefore, information about patterns used in a product can provide valuable insights to, e.g., component integrators who wish to evaluate a software product. Unfortunately, this information is often not readily available, in particular for Open Source Software (OSS) products, which are increasingly used in component-based development. This paper presents the design and evaluation of a process for Identifying Architecture Patterns in OSS (""IDAPO""). The results of the evaluation suggest that IDAPO is helpful to identify potentially present patterns, and that a process framework may provide better opportunities for tailoring to the users' needs."	Computer software; Open systems; Architecture patterns; Empirical evaluations; Open Source Software; quality attributes; quasi-experiment; Software architecture; Computer software;  Open systems;  Architecture patterns;  Empirical evaluations;  Open Source Software;  quality attributes;  quasi-experiment;  Software architecture	Stol, Klaas-Jan; Avgeriou, Paris; Ali Babar, Muhammad	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/978-3-642-23798-0_15		147 - 163	"""@ARTICLE{Stol2011147,
    author = ""Stol, Klaas-Jan and Avgeriou, Paris and Ali Babar, Muhammad"",
    title = ""Design and evaluation of a process for identifying architecture patterns in open source software"",
    year = ""2011"",
    journal = ""Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)"",
    volume = ""6903 LNCS"",
    pages = ""147 - 163"",
    doi = ""10.1007/978-3-642-23798-0\_15"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-80053218138\&doi=10.1007\%2f978-3-642-23798-0\_15\&partnerID=40\&md5=53ca1c49d546891cc5276feef324e028"",
    affiliations = ""Lero - The Irish Software Engineering Research Centre, University of Limerick, Ireland; University of Groningen, Netherlands; IT University of Copenhagen, Denmark"",
    abstract = {Architecture patterns have a direct effect (positive or negative) on a system's quality attributes (e.g., performance). Therefore, information about patterns used in a product can provide valuable insights to, e.g., component integrators who wish to evaluate a software product. Unfortunately, this information is often not readily available, in particular for Open Source Software (OSS) products, which are increasingly used in component-based development. This paper presents the design and evaluation of a process for Identifying Architecture Patterns in OSS (""IDAPO""). The results of the evaluation suggest that IDAPO is helpful to identify potentially present patterns, and that a process framework may provide better opportunities for tailoring to the users' needs. (c) 2011 Springer-Verlag.},
    author_keywords = ""architecture patterns; empirical evaluation; open source software; quality attributes; quasi-experiment"",
    keywords = ""Computer software; Open systems; Architecture patterns; Empirical evaluations; Open Source Software; quality attributes; quasi-experiment; Software architecture"",
    correspondence_address = ""K.-J. Stol; Lero - The Irish Software Engineering Research Centre, University of Limerick, Ireland; email: klaas-jan.stol@lero.ie"",
    issn = ""16113349"",
    isbn = ""978-364223797-3"",
    language = ""English"",
    abbrev_source_title = ""Lect. Notes Comput. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 5; Conference name: 5th European Conference on Software Architecture, ECSA 2011; Conference date: 13 September 2011 through 16 September 2011; Conference code: 86587""
}
"""	Excluded	Excluded				2	Scopus Signed In		Design and evaluation of a process for identifying architecture patterns in open source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-80053218138&origin=resultslist&sort=r-f&src=s&sid=f6b4a258c98758e3838de499bd0160fb&sot=b&sdt=b&s=TITLE%28design+and+evaluation+of+a+process+for+identifying+architecture+patterns+in+open+source+software%29&sl=103&sessionSearchId=f6b4a258c98758e3838de499bd0160fb&relpos=0		nan; References; Publisher
349	TrustSE	Transactive memory system, communication quality, and knowledge sharing in distributed teams: An empirical examination in open source software project teams	This study develops a research model explaining knowledge sharing among open source software (OSS) developers based on the theories of transactive memory system (TMS) and compensatory adaptation. Specifically, this study proposes that the TMS should be positively associated with knowledge sharing and the quality of communication among OSS developers. The quality of communication is positively associated with knowledge sharing. Furthermore, this study suggests that communication quality partially mediate the positive relationship between TMS and knowledge sharing. By collecting data from 120 OSS project teams, this study empirically confirms all the hypotheses.	Information systems; Information use; Knowledge management; Open Data; Open systems; Software quality; Communication quality; Compensatory adaptation; Distributed teams; Empirical examination; Knowledge-sharing; Open source software projects; Quality of communication; Transactive memory systems; Open source software; Information systems;  Information use;  Knowledge management;  Open Data;  Open systems;  Software quality;  Communication quality;  Compensatory adaptation;  Distributed teams;  Empirical examination;  Knowledge-sharing;  Open source software projects;  Quality of communication;  Transactive memory systems;  Open source software	Chen, Xiaogang	"35th International Conference on Information Systems ""Building a Better World Through Information Systems"", ICIS 2014"	https://www.scopus.com/record/display.uri?eid=2-s2.0-85107714512&origin=resultslist&sort=r-f&src=s&sid=0370856dcb4ad0d9cfd961bf40fbf1ab&sot=b&sdt=b&s=TITLE%28transactive+memory+system+communication+quality+and+knowledge+sharing+in+distributed+teams+an+empirical+examination+in+open+source+software+project+teams%29&sl=160&sessionSearchId=0370856dcb4ad0d9cfd961bf40fbf1ab&relpos=0			"""@BOOK{Chen2014,
    author = ""Chen, Xiaogang"",
    title = ""Transactive memory system, communication quality, and knowledge sharing in distributed teams: An empirical examination in open source software project teams"",
    year = ""2014"",
    journal = {35th International Conference on Information Systems ""Building a Better World Through Information Systems"", ICIS 2014},
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107714512\&partnerID=40\&md5=70d39dbe57f8e56f789f0af2196c8446"",
    affiliations = ""Southwestern University of Finance and Economics, China, No. 555, LiuTai Ave., Wenjiang District, Chengdu, 611130, China"",
    abstract = ""This study develops a research model explaining knowledge sharing among open source software (OSS) developers based on the theories of transactive memory system (TMS) and compensatory adaptation. Specifically, this study proposes that the TMS should be positively associated with knowledge sharing and the quality of communication among OSS developers. The quality of communication is positively associated with knowledge sharing. Furthermore, this study suggests that communication quality partially mediate the positive relationship between TMS and knowledge sharing. By collecting data from 120 OSS project teams, this study empirically confirms all the hypotheses."",
    author_keywords = ""Communication quality; Knowledge sharing; Open source software; Transactive memory system"",
    keywords = ""Information systems; Information use; Knowledge management; Open Data; Open systems; Software quality; Communication quality; Compensatory adaptation; Distributed teams; Empirical examination; Knowledge-sharing; Open source software projects; Quality of communication; Transactive memory systems; Open source software"",
    correspondence_address = ""X. Chen; Southwestern University of Finance and Economics, China, Wenjiang District, Chengdu, No. 555, LiuTai Ave., 611130, China; email: chenxg@swufe.edu.cn"",
    publisher = ""Association for Information Systems"",
    isbn = ""978-163439694-3"",
    language = ""English"",
    abbrev_source_title = ""Int. Conf. Inf. Syst."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 2; Conference name: 35th International Conference on Information Systems: Building a Better World Through Information Systems, ICIS 2014; Conference date: 14 December 2014 through 17 December 2014; Conference code: 110383""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Transactive memory system, communication quality, and knowledge sharing in distributed teams: An empirical examination in open source software project teams	https://www.scopus.com/record/display.uri?eid=2-s2.0-85107714512&origin=resultslist&sort=r-f&src=s&sid=0370856dcb4ad0d9cfd961bf40fbf1ab&sot=b&sdt=b&s=TITLE%28transactive+memory+system+communication+quality+and+knowledge+sharing+in+distributed+teams+an+empirical+examination+in+open+source+software+project+teams%29&sl=160&sessionSearchId=0370856dcb4ad0d9cfd961bf40fbf1ab&relpos=0	Association for Information Systems	nan; References; Pages
350	TrustSE	STRAM: Measuring the Trustworthiness of Computer-Based Systems	Various system metrics have been proposed for measuring the quality of computer-based systems, such as dependability and security metrics for estimating their performance and security characteristics. As computer-based systems grow in complexity with many subsystems or components, measuring their quality in multiple dimensions is a challenging task. In this work, we tackle the problem of measuring the quality of computer-based systems based on the four key attributes of trustworthiness we developed: security, trust, resilience, and agility. In addition to conducting a systematic survey on metrics, measurements, attributes of metrics, and associated ontologies, we propose a system-level trustworthiness metric framework that accommodates four submetrics, called STRAM (<u>S</u>ecurity, <u>T</u>rust, <u>R</u>esilience, and <u>A</u>gility <u>M</u>etrics). The proposed STRAM framework offers a hierarchical ontology structure where each submetric is defined as a sub-ontology. Moreover, this work proposes developing and incorporating metrics describing key assessment tools, including vulnerability assessment, risk assessment, and red teaming, to provide additional evidence in the measurement and quality of trustworthy systems. We further discuss how assessment tools are related to measuring the quality of computer-based systems and the limitations of the state-of-the-art metrics and measurements. Finally, we suggest future research directions for system-level metrics research toward measuring fundamental attributes of the quality of computer-based systems and improving the current metric and measurement methodologies.	trustworthiness;  trust;  security;  resilience;  metric;  agility;  Measurement; trustworthiness, trust, security, resilience, metric, agility, Measurement	Cho, Jin-Hee; Xu, Shouhuai; Hurley, Patrick M.; Mackay, Matthew; Benjamin, Trevor; Beaumont, Mark	ACM Comput. Surv.	https://doi.org/10.1145/3277666			"""@article{10.1145/3277666,
    author = ""Cho, Jin-Hee and Xu, Shouhuai and Hurley, Patrick M. and Mackay, Matthew and Benjamin, Trevor and Beaumont, Mark"",
    title = ""STRAM: Measuring the Trustworthiness of Computer-Based Systems"",
    year = ""2019"",
    issue_date = ""November 2019"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""51"",
    number = ""6"",
    issn = ""0360-0300"",
    url = ""https://doi.org/10.1145/3277666"",
    doi = ""10.1145/3277666"",
    abstract = ""Various system metrics have been proposed for measuring the quality of computer-based systems, such as dependability and security metrics for estimating their performance and security characteristics. As computer-based systems grow in complexity with many subsystems or components, measuring their quality in multiple dimensions is a challenging task. In this work, we tackle the problem of measuring the quality of computer-based systems based on the four key attributes of trustworthiness we developed: security, trust, resilience, and agility. In addition to conducting a systematic survey on metrics, measurements, attributes of metrics, and associated ontologies, we propose a system-level trustworthiness metric framework that accommodates four submetrics, called STRAM (<u>S</u>ecurity, <u>T</u>rust, <u>R</u>esilience, and <u>A</u>gility <u>M</u>etrics). The proposed STRAM framework offers a hierarchical ontology structure where each submetric is defined as a sub-ontology. Moreover, this work proposes developing and incorporating metrics describing key assessment tools, including vulnerability assessment, risk assessment, and red teaming, to provide additional evidence in the measurement and quality of trustworthy systems. We further discuss how assessment tools are related to measuring the quality of computer-based systems and the limitations of the state-of-the-art metrics and measurements. Finally, we suggest future research directions for system-level metrics research toward measuring fundamental attributes of the quality of computer-based systems and improving the current metric and measurement methodologies."",
    journal = ""ACM Comput. Surv."",
    month = ""February"",
    articleno = ""128"",
    numpages = ""47"",
    keywords = ""trustworthiness, trust, security, resilience, metric, agility, Measurement""
}
"""	Included	Included				2	ACM		Stram: Measuring the trustworthiness of computer-based systems	https://doi.org/10.1145/3277666	Association for Computing Machinery	nan; References; Pages; Link
351	TrustSE	Raising the general public's awareness and adoption of open source software through social Q\&A interactions	Purpose - The purpose of this paper is to examine the general public's information needs concerning open source software (OSS) and OSS answerers' motivations for sharing their knowledge of OSS in social Q\&A. Design/methodology/approach - Two studies were carried out. In Study 1, a content analysis classifying OSS-related questions posted during December 2005-December 2012 in Yahoo! Answers was employed to investigate the general public's information needs regarding OSS. In Study 2, an online survey was conducted with OSS answerers in Yahoo! Answers in order to examine what motivates them to share and continue to share their knowledge of OSS in social Q\&A. In total, 1,463 invitations were sent out via Yahoo! Answers' internal e-mail function to those who provided answers to OSS-related questions during September 2009-September 2012. In total, 150 usable surveys were returned and used for data analysis. Findings - The findings from Study 1 indicate that the general public is most interested in finding out if there is OSS that meets their software need in a certain category (51.4 percent). Other popular question categories include the general description of OSS (15.6 percent), technical issues that they have with OSS (9.8 percent), and the advantages/disadvantages of using OSS (7.0 percent). Results on OSS answerers' motivations from Study 2 support that all seven motivations identified (i.e. altruism, enjoyment, ideology, learning, reputation, reciprocity, and self-efficacy) are important, with the smallest mean value being 4.42 out of seven (i.e. reciprocity). However, only altruism, ideology, self-efficacy, and enjoyment were found to significantly influence contribution continuance intention. Practical implications - With social Q\&A growing in popularity, OSS communities that look for ways to draw in more users from the general public are recommended to increase their presence in social Q\&A. The findings with regard to OSS answerers' motivations can also help OSS community leaders attract and guide more members who are interested in sharing their OSS knowledge in social Q\&A. Originality/value - By classifying OSS-related questions that are publicly available in Yahoo! Answers, this study offers a breakdown of the general public's information needs regarding OSS. In addition, results on OSS answerers' motivations suggest that in order to sustain their member contributions in social Q\&A, OSS community leaders should pay more attention to nurturing the motivations that are intrinsic (i.e. altruism, self-efficacy, enjoyment) and integrated (i.e. ideology).	Open source software; Motivations; Open content; Social Q\&A; Open source software;  Motivations;  Open content;  Social Q\&A	Choi, Namjoo; Yi, Kwan	ONLINE INFORMATION REVIEW	https://doi.org/10.1108/OIR-06-2014-0139		119-139	"""@article{WOS:000350588600008,
    Author = ""Choi, Namjoo and Yi, Kwan"",
    Title = ""Raising the general public's awareness and adoption of open source software through social Q\\&A interactions"",
    Journal = ""ONLINE INFORMATION REVIEW"",
    Year = ""2015"",
    Volume = ""39"",
    Number = ""1"",
    Pages = ""119-139"",
    Abstract = ""Purpose - The purpose of this paper is to examine the general public's information needs concerning open source software (OSS) and OSS answerers' motivations for sharing their knowledge of OSS in social Q\\&A. Design/methodology/approach - Two studies were carried out. In Study 1, a content analysis classifying OSS-related questions posted during December 2005-December 2012 in Yahoo! Answers was employed to investigate the general public's information needs regarding OSS. In Study 2, an online survey was conducted with OSS answerers in Yahoo! Answers in order to examine what motivates them to share and continue to share their knowledge of OSS in social Q\\&A. In total, 1,463 invitations were sent out via Yahoo! Answers' internal e-mail function to those who provided answers to OSS-related questions during September 2009-September 2012. In total, 150 usable surveys were returned and used for data analysis. Findings - The findings from Study 1 indicate that the general public is most interested in finding out if there is OSS that meets their software need in a certain category (51.4 percent). Other popular question categories include the general description of OSS (15.6 percent), technical issues that they have with OSS (9.8 percent), and the advantages/disadvantages of using OSS (7.0 percent). Results on OSS answerers' motivations from Study 2 support that all seven motivations identified (i.e. altruism, enjoyment, ideology, learning, reputation, reciprocity, and self-efficacy) are important, with the smallest mean value being 4.42 out of seven (i.e. reciprocity). However, only altruism, ideology, self-efficacy, and enjoyment were found to significantly influence contribution continuance intention. Practical implications - With social Q\\&A growing in popularity, OSS communities that look for ways to draw in more users from the general public are recommended to increase their presence in social Q\\&A. The findings with regard to OSS answerers' motivations can also help OSS community leaders attract and guide more members who are interested in sharing their OSS knowledge in social Q\\&A. Originality/value - By classifying OSS-related questions that are publicly available in Yahoo! Answers, this study offers a breakdown of the general public's information needs regarding OSS. In addition, results on OSS answerers' motivations suggest that in order to sustain their member contributions in social Q\\&A, OSS community leaders should pay more attention to nurturing the motivations that are intrinsic (i.e. altruism, self-efficacy, enjoyment) and integrated (i.e. ideology)."",
    Publisher = ""EMERALD GROUP PUBLISHING LTD"",
    Address = ""HOWARD HOUSE, WAGON LANE, BINGLEY BD16 1WA, W YORKSHIRE, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Choi, N (Corresponding Author), Univ Kentucky, Sch Lib \\& Informat Sci, Lexington, KY 40506 USA. Choi, Namjoo, Univ Kentucky, Sch Lib \\& Informat Sci, Lexington, KY 40506 USA. Yi, Kwan, Eastern Kentucky Univ, Dept Curriculum \\& Instruct, Richmond, KY 40475 USA."",
    DOI = ""10.1108/OIR-06-2014-0139"",
    ISSN = ""1468-4527"",
    EISSN = ""1468-4535"",
    Keywords = ""Open source software; Motivations; Open content; Social Q\\&A"",
    Keywords-Plus = ""CONCEPTUAL-FRAMEWORK; MOTIVATIONS; KNOWLEDGE; COMMUNITIES; INFORMATION; DEVELOPERS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science"",
    Author-Email = ""namjoo.choi@uky.edu"",
    Affiliations = ""University of Kentucky; Eastern Kentucky University"",
    ResearcherID-Numbers = ""Yi, Kwan/H-7902-2012"",
    Number-of-Cited-References = ""65"",
    Times-Cited = ""10"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""44"",
    Journal-ISO = ""Online Inf. Rev."",
    Doc-Delivery-Number = ""CC7ZX"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000350588600008"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Raising the general public's awareness and adoption of open source software through social Q&A interactions	https://www.webofscience.com/wos/woscc/full-record/WOS:000350588600008	EMERALD GROUP PUBLISHING LTD	nan; References
352	TrustSE	How to break an API: cost negotiation and community values in three software ecosystems	Change introduces conflict into software ecosystems: breaking changes may ripple through the ecosystem and trigger rework for users of a package, but often developers can invest additional effort or accept opportunity costs to alleviate or delay downstream costs. We performed a multiple case study of three software ecosystems with different tooling and philosophies toward change, Eclipse, R/CRAN, and Node.js/npm, to understand how developers make decisions about change and change-related costs and what practices, tooling, and policies are used. We found that all three ecosystems differ substantially in their practices and expectations toward change and that those differences can be explained largely by different community values in each ecosystem. Our results illustrate that there is a large design space in how to build an ecosystem, its policies and its supporting infrastructure; and there is value in making community values and accepted tradeoffs explicit and transparent in order to resolve conflicts and negotiate change-related costs.	semantic versioning;  Software ecosystems;  Qualitative research;  Dependency management;  Collaboration; semantic versioning, Software ecosystems, Qualitative research, Dependency management, Collaboration	"Bogart, Christopher; K\""{a}stner, Christian; Herbsleb, James; Thung, Ferdian"	FSE 2016: Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering	https://doi.org/10.1145/2950290.2950325		109-120	"""@inproceedings{10.1145/2950290.2950325,
    author = {Bogart, Christopher and K\""{a}stner, Christian and Herbsleb, James and Thung, Ferdian},
    title = ""How to break an API: cost negotiation and community values in three software ecosystems"",
    year = ""2016"",
    isbn = ""9781450342186"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2950290.2950325"",
    doi = ""10.1145/2950290.2950325"",
    abstract = ""Change introduces conflict into software ecosystems: breaking changes may ripple through the ecosystem and trigger rework for users of a package, but often developers can invest additional effort or accept opportunity costs to alleviate or delay downstream costs. We performed a multiple case study of three software ecosystems with different tooling and philosophies toward change, Eclipse, R/CRAN, and Node.js/npm, to understand how developers make decisions about change and change-related costs and what practices, tooling, and policies are used. We found that all three ecosystems differ substantially in their practices and expectations toward change and that those differences can be explained largely by different community values in each ecosystem. Our results illustrate that there is a large design space in how to build an ecosystem, its policies and its supporting infrastructure; and there is value in making community values and accepted tradeoffs explicit and transparent in order to resolve conflicts and negotiate change-related costs."",
    booktitle = ""Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering"",
    pages = ""109-120"",
    numpages = ""12"",
    keywords = ""semantic versioning, Software ecosystems, Qualitative research, Dependency management, Collaboration"",
    location = ""Seattle, WA, USA"",
    series = ""FSE 2016""
}
"""	Included	Included				2	ACM		How to break an API: cost negotiation and community values in three software ecosystems	https://doi.org/10.1145/2950290.2950325	Association for Computing Machinery	nan; References; Link
353	TrustSE	Overview of Root Causes of Software Vulnerabilities - Technical and User-Side Perspectives	Software security is equally a shared responsibility of technical experts and clients who deploys the system. When a software receives security assurance upon its product release, security validation of the software is assured. Security compromise may take place by luring authenticate users to exploit the vulnerabilities persists in the system.Vulnerabilities emerging from user side also plays a significant role in determining security assurance of the system. Depending upon the level of software attack surface, potential vulnerability can be injected into the system. Therefore the root causes of software vulnerabilities cannot merely contributed to the technical aspects of mitigation techniques. These increased level of requirements took security experts to a spectrum where users' improper or insecure practices should also be counted while securing a software system. In this paper, I explain about various factors that includes technical and social perspectives that should be taken into consideration with a proper balance to secure a software system. Based on thorough literature review, an in-depth explanation on various information system vulnerabilities and recommended techniques to reduce the attack surfaces of those vulnerabilities are also provided.	Information systems; Encoding; Computer hacking; Computer bugs; Software systems; Security Vulnerabilities; Information System; System Software; Cybersecurity; Shared Responsibility; Vulnerability Of Systems; Security Experts; Attack Surface; Development Process; Software Development; Agentic; Processing Software; Tsunami; Computer Code; Security Policy; Information Security; Security Protocols; Beginning Of Cycle; Security Requirements; Causes Of Vulnerability; Impersonation Attack; Security Awareness; Poor Design; Phishing; Password Strength; Security Attacks; Network Vulnerability; Natural Disasters; Security; Vulnerability; Hacking	Priya Anand	2016 International Conference on Software Security and Assurance (ICSSA)	https://doi.org/10.1109/ICSSA.2016.20	"1.M. Mannan and P. C. van Oorschot, ""Security and usability: the gap in real-world online banking"", Proceedings of the 2007 Workshop on New Security Paradigms, 2008. CrossRef  Google Scholar; 2.W. Arbaugh, W. Fithen and J. McHugh, ""Windows of vulnerability: A case study analysis"", Computer, vol. 33, no. 12, pp. 52-59, 2000. View Article  Google Scholar; 3.M. Whitman and H. Mattord, Principles of information security, 2011. Google Scholar; 4.D. Ashenden, ""Information Security management: A human challenge?"", Information Security Technical Report, vol. 13, no. 4, pp. 195201, Nov. 2008. CrossRef  Google Scholar; 5.B. Arief and D. Besnard, ""Technical and human issues in computer-based systems security"", Technical Report Series-University of Newcastle upon Tyne Computing Science, vol. 790, pp. 117, March 2003. Google Scholar; 6.P. O. Okenyi and T. J. Owens, ""On the Anatomy of Human Hacking"", Information Systems Security, vol. 16, no. 6, pp. 302314, Dec. 2007. CrossRef  Google Scholar; 7.K.-S. Hong, Y.-P. Chi, L. R. Chao and J.-H. Tang, ""An integrated system theory of information security management"", Information Management &Computer Security, vol. 11, no. 5, pp. 243248, 2003. CrossRef  Google Scholar; 8.G. McGraw, Software security: building security in, Addison-Wesley Professional, 2006. CrossRef  Google Scholar; 9.G. McGraw, ""Software security"", Security & Privacy IEEE, vol. 2, no. 2, pp. 80-83, 2004. View Article  Google Scholar; 10.B. Potter and G. McGraw, ""Software security testing"", Security & Privacy IEEE, pp. 8185, 2004. View Article  Google Scholar; 11.J.-E. J. Tevis and J. a. Hamilton, ""Methods for the prevention detection and removal of software security vulnerabilities"", Proceedings of the 42nd annual Southeast regional conference - ACM - SE 42, pp. 197, 2004. CrossRef  Google Scholar; 12.B. Martin, M. Brown, A. Paller, D. Kirby and S. Christey, ""CWE/SANS top 25 most dangerous software errors"", Common Weakness Enumeration, pp. 7515, 2011. Google Scholar; 13.T. Scholte, D. Balzarotti and E. Kirda, ""Have things changed now? An empirical study on input validation vulnerabilities in web applications"", Computer Secuity, vol. 31, no. 3, pp. 344356, May 2012. CrossRef  Google Scholar; 14.L. K. Shar and H. B. K. Tan, ""Automated removal of cross site scripting vulnerabilities in web applications"", Information and Software Technology, vol. 54, no. 5, pp. 467478, May 2012. Google Scholar; 15.Z. Li, L. Tan, X. Wang, S. Lu, Y. Zhou and C. Zhai, ""Have things changed now?: an empirical study of bug characteristics in modern open source software"", Proceedings of the 1st workshop on Architecturaland system support for improving software dependability, 2006. CrossRef  Google Scholar; 16.R. Ritchey and P. Ammann, ""Using model checking to analyze network vulnerabilities"", Security and Privacy 2000. SP 2000. Proceedings. 2000 IEEE Symposium on, 2000. CrossRef  Google Scholar; 17.J. Long, No tech hacking: A guide to social engineering dumpster diving and shoulder surfing, Syngress, 2011. Google Scholar; 18.M. Wu, R. C. Miller and S. L. Garfinkel, ""Do security toolbars actually prevent phishing attacks?"", Proceedings of the SIGCHI conference on Human Factors in computing systems, 2006. CrossRef  Google Scholar; 19.T. Jordan and P. Taylor, ""A sociology of hackers"", The Sociological Review, vol. 46, no. 4, pp. 757780, Nov. 1998. CrossRef  Google Scholar; 20.Dan DaCosta et al., ""Characterizing the 'security vulnerability likelihood' of software functions"", Software Maintenance 2003. ICSM 2003. Proceedings. International Conference on, 2003. CrossRef  Google Scholar; 21.Paul Clements et al., Documenting software architectures: views and beyond, Pearson Education, 2002. Google Scholar; 22.Premkumar T. Devanbu and Stuart Stubblebine, ""Software engineering for security: a roadmap"", Proceedings of the Conference on the Future of Software Engineering, 2000. CrossRef  Google Scholar; 23.Eduardo B. Fernandez, ""A Methodology for Secure Software Design"", Software Engineering Researchand Practice, 2004. Google Scholar; 24.Lioupras Ioannis and Eleni Manthou, ""Dont let my Heart bleed!: An event study methodology in Heartbleed vulnerability case"", 2014. Google Scholar"			Excluded	Excluded				2	IEEE		Overview of root causes of software vulnerabilities-technical and user-side perspectives	https://ieeexplore.ieee.org/document/7861655	IEEE	nan; Pages; Year; Bibtex
354	TrustSE	Open source and accessibility: advantages and limitations	In this paper we discuss the open source process as it relates to accessibility software. Open source is a development model that has shown considerable benefits in a number of application areas. However the nature of accessibility tools and the intended users of such software products raise issues that must be addressed by the developer before users encounter the tools in real world contexts. In this paper we discuss the nature of the open source process, how it functions, and the motivations with regards to participation that developers self-report. We then explain the impact of these elements of the open source process as they relate to adaptive accessibility software. We use some specific examples of issues raised from the adoption of open source via a discussion of the ACCESS Framework, an accessibility engine designed to provide cross-platform accessibility support through plug-ins.	Open source; Human factors; Accessibility; Usability; Inclusivity; Gamification	Michael Heron; Vicki L Hanson; Ian Ricketts	Journal of Interaction Science	https://doi.org/10.1186/2194-0827-1-2	citation_title=5-WOSSE: proceedings of the fifth workshop on open source software engineering; citation_inbook_title=A case study of open source tools and practices in a commercial setting; citation_publication_date=2005; citation_pages=1-6; citation_id=CR1; citation_author=VK Gurbani; citation_author=A Garvert; citation_author=JD Herbsleb; citation_publisher=ACM; citation_title=ICEGOV '08: proceedings of the 2nd international conference on theory and practice of electronic governance; citation_inbook_title=Building a balanced scorecard for open source policy and strategy: a case study of the Microsoft experience; citation_publication_date=2008; citation_pages=226-231; citation_id=CR2; citation_author=B Kirschner; citation_publisher=ACM; citation_journal_title=SIGCAS Comput. Soc; citation_title=Free software and the political philosophy of the cyborg world; citation_author=S Chopra, S Dexter; citation_volume=37; citation_issue=2; citation_publication_date=2007; citation_pages=41-52; citation_doi=10.1145/1327325.1327328; citation_id=CR3; citation_title=Proceedings of the 2008 ACM conference on Computer supported cooperative work, CSCW '08; citation_inbook_title=The confusion of crowds: non-dyadic help interactions; citation_publication_date=2008; citation_pages=699-702; citation_id=CR4; citation_author=V Singh; citation_author=MB Twidale; citation_publisher=ACM; citation_journal_title=Journal of Systems and Software; citation_title=Understanding knowledge sharing activities in free/open source software projects: an empirical study; citation_author=S Sowe, I Stamelos, L Angelis; citation_volume=81; citation_issue=3; citation_publication_date=2008; citation_pages=431-446; citation_doi=10.1016/j.jss.2007.03.086; citation_id=CR5; citation_title=The cathedral & the bazaar: musings on Linux and open source by an accidental revolutionary; citation_publication_date=2001; citation_id=CR6; citation_author=ES Raymond; citation_publisher=O'Reilly and Associates; citation_journal_title=Information Management; citation_title=An empirical analysis of open source software developers' motivations and continuance intentions; citation_author=CG Wu, JH Gerlach, CE Young; citation_volume=44; citation_issue=3; citation_publication_date=2007; citation_pages=253-262; citation_doi=10.1016/j.im.2006.12.006; citation_id=CR7; citation_title=Microsoft on trial: the new threat; an internal memo shows microsoft executives' concern over free software; citation_publication_date=1998; citation_id=CR8; citation_author=A Harmon; citation_author=J Markoff; citation_journal_title=Nature; citation_title=Internet encyclopaedias go head to head; citation_author=J Giles; citation_volume=438; citation_issue=7070; citation_publication_date=2005; citation_pages=900-901; citation_doi=10.1038/438900a; citation_id=CR9; citation_title=Perspectives on free and open source software; citation_publication_date=2005; citation_id=CR10; citation_author=J Feller; citation_author=B Fitzgerald; citation_author=SA Hissam; citation_author=KR Lakhani; citation_publisher=MIT Press; citation_title=Rebel Code: Linux and the Open Source Revolution; citation_publication_date=2002; citation_id=CR11; citation_author=G Moody; citation_publisher=Perseus Books; citation_title=Social Science 928 Research Network Working Paper Series; citation_inbook_title=Why hackers do what they do: understanding 927 motivation and effort in free/open source software projects; citation_publication_date=2005; citation_id=CR12; citation_author=KR Lakhani; citation_author=RG Wolf; citation_journal_title=MIT Sloan Management Review; citation_title=Open-source software development; citation_author=G Von Krogh; citation_volume=44; citation_issue=3; citation_publication_date=2003; citation_pages=14-18; citation_id=CR13; Bezroukov N: Open source software development as a special type of academic research (critique of vulgar Raymondism). First Monday 1999.,4(10):; Moglen EAnarchism triumphant: free software and the death of copyright. Centro di studi e ricerche di diritto comparato et straniero; 1999.; citation_title=HICSS '01: proceedings of the 34th annual Hawaii international conference on system sciences (HICSS-34)-volume 7; citation_inbook_title=Working for free? - motivations of participating in open source projects; citation_publication_date=2001; citation_id=CR16; citation_author=A Hars; citation_author=S Ou; citation_publisher=IEEE Computer Society; citation_journal_title=Journal of Political Philosophy; citation_title=Commons-based peer production and virtue; citation_author=Y Benkler, H Nissenbaum; citation_volume=14; citation_issue=4; citation_publication_date=2006; citation_pages=394-419; citation_doi=10.1111/j.1467-9760.2006.00235.x; citation_id=CR17; citation_journal_title=Research Policy; citation_title=Motivation of software developers in open source projects: an internet-based survey of contributors to the linux kernel; citation_author=G Hertel, S Niedner, S Herrmann; citation_volume=32; citation_issue=7; citation_publication_date=2003; citation_pages=1159-1177; citation_doi=10.1016/S0048-7333(03)00047-7; citation_id=CR18; citation_journal_title=MIT Sloan Management Review; citation_title=Innovation by user communities: learning from open-source software; citation_author=E Hippel; citation_volume=42; citation_issue=4; citation_publication_date=2001; citation_pages=82-86; citation_id=CR19; citation_title=SIGMIS-CPR '07: proceedings of the 2007 ACM SIGMIS CPR conference on computer personnel doctoral consortium and research conference; citation_inbook_title=Understanding member motivation for contributing to different types of virtual communities: a proposed framework; citation_publication_date=2007; citation_pages=153-158; citation_id=CR20; citation_author=TD Moore; citation_author=MA Serva; citation_publisher=New York, NY, USA; citation_title=Exploring motivations for contributing to open source initiatives: the roles of contribution context and personal values. Computers in human behavior; citation_publication_date=2008; citation_id=CR21; citation_author=S Oreg; citation_author=O Nov; citation_publisher=Elsevier Science Publishers; citation_journal_title=The Journal of Strategic Information Systems; citation_title=; citation_journal_title=The Yale Law Journal; citation_title=Coase's penguin, or, linux and the nature of the firm; citation_author=Y Benkler; citation_volume=112; citation_issue=2; citation_publication_date=2002; citation_pages=369-446; citation_doi=10.2307/1562247; citation_id=CR23; citation_title=Explaining quality in internet collective goods: Zealots and good samaritans in the case of wikipedia; citation_publication_date=2005; citation_id=CR24; citation_author=D Anthony; citation_author=S Smith; citation_author=T Williamson; citation_title=Wikinomics: how mass collaboration changes everything; citation_publication_date=2006; citation_id=CR25; citation_author=D Tapscott; citation_author=AD Williams; citation_publisher=Portfolio Hardcover; citation_title=WikiSym '07: Proceedings of the 2007 international symposium on Wikis; citation_inbook_title=Do as i do: authorial leadership in wikipedia; citation_publication_date=2007; citation_pages=143-156; citation_id=CR26; citation_author=J Reagle; citation_publisher=ACM; citation_journal_title=MIS Quarterly; citation_title=The transformation of open source software; citation_author=B Fitzgerald; citation_volume=30; citation_issue=3; citation_publication_date=2006; citation_pages=587-598; citation_id=CR27; citation_title=Forking: the invisible hand of sustainability in open source software. In proceedings of SOS 2011: towards sustainable open source; citation_publication_date=2011; citation_id=CR28; citation_author=L Nyman; citation_author=T Mikkonen; citation_author=J Lindman; citation_author=M Fougere; citation_publisher=Tampere University of Technology; citation_title=First Evidence of Economic Incentives, Proc. 2nd Workshop on Open Source Software Engineering; citation_publication_date=2002; citation_id=CR29; citation_author=IH Hann; citation_author=J Roberts; citation_author=S Slaughter; citation_author=R Fielding; citation_publisher=Carnegie Melon University; citation_journal_title=Research Policy; citation_title=Why open source software can succeed; citation_author=A Bonaccorsi, C Rossi; citation_volume=32; citation_issue=7; citation_publication_date=2003; citation_pages=1243-1258; citation_doi=10.1016/S0048-7333(03)00051-9; citation_id=CR30; citation_title=Proceedings of the 1st European UPA conference on European usability professionals association conference - volume 3; citation_inbook_title=Relating usability to design practice; citation_publication_date=2002; citation_pages=2-12; citation_id=CR31; citation_author=J Knight; citation_author=M Jefsioutine; citation_publisher=British Computer Society; Levesque M: Fundamental issues with open source software development. First Monday 2004.,9(4):; citation_title=Usability and open source software; citation_inbook_title=First Monday; citation_publication_date=2002; citation_id=CR33; citation_author=DM Nichols; citation_author=MB Twidale; citation_title=The luxury of ignorance: an open source horror story; citation_publication_date=2006; citation_id=CR34; citation_author=ES Raymond; citation_journal_title=Communications of the ACM; citation_title=Is open source security a myth?; citation_author=G Schryen; citation_volume=54; citation_issue=5; citation_publication_date=2011; citation_pages=130-140; citation_doi=10.1145/1941487.1941516; citation_id=CR35; citation_title=Cyber risks to secure and private universal access; citation_inbook_title=Universal access in human-computer interaction. Design for all and eInclusion, volume 6765 of lecture notes in computer science; citation_publication_date=2011; citation_pages=433-442; citation_id=CR36; citation_author=ML Bahr; citation_author=H Gacey; citation_publisher=Springer; citation_journal_title=Disability and Rehabilitation. Assistive Technology; citation_title=Toward automatic adjustment of keyboard settings for people with physical impairments; citation_author=HH Koester, E Lopresti, RC Simpson; citation_volume=2; citation_issue=5; citation_publication_date=2007; citation_pages=261-274; citation_doi=10.1080/17483100701284265; citation_id=CR37; citation_title=Assets '02: proceedings of the fifth international ACM conference on assistive technologies; citation_inbook_title=An invisible keyguard; citation_publication_date=2002; citation_pages=143-149; citation_id=CR38; citation_author=S Trewin; citation_publisher=ACM; citation_title=Assets '04: proceedings of the 6th international ACM SIGACCESS conference on computers and accessibility; citation_inbook_title=Automating accessibility: the dynamic keyboard; citation_publication_date=2004; citation_pages=71-78; citation_id=CR39; citation_author=S Trewin; citation_publisher=ACM; citation_title=Accessibility support for older adults with the ACCESS framework; citation_inbook_title=International Journal of Human Computer Interaction; citation_publication_date=2013; citation_id=CR40; citation_author=MJ Heron; citation_author=VL Hanson; citation_author=I Ricketts; citation_title=Developing steady clicks: a method of cursor assistance for people with motor impairments. Assets '06: proceedings of the 8th international ACM SIGACCESS conference on computers and accessibility; citation_publication_date=2006; citation_id=CR41; citation_author=S Trewin; citation_author=S Keates; citation_author=K Moffatt; citation_publisher=ACM; citation_title=Proceedings of the 27th international conference on Human factors in computing systems, CHI '09; citation_inbook_title=The angle mouse: target-agnostic dynamic gain adjustment based on angular deviation; citation_publication_date=2009; citation_pages=1401-1410; citation_id=CR42; citation_author=JO Wobbrock; citation_author=J Fogarty; citation_author=SYS Liu; citation_author=S Kimuro; citation_author=S Harada; citation_publisher=ACM; citation_journal_title=Computer Games Journal; citation_title=Inaccessible through oversight: the need for inclusive game design; citation_author=MJ Heron; citation_volume=1; citation_issue=1; citation_publication_date=2012; citation_pages=29-38; citation_id=CR43; Heron MJThe ACCESS Framework: reinforcement learning for accessibility and cognitive support for older adults. Dundee, Scotland: PhD thesis, Dundee University; 2011.; citation_title=Proceedings of the 15th international academic MindTrek conference: envisioning future media environments, MindTrek '11; citation_inbook_title=From game design elements to gamefulness: defining; citation_title=Proc. DiGRA 2011: think design play, DiGRA; citation_inbook_title=Framework for designing and evaluating game achievements; citation_publication_date=2011; citation_id=CR46; citation_author=J Hamari; citation_author=V Eranti; citation_journal_title=IEEE Security and Privacy; citation_title=Mobile attacks and defense; citation_author=C Miller; citation_volume=9; citation_issue=4; citation_publication_date=2011; citation_pages=68-70; citation_doi=10.1109/MSP.2011.85; citation_id=CR47; citation_title=Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices, SPSM '11; citation_inbook_title=A survey of mobile malware in the wild; citation_publication_date=2011; citation_pages=3-14; citation_id=CR48; citation_author=AP Felt; citation_author=M Finifter; citation_author=E Chin; citation_author=S Hanna; citation_author=D Wagner; citation_publisher=ACM			Excluded	Excluded				2	Springer Link		Open source and accessibility: advantages and limitations	https://link.springer.com/article/10.1186/2194-0827-1-2	Springer Link	nan; Pages; Year; Bibtex
355	TrustSE	DEVELOPER RESPONSIVENESS AND PERCEIVED USEFULNESS.	Perceived usefulness (PU) is a major determinant of IS use. Identifying antecedents of PU could give managers the ability to increase IS use. This research, which tests a model based on social exchange theory, suggests that PU depends on developers' responsiveness to user requests and users' trust in the software.	EXCHANGE theory (Sociology); INFORMATION resources management; MANAGEMENT; INFORMATION resources -- Use studies; SOCIAL exchange; PERCEPTION; SOCIAL interaction; INDUSTRIAL sociology; INFORMATION services; TECHNOLOGICAL innovations - Management	Gefen, David; Keil, Mark	Academy of Management Proceedings	https://journals.aom.org/doi/abs/10.5465/ambpp.1996.4980832		313-317	"""nan"""	Included	Included				2	Google Scholar		DEVELOPER RESPONSIVENESS AND PERCEIVED USEFULNESS.	https://journals.aom.org/doi/abs/10.5465/ambpp.1996.4980832	Academy of Management	
356	TrustSE	Is the Future of Software Development in Open Source? Proprietary vs. Open Source Software: A Cross Country Analysis	Many of them argue that the open source software is free and free from intellectual property protection clutches. This paper argues that this notion is a myth when taking into account the percentage of proprietary software usage all over the world. The governmental policies and decision to support or adopt one model or the other will have a large impact on the software industry. This study substantiates that the neutrality of government promotes innovation and development rather than supporting a particular model through a cross-country analysis of Europe, Brazil, China and India. The analysis shows that more governments are making laws and policies in support of open source softwares.	Open Source Software (OSS); proprietary software; intellectual property rights; India; China; Brazil; Europe	Prof. K. D. Raju	Journal of Intellectual Property Rights	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=985237		20	"""nan"""	Excluded	Excluded				2	Google Scholar		Is the future of software development in open source? Proprietary vs. open source software: A cross country analysis	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=985237	SSRN	
357	TrustSE	GitHub Projects. Quality Analysis of Open-Source Software	Nowadays Open-Source Software is developed mostly by decentralized teams of developers cooperating on-line. GitHub portal is an online social network that supports development of software by virtual teams of programmers. Since there is no central mechanism that governs the process of team formation, it is interesting to investigate if there are any significant correlations between project quality and the characteristics of the team members. However, for such analysis to be possible, we need good metrics of a project quality. This paper develops two such metrics, first one reflecting project's popularity, and the second one - the quality of support offered by team members to users. The first metric is based on the number of `stars' a project is given by other GitHub members, the second is obtained using survival analysis techniques applied to issues reported on the project by its users. After developing the metrics we have gathered characteristics of several GitHub projects and analyzed their influence on the project quality using statistical regression techniques.	Bioinformatics; Information dissemination; Open source software; Open systems; Social networking (online); Social sciences computing; On-line collaborations; On-line social networks; Performance metrics; Project quality; Statistical regression techniques; Survival analysis; Team formation; Virtual team; Quality control; Bioinformatics;  Information dissemination;  Open source software;  Open systems;  Social networking (online);  Social sciences computing;  On-line collaborations;  On-line social networks;  Performance metrics;  Project quality;  Statistical regression techniques;  Survival analysis;  Team formation;  Virtual team;  Quality control	Jarczyk, Oskar; Gruszka, B{\l}a{\.{z}}ej; Jaroszewicz, Szymon; Bukowski, Leszek; Wierzbicki, Adam	Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)	https://doi.org/10.1007/978-3-319-13734-6_6		80--94	"""@Inbook{Jarczyk2014,
    author = ""Jarczyk, Oskar and Gruszka, B{\l}a{\.{z}}ej and Jaroszewicz, Szymon and Bukowski, Leszek and Wierzbicki, Adam"",
    editor = ""Aiello, Luca Maria and McFarland, Daniel"",
    title = ""GitHub Projects. Quality Analysis of Open-Source Software"",
    bookTitle = ""Social Informatics: 6th International Conference, SocInfo 2014, Barcelona, Spain, November 11-13, 2014. Proceedings"",
    year = ""2014"",
    publisher = ""Springer International Publishing"",
    address = ""Cham"",
    pages = ""80--94"",
    abstract = ""Nowadays Open-Source Software is developed mostly by decentralized teams of developers cooperating on-line. GitHub portal is an online social network that supports development of software by virtual teams of programmers. Since there is no central mechanism that governs the process of team formation, it is interesting to investigate if there are any significant correlations between project quality and the characteristics of the team members. However, for such analysis to be possible, we need good metrics of a project quality. This paper develops two such metrics, first one reflecting project's popularity, and the second one - the quality of support offered by team members to users. The first metric is based on the number of `stars' a project is given by other GitHub members, the second is obtained using survival analysis techniques applied to issues reported on the project by its users. After developing the metrics we have gathered characteristics of several GitHub projects and analyzed their influence on the project quality using statistical regression techniques."",
    isbn = ""978-3-319-13734-6"",
    doi = ""10.1007/978-3-319-13734-6\_6"",
    url = ""https://doi.org/10.1007/978-3-319-13734-6\_6""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Springer Link		Github projects. quality analysis of open-source software	https://link.springer.com/chapter/10.1007/978-3-319-13734-6_6	Springer International Publishing	nan; References
358	TrustSE	A Longitudinal Study of the Impact of Open Source Software Project Characteristics on Positive Outcomes	This article formulates and tests a set of hypotheses about the success of open source software projects with respect to market penetration and human resource attraction. The authors collected data from 1025 open source software projects in a longitudinal study. The cross-sectional results show that the extent of a project's operating systems, the range of translated languages, programming languages, and project age positively impact OSS projects' positive outcomes with respect to market penetration and human resource attraction.	Commerce; Computational linguistics; Computer software; Open systems; Software engineering; Software testing; Longitudinal study; Market penetration; Open source software projects; Open source software; Commerce;  Computational linguistics;  Computer software;  Open systems;  Software engineering;  Software testing;  Longitudinal study;  Market penetration;  Open source software projects;  Open source software	Ghapanchi, Amir Hossein; Tavana, Madjid	Information Systems Management	https://doi.org/10.1080/10580530.2015.1079999		285 - 298	"""@ARTICLE{Ghapanchi2015285,
    author = ""Ghapanchi, Amir Hossein and Tavana, Madjid"",
    title = ""A Longitudinal Study of the Impact of Open Source Software Project Characteristics on Positive Outcomes"",
    year = ""2015"",
    journal = ""Information Systems Management"",
    volume = ""32"",
    number = ""4"",
    pages = ""285 - 298"",
    doi = ""10.1080/10580530.2015.1079999"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944061617\&doi=10.1080\%2f10580530.2015.1079999\&partnerID=40\&md5=56e8e0b2ab39514352609f4f9e9e7799"",
    affiliations = ""School of Information and Communication Technology, Griffith University, QLD, Australia; Business Systems and Analytics Department, La Salle University, Philadelphia, PA, United States; Business Information Systems Department, University of Paderborn, Paderborn, Germany"",
    abstract = ""This article formulates and tests a set of hypotheses about the success of open source software projects with respect to market penetration and human resource attraction. The authors collected data from 1025 open source software projects in a longitudinal study. The cross-sectional results show that the extent of a project's operating systems, the range of translated languages, programming languages, and project age positively impact OSS projects' positive outcomes with respect to market penetration and human resource attraction. Copyright (c) Taylor \& Francis Group, LLC."",
    author_keywords = ""human resource attraction; longitudinal study; market penetration; open source software"",
    keywords = ""Commerce; Computational linguistics; Computer software; Open systems; Software engineering; Software testing; Longitudinal study; Market penetration; Open source software projects; Open source software"",
    correspondence_address = ""M. Tavana; Business Systems and Analytics Department, La Salle University, Philadelphia, 1900 W. Olney Ave, 19141, United States; email: tavana@lasalle.edu"",
    publisher = ""Taylor and Francis Inc."",
    issn = ""10580530"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. Manage."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 5""
}
"""	Included	Included				2	Scopus Signed In		A longitudinal study of the impact of open source software project characteristics on positive outcomes	https://www.scopus.com/record/display.uri?eid=2-s2.0-84944061617&origin=resultslist&sort=r-f&src=s&sid=5c24b86f9e8a39d0e4bd07c68f13219a&sot=b&sdt=b&s=TITLE%28a+longitudinal+study+of+the+impact+of+open+source+software+project+characteristics+on+positive+outcomes%29&sl=110&sessionSearchId=5c24b86f9e8a39d0e4bd07c68f13219a&relpos=0	Taylor and Francis Inc	nan; References
359	TrustSE	A model-driven approach for engineering trust and reputation into software services	The ever-increasing complex, dynamic and distributed nature of current systems demands model-driven techniques that allow working with abstractions and self-adaptive software in order to cope with unforeseeable changes. Models@run.time is a promising model-driven approach that supports the runtime adaptation of distributed, heterogeneous systems. Yet, frameworks that accommodate this paradigm have limited support to address security concerns, hindering their usage in real scenarios. We address this challenge by enhancing models@run.time with the notions of trust and reputation. Trust improves decision-making processes under risk and uncertainty and constitutes a distributed and flexible mechanism that does not entail heavyweight administration. This paper presents a trust and reputation framework that is integrated into a distributed component-model that implements,the models@run.time paradigm, thus allowing the system to include trust in their reasoning process. The framework is illustrated in a chat application by implementing several state-of-the-art trust and reputation models. We show that the framework entails negligible computational overhead and that it requires a minimal amount of work for developers.	Trust; Reputation; Model-driven Engineering; Self-adaptation; Trust;  Reputation;  Model-driven Engineering;  Self-adaptation	Moyano, Francisco; Fernandez-Gago, Carmen; Lopez, Javier	JOURNAL OF NETWORK AND COMPUTER APPLICATIONS	https://doi.org/10.1016/j.jnca.2016.04.018		134-151	"""@article{WOS:000377839700010,
    Author = ""Moyano, Francisco and Fernandez-Gago, Carmen and Lopez, Javier"",
    Title = ""A model-driven approach for engineering trust and reputation into software services"",
    Journal = ""JOURNAL OF NETWORK AND COMPUTER APPLICATIONS"",
    Year = ""2016"",
    Volume = ""69"",
    Pages = ""134-151"",
    Month = ""JUL"",
    Abstract = ""The ever-increasing complex, dynamic and distributed nature of current systems demands model-driven techniques that allow working with abstractions and self-adaptive software in order to cope with unforeseeable changes. Models@run.time is a promising model-driven approach that supports the runtime adaptation of distributed, heterogeneous systems. Yet, frameworks that accommodate this paradigm have limited support to address security concerns, hindering their usage in real scenarios. We address this challenge by enhancing models@run.time with the notions of trust and reputation. Trust improves decision-making processes under risk and uncertainty and constitutes a distributed and flexible mechanism that does not entail heavyweight administration. This paper presents a trust and reputation framework that is integrated into a distributed component-model that implements,the models@run.time paradigm, thus allowing the system to include trust in their reasoning process. The framework is illustrated in a chat application by implementing several state-of-the-art trust and reputation models. We show that the framework entails negligible computational overhead and that it requires a minimal amount of work for developers. (C) 2016 Elsevier Ltd. All rights reserved."",
    Publisher = ""ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD"",
    Address = ""24-28 OVAL RD, LONDON NW1 7DX, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Moyano, F (Corresponding Author), Univ Malaga, Network Informat \\& Comp Secur Lab, E-29071 Malaga, Spain. Moyano, Francisco; Fernandez-Gago, Carmen; Lopez, Javier, Univ Malaga, Network Informat \\& Comp Secur Lab, E-29071 Malaga, Spain."",
    DOI = ""10.1016/j.jnca.2016.04.018"",
    ISSN = ""1084-8045"",
    Keywords = ""Trust; Reputation; Model-driven Engineering; Self-adaptation"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Hardware \\& Architecture; Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering"",
    Author-Email = ""moyano@lcc.uma.es mcgago@lcc.uma.es jlm@lcc.uma.es"",
    Affiliations = ""Universidad de Malaga"",
    ResearcherID-Numbers = ""Gago, Carmen/M-4058-2019"",
    Funding-Acknowledgement = ""European Training Network NeCS {[}H2020-MSCA-ITN-2015-675320]; Spanish Ministry of Economy and Competitiveness through the project PERSIST {[}TIN2013-41739-R]; Ministery of Economy of Spain through the Young Researchers Programme: project PRECISE {[}TIN2014-54427-JIN]"",
    Funding-Text = ""This work has been partially supported by the European Training Network NeCS (H2020-MSCA-ITN-2015-675320) and by the Spanish Ministry of Economy and Competitiveness through the project PERSIST (TIN2013-41739-R). The second author is supported by the Ministery of Economy of Spain through the Young Researchers Programme: project PRECISE (TIN2014-54427-JIN)."",
    Number-of-Cited-References = ""32"",
    Times-Cited = ""8"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""J. Netw. Comput. Appl."",
    Doc-Delivery-Number = ""DO5RE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000377839700010"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		A model-driven approach for engineering trust and reputation into software services	https://www.webofscience.com/wos/woscc/full-record/WOS:000377839700010	ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD	nan; References
360	TrustSE	Mutual assessment in the social programmer ecosystem: an empirical investigation of developer profile aggregators	The multitude of social media channels that programmers can use to participate in software development has given rise to online developer profiles that aggregate activity across many services. Studying members of such developer profile aggregators, we found an ecosystem that revolves around the social programmer. Developers are assessing each other to evaluate whether other developers are interesting, worth following, or worth collaborating with. They are self-conscious about being assessed, and thus manage their public images. They value passion for software development, new technologies, and learning. Some recruiters participate in the ecosystem and use it to find candidates for hiring; other recruiters struggle with the interpretation of signals and issues of trust. This mutual assessment is changing how software engineers collaborate and how they advance their skills.	gamification;  motivation;  reputation;  social code sharing;  social media;  software development;  software engineering;  virtual communities; gamification, motivation, reputation, social code sharing, social media, software development, software engineering, virtual communities	Singer, Leif; Figueira Filho, Fernando; Cleary, Brendan; Treude, Christoph; Storey, Margaret-Anne; Schneider, Kurt	CSCW '13: Proceedings of the 2013 conference on Computer supported cooperative work	https://doi.org/10.1145/2441776.2441791		103-116	"""@inproceedings{10.1145/2441776.2441791,
    author = ""Singer, Leif and Figueira Filho, Fernando and Cleary, Brendan and Treude, Christoph and Storey, Margaret-Anne and Schneider, Kurt"",
    title = ""Mutual assessment in the social programmer ecosystem: an empirical investigation of developer profile aggregators"",
    year = ""2013"",
    isbn = ""9781450313315"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2441776.2441791"",
    doi = ""10.1145/2441776.2441791"",
    abstract = ""The multitude of social media channels that programmers can use to participate in software development has given rise to online developer profiles that aggregate activity across many services. Studying members of such developer profile aggregators, we found an ecosystem that revolves around the social programmer. Developers are assessing each other to evaluate whether other developers are interesting, worth following, or worth collaborating with. They are self-conscious about being assessed, and thus manage their public images. They value passion for software development, new technologies, and learning. Some recruiters participate in the ecosystem and use it to find candidates for hiring; other recruiters struggle with the interpretation of signals and issues of trust. This mutual assessment is changing how software engineers collaborate and how they advance their skills."",
    booktitle = ""Proceedings of the 2013 Conference on Computer Supported Cooperative Work"",
    pages = ""103-116"",
    numpages = ""14"",
    keywords = ""gamification, motivation, reputation, social code sharing, social media, software development, software engineering, virtual communities"",
    location = ""San Antonio, Texas, USA"",
    series = ""CSCW '13""
}
"""	Included	Included				2	ACM		Mutual assessment in the social programmer ecosystem: An empirical investigation of developer profile aggregators	https://doi.org/10.1145/2441776.2441791	Association for Computing Machinery	nan; References; Link
361	TrustSE	From open-source software to Wikipedia: `Backgrounding' trust by collective monitoring and reputation tracking	Open-content communities that focus on co-creation without requirements for entry have to face the issue of institutional trust in contributors. This research investigates the various ways in which these communities manage this issue. It is shown that communities of open-source software-continue to-rely mainly on hierarchy (reserving write-access for higher echelons), which substitutes (the need for) trust. Encyclopedic communities, though, largely avoid this solution. In the particular case of Wikipedia, which is confronted with persistent vandalism, another arrangement has been pioneered instead. Trust (i.e. full write-access) is `backgrounded' by means of a permanent mobilization of Wikipedians to monitor incoming edits. Computational approaches have been developed for the purpose, yielding both sophisticated monitoring tools that are used by human patrollers, and bots that operate autonomously. Measures of reputation are also under investigation within Wikipedia; their incorporation in monitoring efforts, as an indicator of the trustworthiness of editors, is envisaged. These collective monitoring efforts are interpreted as focusing on avoiding possible damage being inflicted on Wikipedian spaces, thereby being allowed to keep the discretionary powers of editing intact for all users. Further, the essential differences between backgrounding and substituting trust are elaborated. Finally it is argued that the Wikipedian monitoring of new edits, especially by its heavy reliance on computational tools, raises a number of moral questions that need to be answered urgently.	Bots; Open-source software; Reputation; Trust; Vandalism; Wikipedia; Bots;  Open-source software;  Reputation;  Trust;  Vandalism;  Wikipedia	de Laat, Paul B.	ETHICS AND INFORMATION TECHNOLOGY	https://doi.org/10.1007/s10676-014-9342-9		157-169	"""@article{WOS:000336410100006,
    Author = ""de Laat, Paul B."",
    Title = ""From open-source software to Wikipedia: `Backgrounding' trust by collective monitoring and reputation tracking"",
    Journal = ""ETHICS AND INFORMATION TECHNOLOGY"",
    Year = ""2014"",
    Volume = ""16"",
    Number = ""2"",
    Pages = ""157-169"",
    Month = ""JUN"",
    Abstract = ""Open-content communities that focus on co-creation without requirements for entry have to face the issue of institutional trust in contributors. This research investigates the various ways in which these communities manage this issue. It is shown that communities of open-source software-continue to-rely mainly on hierarchy (reserving write-access for higher echelons), which substitutes (the need for) trust. Encyclopedic communities, though, largely avoid this solution. In the particular case of Wikipedia, which is confronted with persistent vandalism, another arrangement has been pioneered instead. Trust (i.e. full write-access) is `backgrounded' by means of a permanent mobilization of Wikipedians to monitor incoming edits. Computational approaches have been developed for the purpose, yielding both sophisticated monitoring tools that are used by human patrollers, and bots that operate autonomously. Measures of reputation are also under investigation within Wikipedia; their incorporation in monitoring efforts, as an indicator of the trustworthiness of editors, is envisaged. These collective monitoring efforts are interpreted as focusing on avoiding possible damage being inflicted on Wikipedian spaces, thereby being allowed to keep the discretionary powers of editing intact for all users. Further, the essential differences between backgrounding and substituting trust are elaborated. Finally it is argued that the Wikipedian monitoring of new edits, especially by its heavy reliance on computational tools, raises a number of moral questions that need to be answered urgently."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""de Laat, PB (Corresponding Author), Univ Groningen, Dept Comp Sci, Groningen, Netherlands. Univ Groningen, Dept Comp Sci, Groningen, Netherlands."",
    DOI = ""10.1007/s10676-014-9342-9"",
    ISSN = ""1388-1957"",
    EISSN = ""1572-8439"",
    Keywords = ""Bots; Open-source software; Reputation; Trust; Vandalism; Wikipedia"",
    Research-Areas = ""Social Sciences - Other Topics; Information Science \\& Library Science; Philosophy"",
    Web-of-Science-Categories = ""Ethics; Information Science \\& Library Science; Philosophy"",
    Author-Email = ""p.b.de.laat@rug.nl"",
    Affiliations = ""University of Groningen"",
    ResearcherID-Numbers = ""de+Laat, Paul/AAC-8836-2022"",
    Number-of-Cited-References = ""29"",
    Times-Cited = ""7"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""33"",
    Journal-ISO = ""Ethics Inf. Technol."",
    Doc-Delivery-Number = ""AH8TC"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI); Arts \&amp; Humanities Citation Index (A\&amp;HCI)"",
    Unique-ID = ""WOS:000336410100006"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		From open-source software to Wikipedia:'Backgrounding'trust by collective monitoring and reputation tracking	https://www.webofscience.com/wos/woscc/full-record/WOS:000336410100006	SPRINGER	nan; References
362	TrustSE	Motivations for participating in Open Source Software communities: Roles of psychological needs and altruism	As a new phenomenon of the software industry, Open Source Software (OSS) development has attracted many research interests. Examining what motivate participants to be involved in OSS projects is one of the recently heated research areas. This study is motivated by the significance but lacking evidence on how personality traits may affect participants' task effort on OSS projects. In particular, we investigate how personality traits namely psychological needs for autonomy and competence, and one's altruism interact with motivations. Following Self-Determination Theory, we differentiate types of motivation in OSS communities. In addition, drawing upon the Affective Event theory, we submit that personality traits moderate the relationships between task effort and both external and identified motivations. The research model is largely supported by data from 204 participants in various OSS projects. Theoretical contributions and practical implications are discussed.	Computer software; Information systems; Motivation; Research; Software design; Sustainable development; Event theory; Open source software community; Open source software development; Personality traits; Research areas; Research models; Self-determination theories; Software industry; Task effort; Open systems; Computer software;  Information systems;  Motivation;  Research;  Software design;  Sustainable development;  Event theory;  Open source software community;  Open source software development;  Personality traits;  Research areas;  Research models;  Self-determination theories;  Software industry;  Task effort;  Open systems	Ke, Weiling; Zhang, Ping	PACIS 2008 - 12th Pacific Asia Conference on Information Systems: Leveraging ICT for Resilient Organizations and Sustainable Growth in the Asia Pacific Region	https://www.scopus.com/record/display.uri?eid=2-s2.0-84855606004&origin=resultslist&sort=r-f&src=s&sid=7cb514d0b3e872afe2a442f1100602ff&sot=b&sdt=b&s=TITLE%28motivations+for+participating+in+open+source+software+communities+roles+of+psychological+needs+and+altruism%29&sl=114&sessionSearchId=7cb514d0b3e872afe2a442f1100602ff&relpos=0			"""@CONFERENCE{Ke2008,
    author = ""Ke, Weiling and Zhang, Ping"",
    title = ""Motivations for participating in Open Source Software communities: Roles of psychological needs and altruism"",
    year = ""2008"",
    journal = ""PACIS 2008 - 12th Pacific Asia Conference on Information Systems: Leveraging ICT for Resilient Organizations and Sustainable Growth in the Asia Pacific Region"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855606004\&partnerID=40\&md5=b5b26e76fcd03ccf54c8742f1eeac8a5"",
    affiliations = ""Clarkson University, School of Business, Potsdam, NY 13676, Clarkson Ave., United States; Syracuse University, School of Information Studies, Syracuse, NY 13244, 328 Hinds, United States"",
    abstract = ""As a new phenomenon of the software industry, Open Source Software (OSS) development has attracted many research interests. Examining what motivate participants to be involved in OSS projects is one of the recently heated research areas. This study is motivated by the significance but lacking evidence on how personality traits may affect participants' task effort on OSS projects. In particular, we investigate how personality traits namely psychological needs for autonomy and competence, and one's altruism interact with motivations. Following Self-Determination Theory, we differentiate types of motivation in OSS communities. In addition, drawing upon the Affective Event theory, we submit that personality traits moderate the relationships between task effort and both external and identified motivations. The research model is largely supported by data from 204 participants in various OSS projects. Theoretical contributions and practical implications are discussed."",
    author_keywords = ""Motivation; Open Source Software development; Personality traits; Task effort"",
    keywords = ""Computer software; Information systems; Motivation; Research; Software design; Sustainable development; Event theory; Open source software community; Open source software development; Personality traits; Research areas; Research models; Self-determination theories; Software industry; Task effort; Open systems"",
    correspondence_address = ""W. Ke; Clarkson University, School of Business, Potsdam, NY 13676, Clarkson Ave., United States; email: wke@clarkson.edu"",
    language = ""English"",
    abbrev_source_title = ""PACIS - Pac. Asia Conf. Inf. Syst.: Leveraging ICT Resilient Organ. Sustainable Growth Asia Pac. Reg."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 5; Conference name: 12th Pacific Asia Conference on Information Systems: Leveraging ICT for Resilient Organizations and Sustainable Growth in the Asia Pacific Region, PACIS 2008; Conference date: 3 July 2008 through 7 July 2008; Conference code: 87956""
}
"""	Excluded	Excluded				2	Scopus Signed In		Motivations for participating in open source software communities: Roles of psychological needs and altruism	https://www.scopus.com/record/display.uri?eid=2-s2.0-84855606004&origin=resultslist&sort=r-f&src=s&sid=7cb514d0b3e872afe2a442f1100602ff&sot=b&sdt=b&s=TITLE%28motivations+for+participating+in+open+source+software+communities+roles+of+psychological+needs+and+altruism%29&sl=114&sessionSearchId=7cb514d0b3e872afe2a442f1100602ff&relpos=0		nan; References; Pages; Publisher
363	TrustSE	Exploring the Role of Outside Organizations in Free / Open Source Software Projects	Free/Open Source Software (FOSS) projects have a reputation for being grass-roots efforts driven by individual contributors volunteering their time and effort. While this may be true for a majority of smaller projects, it is not always the case for large projects. As projects grow in size, importance and complexity, many come to depend on corporations, universities, NGO's and governments, for support and contributions, either financially or through seconded staff. As outside organizations get involved in projects, how does this affect their governance, transparency and direction? To study this question we gathered bug reports and commit logs for GCC and the Linux Kernel. We found that outside organizations contribute a majority of code but rarely participate in bug triaging. Therefore their code does not necessarily address the needs of others and may distort governance and direction. We conclude that projects should examine their dependence on outside organizations.	Computer operating systems; Open source software; Sustainable development; Societies and institutions; Community sustainability; Contributor affiliation; Free/open source softwares; Free/open source softwares (FOSS); Governance; Large project; Linux kernel; Participation metrics; Bug reports; Grass roots; Open systems; Computer operating systems;  Open source software;  Sustainable development;  Societies and institutions;  Community sustainability;  Contributor affiliation;  Free/open source softwares;  Free/open source softwares (FOSS);  Governance;  Large project;  Linux kernel;  Participation metrics;  Bug reports;  Grass roots;  Open systems	Forrest, Darren; Jensen, Carlos; Mohan, Nitin; Davidson, Jennifer	IFIP Advances in Information and Communication Technology	https://doi.org/10.1007/978-3-642-33442-9_13	Antoniol, G., Gall, H., Di Penta, M., Pinzger, M.Mozilla: Closing the Circle.Cited 8 times.(n.d.): (retrieved)http://scholar.googleusercontent.com/scholar?q=cache:neQwzT9UfPwJ: scholar.google.com/&hl=en&as_sdt=0,38; Bergquist, M., Ljungberg, J.; Bonaccorsi, A., Rossi, C.; Crowston, K., Annabi, H., Howison, J., Masango, C.Effective work practices for software engineering: Free/libre open source software developmentProceedings of the 2004; (2004)ACM Workshop on Interdisciplinary Software Engineering Research, WISER 2004, pp. 18-26.ACM, New York doi:10.1145/1029997.1030003; Fischer, M., Pinzger, M., Gall, H.; Gall, H., Jazayeri, M., Krajewski, J.; German, D.M.; Ghosh, R.A., Prakash, V.V.; Hars, A., Ou, S.; Jensen, C., King, S., Kuechler, V.; Jensen, C., Scacchi, W.; Ko, A.J., Chilana, P.K.; Ko, A.J., Myers, B.A., Chau, D.H.; Kogut, B., Metiu, A.; Kroah-Hartman, G., Corbet, J., McPherson, A.(2008)Linux Kernel Development: How Fast It Is Going, Who Is Doing It, What They Are Doing, and Who Is Sponsoring It.Cited 33 times.The Linux Foundation Publicationhttp://www.linuxfoundation.org/publications/linuxkerneldevelopment.php; Von Krogh, G., Spaeth, S., Lakhani, K.R.; Von Krogh, G., Spaeth, S., Haefliger, S.; Lakhani, K., Wolf, R.G.(2003)Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects.Cited 241 times.SSRN eLibrary (retrieved)http://papers.ssrn.com/sol3/papers.cfm?abstract_id=443040; Lessig, L.(1999)CODE and Other Laws of Cyberspace.Cited 2797 times.Basic Books; Mockus, A., Fielding, R.T., Herbsleb, J.D.; Duc, A.N., Cruzes, D.S., Ayala, C., Conradi, R.; David, P., Watermann, A., Arora, S.(2003)FLOSS-US: The Free/Libre/Open Source Software Survey for 2003.Cited 53 times.Technical Report. Standford Institute for Economic and Policy Research, Standford, USAhttp://www.stanford.edu/group/floss-us; Sandusky, R.J., Gasser, L.; Scacchi, W.; System Size - eLinux.org(n.d.), (retrieved October 8, 2011)http://elinux.org/System_Size; Ye, Y., Kishida, K.	201--215	"""@InProceedings{10.1007/978-3-642-33442-9_13,
    author = ""Forrest, Darren and Jensen, Carlos and Mohan, Nitin and Davidson, Jennifer"",
    editor = {Hammouda, Imed and Lundell, Bj{\""o}rn and Mikkonen, Tommi and Scacchi, Walt},
    title = ""Exploring the Role of Outside Organizations in Free / Open Source Software Projects"",
    booktitle = ""Open Source Systems: Long-Term Sustainability"",
    year = ""2012"",
    publisher = ""Springer Berlin Heidelberg"",
    address = ""Berlin, Heidelberg"",
    pages = ""201--215"",
    abstract = ""Free/Open Source Software (FOSS) projects have a reputation for being grass-roots efforts driven by individual contributors volunteering their time and effort. While this may be true for a majority of smaller projects, it is not always the case for large projects. As projects grow in size, importance and complexity, many come to depend on corporations, universities, NGO's and governments, for support and contributions, either financially or through seconded staff. As outside organizations get involved in projects, how does this affect their governance, transparency and direction? To study this question we gathered bug reports and commit logs for GCC and the Linux Kernel. We found that outside organizations contribute a majority of code but rarely participate in bug triaging. Therefore their code does not necessarily address the needs of others and may distort governance and direction. We conclude that projects should examine their dependence on outside organizations."",
    isbn = ""978-3-642-33442-9""
}
"""	Included	Included				2	Springer Link		Exploring the role of outside organizations in Free/Open Source Software projects	https://link.springer.com/chapter/10.1007/978-3-642-33442-9_13	Springer Berlin Heidelberg	
364	TrustSE	Notice of Violation of IEEE Publication Principles: Open source reuse in commercial firms	"Notice of Violation of IEEE Publication Principles""Open Source Reuse in Commercial Firms""by T.R. Madanmohan and Rahul Dein IEEE Software, Vol. 21, Issue 6, November/December 2004, pp. 62-69After careful and considered review of the content and authorship of this paper by a duly constituted expert committee, this paper has been found to be in violation of IEEE's Publication Principles.This paper contains portions of original text from the sources cited below. Text from Paper 1) was reused without attribution. Text from Paper 2) was reused with attribution but without being clearly delineated from the above authors' own text.1)""Open-Source CMS: Prohibitively Fractured""by Tony Byrnein CMS Watch,http://www.cmswatch.com/Feature/89-Open-Src14 May 2003, pp 94-992)""The Amos Project: An Approach to Reusing Open Source Code""by Manuel Carro, German Puebla and Carlo Daffarain Presente y futuro de la ingenieria del software libreURJC, Madrid, May 21, 2003Open source software provides organizations with new options for component-based development. As with commercial off-the-shelf software, project developers acquire open source components from a vendor (or a community) and use them ""as is"" or with minor modifications. Although they have access to the component's source code, developers aren't required to do anything with it. If the component's community is large and active, the adopting organization can expect frequent software updates, reasonable quality assurance, responsive hug fixes, and good technical support. Also, having freely available source code addresses two typical concerns with using COTS components: unknown implementation quality and long-term vendor support."	Open-source; Commercial Firms; Operating System; Open-source Software; Source Code; Software Components; Commercial Development; Information Technology Industry; Intrusion Detection; Custom-made Software; Intellectual Property; Proprietary Software; Mailing Lists; Customer Requirements; Open-source Projects; Open-source Community; Software Maintenance	T.R. Madanmohan; Rahul De'	IEEE Software	https://doi.org/10.1109/MS.2004.45	"1.H. Wang and C. Wang, ""Open Source Software Adoption: A Status Report"", IEEE Software, vol. 18, no. 2, pp. 90-96, 2001. View Article  Google Scholar; 2.P. Lawlis, ""A Formal Process for Evaluating COTS Software Products"", Computer, vol. 34, no. 5, pp. 58-63, 2001. View Article  Google Scholar; 3.A.W. Brown and K.C. Wallnau, ""Engineering of Component-Based Systems"", pp. 7-15, 1996. View Article  Google Scholar; 4.J. Kontio, ""A Case Study in Applying a Systematic Method for COTS Selection"", Proc. 18th Int'l Conf. Software Eng., pp. 201-209, 1996. View Article  Google Scholar; 5.B. Boehm and C. Abts, ""COTS Integration: Plug and Pray?"", Computer, vol. 32, no. 1, pp. 135-138, 1999. View Article  Google Scholar; 6.D. Parnas, ""On the Criteria To Be Used in Decomposing Systems into Modules"", Comm. ACM, vol. 15, no. 12, pp. 1053-1058, 1972. CrossRef  Google Scholar; 7.D.K. Rosenberg, Open Source: The Unauthorized White Papers, 2000. Google Scholar; 8.J. Lerner and J. Tirole, ""Some Simple Economics of Open Source"", J. Industrial Economics, vol. 50, no. 2, pp. 197-234, 2002. CrossRef  Google Scholar; 9.G. Robles, ""Who Is Doing It? A Research on Libre Software Developers"", Fachgebiet fr Informatik und Gesellschaft TU-Berlin, 2001-Aug. Google Scholar; 10.S.H. Lee, ""Open Source Software Licensing"", Apr. 1999. Google Scholar; 11.M. Fink, The Business and Economics of Linux and Open Source, 2002. Google Scholar; 12.D.M. Nichols and M.B. Twidale, ""Usability and Open Source Software"". CrossRef  Google Scholar"	62- 69		Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		Notice of Violation of IEEE Publication Principles: Open source reuse in commercial firms	https://ieeexplore.ieee.org/document/1353225	IEEE	nan; Year; Bibtex
365	TrustSE	Increasing Software Quality using the Provenance of Software Development Processes	"Today's software development processes are complex. A lot of interaction occurs between developers, the tools they use, and even automatically between different tools. Examples of those interactions are entering a new requirement into the bug tracking system, committing new source code to the repository or automatic code style check during a check-in. To trace and understand the full process is hard. To get insight into these processes and to increase the quality of the resulting software release, we record information about the process during run-time. This information is called the Provenance of the process. With Provenance we can analyze and audit the software development process with the goals error detection, quality assurance, process validation, monitoring, statistical analysis, process optimization, or developer rating. For example, we can answer question such as ""Which requirement causes most bugs in release version X?"" or ""How many commits did developer Y contribute to release Z?"" The presentation describes the concepts of the Provenance data model and a software infrastructure for recording Provenance of software development processes. We show how the Provenance information helps to increase the quality of software releases and helps to give deep insight into the development process."	Provenance; Software engineering; Software quality; software product assurance	Schreiber, Andreas	ESA Software Product Assurance Workshop 2013	https://elib.dlr.de/86228/			"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Increasing software quality using the provenance of software development processes	https://elib.dlr.de/86228/	ESA	
366	TrustSE	Determining the provenance of software artifacts	Software clone detection has made substantial progress in the last 15 years, and software clone analysis is starting to provide real insight into how and why code clones are born, evolve, and sometimes die. In this position paper, we make the case that there is a more general problem lurking in the background: software artifact provenance analysis. We argue that determining the origin of software artifacts is an increasingly important problem with many dimensions. We call for simple and lightweight techniques that can be used to help narrow the search space, so that more expensive techniques - including manual examination can be used effectively on a smaller candidate set. We predict the problem of software provenance will lead towards new avenues of research for the software clones community.	provenance;  code fingerprints;  code evolution;  bertillonage; provenance, code fingerprints, code evolution, bertillonage	Godfrey, Michael W.; German, Daniel M.; Davies, Julius; Hindle, Abram	IWSC '11: Proceedings of the 5th International Workshop on Software Clones	https://doi.org/10.1145/1985404.1985418		65-66	"""@inproceedings{10.1145/1985404.1985418,
    author = ""Godfrey, Michael W. and German, Daniel M. and Davies, Julius and Hindle, Abram"",
    title = ""Determining the provenance of software artifacts"",
    year = ""2011"",
    isbn = ""9781450305884"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1985404.1985418"",
    doi = ""10.1145/1985404.1985418"",
    abstract = ""Software clone detection has made substantial progress in the last 15 years, and software clone analysis is starting to provide real insight into how and why code clones are born, evolve, and sometimes die. In this position paper, we make the case that there is a more general problem lurking in the background: software artifact provenance analysis. We argue that determining the origin of software artifacts is an increasingly important problem with many dimensions. We call for simple and lightweight techniques that can be used to help narrow the search space, so that more expensive techniques - including manual examination can be used effectively on a smaller candidate set. We predict the problem of software provenance will lead towards new avenues of research for the software clones community."",
    booktitle = ""Proceedings of the 5th International Workshop on Software Clones"",
    pages = ""65-66"",
    numpages = ""2"",
    keywords = ""provenance, code fingerprints, code evolution, bertillonage"",
    location = ""Waikiki, Honolulu, HI, USA"",
    series = ""IWSC '11""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Determining the provenance of software artifacts	https://doi.org/10.1145/1985404.1985418	Association for Computing Machinery	nan; References; Link
367	TrustSE	The Rise and Evolution of the Open Source Software Foundation	Free and open source software (FOSS) project communities continue to grow and thrive. When such projects reach a critical point in their growth, corporations express in participating.A  Corporations have more stringent robust software intellectual property (IP) management, however, and projects are not always up to the task. Neutral non-profit FOSS foundations have proved to be a solution to these problems, providing for the IP management needs of corporations while offering additional business and technical services to the project communities to encourage further growth and adoption. This article reviews how such neutral non-profit organizations have grown to meet the evolving legal, business, and technical needs of FOSS communities and businesses.		Paula Hunter; Stephen Walli	The Journal of Open Law, Technology and Society	https://www.jolts.world/index.php/jolts/article/view/64/0			"""nan"""	Included	Included				2	Google Scholar		The Rise and Evolution of the Open Source Software Foundation	https://www.jolts.world/index.php/jolts/article/view/64/0	JOLTS	
368	TrustSE	Improving reusability of software libraries through usage pattern mining	Modern software systems are increasingly dependent on third-party libraries. It is widely recognized that using mature and well-tested third-party libraries can improve developers' productivity, reduce time-to-market, and produce more reliable software. Today's open-source repositories provide a wide range of libraries that can be freely downloaded and used. However, as software libraries are documented separately but intended to be used together, developers are unlikely to fully take advantage of these reuse opportunities. In this paper, we present a novel approach to automatically identify third-party library usage patterns, i.e., collections of libraries that are commonly used together by developers. Our approach employs a hierarchical clustering technique to group together software libraries based on external client usage. To evaluate our approach, we mined a large set of over 6000 popular libraries from Maven Central Repository and investigated their usage by over 38,000 client systems from the Github repository. Our experiments show that our technique is able to detect the majority (77\%) of highly consistent and cohesive library usage patterns across a considerable number of client systems.	Software libraries; Software reuse; Clustering; Usage patterns; Software libraries;  Software reuse;  Clustering;  Usage patterns	Saied, Mohamed Aymen; Ouni, Ali; Sahraoui, Houari; Kula, Raula Gaikovina; Inoue, Katsuro; Lo, David	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2018.08.032		164-179	"""@article{WOS:000447575300009,
    Author = ""Saied, Mohamed Aymen and Ouni, Ali and Sahraoui, Houari and Kula, Raula Gaikovina and Inoue, Katsuro and Lo, David"",
    Title = ""Improving reusability of software libraries through usage pattern mining"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2018"",
    Volume = ""145"",
    Pages = ""164-179"",
    Month = ""NOV"",
    Abstract = ""Modern software systems are increasingly dependent on third-party libraries. It is widely recognized that using mature and well-tested third-party libraries can improve developers' productivity, reduce time-to-market, and produce more reliable software. Today's open-source repositories provide a wide range of libraries that can be freely downloaded and used. However, as software libraries are documented separately but intended to be used together, developers are unlikely to fully take advantage of these reuse opportunities. In this paper, we present a novel approach to automatically identify third-party library usage patterns, i.e., collections of libraries that are commonly used together by developers. Our approach employs a hierarchical clustering technique to group together software libraries based on external client usage. To evaluate our approach, we mined a large set of over 6000 popular libraries from Maven Central Repository and investigated their usage by over 38,000 client systems from the Github repository. Our experiments show that our technique is able to detect the majority (77\\%) of highly consistent and cohesive library usage patterns across a considerable number of client systems."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Saied, MA (Corresponding Author), Engn \\& Comp Sci, 1455 Maisonneuve Blvd W, Montreal, PQ H3G 1M8, Canada. Saied, Mohamed Aymen; Sahraoui, Houari, Univ Montreal, DIRO, Montreal, PQ, Canada. Ouni, Ali, Univ Quebec, ETS Montreal, Dept Software Engn \\& IT, Ste Foy, PQ, Canada. Kula, Raula Gaikovina, Osaka Univ, Grad Sch Informat Sci \\& Technol, Suita, Osaka, Japan. Inoue, Katsuro, Osaka Univ, Grad Sch Informat Sci \\& Technol, Dept Comp Sci, Suita, Osaka, Japan. Lo, David, Singapore Management Univ, Sch Informat Syst, Singapore, Singapore. Saied, Mohamed Aymen, Concordia Univ, Engn \\& Comp Sci, Montreal, PQ, Canada."",
    DOI = ""10.1016/j.jss.2018.08.032"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software libraries; Software reuse; Clustering; Usage patterns"",
    Keywords-Plus = ""APIS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""m\\_saied@encs.concordia.ca ali.ouni@etsmtl.ca sahraouh@iro.umontreal.ca raula-k@ist.osaka-u.ac.jp inoue@ist.osaka-u.ac.jp davidlo@smu.edu.sg"",
    Affiliations = ""Universite de Montreal; University of Quebec; Ecole de Technologie Superieure - Canada; Osaka University; Osaka University; Singapore Management University; Concordia University - Canada"",
    ResearcherID-Numbers = ""Ouni, Ali/Y-8280-2019 Saied, Mohamed Aymen/KYR-9074-2024 Kula, Raula/AAD-6079-2019 Lo, David/A-2493-2012"",
    ORCID-Numbers = ""Saied, Mohamed Aymen/0000-0002-9488-645X Kula, Raula Gaikovina/0000-0003-2324-0608 Lo, David/0000-0002-4367-7201 Ouni, Ali/0000-0003-4708-0362"",
    Number-of-Cited-References = ""46"",
    Times-Cited = ""37"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""GX2UJ"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000447575300009"",
    OA = ""Green Accepted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Improving reusability of software libraries through usage pattern mining	https://www.webofscience.com/wos/woscc/full-record/WOS:000447575300009	ELSEVIER SCIENCE INC	nan; References
369	TrustSE	Developing artificial agents worthy of trust: ``Would you buy a used car from this artificial agent?{''}	There is a growing literature on the concept of e-trust and on the feasibility and advisability of ``trusting{''} artificial agents. In this paper we present an object-oriented model for thinking about trust in both face-to-face and digitally mediated environments. We review important recent contributions to this literature regarding e-trust in conjunction with presenting our model. We identify three important types of trust interactions and examine trust from the perspective of a software developer. Too often, the primary focus of research in this area has been on the artificial agents and the humans they may encounter after they are deployed. We contend that the humans who design, implement, and deploy the artificial agents are crucial to any discussion of e-trust and to understanding the distinctions among the concepts of trust, e-trust and face-to-face trust.	Artificial agents; Trust; E-trust; Electronic trust; Modeling trust; Artificial agents;  Trust;  E-trust;  Electronic trust;  Modeling trust	Grodzinsky, F. S.; Miller, K. W.; Wolf, M. J.	ETHICS AND INFORMATION TECHNOLOGY	https://doi.org/10.1007/s10676-010-9255-1		17-27	"""@article{WOS:000287581900003,
    Author = ""Grodzinsky, F. S. and Miller, K. W. and Wolf, M. J."",
    Title = ""Developing artificial agents worthy of trust: ``Would you buy a used car from this artificial agent?{''}"",
    Journal = ""ETHICS AND INFORMATION TECHNOLOGY"",
    Year = ""2011"",
    Volume = ""13"",
    Number = ""1"",
    Pages = ""17-27"",
    Month = ""MAR"",
    Abstract = ""There is a growing literature on the concept of e-trust and on the feasibility and advisability of ``trusting{''} artificial agents. In this paper we present an object-oriented model for thinking about trust in both face-to-face and digitally mediated environments. We review important recent contributions to this literature regarding e-trust in conjunction with presenting our model. We identify three important types of trust interactions and examine trust from the perspective of a software developer. Too often, the primary focus of research in this area has been on the artificial agents and the humans they may encounter after they are deployed. We contend that the humans who design, implement, and deploy the artificial agents are crucial to any discussion of e-trust and to understanding the distinctions among the concepts of trust, e-trust and face-to-face trust."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Wolf, MJ (Corresponding Author), Bemidji State Univ, 1500 Birchmont Dr NE,23, Bemidji, MN 56601 USA. Wolf, M. J., Bemidji State Univ, Bemidji, MN 56601 USA. Grodzinsky, F. S., Univ Cattolica Sacro Cuore, Fairfield, CT USA. Miller, K. W., Univ Illinois, Springfield, IL USA."",
    DOI = ""10.1007/s10676-010-9255-1"",
    ISSN = ""1388-1957"",
    EISSN = ""1572-8439"",
    Keywords = ""Artificial agents; Trust; E-trust; Electronic trust; Modeling trust"",
    Keywords-Plus = ""ONLINE"",
    Research-Areas = ""Social Sciences - Other Topics; Information Science \\& Library Science; Philosophy"",
    Web-of-Science-Categories = ""Ethics; Information Science \\& Library Science; Philosophy"",
    Author-Email = ""grodzinskyf@sacredheart.edu miller.keith@uis.edu mjwolf@bemidjistate.edu"",
    Affiliations = ""Minnesota State Colleges \\& Universities; Bemidji State University; Catholic University of the Sacred Heart; University of Illinois System; University of Illinois Springfield"",
    ResearcherID-Numbers = ""Wolf, Marty/H-3802-2019"",
    ORCID-Numbers = ""Miller, Keith/0000-0001-5336-8181"",
    Number-of-Cited-References = ""32"",
    Times-Cited = ""17"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""Ethics Inf. Technol."",
    Doc-Delivery-Number = ""724MZ"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI); Arts \&amp; Humanities Citation Index (A\&amp;HCI)"",
    Unique-ID = ""WOS:000287581900003"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Developing artificial agents worthy of trust:“Would you buy a used car from this artificial agent?”	https://doi.org/10.1007/s10676-010-9255-1	SPRINGER	nan; References; Link
370	TrustSE	Managing license compliance in free and open source software development	License compliance in Free and Open Source Software development is a significant issue today and organizations using free and open source software are predominately focusing on this issue. The noncompliance to licenses in free and open source software development leads to the loss of reputation and the high costs of litigation for organizations. Towards an automated compliance management, we use the Open Digital Rights Language to implement the clauses of open source software licenses in a machine interpretable way and propose a novel algorithm that analyzes compatibility between free and open source software licenses. Also, we describe a framework that inductively manages compliance of license clauses in a free and open source software development. We simulate and evaluate the formalized license compliance management by analyzing a real-time open source software project GRASS.	Algorithms; Computer software; Laws and legislation; Software design; Compatibility analysis; Compliance management; Free and open source softwares; License compliance; Rights expression language; Copyrights; Algorithms;  Computer software;  Laws and legislation;  Software design;  Compatibility analysis;  Compliance management;  Free and open source softwares;  License compliance;  Rights expression language;  Copyrights	Gangadharan, G.R.; D'Andrea, Vincenzo; De Paoli, Stefano; Weiss, Michael	Information Systems Frontiers	https://doi.org/10.1007/s10796-009-9180-1	Bezroukov, N.(1998)The Idea of Dynamic Licensing.Cited 2 times.http://www.softpanorama.org/Copyright/License_classification/ dynamic_licensing.shtml; Campbell, J.(2007)Open Source Software - Clarifying the IP Trail.http://www.talentfirstnetwork.com; De Paoli, S., D'Andrea, V.; Fan, B., Aitken, A., Koenig, J.(2004)Open Source Intellectual Property and Licensing Compliance: A Survey and Analysis of Industry Best Practices..Cited 2 times.http://olliancegroup.com/opensource/compliance_best_practices.php; (1991)GNU General Public License..Cited 35 times.Free Software Foundationhttp://www.gnu.org/licenses/old-licenses/gpl-2.0.html; (2009)Various Licenses and Comments about Them..Cited 16 times.Free Software Foundationhttp://www.gnu.org/philosophy/licenselist.html; Gangadharan, G.R., D'Andrea, V., Iannella, R., Weiss, M.ODRL service licensing profile (ODRL-S)(2007)Proceedings of the 5th International Workshop for Technical, Economic, and Legal Aspects of Business Models for Virtual Goods.Cited 18 times.; Gangadharan, G.R., Weiss, M., D'Andrea, V., Iannella, R.; Gangadharan, G.R., Weiss, M., D'Andrea, V.Patterns for licensing web services(2008)Proceedings of the European Conference on Pattern Languages of Programs (EuroPLOP); Ghose, A., Koliadis, G.; Giblin, C., Muller, S., Pfitzmann, B.From regulatory policies to event monitoring rules: Towards model driven compliance automation(2006)Technical Report RZ-3662.Cited 70 times.IBM Research Laboratories; Gobeille, R.The FOSSology project(2008)Proceedings of the (MSR).Cited 2 times.; Governatori, G., Milosevic, Z., Sadiq, S.; Hassin, K.Open source on trial(2007)Open Source Business Resource..Cited 2 times.http://www.osbr.ca/ojs/index.php/osbr/article/view/391/352; Iannella, R.(2002)Open Digital Rights Language (ODRL) Version 1.1..Cited 197 times.http://odrl.net/1.1/ODRL-11.pdf; Iannella, R.(2005)ODRL Creative Commons Profile..Cited 3 times.http://odrl.net/Profiles/CC/SPEC.html; Kaminski, H., Perry, M.Open source software licensing patterns(2007)Proceedings of the Sixth Latin American Conference on Pattern Languages of Programming (SugarLoafPLoP).Cited 3 times.; Lessig, L.The creative commons(2004)Montana Law Review, 65, pp. 1-13.Cited 48 times.; Liu, Y., Muller, S., Xu, K.; Nordquist, P., Petersen, A., Todorova, A.License tracing in free open and proprietary software(2003)Proceedings of the Northwestern Conference by the Consortium for Computing Sciences in Colleges; (2006)Open Source Licenses..Cited 4 times.Open Source Initiative; Press, W., Teukolsky, S., Vetterling, W., Flannery, B.Numerical recipes(2007)The Art of Scientific Computing.Cited 98 times.Cambridge: Cambridge University Press; Ruffin, M., Ebert, C.	143 - 154	"""@ARTICLE{Gangadharan2012143,
    author = ""Gangadharan, G.R. and D'Andrea, Vincenzo and De Paoli, Stefano and Weiss, Michael"",
    title = ""Managing license compliance in free and open source software development"",
    year = ""2012"",
    journal = ""Information Systems Frontiers"",
    volume = ""14"",
    number = ""2"",
    pages = ""143 - 154"",
    doi = ""10.1007/s10796-009-9180-1"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84861459995\&doi=10.1007\%2fs10796-009-9180-1\&partnerID=40\&md5=495e973743296e5b605a52a8a188f0ee"",
    affiliations = ""Novay, Enschede, Netherlands; University of Trento, Trento, Italy; National University of Ireland Maynooth, Maynooth Town Co. Kildare, Ireland; Carleton University, Ottawa, Canada"",
    abstract = ""License compliance in Free and Open Source Software development is a significant issue today and organizations using free and open source software are predominately focusing on this issue. The noncompliance to licenses in free and open source software development leads to the loss of reputation and the high costs of litigation for organizations. Towards an automated compliance management, we use the Open Digital Rights Language to implement the clauses of open source software licenses in a machine interpretable way and propose a novel algorithm that analyzes compatibility between free and open source software licenses. Also, we describe a framework that inductively manages compliance of license clauses in a free and open source software development. We simulate and evaluate the formalized license compliance management by analyzing a real-time open source software project GRASS. (c) Springer Science+Business Media, LLC 2012."",
    author_keywords = ""Compatibility analysis; Compliance management; Free and open source software; License compliance; Rights expression languages"",
    keywords = ""Algorithms; Computer software; Laws and legislation; Software design; Compatibility analysis; Compliance management; Free and open source softwares; License compliance; Rights expression language; Copyrights"",
    correspondence_address = ""G.R. Gangadharan; Novay, Enschede, Netherlands; email: geeyaar@gmail.com"",
    issn = ""13873326"",
    language = ""English"",
    abbrev_source_title = ""Inf. Syst. Front."",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 25""
}
"""	Excluded	Excluded				2	Scopus Signed In		Managing license compliance in free and open source software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-84861459995&origin=resultslist&sort=r-f&src=s&sid=abb7aa0d90a7e78998156c70cc76dddb&sot=b&sdt=b&s=TITLE%28managing+license+compliance+in+free+and+open+source+software+development%29&sl=79&sessionSearchId=abb7aa0d90a7e78998156c70cc76dddb&relpos=0		nan; Publisher
371	TrustSE	Assessing Security Health of Open Source Software Packages	Open Source Software (OSS) is ubiquitous; OSS is becoming increasingly visible in organizations of varied sizes as well as by individual software developer(s). Individual software developers or groups or organizations that generate Package are generally known as upstream software sources. Conversely, the consumption of such Packages occurs in downstream projects. For instance: Android is an upstream project consumed by Qualcomm; Qualcomm further enriches android with specific hardware related drivers for downstream products made by companies like LG; finally, LG makes consumer products available for end-users. Here, an end-user is at the very end of the downstream whereas android is at the very top of upstream. Using OSS packages as components and dependencies during software development saves time and money in the software development process. Similarly, popular OSS packages receive contributions from interested software developers or organizations in the form of software contributions. Hence, a complex software supply chain exists wherever OSS packages are either developed or consumed. The existence of a software supply chain induces risk with association either directly or indirectly. The risk associated with OSS packages is inherited as part of its consumption and is multifold; This research primarily focuses on the software security risk inherited from dependencies and components for software development. This security risk can be attributed to software weaknesses and vulnerabilities in OSS components and their dependencies. Organizations, groups or individuals using OSS are interested in managing this risk, but often do not know how. In order to facilitate trustworthiness regarding decisions related to software security risk, this thesis proposes a data-driven analysis framework for OSS packages. This framework, called Advanced Package Enumeration (APE), is composed of three layers of abstraction linked to each other. In the first layer, the framework utilizes trusted databases to gather measures of a package. In the second layer, the framework generates metrics from measures. In the last layer, the framework performs a comparative analysis of packages. With the help of case studies, the use of the framework is demonstrated in determining security health of a software package.	CPE; CVE; CWE; software package; open source; weakness; software security; health; AP	Sai Uday Shankar Korlimarla	ProQuest Dissertations & Theses	https://www.proquest.com/docview/1859580572?pq-origsite=gscholar&fromopenview=true&sourcetype=Dissertations%20&%20Theses		75	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Assessing Security Health of Open Source Software Packages	https://www.proquest.com/docview/1859580572?pq-origsite=gscholar&fromopenview=true&sourcetype=Dissertations%20&%20Theses	University of Nebraska at Omaha	
372	TrustSE	A Public Domain Approach to Free and Open Source Software?		Software; code; FOSS; F/OSS; open source; software development; OSS; collaboration; programming; linux; GNU/Linux; GPL; general public license; OSD; open code; apache; SCO; viral code; patent; license; software license; implied license; copyleft; injunction	Greg R. Vetter	Ohio State Law Journal Furthermore, Forthcoming	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2326852		10	"""nan"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Google Scholar		A Public Domain Approach to Free and Open Source Software	https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2326852	SSRN	
373	TrustSE	OPEN SOURCE - NEW RULES IN SOFTWARE DEVELOPMENT	Open source is a term for software published under licence that does not give any property rights to the developers. Recently, attempts have been made to explain open source as the result of the collaboration of purely self-interested, utility-maximizing individuals. This approach is at least partially misguided. Open source can only be understood if it is analyzed as a community based on norms and trust. We sketch how trust in open source projects can be conceptionalized and refer to the concept of swift trust. Swift trust is based on an intrinsically motivated observance of norms and thus helps to solve the social dilemma of open source code development. We go on to show that, under certain conditions, even mainly extrinsically motivated actors can be forced to adhere to these norms of cooperation, thus solving the second order social dilemma of norm enforcement. Commercial firms that want to use the innovatory powers of open source for their own purposes have to respect and adhere to these norm- and trust-based foundations of cooperation.		MARGIT OSTERLOH; SANDRA ROTA; MARC VON WARTBURG		https://www.researchgate.net/profile/Margit-Osterloh/publication/228589925_Open_source-New_rules_in_software_development/links/543faa640cf2fd72f99c839c/Open-source-New-rules-in-software-development.pdf		23	"""nan"""	Excluded	Excluded				2	Google Scholar		Open source-New rules in software development	https://www.researchgate.net/profile/Margit-Osterloh/publication/228589925_Open_source-New_rules_in_software_development/links/543faa640cf2fd72f99c839c/Open-source-New-rules-in-software-development.pdf	Institute for Research in Business Administration.	
374	TrustSE	Open source software success: Measures and analysis	Despite a growing body of research on OSS production, much remains to be learned. One important issue concerns the measures of OSS project success and its determinants. In this paper, we empirically study the determinants of OSS success as measured by the number of subscribers and developers working on an OSS project. Furthermore, we demonstrate that our model forecasts these success measures more accurately as compared to a naive model. We find that OSS projects that develop software to work on Windows/UNIX/Linux operating systems, and developed using C or its derivative languages experience larger increase in subscribers and attract more developers than projects that do not have these characteristics. OSS projects with semi-restrictive licenses have fewer subscribers and attract fewer developers. Interestingly, OSS projects that accept financial donations and are targeted at IS/IT professionals have more subscribers than others, although these characteristics do not affect the developer base. The number of subscribers and developers increases with the age of the OSS project. Finally, the impact of developers on subscribers and subscribers on developers is positive and significant.	C (programming language); Computer software; Information dissemination; Project management; FLOSS (free/libre/open source software); Longitudinal study; Open Source Software; Software project success; Subscriber base; Open systems; C (programming language);  Computer software;  Information dissemination;  Project management;  FLOSS (free/libre/open source software);  Longitudinal study;  Open Source Software;  Software project success;  Subscriber base;  Open systems	Sen, Ravi; Singh, Siddhartha S.; Borle, Sharad	Decision Support Systems	https://doi.org/10.1016/j.dss.2011.09.003	Benkler, Y.; Boehm, B.W., Brown, J.R., Lipow, M.; Bonaccorsi, A., Rossi, C.; Crowston, K., Scozzi, B.; Crowston, K., Howison, J., Annabi, H.; Fershtman, C., Gandal, N.; Gorton, I., Liu, A.; Hann, I.-H., Slaughter, S.A., Roberts, J.; Howison, J., Crowston, K.The perils and pitfalls of mining Sourceforge(2004)The Proceedings of Mining Software Repositories Workshop, International Conference on Software Engineering, Edinburgh, Scotland.Cited 20 times.; Kogut, B., Metiu, A.; Lerner, J., Tirole, J.; Lerner, J., Tirole, J.; Martin, B.(1998)Information Liberation, pp. 29-56.Cited 37 times.Available at Freedom Press London (UK)http://www.bmartin.cc/pubs/98il/ilall.pdf; Mockus, A., Fielding, R.T., Herbsleb, J.D.; Neslon, M., Sen, R., Subramaniam, C.Understanding open source software development - A research classification framework(2006)Communications of AIS, 17 (12), pp. 266-287.Cited 30 times.; Ritchie, D.M.The development of the C programming language(1996)History of Programming Languages.Cited 96 times.T.J. Bergin, R.G. Gibson, ACM Press; Sen, R., Subramaniam, C., Nelson, M.L.; Shmueli, G., Minka, T.P., Kadane, J.B., Borle, S., Boatwright, P.; Singer, J.D., Willett, J.B.Modeling change and event occurrence(2003)Applied Longitudinal Data Analysis, p. 10.Cited 47 times.Oxford University Press New York; Stallman, R.M.The GNU operating system and the free software movement(1999)Open Sources: Voices from the Open Source Revolution.Cited 179 times.Available at O'Reilly Media Sebastopol, CAhttp://www.oreilly.com/catalog/opensources/book/stallman.html; Stewart, K.J., Gosain, S.; Stewart, K.J., Ammeter, A.P., Maruping, L.M.; Subramaniam, C., Sen, R., Nelson, M.L.; Madey, G.The SourceForge Research Data Archive (SRDA).Cited 33 times.University of Notre Dame. (Accessed January 2009)http://srda.cse.nd.edu/	364 - 372	"""@ARTICLE{Sen2012364,
    author = ""Sen, Ravi and Singh, Siddhartha S. and Borle, Sharad"",
    title = ""Open source software success: Measures and analysis"",
    year = ""2012"",
    journal = ""Decision Support Systems"",
    volume = ""52"",
    number = ""2"",
    pages = ""364 - 372"",
    doi = ""10.1016/j.dss.2011.09.003"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-82255179349\&doi=10.1016\%2fj.dss.2011.09.003\&partnerID=40\&md5=906d13e72f8211e71ed21039ce67f565"",
    affiliations = ""Department of Information and Operations Management, Texas A and M University, College Station, TX, United States; Indian School of Business, Hyderabad, India; Jones Graduate School of Business, Rice University, Houston, TX, United States"",
    abstract = ""Despite a growing body of research on OSS production, much remains to be learned. One important issue concerns the measures of OSS project success and its determinants. In this paper, we empirically study the determinants of OSS success as measured by the number of subscribers and developers working on an OSS project. Furthermore, we demonstrate that our model forecasts these success measures more accurately as compared to a naive model. We find that OSS projects that develop software to work on Windows/UNIX/Linux operating systems, and developed using C or its derivative languages experience larger increase in subscribers and attract more developers than projects that do not have these characteristics. OSS projects with semi-restrictive licenses have fewer subscribers and attract fewer developers. Interestingly, OSS projects that accept financial donations and are targeted at IS/IT professionals have more subscribers than others, although these characteristics do not affect the developer base. The number of subscribers and developers increases with the age of the OSS project. Finally, the impact of developers on subscribers and subscribers on developers is positive and significant. (c) 2011 Elsevier B.V. All rights reserved."",
    author_keywords = ""FLOSS (free/libre/open source software); Longitudinal study; OSS (open source software); Software project success; Subscriber base"",
    keywords = ""C (programming language); Computer software; Information dissemination; Project management; FLOSS (free/libre/open source software); Longitudinal study; Open Source Software; Software project success; Subscriber base; Open systems"",
    correspondence_address = ""R. Sen; Department of Information and Operations Management, Texas A and M University, College Station, TX, United States; email: rsen@mays.tamu.edu"",
    issn = ""01679236"",
    coden = ""DSSYD"",
    language = ""English"",
    abbrev_source_title = ""Decis Support Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 60""
}
"""	Included	Included				2	Scopus Signed In		Open source software success: Measures and analysis	https://www.scopus.com/record/display.uri?eid=2-s2.0-82255179349&origin=resultslist&sort=r-f&src=s&sid=a106668b0082303a6a24350ce2216bc8&sot=b&sdt=b&s=TITLE%28open+source+software+success+measures+and+analysis%29&sl=57&sessionSearchId=a106668b0082303a6a24350ce2216bc8&relpos=0		nan; Publisher
375	TrustSE	Measuring software library stability through historical version analysis	Backward compatibility is a major concern for any library developer. In this paper, we evaluate how stable a set of frequently used third-party libraries is in terms of method removals, implementation change, the ratio of change in old methods to change in new ones and the percentage of new methods in each snapshot. We provide a motivating example of a commercial company which demonstrates several issues associated with the usage of third-party libraries. To obtain dependencies from software systems we developed a framework which extracts dependencies from Maven build files and which analyzes system and library code. We propose four metrics which provide different insights in the implementation and interface stability of a library. The usage frequency of library methods is utilized as a weight in the final metric and is obtained from a dataset of more than 2300 snapshots of 140 industrial Java systems. We finally describe three scenarios and an example of the application of our metrics.	Libraries; Measurement; Java; Stability analysis; Security; Software; Conferences; Industrial Systems; Changes In Methods; Stable Interface; Motivating Example; Backward Compatibility; Library Users; Third-party Libraries; Frequency Of Use; Reliability Analysis; Commercial Software; Amount Of Work; Application Programming Interface; Commons; Amount Of Effort; Maintenance Of State; Weighting Scheme; Library Version; Use Of Libraries; Changes In Signatures; Software Projects; Data Collection Framework; Stability Metrics; Version Control System; Part Of Interface; Final Metric; Collection Unit; Refactoring; Open-source; Third-party Libraries; API Usage; API Stability; Software Reuse	Steven Raemaekers; Arie van Deursen; Joost Visser	2012 28th IEEE International Conference on Software Maintenance (ICSM)	https://doi.org/10.1109/ICSM.2012.6405296	1.B. Dagenais and M. P. Robillard. SemDiff: Analysis and recommendation support for API evolution. In Proc. of the 31st Int. Conf. on Software Engineering, ICSE '09, pages 599-602, 2009. View Article  Google Scholar; 2.D. Dig and R. Johnson. The role of refactorings in API evolution. In Proc. of the 21st IEEE Int. Conf. on Software Maintenance, ICSM '05, pages 389-398, 2005. View Article  Google Scholar; 3.M. Grechanik, C. McMillan, L. DeFerrari, M. Comi, S. Crespi, D. Poshyvanyk, C. Fu, Q. Xie, and C. Ghezzi. An empirical investigation into a large-scale Java open source code repository. In Proc. of the 2010 ACM-IEEE Int. Symposium on Empirical Software Engineering and Measurement, ESEM '10, pages 11:1-11:10, 2010. CrossRef  Google Scholar; 4.J. Henkel and A. Diwan. CatchUp!: capturing and replaying refactorings to support API evolution. In Proc. of the 27th Int. Conf. on Software engineering, ICSE '05, pages 274-283, 2005. CrossRef  Google Scholar; 5.R. Lammel, E. Pek, and J. Starek. Large-scale, AST-based API-usage analysis of open-source Java projects. In Proceedings of the 2011 ACM Symposium on Applied Computing, SAC '11, pages 1317-1324, 2011. CrossRef  Google Scholar; 6.Y. M. Mileva, V. Dallmeier, M. Burger, and A. Zeller. Mining trends of library usage. In Proc. of the joint Int. and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops, IWPSE-Evol '09, pages 57-62, 2009. CrossRef  Google Scholar; 7.J. H. Perkins. Automatically generating refactorings to support API evolution. In Proc. of the 6th ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering, PASTE '05, pages 111-114, 2005. CrossRef  Google Scholar; 8.S. Raemaekers, A. van Deursen, and J. Visser. An analysis of dependence on third-party libraries in open source and proprietary systems. In Sixth Int. Workshop on Software Quality and Maintainability, SQM '12, 2012. Google Scholar; 9.S. Thummalapenta and T. Xie. Spotweb: Detecting framework hotspots and coldspots via mining open source code on the web. In Proc. of the 2008 23rd IEEE/ACM Int. Conf. on Automated Software Engineering, ASE '08, pages 327-336, 2008. View Article  Google Scholar; 10.G. Uddin, B. Dagenais, and M. P. Robillard. Analyzing temporal API usage patterns. In 26th IEEE/ACM Int. Conf. on Automated Software Engineering, ASE '11, pages 456-459, 2011. View Article  Google Scholar; 11.T. Xie and J. Pei. MAPO: Mining API usages from open source repositories. In Proc. of the 2006 Int. workshop on Mining software repositories, MSR '06, pages 54-57, 2006. CrossRef  Google Scholar; 12.H. Zhong, T. Xie, L. Zhang, J. Pei, and H. Mei. MAPO: Mining and Recommending API Usage Patterns. In S. Drossopoulou, editor, ECOOP 2009 Object-Oriented Programming, volume 5653 of Lecture Notes in Computer Science, pages 318-343, 2009. CrossRef  Google Scholar			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Measuring software library stability through historical version analysis	https://ieeexplore.ieee.org/document/6405296	IEEE	nan; Pages; Year; Bibtex
376	TrustSE	Practical approach to automate the discovery and eradication of open-source software vulnerabilities at scale			Aladdin Almubayed	black hat USA 2019	https://i.blackhat.com/USA-19/Thursday/us-19-Almubayed-Practical-Approach-To-Automate-The-Discovery-And-Eradication-Of-Open-Source-Software-Vulnerabilities-At-Scale.pdf		88	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Practical approach to automate the discovery and eradication of open-source software vulnerabilities at scale	https://i.blackhat.com/USA-19/Thursday/us-19-Almubayed-Practical-Approach-To-Automate-The-Discovery-And-Eradication-Of-Open-Source-Software-Vulnerabilities-At-Scale.pdf	Netflix	
377	TrustSE	Empirical study of open source software selection for adoption, based on software quality characteristics	Currently, open source software (OSS) products have started to become popular in the market as an alternative to traditional proprietary or closed source software. Governments and organizations are beginning to adopt OSS on a large scale and several governmental initiatives have encouraged the use of OSS in the private sector. One major issue for the government and private sector is the selection of appropriate OSS. This paper uses new internal quality characteristics for selecting OSS that can be added to the dimensions of DeLone and McLean information systems' model. Through this study, the quality characteristics are organized in a two level hierarchy, which list characteristics and sub-characteristics that are interconnected with three main dimensions: system quality, information quality and service quality. These characteristic dimensions are tailored to the criteria having been built from literature study and standard for software quality and guidelines. This paper presents case study results of applying the proposed quality characteristic on eight different open source software that are divided between open source network tools and learning management systems.	Computer software selection and evaluation; Information analysis; Quality of service; Software engineering; Information quality; Open Source Software; Quality characteristic; Selection criteria; Service Quality; System quality; Open systems; Computer software selection and evaluation;  Information analysis;  Quality of service;  Software engineering;  Information quality;  Open Source Software;  Quality characteristic;  Selection criteria;  Service Quality;  System quality;  Open systems	Sarrab, Mohamed; Rehman, Osama M. Hussain	Advances in Engineering Software	https://doi.org/10.1016/j.advengsoft.2013.12.001		1 - 11	"""@ARTICLE{Sarrab20141,
    author = ""Sarrab, Mohamed and Rehman, Osama M. Hussain"",
    title = ""Empirical study of open source software selection for adoption, based on software quality characteristics"",
    year = ""2014"",
    journal = ""Advances in Engineering Software"",
    volume = ""69"",
    pages = ""1 - 11"",
    doi = ""10.1016/j.advengsoft.2013.12.001"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84892601718\&doi=10.1016\%2fj.advengsoft.2013.12.001\&partnerID=40\&md5=102b2e3d948a33890ff3d25521fd15c5"",
    affiliations = ""Communication and Information Research Center, Sultan Qaboos University, Oman; Electrical and Computer Engineering Department, Engineering Faculty, Sultan Qaboos University, Oman"",
    abstract = ""Currently, open source software (OSS) products have started to become popular in the market as an alternative to traditional proprietary or closed source software. Governments and organizations are beginning to adopt OSS on a large scale and several governmental initiatives have encouraged the use of OSS in the private sector. One major issue for the government and private sector is the selection of appropriate OSS. This paper uses new internal quality characteristics for selecting OSS that can be added to the dimensions of DeLone and McLean information systems' model. Through this study, the quality characteristics are organized in a two level hierarchy, which list characteristics and sub-characteristics that are interconnected with three main dimensions: system quality, information quality and service quality. These characteristic dimensions are tailored to the criteria having been built from literature study and standard for software quality and guidelines. This paper presents case study results of applying the proposed quality characteristic on eight different open source software that are divided between open source network tools and learning management systems. (c) 2013 Elsevier Ltd. All rights reserved."",
    author_keywords = ""Information quality; Open source software (OSS); Quality characteristics; Selection criteria; Service quality; System quality"",
    keywords = ""Computer software selection and evaluation; Information analysis; Quality of service; Software engineering; Information quality; Open Source Software; Quality characteristic; Selection criteria; Service Quality; System quality; Open systems"",
    correspondence_address = ""M. Sarrab; Communication and Information Research Center, Sultan Qaboos University, Oman; email: sarrab@squ.edu.om"",
    publisher = ""Elsevier Ltd"",
    issn = ""09659978"",
    coden = ""AESOD"",
    language = ""English"",
    abbrev_source_title = ""Adv Eng Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 42""
}
"""	Included	Included				2	Scopus Signed In		Empirical study of open source software selection for adoption, based on software quality characteristics	https://www.scopus.com/record/display.uri?eid=2-s2.0-84892601718&origin=resultslist&sort=r-f&src=s&sid=b0941468d6331d6199aad741c6c6d692&sot=b&sdt=b&s=TITLE%28empirical+study+of+open+source+software+selection+for+adoption+based+on+software+quality+characteristics%29&sl=111&sessionSearchId=b0941468d6331d6199aad741c6c6d692&relpos=0	Elsevier Ltd	nan; References
378	TrustSE	Trust and Community in Open Source Software Production	Open source software production is a successful new innovation model which disproves that only private ownership of intellectual property rights fosters innovations. It is analyzed here under which conditions the open source model may be successful in general. We show that a complex interplay of situational, motivational, and institutional factors have to be taken into account to understand how to manage the 'tragedy of the commons' as well as the 'tragedy of the anticommons'. It is argued that the success of this new innovation model is greatly facilitated by a well balanced portfolio of intrinsic and extrinsic motivation, low costs for contributors and governance mechanisms that do not crowd out intrinsic motivation.		Osterloh, Margit; Rota, Sandra	Trust and Community on the Internet: Opportunities and Restrictions for Online Cooperation	https://doi.org/10.1515/9783110508666-016		279 - 301	"""@BOOK{Osterloh2016279,
    author = ""Osterloh, Margit and Rota, Sandra"",
    title = ""Trust and Community in Open Source Software Production"",
    year = ""2016"",
    journal = ""Trust and Community on the Internet: Opportunities and Restrictions for Online Cooperation"",
    pages = ""279 - 301"",
    doi = ""10.1515/9783110508666-016"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85143091651\&doi=10.1515\%2f9783110508666-016\&partnerID=40\&md5=44752227d104158cf027e6f850eb06e2"",
    affiliations = ""University of Zurich, Institute for Organization and Administrative Science, Plattenstrasse, Zurich, 14 8032, Switzerland; University of Zurich, Institute for Organization and Administrative Science, Plattenstrasse, Zurich, 14 8032, Switzerland"",
    abstract = ""Open source software production is a successful new innovation model which disproves that only private ownership of intellectual property rights fosters innovations. It is analyzed here under which conditions the open source model may be successful in general. We show that a complex interplay of situational, motivational, and institutional factors have to be taken into account to understand how to manage the 'tragedy of the commons' as well as the 'tragedy of the anticommons'. It is argued that the success of this new innovation model is greatly facilitated by a well balanced portfolio of intrinsic and extrinsic motivation, low costs for contributors and governance mechanisms that do not crowd out intrinsic motivation. (c) Lucius \& Lucius, Stuttgart 2004."",
    publisher = ""De Gruyter"",
    isbn = ""978-311050866-6; 978-311051408-7"",
    language = ""English"",
    abbrev_source_title = ""Trust and Community on the Internet: Opportunities and Restrictions for Online Cooperation"",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 14; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Trust and community in open source software production	https://www.scopus.com/record/display.uri?eid=2-s2.0-85143091651&origin=resultslist&sort=r-f&src=s&sid=1e9b21d0828ecc4f6d7208d997a3f9ba&sot=b&sdt=b&s=TITLE%28trust+and+community+in+open+source+software+production%29&sl=61&sessionSearchId=1e9b21d0828ecc4f6d7208d997a3f9ba&relpos=0	De Gruyter	nan; Keywords; References
379	TrustSE	Waiting for Usable Open Source Software? Don't Hold Your Breath!	There is a general consensus about the lack of usability in most open source software (OSS). Academics and practitioners have offered several suggestions to improve the usability of such software. However, a realistic assessment of OSS projects, specifically the motivations of OSS developers and their attitude toward software usability, lack of user feedback, and absence of usability experts in OSS projects, leads to the conclusion that strategies to improve OSS usability are unlikely to succeed anytime soon. The only exceptions will be OSS which enjoy sufficient financial support from individuals and organizations, and software that were developed by commercial software producers and later released under an open source license.	software usability; OSS; FLOSS; usability	Ravi Sen	Communications of the Association for Information Systems	https://aisel.aisnet.org/cgi/viewcontent.cgi?article=2608&context=cais		20	"""nan"""	Excluded	Excluded				2	Google Scholar		Waiting for usable open source software? Don't hold your breath!	https://aisel.aisnet.org/cgi/viewcontent.cgi?article=2608&context=cais	Association for Information Systems	
380	TrustSE	Mining social networks for software vulnerabilities monitoring	Staying informed about security vulnerabilities, work-arounds and the availability of patches regarding the components of a given system is crucial to ensure system security. Several channels can be used to the monitor the new vulnerabilities publications, but these channels are scattered. We propose in this paper a vulnerability monitoring system based on twitter analysis that aggregates and analyses different sources of data and extracts zero-day vulnerabilities.	Software; Security; Twitter; Media; Monitoring; Databases; Clustering algorithms; Social Networks; Security Vulnerabilities; Different Sources Of Data; Twitter Analysis; Activity Levels; Data Processing; Social Media; Open-source Software; Information Quality; Software Development; Indicator Values; Kind Of Information; Key Performance Indicators; Information Security; User Profile; Social Media Data; Twitter Users; Software Components; Trust Model; Trust Value; Classical Sources; Social Media Tools; Software Vendors; Reputation System; Source Of Information; Date Of Publication; Local Database; Vulnerability; Social; Networks; Zero-day; Monitoring; Data Mining; CVE	Slim Trabelsi; Henrik Plate; Amine Abida; M. Marouane Ben Aoun; Anis Zouaoui; Chedy Missaoui	2015 7th International Conference on New Technologies, Mobility and Security (NTMS)	https://doi.org/10.1109/NTMS.2015.7266506	"1.Jiang Feng, Jiemin Wang, Abram Hindle and Mario A. Nascimento, ""Mining the Temporal Evolution of the Android Bug Reporting Community via Sliding Windows"", 2013. Google Scholar; 2.G. Bougie, J. Starke, M. A. Storey and D. M. German, ""Towards understanding twitter use in software engineering: preliminary findings ongoing challenges and future questions"", Proceedings of the 2nd international workshop on Web 2.0 for software engineering, pp. 31-36, 2011. CrossRef  Google Scholar; 3.Y. Tian, P. Achananuparp, I. N. Lubis, D. Lo and E. P. Lim, ""What does software engineering community microblog about? In Mining Software Repositories (MSR)"", 9th IEEE Working Conference on, pp. 247-250, 2012. Google Scholar; 4.Trabelsi Slim and Luca Boasso, ""The KPI-Based Reputation Policy Language"" in 2011 The Fifth International Conference on Sensor Technologies and Applications, SENSORCOMM, 2011. Google Scholar; 5.K. Bohm, S. Etalle, J. Den Hartog, C. Hutter, S. Trabelsi, D. Trivellato, et al., ""A flexible architecture for privacy-aware trust management"", Journal of theoretical and applied electronic commerce research, vol. 5, no. 2, pp. 77-96, 2010. CrossRef  Google Scholar; 6.J. B. MacQueen, ""Some methods for classification and analysis of multivariate observations"" in Proc. of the fifth Berkeley Symposium on Mathematical Statistics and Probability, University of California Press, vol. 1, pp. 281-297, 1967. Google Scholar; 7.D. S. Rajput, R. S. Thakur, G. S. Thakur and N. Sahu, ""Analysis of Social net-working sites using K-mean Clustering algorithm"", International Journal of Computer  Communication Technology (IJCCT), pp. 2231-0371, 2012. CrossRef  Google Scholar; 8.C. Bird, A. Gourley, P. T. Devanbu, M. Gertz and A. Swaminathan, ""Mining email social networks"", MSR, pp. 137-143, 2006. CrossRef  Google Scholar; 9.D. Surian, D. Lo and E.-P. Lim, ""Mining collaboration patterns from a large developer net-work"", pp. 269-273, 2010. Google Scholar; 10.Xu Jin, Scott Christley and Greg Madey, ""Application of social network analysis to the study of open source software"", The economics of open source software development, pp. 205-224, 2006. Google Scholar; 11.Bougie Gargi, Jamie Starke, Margaret-Anne Storey and Daniel M. German, ""Towards un-derstanding twitter use in software engineering: preliminary findings ongoing challenges and future questions"", Proceedings of the 2nd international workshop on Web 2.0 for software engineering, pp. 31-36, 2011. CrossRef  Google Scholar; 12.Tian Yuan, Palakorn Achananuparp, Ibrahim Nelman Lubis, Lo David and Ee-Peng Lim, ""What does software engineering community microblog about?"", Mining Software Re-positories (MSR) 2012 9th IEEE Working Conference on, pp. 247-250, 2012. View Article  Google Scholar; 13.Sureka Ashish, Atul Goyal and Ayushi Rastogi, ""Using social network analysis for mining collaboration data in a defect tracking system for risk and vulnerability analysis"", Proceedings of the 4th India Software Engineering Conference, pp. 195-204, 2011. CrossRef  Google Scholar; 14.Arafin, Md Tanvir and Richard Royster, ""Vulnerability Exploits Advertised on Twitter"", 2013. Google Scholar; 15.B. Cui, S. Moskal, H. Du and S. J. Yang, ""Who shall we follow in twitter for cyber vulnerability?"" in Social Computing Behavioral-Cultural Modeling and Prediction, Springer Berlin Heidelber, pp. 394-402, 2013. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were books or gray literature	2	IEEE		Mining social networks for software vulnerabilities monitoring	https://ieeexplore.ieee.org/document/7266506	IEEE	nan; Pages; Year; Bibtex
381	TrustSE	Vulnerability Likelihood: A Probabilistic Approach to Software Assurance	The importance of software security is undeniable given the impact of software on our lives. Assurance about the security properties of a software artifact should ultimately translate into a quantitative measure of vulnerabilities. In this paper, we present the idea of vulnerability likelihood as a probabilistic approach to software assurance. Gaining assurance early in the software development cycle is of immense value in directing future efforts. So we first discuss vulnerability likelihood in the context of vulnerability prediction in software artifacts. We propose four types of program properties that can be observed in software artifacts to potentially determine their vulnerability likelihood. Then we discuss vulnerability likelihood in the context of vulnerability detection. We propose a technique to quantify the assurance in the solutions of checkers for vulnerability detection that use static analysis. And finally, we illustrate the importance of vulnerability likelihood in a software development methodology to measurably increase software assurance.		Rajeev Gopalakrishna; Eugene H. Spafford; Jan Vitek	CERIAS Tech Report	https://www.cerias.purdue.edu/apps/reports_and_papers/view/2782		10	"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Vulnerability likelihood: A probabilistic approach to software assurance	https://www.cerias.purdue.edu/apps/reports_and_papers/view/2782	CERIAS, Purdue University	
382	TrustSE	Bug report quality evaluation considering the effect of submitter reputation	The quality of a bug report is a very crucial aspect that influences the entire software life cycle. Generally, in many software projects relevant lack of information can be observed when submitting a bug report. Consequently, the time resolution of a software problem is strongly influenced by the quality of the reporting. In this paper, we investigate the quality of bug reports from the perspective of developers. We examined several metrics impacting the quality of bug reports, such as the length of descriptions, presence of stack traces, presence of attachments, completeness, and readability. In addition different definition of submitter reputation are compared and used. Then, a quality model is built for the evaluation of the quality of the bug reports, and a software tool has been implemented for supporting the application of the proposed model. The validation has been conducted on real cases of bug reports from open source software.	Application programs; Computer software; Computer software selection and evaluation; Life cycle; Open source software; Open systems; Program debugging; Quality assurance; Software engineering; Bug reports; Open sources; Quality assessment; Software Quality; Validation; Quality control; Application programs;  Computer software;  Computer software selection and evaluation;  Life cycle;  Open source software;  Open systems;  Program debugging;  Quality assurance;  Software engineering;  Bug reports;  Open sources;  Quality assessment;  Software Quality;  Validation;  Quality control	Aversano, Lerina; Tedeschi, Ermanno	ICSOFT 2016 - Proceedings of the 11th International Joint Conference on Software Technologies	https://doi.org/10.5220/0005982601940201	Anvik, J., Hiew, L., Murphy, G.C.; Antoniol, G., Gall, H., Di Penta, M., Pinzger, M.(2004)Mozilla Closing the Circle.Cited 8 times.Techncal Report Technal Univ. of Vienna; Antoniol, G., Ayari, K., Di Penta, M., Khomh, F., Gueheneuc, Y.-G.; Aranda, J., Venolia, G.; Breu, S., Premraj, R., Sillito, J., Zimmermann, T.; Goldmerg, E.(2010)Bug Writing Guidelines.Cited 10 times.https://issues.apache.org/bugwritinghelp.html; Hooimeijer, P., Weimer, W.; Jalbert, N., Weimer, W.; Menzies, T., Marcus, A.; Schroter, A., Bettenburg, N., Premraj, R.Do Stack Trace Help Developpers Fix Bugs?(2010)IEEE Proceedings of International Working Conference Mining Software Repositories.Cited 2 times.; Ko, A.J., Myers, B.A., Chau, D.H.; Weimer, W.; Zimmermann, T., Premraj, R., Bettenburg, N., Just, S., Schroter, A., Weiss, C.	194 - 201	"""@CONFERENCE{Aversano2016194,
    author = ""Aversano, Lerina and Tedeschi, Ermanno"",
    editor = ""L., Maciaszek and J., Cardoso and E., Cabello and van Sinderen M. and L., Maciaszek and A., Ludwig and J., Cardoso"",
    title = ""Bug report quality evaluation considering the effect of submitter reputation"",
    year = ""2016"",
    journal = ""ICSOFT 2016 - Proceedings of the 11th International Joint Conference on Software Technologies"",
    volume = ""1"",
    pages = ""194 - 201"",
    doi = ""10.5220/0005982601940201"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85006043288\&doi=10.5220\%2f0005982601940201\&partnerID=40\&md5=5a648e92d78b715c649aab1fde6f18ac"",
    affiliations = ""Department of Engineering, University of Sannio, Via Traiano 1, Benevento, 82100, Italy"",
    abstract = ""The quality of a bug report is a very crucial aspect that influences the entire software life cycle. Generally, in many software projects relevant lack of information can be observed when submitting a bug report. Consequently, the time resolution of a software problem is strongly influenced by the quality of the reporting. In this paper, we investigate the quality of bug reports from the perspective of developers. We examined several metrics impacting the quality of bug reports, such as the length of descriptions, presence of stack traces, presence of attachments, completeness, and readability. In addition different definition of submitter reputation are compared and used. Then, a quality model is built for the evaluation of the quality of the bug reports, and a software tool has been implemented for supporting the application of the proposed model. The validation has been conducted on real cases of bug reports from open source software. Copyright (c) 2016 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved."",
    author_keywords = ""Bug report; Open source; Quality assessment; Software quality; Validation"",
    keywords = ""Application programs; Computer software; Computer software selection and evaluation; Life cycle; Open source software; Open systems; Program debugging; Quality assurance; Software engineering; Bug reports; Open sources; Quality assessment; Software Quality; Validation; Quality control"",
    publisher = ""SciTePress"",
    isbn = ""978-989758194-6"",
    language = ""English"",
    abbrev_source_title = ""ICSOFT - Proc. Int. Jt. Conf. Softw. Technol."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 3; Conference name: 11th International Conference on Software Engineering and Applications, ICSOFT-EA 2016 - Part of the 11th International Joint Conference on Software Technologies, ICSOFT 2016; Conference date: 24 July 2016 through 26 July 2016; Conference code: 123760; All Open Access, Hybrid Gold Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Bug Report Quality Evaluation Considering the Effect of Submitter Reputation	https://www.scopus.com/record/display.uri?eid=2-s2.0-85006043288&origin=resultslist&sort=r-f&src=s&sid=a29bced0e24db62655fa03d4f791ca99&sot=b&sdt=b&s=TITLE%28bug+report+quality+evaluation+considering+the+effect+of+submitter+reputation%29&sl=83&sessionSearchId=a29bced0e24db62655fa03d4f791ca99&relpos=0	SciTePress	
383	TrustSE	Studying re-opened bugs in open source software	Bug fixing accounts for a large amount of the software maintenance resources. Generally, bugs are reported, fixed, verified and closed. However, in some cases bugs have to be re-opened. Re-opened bugs increase maintenance costs, degrade the overall user-perceived quality of the software and lead to unnecessary rework by busy practitioners. In this paper, we study and predict re-opened bugs through a case study on three large open source projects - namely Eclipse, Apache and OpenOffice. We structure our study along four dimensions: (1) the work habits dimension (e.g., the weekday on which the bug was initially closed), (2) the bug report dimension (e.g., the component in which the bug was found) (3) the bug fix dimension (e.g., the amount of time it took to perform the initial fix) and (4) the team dimension (e.g., the experience of the bug fixer). We build decision trees using the aforementioned factors that aim to predict re-opened bugs. We perform top node analysis to determine which factors are the most important indicators of whether or not a bug will be re-opened. Our study shows that the comment text and last status of the bug when it is initially closed are the most important factors related to whether or not a bug will be re-opened. Using a combination of these dimensions, we can build explainable prediction models that can achieve a precision between 52.1-78.6 % and a recall in the range of 70.5-94.1 % when predicting whether a bug will be re-opened. We find that the factors that best indicate which bugs might be re-opened vary based on the project. The comment text is the most important factor for the Eclipse and OpenOffice projects, while the last status is the most important one for Apache. These factors should be closely examined in order to reduce maintenance cost due to re-opened bugs.	Computer software; Decision trees; Forecasting; Maintenance; Reverse engineering; Bug reports; Four dimensions; Maintenance cost; Maintenance resources; Open source projects; Open Source Software; Prediction model; Re-opened bugs; Program debugging; Computer software;  Decision trees;  Forecasting;  Maintenance;  Reverse engineering;  Bug reports;  Four dimensions;  Maintenance cost;  Maintenance resources;  Open source projects;  Open Source Software;  Prediction model;  Re-opened bugs;  Program debugging	Shihab, Emad; Ihara, Akinori; Kamei, Yasutaka; Ibrahim, Walid M.; Ohira, Masao; Adams, Bram; Hassan, Ahmed E.; Matsumoto, Ken-Ichi	Empirical Software Engineering	https://doi.org/10.1007/s10664-012-9228-6		1005 - 1042	"""@ARTICLE{Shihab20131005,
    author = ""Shihab, Emad and Ihara, Akinori and Kamei, Yasutaka and Ibrahim, Walid M. and Ohira, Masao and Adams, Bram and Hassan, Ahmed E. and Matsumoto, Ken-Ichi"",
    title = ""Studying re-opened bugs in open source software"",
    year = ""2013"",
    journal = ""Empirical Software Engineering"",
    volume = ""18"",
    number = ""5"",
    pages = ""1005 - 1042"",
    doi = ""10.1007/s10664-012-9228-6"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84881192641\&doi=10.1007\%2fs10664-012-9228-6\&partnerID=40\&md5=ba06111343744d15de42964e4a6ea908"",
    affiliations = ""Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, United States; Graduate School of Information Science, Nara Institute of Science and Technology, Takayama, Ikoma, Nara, Japan; Graduate School and Faculty of Information Science and Electrical Engineering, Kyushu University, Nishi-ku, Fukuoka, Japan; Software Analysis and Intelligence Lab (SAIL), Queen's University, Kingston, ON, Canada; Lab on Maintenance, Construction and Intelligence of Software (MCIS), Ecole Polytechnique de Montreal, Montreal, QC, Canada"",
    abstract = ""Bug fixing accounts for a large amount of the software maintenance resources. Generally, bugs are reported, fixed, verified and closed. However, in some cases bugs have to be re-opened. Re-opened bugs increase maintenance costs, degrade the overall user-perceived quality of the software and lead to unnecessary rework by busy practitioners. In this paper, we study and predict re-opened bugs through a case study on three large open source projects - namely Eclipse, Apache and OpenOffice. We structure our study along four dimensions: (1) the work habits dimension (e.g., the weekday on which the bug was initially closed), (2) the bug report dimension (e.g., the component in which the bug was found) (3) the bug fix dimension (e.g., the amount of time it took to perform the initial fix) and (4) the team dimension (e.g., the experience of the bug fixer). We build decision trees using the aforementioned factors that aim to predict re-opened bugs. We perform top node analysis to determine which factors are the most important indicators of whether or not a bug will be re-opened. Our study shows that the comment text and last status of the bug when it is initially closed are the most important factors related to whether or not a bug will be re-opened. Using a combination of these dimensions, we can build explainable prediction models that can achieve a precision between 52.1-78.6 \% and a recall in the range of 70.5-94.1 \% when predicting whether a bug will be re-opened. We find that the factors that best indicate which bugs might be re-opened vary based on the project. The comment text is the most important factor for the Eclipse and OpenOffice projects, while the last status is the most important one for Apache. These factors should be closely examined in order to reduce maintenance cost due to re-opened bugs. (c) 2012 Springer Science+Business Media, LLC."",
    author_keywords = ""Bug reports; Open source software; Re-opened bugs"",
    keywords = ""Computer software; Decision trees; Forecasting; Maintenance; Reverse engineering; Bug reports; Four dimensions; Maintenance cost; Maintenance resources; Open source projects; Open Source Software; Prediction model; Re-opened bugs; Program debugging"",
    correspondence_address = ""E. Shihab; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, United States; email: emad@se.rit.edu"",
    issn = ""15737616"",
    coden = ""ESENF"",
    language = ""English"",
    abbrev_source_title = ""Empir Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 98""
}
"""	Excluded	Excluded				2	Scopus Signed In		Studying re-opened bugs in open source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-84881192641&origin=resultslist&sort=r-f&src=s&sid=73d23ca344951d809df46fa115a5020e&sot=b&sdt=b&s=TITLE%28studying+re+opened+bugs+in+open+source+software%29&sl=54&sessionSearchId=73d23ca344951d809df46fa115a5020e&relpos=0		nan; References; Publisher
384	TrustSE	Meeting challenges and surviving success: the 2nd workshop on open source software engineering	No abstract available.		Feller, Joseph	ICSE '02: Proceedings of the 24th International Conference on Software Engineering	https://doi.org/10.1145/581339.581436		669-670	"""@inproceedings{10.1145/581339.581436,
    author = ""Feller, Joseph"",
    title = ""Meeting challenges and surviving success: the 2nd workshop on open source software engineering"",
    year = ""2002"",
    isbn = ""158113472X"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/581339.581436"",
    doi = ""10.1145/581339.581436"",
    booktitle = ""Proceedings of the 24th International Conference on Software Engineering"",
    pages = ""669-670"",
    numpages = ""2"",
    location = ""Orlando, Florida"",
    series = ""ICSE '02""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Meeting challenges and surviving success: the 2nd workshop on open source software engineering	https://doi.org/10.1145/581339.581436	Association for Computing Machinery	nan; Keywords; References; Link
385	TrustSE	Trustworthiness Evaluation and Testing of Open Source Components	The use of Open Source Components (OSCs) is rapidly increasing in software systems. One of the biggest obstacles for the use of OSCs is the fact that the software integrators can not be sure of the quality of the components. Thus, it is the responsibility of the integrators to perform the quality evaluation. When building products using OSCs, the integrators should have a clear method and tools that facilitate and automate the evaluation work. Our contribution is a method and tooling for trustworthiness evaluation and testing of OSCs. The method provides clear guidelines to assist the integrators to perform the evaluation in their own software development environment. The tooling assists in the technical trustworthiness evaluation, containing tools for reliability analysis and testing. The tools are independent, co-operating in the open source context.	Open source software; Programming; Software quality; Performance evaluation; Computer architecture; Software systems; Guidelines; Security; Automatic testing; Software tools; Open-source; Trustworthiness Ratings; Open Source Components; Reliability Analysis; System Software; Reliability Test; Evaluation Techniques; Testing Tools; Components Of Quality; Source Code; System Reliability; System Architecture; Quality Attributes; Model Architecture; Graphical Model; Tool Version; Reliable Evaluation; Probability Of Failure; Direct Evaluation; Software Components; Unified Modeling Language; Unit Tests; Sequence Diagram; Execution Path; Kinds Of Applications; State Diagram; Raw Information; Indirect Evaluation; Input Attributes; Domain-specific Models	Anne Immonen; Marko Palviainen	Seventh International Conference on Quality Software (QSIC 2007)	https://doi.org/10.1109/QSIC.2007.4385514	"1.S. Koch, ""Evolution of Open Source Software Systems - A Large-Scale Investigation"", Proceedings of the First International Conference on Open Source Systems, pp. 148-153, 2005. Google Scholar; 2.E. Raymond, ""The Cathedral and the Bazaar"", O'Reilly, pp. 279, 2001. Google Scholar; 3.P. Maki-Asiala and M. Matinlassi, ""Quality assurance of open source components: integrator point of view"", Proceedings of the 30th Annual International Computer Software and Applications Conference, pp. 189-192, 2006. CrossRef  Google Scholar; 4.R.H. Reussner, H.W. Schmidt and I.H. Poernomo, ""Reliability prediction for component-based software architectures"", Journal of Systems and Software, vol. 66, no. 3, pp. 241-252, 2003. CrossRef  Google Scholar; 5.E. Amoroso, J. Watson, M. Marietta and J. Weiss, ""A process-oriented methodology for assessing and improving software trustworthiness"", Proceedings of the 2nd ACM Conference on Computer and communications security, pp. 39-50, 1994. CrossRef  Google Scholar; 6.A. Immonen, ""A method for predicting reliability and availability at the architectural level"" in Software Product-Lines - Research Issues in Engineering and Management, Berlin Heidelberg:Springer-Verlag, pp. 373-422, 2006. CrossRef  Google Scholar; 7.A. Immonen and A. Niskanen, ""A tool for reliability and availability prediction"", Proceedings of the 31 st Euromicro Conference on Software Engineering and Advanced Applications, pp. 416-423, 2005. View Article  Google Scholar; 8.P. Neumann, ""Developing Open Source Systems: Principles for Composable Architectures (keynote speech)"", Proceedings of the Open Source Software Development Workshop, pp. 2-19, 2002. Google Scholar; 9.R. Murphy and D. Mauhgan, ""Trusted Open Source Operating Systems Research and Development"", Proceedings of the Open Source Software Development Workshop, pp. 22-29, 2002. Google Scholar; 10.A. Josang, R. Ismail and C. Boyd, ""A survey of trust and reputation systems for online service provision"", Decision Support Systems, 2005. Google Scholar; 11.A. Immonen and E. Niemela, ""Survey of Reliability and Availability Prediction Methods from the Viewpoint of Software Architecture"", Software and Systems Modeling, 2007. Google Scholar; 12.D. Rubel, ""The Heart of Eclipse"", ACM Queue, vol. 4, no. 6, pp. 36-44, 2006. CrossRef  Google Scholar; 13.""OMG Unified Modeling Language (UML) version 2.1.1"", Object Management Group, 2007. Google Scholar; 14.A. Evesti, Quality-oriented software architecture development in VTT Publications: 636, Espoo, Finland:VTT, pp. 79, 2007. Google Scholar; 15.M. Utting, ""Position Paper: Model-Based Testing. The Verified Software"", Theories Tools Experiments (VSTTE) conference, 2005. Google Scholar; 16.L.M. Garshol, BNF and EBNF: What are they and how do they work?, 2002. Google Scholar; 17.M. Palviainen, ""Task-based composition of the context-sensitive UIs of physical environments"", Proceedings of the Third International Conference on Autonomic and Autonomous Systems (ICAS 2007, 2007. View Article  Google Scholar"			Included	Included				2	IEEE		Trustworthiness evaluation and testing of open source components	https://ieeexplore.ieee.org/document/4385514	IEEE	nan; Pages; Year; Bibtex
386	TrustSE	Evolution of open source communities	The goal of this paper is to document the evolution of a portfolio of related open source communities over time. As a case study, we explore the subprojects of the Apache project, one of the largest and most visible open source projects. We extract the community structure from the mailing list data, and study how the subcommunities evolve, and are interrelated over time. Our analysis leads us to propose the following hypotheses about the growth of open source communities: (1) communities add new developers by a process of preferential attachment; (2) links between existing communities are also subject to preferential attachment; (3) developers will migrate between communities together with other collaborators; and (4) information flow follows project dependencies. In particular, we are concerned with the underlying factors that motivate the migration between communities, such as information flow, co-worker ties, and project dependencies.		Weiss, Michael; Moroiu, Gabriella; Zhao, Ping	OPEN SOURCE SYSTEMS	https://www.webofscience.com/wos/woscc/full-record/WOS:000238056100003		21+	"""@inproceedings{WOS:000238056100003,
    Author = ""Weiss, Michael and Moroiu, Gabriella and Zhao, Ping"",
    Editor = ""Damiani, E and Fitzgerald, B and Scacchi, W and Scotto, M and Succi, G"",
    Title = ""Evolution of open source communities"",
    Booktitle = ""OPEN SOURCE SYSTEMS"",
    Series = ""International Federation for Information Processing"",
    Year = ""2006"",
    Volume = ""203"",
    Pages = ""21+"",
    Note = ""International Conference on Open Software (OSS2006), Como, ITALY, JUN 08-10, 2006"",
    Organization = ""Int Federat Informat Proc, TC2 WG 2 13; COCOS; Gruppo Engn; AICA"",
    Abstract = ""The goal of this paper is to document the evolution of a portfolio of related open source communities over time. As a case study, we explore the subprojects of the Apache project, one of the largest and most visible open source projects. We extract the community structure from the mailing list data, and study how the subcommunities evolve, and are interrelated over time. Our analysis leads us to propose the following hypotheses about the growth of open source communities: (1) communities add new developers by a process of preferential attachment; (2) links between existing communities are also subject to preferential attachment; (3) developers will migrate between communities together with other collaborators; and (4) information flow follows project dependencies. In particular, we are concerned with the underlying factors that motivate the migration between communities, such as information flow, co-worker ties, and project dependencies."",
    Publisher = ""SPRINGER"",
    Address = ""233 SPRING STREET, NEW YORK, NY 10013, UNITED STATES"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Weiss, M (Corresponding Author), Carleton Univ, Sch Comp Sci, 1125 Colonel By Dr, Ottawa, ON K1S 5B6, Canada. Weiss, Michael; Moroiu, Gabriella; Zhao, Ping, Carleton Univ, Sch Comp Sci, 1125 Colonel By Dr, Ottawa, ON K1S 5B6, Canada."",
    ISSN = ""1571-5736"",
    ISBN = ""0-387-34225-7"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering"",
    Author-Email = ""weiss@scs.carleton.ca"",
    Affiliations = ""Carleton University"",
    Number-of-Cited-References = ""11"",
    Times-Cited = ""18"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""0"",
    Doc-Delivery-Number = ""BEL92"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000238056100003"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Evolution of open source communities	https://www.webofscience.com/wos/woscc/full-record/WOS:000238056100003	SPRINGER	nan; Keywords; References
387	TrustSE	Software and seeds: Open source methods	Open source methodologies used in software are interrogated and then compared to the methods used in farmers' rights groups. The use of open source methods in other contexts illustrates increasing interest in grassroots democratic movements participating in the continuing process of balance between public and private interests. These efforts provide a possible alternate framework for policy decisions concerning intellectual property.		Kipp, Margaret E.I.	First Monday	https://doi.org/10.5210/fm.v10i9.1276	Araya, A.A.(2000)Masipag Farmers Bring Nature Back to FarmingCyberDyaryo; Benkler, Y.; Berlan, J.-P., Lewontin, R.The political economy of hybrid corn(1986)Monthly Review, 38, pp. 35-47.Cited 41 times.; Berland, J.-P., Lewontin, R.; Boyle, J.(1996)Shamans, Software and Spleens: Law and the Construction of the Information Society.Cited 565 times.Cambridge, Mass.: Harvard University Press; Conner, A.J., Glare, T.R., Nap, J.-P.; Dyer-Witheford, N.E-Capital and the many headed hydra(2002)Critical Perspectives on the Internet, pp. 129-164.Cited 17 times.Greg Elmer (editor). Lanham, Md.: Rowman Littlefield; Dyer-Witheford, N.(1999)Cyber Marx: Cycles and Circuits of Struggle.Cited 583 times.Urbana: University of Illinois Press; Goetz, T.Open source everywhere(2003)Wired, 11 (1), p. 1.Cited 39 times.Novemberhttp://www.wired.com/wired/archive/11.11/opensource.html; Himanen, P.(2001)The Hacker Ethic, and the Spirit of the Information Age.Cited 479 times.New York: Random House; KAREIVA, P., MORRIS, W., JACOBI, C.M.; Kuyek, D.Rice is life(2002)New Internationalist, 349.Septemberhttp://www.newint.org/issue349/rice/htm; Lessig, L.(1999)Code and Other Laws of Cyberspace.Cited 2797 times.New York: Basic Books; (2002)Statement on Farmer's RightsMASIPAG; Montoya, F.(2003)Costa Rica Linux and Seeds, Geeks and Farmers - A Spiritual Link, A42.11 Septemberhttp://www.a42.com/node/view/343; Moody, G.(2001)Rebel Code: Linux and the Open Source Revolution.Cited 209 times.New York: Allen Lane; Philipkoski, K.Canola case tests GMO patent(2003)Wired News2 Decemberhttp://www.wired.com/news/print/0,1294,61241,00.html; Raymond, E.S.(2000)A Brief History of Hackerdom.Cited 41 times.http://www.catb.org/~esr/writings/hacker-history/hacker-history.html; Raymond, E.S.(1999)The Cathedral the Bazaar: Musings on Linux and Open Source by An Accidental Revolutionary.Cited 2844 times.Cambridge, Mass.: O'Reillyhttp://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/; Reichmann, J.H., Uhlir, P.F.(2001)Promoting Public Good Uses of Scientific Data: A Contractually Reconstructed Commons for Science and InnovationConference on the Public Domain, Duke Law School (9 November)http://www.law.duke.edu/pd/papers/ReichmanandUhlir.pdf; Siebrasse, N.A remedial benefit-based approach to the innocent-user problem in the patenting of higher life forms(2004)Canadian Intellectual Property Review, 20 (1), pp. 79-134.Cited 2 times.http://www.law.unb.ca/Siebrasse/Download/Remedial%20Approach.pdf; Smith, W.(2003)Costa Rica Open Source Seeds?, A42.9 Augusthttp://www.a42.com/node/view/308; Stallman, R.The GNU operating system and the free software movement(1999)Open Sources: Voices from the Open Source Revolution.Cited 179 times.Chris DiBona, Sam Ockman and Mark Stone (editors) Sebastopol, Calif.: O'Reilly; Stallman, R.(1985)The GNU Manifesto.Cited 132 times.http://www.gnu.org/gnu/manifesto.html; Thomson, J.A.; Torvalds, L.The linux edge(1999)Open Sources: Voices from the Open Source Revolution.Cited 44 times.Chris DiBona, Sam Ockman and Mark Stone (editors). Sebastopol, Calif.: O'Reilly; Weber, S.(2004)The Success of Open Source.Cited 899 times.Cambridge, Mass.: Harvard University Press		"""@ARTICLE{Kipp2005,
    author = ""Kipp, Margaret E.I."",
    title = ""Software and seeds: Open source methods"",
    year = ""2005"",
    journal = ""First Monday"",
    volume = ""10"",
    number = ""9"",
    doi = ""10.5210/fm.v10i9.1276"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-28144438817\&doi=10.5210\%2ffm.v10i9.1276\&partnerID=40\&md5=c9693d580eb295caf2664b00fed3a93d"",
    affiliations = ""Library and Information Science Program, Faculty of Media and Information Studies, University of Western Ontario, London, Ont., Canada"",
    abstract = ""Open source methodologies used in software are interrogated and then compared to the methods used in farmers' rights groups. The use of open source methods in other contexts illustrates increasing interest in grassroots democratic movements participating in the continuing process of balance between public and private interests. These efforts provide a possible alternate framework for policy decisions concerning intellectual property. Copyright (c)2005, First Monday."",
    publisher = ""First Monday"",
    issn = ""13960466"",
    language = ""English"",
    abbrev_source_title = ""First Monday"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 13""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software and seeds: Open source methods	https://www.scopus.com/record/display.uri?eid=2-s2.0-28144438817&origin=resultslist&sort=r-f&src=s&sid=e2e35f730392e8335516d8b94702f48d&sot=b&sdt=b&s=TITLE%28software+and+seeds+open+source+methods%29&sl=45&sessionSearchId=e2e35f730392e8335516d8b94702f48d&relpos=0	First Monday	nan; Keywords; Pages
388	TrustSE	Exploring the Effects of Process Characteristics on Product Quality in Open Source Software Development	There has been considerable discussion on the possible impacts of open source software development practices, especially in regard to the quality of the resulting software product. Recent studies have shown that analyzing data from source code repositories is an efficient way to gather information about project characteristics and programmers, showing that OSS projects are very heterogeneous in their team structures and software processes. However, one problem is that the resulting process metrics measuring attributes of the development process and of the development environment do not give any hints about the quality, complexity, or structure of the resulting software. Therefore, we expanded the analysis by calculating several product metrics, most of them specifically tailored to object-oriented software. We then analyzed the relationship between these product metrics and process metrics derived from a CVS repository. The aim was to establish whether different variants of open source development processes have a significant impact on the resulting software products. In particular we analyzed the impact on quality and design associated with the numbers of contributors and the amount of their work, using the GINI coefficient as a measure of inequality within the developer group.		Stefan Koch; Christian Neumann	Principle Advancements in Database Management Technologies: New Applications and Frameworks	https://www.igi-global.com/gateway/chapter/39353		28	"""nan"""	Included	Included				2	Google Scholar		Exploring the Effects of Process Characteristics on Products Quality in Open Source Software Development	https://www.igi-global.com/gateway/chapter/39353	IGI Global	
389	TrustSE	Software quality attributes and trade-offs			Patrik Berander; Lars-Ola Damm; Jeanette Eriksson; Tony Gorschek; Kennet Henningsson; Per Jonsson; Simon Kagstrom; Drazen Milicic; Frans Martensson; Kari Ronkko; Piotr Tomaszewski		https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=57d7ef7a35d480e2ebd41f66ece451c4d7a7a40a		100	"""nan"""	Included	Included				2	Google Scholar		Software quality attributes and trade-offs	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=57d7ef7a35d480e2ebd41f66ece451c4d7a7a40a	Blekinge Institute of Technology	
390	TrustSE	Evaluation criteria for free/open source software products based on project analysis	Today many companies decide to select free/open source software (F/OSS) products for various reasons, for example, economical or quality reasons. For many areas of application, they can choose from a variety of packages provided by different communities. Introducing a software tool into a company - either for supporting a certain business process or for the development of its own products - may be more or less critical depending on the application, which may range from explorative to mission critical. One of the most crucial problems in the usage of F/OSS is the actual decision to use a particular product. Although this is rather similar to the usual investment decisions, the consequences of an involvement in a software project are frequently underestimated. Whether a certain package is appropriate for the intended purposes in the given environment and is suitable to the overall business goals of the company is usually not determined systematically, but often arbitrarily. However, many important hints resulting from the development context of an F/OSS product as well as other technical and economical considerations could be helpful to make the product decision process more transparent and deterministic. In this article, we give a systematic approach for supporting a decision to incorporate a particular F/OSS product into an enterprise. Systematic decision support is provided by a rational approach that facilitates evaluating and interpreting the relevant project circumstances of an F/OSS product to be chosen. By this means, F/OSS projects can be critically reviewed in the light of the particular product requirements of the choosing organisation. The article addresses software managers and engineers in industry and academia.	Computer aided software engineering; Computer applications; Computer science; Decision theory; Education; Information technology; Problem solving; F/OSS; Free software; Open source; OSS; Product evaluation; Project analysis; Software engineering; Computer aided software engineering;  Computer applications;  Computer science;  Decision theory;  Education;  Information technology;  Problem solving;  F/OSS;  Free software;  Open source;  OSS;  Product evaluation;  Project analysis;  Software engineering	Cruz, David; Wieland, Thomas; Ziegler, Alexander	Software Process Improvement and Practice	https://doi.org/10.1002/spip.257	Asklund, U., Bendix, L.; Boyle, E.I., Weng, S., Gollub, J., Jin, H., Botstein, D., Cherry, J.M., Sherlock, G.; Chen, K., Schach, S.R., Yu, L., Offutt, J., Heller, G.Z.; Crowston, K., Scozzi, B.; DeLano, W.L.; Feller, J., Fitzgerald, B.(2002)Understanding Open Source Software Development.Cited 370 times.Addison Wesley: London, UK; Simon, G., von Krogh, G., Leonard, D., Swap, W.Walter; Hang, J., Hohensohn, H., Mayr, K., Wieland, T.Benefits and pitfalls of open source in commercial contexts(2004)Free/Open Source Software Development, pp. 222-241.Cited 9 times.Koch S (ed.). IDEA Group: Hershey, PA; Hissam, S.A., Plakosh, D., Weinstock, C.; (1990)IEEE Standard Computer Dictionary: A Compilation of IEEE Standard Computer Glossaries.Cited 814 times.The Institute of Electrical and Electronics Engineers: New York; Koch, S., Schneider, G.; Kontio, Jyrki; Lussier, S.; Morisio, M., Seaman, C.B., Basili, V.R., Parra, A.T., Kraft, S.E., Condon, S.E.; O'Mahony, S.; Payne, C.; Seifert, T., Wieland, T.Prerequisites for enterprises to get involved in open source software development(2003)1st Workshop of Open Source Software in Industrial Environments. Proceedings of Net.ObjectDAYSErfurt, Germany; Sharma, S., Sugumaran, V., Rajagopalan, B.; Yoo, T.S., Ackerman, M.J.	107 - 122	"""@ARTICLE{Cruz2006107,
    author = ""Cruz, David and Wieland, Thomas and Ziegler, Alexander"",
    title = ""Evaluation criteria for free/open source software products based on project analysis"",
    year = ""2006"",
    journal = ""Software Process Improvement and Practice"",
    volume = ""11"",
    number = ""2"",
    pages = ""107 - 122"",
    doi = ""10.1002/spip.257"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33744787136\&doi=10.1002\%2fspip.257\&partnerID=40\&md5=9c3f5dd815d2f676f4d31588bf81cfee"",
    affiliations = ""Technische Universitat Munchen, Institut fur Informatik, 85748 Garching, Boltzmannstr. 3, Germany; University of Applied Sciences Coburg, Department of Electrical Engineering and Computer Science, 96450 Coburg, Germany"",
    abstract = ""Today many companies decide to select free/open source software (F/OSS) products for various reasons, for example, economical or quality reasons. For many areas of application, they can choose from a variety of packages provided by different communities. Introducing a software tool into a company - either for supporting a certain business process or for the development of its own products - may be more or less critical depending on the application, which may range from explorative to mission critical. One of the most crucial problems in the usage of F/OSS is the actual decision to use a particular product. Although this is rather similar to the usual investment decisions, the consequences of an involvement in a software project are frequently underestimated. Whether a certain package is appropriate for the intended purposes in the given environment and is suitable to the overall business goals of the company is usually not determined systematically, but often arbitrarily. However, many important hints resulting from the development context of an F/OSS product as well as other technical and economical considerations could be helpful to make the product decision process more transparent and deterministic. In this article, we give a systematic approach for supporting a decision to incorporate a particular F/OSS product into an enterprise. Systematic decision support is provided by a rational approach that facilitates evaluating and interpreting the relevant project circumstances of an F/OSS product to be chosen. By this means, F/OSS projects can be critically reviewed in the light of the particular product requirements of the choosing organisation. The article addresses software managers and engineers in industry and academia. Copyright (c) 2006 John Wiley \& Sons, Ltd."",
    author_keywords = ""F/OSS; Free software; Open source; OSS; Product evaluation; Project analysis"",
    keywords = ""Computer aided software engineering; Computer applications; Computer science; Decision theory; Education; Information technology; Problem solving; F/OSS; Free software; Open source; OSS; Product evaluation; Project analysis; Software engineering"",
    correspondence_address = ""D. Cruz; Technische Universitat Munchen, Institut fur Informatik, 85748 Garching, Boltzmannstr. 3, Germany; email: cruz@informatik.tu-muenchen.de"",
    issn = ""10991670"",
    language = ""English"",
    abbrev_source_title = ""Softw. Process Improv. Pract."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 36""
}
"""	Included	Included				2	Scopus Signed In		Evaluation criteria for free/open source software products based on project analysis	https://www.scopus.com/record/display.uri?eid=2-s2.0-33744787136&origin=resultslist&sort=r-f&src=s&sid=7932ca1e63e8fd7c22c9a66c80a52ff1&sot=b&sdt=b&s=TITLE%28evaluation+criteria+for+free+open+source+software+products+based+on+project+analysis%29&sl=91&sessionSearchId=7932ca1e63e8fd7c22c9a66c80a52ff1&relpos=0		nan; Publisher
391	TrustSE	What makes computational open source software libraries successful?	Software is the backbone of scientific computing. Yet, while we regularly publish detailed accounts about the results of scientific software, and while there is a general sense of which numerical methods work well, our community is largely unaware of best practices in writing the large-scale, open source scientific software upon which our discipline rests. This is particularly apparent in the commonly held view that writing successful software packages is largely the result of simply 'being a good programmer' when in fact there are many other factors involved, for example the social skill of community building. In this paper, we consider what we have found to be the necessary ingredients for successful scientific software projects and, in particular, for software libraries upon which the vast majority of scientific codes are built today. In particular, we discuss the roles of code, documentation, communities, project management and licenses. We also briefly comment on the impact on academic careers of engaging in software projects.	Copyrights; Project management; Software engineering; Academic careers; Best practices; Community buildings; Open Source Software; Scientific softwares; Social skills; Software libraries; Software project; Open systems; Copyrights;  Project management;  Software engineering;  Academic careers;  Best practices;  Community buildings;  Open Source Software;  Scientific softwares;  Social skills;  Software libraries;  Software project;  Open systems	Bangerth, Wolfgang; Heister, Timo	Computational Science and Discovery	https://doi.org/10.1088/1749-4699/6/1/015010	Aagard, B.(2013)PyLith: A Finite Element Code for the Solution of Dynamic and Quasi-static Tectonic Deformation Problemswww.geodynamics.org/cig/software/pylith; Amestoy, P.R., Duff, I.S., L'Excellent, J.-Y., Koster, J.; Amestoy, P.R., Guermouche, A., L'Excellent, J.-Y., Pralet, S.; Balay, S., Brown, J., Buschelman, K., Eijkhout, V., Gropp, W.D., Kaushik, D., Knepley, M.G., (...), Zhang, H.(2012)PETSc Users Manual.Cited 2500 times.Technical Report ANL-95/11 revision 3.3; Balay, S., Buschelman, K., Gropp, W.D., Kaushik, D., Knepley, M.G., Curfman McInnes, L., Smith, B.F., (...), Zhang, H.(2013)PETSc.Cited 2500 times.www.mcs.anl.gov/petsc; Bangerth, W., Burstedde, C., Heister, T., Kronbichler, M.; Bangerth, W., Hartmann, R., Kanschat, G.; Bangerth, W.(2013)Aspect: Advanced Solver for Problems in Earth Convection.Cited 10 times.http://aspect.dealii.org/; Bangerth, W., Heister, T., Kanschat, G.(2013)Deal.II: Differential Equations Analysis Library Technical Reference.Cited 71 times.www.dealii.org/; Bangerth, W., Kayser-Herold, O.; Bank, R.E.(2012)PLTMG: Software Package for Solving Elliptic Partial Differential Equations.Cited 269 times.Philadelphia: SIAM) Users' Guide 11.0; Bartlett, R.A., Heroux, M.A., Willenbring, J.M.(2012)TriBITS Lifecycle Model.Cited 2 times.Technical Report SAND2012-0561 version 1.0; Bastian, P., Blatt, M., Dedner, A., Engwer, C., Klofkorn, R., Kornhuber, R., Ohlberger, M., (...), Sander, O.; Baxter, R., Chue Hong, N., Gorissen, D., Hetherington, J., Todorov, I.The research software engineer(2012)Digital Research Conference.Cited 23 times.(Oxford, September 2012); Beck, K.(2003)Test-Driven Development: By Example.Cited 1667 times.Reading, MA: Addison-Wesley; Bruaset, A.M., Langtangen, H.P.A comprehensive set of tools for solving partial differential equations; DiffPack(1997)Numerical Methods and Software Tools in Industrial Mathematics, pp. 61-90.Cited 39 times.M Daehlen and A Tveito (Boston, MA: Birkhauser); Childs, H., Brugger, E., Bonnell, K., Meredith, J., Miller, M., Whitlock, B., Max, N.; Van Der Walt, S.J.The Scipy documentation project (technical overview)(2008)SciPy Conf., p. 27.Cited 4 times.Pasadena, CA, 19-24 August; Fitzpatrick, B., Collins-Sussman, B.(2012)Team Geek: A Software Developer's Guide to Working Well with Others.Cited 8 times.(Sebastopol, CA: O'Reilly Media); Fogel, K.(2009)Producing Open Source Software.Cited 265 times.Sebastopol, CA: CreativeSpace Independent Publishing Platformhttp://producingoss.com/; (2009)Message Passing and Interface Forum.Cited 124 times.MPI: a message-passing interface standard (version 2.2) Technical Reportwww.mpi-forum.org/; Gamma, E., Helm, R., Johnson, R., Vlissides, J.(1994)Design Patterns: Elements of Reusable Object-Oriented Software.Cited 15551 times.(Reading, MA: Addison-Wesley); Geist, A., Begeulin, A., Dongarra, J., Jiang, W., Manchek, R., Sunderam, V.(1994)PVM: Parallel Virtual Machine. A Users' Guide and Tutorial for Networked Parallel Computing.Cited 1675 times.(Cambridge, MA: MIT); Gladwell, M.(2008)Outliers: The Story of Success.Cited 1675 times.(New York: Little, Brown & Company); Goodale, T., Allen, G., Lanfermann, G., Masso, J., Radke, T., Seidel, E., Shalf, J.The Cactus framework and toolkit: Design and applications(2003)VECPAR 2002: 5th Int. Conf. on Vector and Parallel Processing.Cited 104 times.(Berlin: Springer); Henderson, A., Ahrens, J., Law, C.(2004)The ParaView Guide.Cited 57 times.(Clifton Park, NY: Kitware); Heroux, M.A., Bartlett, R.A., Howle, V.E., Hoekstra, R.J., Hu, J.J., Kolda, T.G., Lehoucq, R.B., (...), Stanley, K.S.; Heroux, M.A.(2011)Trilinos.Cited 2 times.http://trilinos.sandia.gov; Howison, J., Herbsleb, J.D.; Kirk, B., Peterson, J.W., Stogner, R.H., Carey, G.F.LibMesh: A C + + library for parallel adaptive mesh refinement/coarsening simulations(2006)Eng. Comput., 22, pp. 237-254.Cited 617 times.10.1007/s00366-006-0049-3; Kronbichler, M., Heister, T., Bangerth, W.; Langtangen, H.P.Computational partial differential equations: Numerical methods and diffpack(2003)Programming, Texts in Computational Science and Engineering.Cited 296 times.(Berlin: Springer); Logg, A.; Logg, A., Wells, G.N.; Martin, K., Hoffman, B.(2010)Mastering CMake.Cited 15 times.5th ed (Clifton Park, NY: Kitware); Oliveira, S., Stewart, D.E.; Patzak, B., Bittnar, Z.; Raymond, E.S.(1999)The Cathedral and the Bazaar: Musings on Linux and Open Source by An Accidental Revolutionary.Cited 2844 times.(Sebastopol, CA: O'Reilly Media); Renard, Y., Pommier, J.(2006)Getfem + + Technical Report INSAToulousewww-gmm.insa-toulouse.fr/getfem/; Turk, M.(2013)How to Scale A Code in the Human Dimension.Cited 6 times.arXiv:1301.7064v1; Vaughn, G.V., Ellison, B., Tromey, T., Taylor, I.L.(2000)GNU Autoconf, Automake and Libtool(Indianapolis, IN: Sams Publishing); Verfurth, R.; Weinberg, G.(1998)The Psychology of Computer Programming: Silver Anniversary Edition.Cited 795 times.(New York: Dorset House); Wilson, G.(2012)Best Practices for Scientific Computing.Cited 36 times.Xiv:1210.0530v3		"""@ARTICLE{Bangerth2013,
    author = ""Bangerth, Wolfgang and Heister, Timo"",
    title = ""What makes computational open source software libraries successful?"",
    year = ""2013"",
    journal = ""Computational Science and Discovery"",
    volume = ""6"",
    number = ""1"",
    doi = ""10.1088/1749-4699/6/1/015010"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84891527027\&doi=10.1088\%2f1749-4699\%2f6\%2f1\%2f015010\&partnerID=40\&md5=bc77ace6dc7a7a3d0478ab7b07d92365"",
    affiliations = ""Department of Mathematics, Texas A and M University, College Station, TX 77843-3368, United States; Mathematical Sciences, O-110 Martin Hall, Clemson University, Clemson, SC 29634-0975, United States"",
    abstract = ""Software is the backbone of scientific computing. Yet, while we regularly publish detailed accounts about the results of scientific software, and while there is a general sense of which numerical methods work well, our community is largely unaware of best practices in writing the large-scale, open source scientific software upon which our discipline rests. This is particularly apparent in the commonly held view that writing successful software packages is largely the result of simply 'being a good programmer' when in fact there are many other factors involved, for example the social skill of community building. In this paper, we consider what we have found to be the necessary ingredients for successful scientific software projects and, in particular, for software libraries upon which the vast majority of scientific codes are built today. In particular, we discuss the roles of code, documentation, communities, project management and licenses. We also briefly comment on the impact on academic careers of engaging in software projects. (c) 2013 IOP Publishing Ltd."",
    keywords = ""Copyrights; Project management; Software engineering; Academic careers; Best practices; Community buildings; Open Source Software; Scientific softwares; Social skills; Software libraries; Software project; Open systems"",
    issn = ""17494699"",
    language = ""English"",
    abbrev_source_title = ""Comput. Sci. Discov."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 23; All Open Access, Bronze Open Access""
}
"""	Included	Included				2	Scopus Signed In		What makes computational open source software libraries successful?	https://www.scopus.com/record/display.uri?eid=2-s2.0-84891527027&origin=resultslist&sort=r-f&src=s&sid=172428cf37a2465d8710ba8c147a31a2&sot=b&sdt=b&s=TITLE%28what+makes+computational+open+source+software+libraries+successful%29&sl=73&sessionSearchId=172428cf37a2465d8710ba8c147a31a2&relpos=0		nan; Pages; Publisher
392	TrustSE	Attack Patterns as a Knowledge Resource for Building Secure Software	Building software with an adequate level of security assurance for its mission becomes more and more challenging every day as the size, complexity, and tempo of software creation increases and the number and the skill level of attackers continues to grow. These factors each exacerbate the issue that, to build secure software, builders must ensure that they have protected every relevant potential vulnerability; yet, to attack software, attackers often have to find and exploit only a single exposed vulnerability. To identify and mitigate relevant vulnerabilities in software, the development community needs more than just good software engineering and analytical practices, a solid grasp of software security features, and a powerful set of tools. All of these things are necessary but not sufficient. To be effective, the community needs to think outside of the box and to have a firm grasp of the attacker's perspective and the approaches used to exploit software.		Sean Barnum; Amit Sethi	OMG Software Assurance Workshop	http://www.orkspace.net/secdocs/Conferences/BlackHat/Federal/2007/Attack%20Patterns%20-%20Knowing%20Your%20Enemies%20in%20Order%20to%20Defeat%20Them-paper.pdf		31	"""nan"""	Included	Included				2	Google Scholar		Attack patterns as a knowledge resource for building secure software	http://www.orkspace.net/secdocs/Conferences/BlackHat/Federal/2007/Attack%20Patterns%20-%20Knowing%20Your%20Enemies%20in%20Order%20to%20Defeat%20Them-paper.pdf	CIGITAL, INC	
393	TrustSE	Measuring security requirements for software security	For the last decade's software security has gained attention by industries, experts and all other communities. Secure software is about mitigating risks from assets to achieve business goals. Security is highly depending on the context where software is deployed. But measuring software security even within a specific context is still not mature. This is because properties and metrics for measuring security are not properly defined and methods are lacking to provide a complete picture for measuring software security. Here we identify security requirements through asset based risk management process to describe soft ware security goal. Then based on the Goal-Question-Metric approach the identified security requirements are evaluated for measuring software security.	Software; Software measurement; Authentication; Authorization; Availability; Cybersecurity; Security Requirements; Risk Management; Security Goals; Development Phase; Availability Of Services; Processing Software; Security Policy; Security Measures; Information Security; Security Risks; Set Of Requirements; Requirements Engineering; Common Security; Security Objectives; Privacy Requirements; Integration Requirements; Critical Assets; Average Compliance; Non-repudiation; Security metrics; security requirements; security goal; software security	Shareeful Islam; Paolo Falcarin	2011 IEEE 10th International Conference on Cybernetic Intelligent Systems (CIS)	https://doi.org/10.1109/CIS.2011.6169137	"1.V. R. Basili, G. Caldiers and H.D. Rombach, The goal Question Metric Approach. Google Scholar; 2.N.R. mead, E. D. Hough and T.R. Stehney, Security Quality Requirements Engineering (SQUARE) Methodology (CMU/SEI-2005- TR-009). Google Scholar; 3.D. Firesmith, ""Engineering Security Requirements"", Journal of Object Technology, vol. 2, no. 1, pp. 53-68, January-February 2003. CrossRef  Google Scholar; 4.R. Scandariato, B.D. Win and W. Jossen, Towards a Measuring Framework for Security Properties of Software QoP'06, October 2006. Google Scholar; 5.T. Heyman, R. Scandariato, C. Huygens and W. Jossen, Using security pattern to combine security metrics. Google Scholar; 6.K.M. Khan and J. Han, ""Assessing Security Properties of Software Components: A software Engineering's Perspective"", Proceedings of the 2006 Australian Software Engineering Conference (ASWEC'06). View Article  Google Scholar; 7.INCITS/ISO/IEC 27001-2005 Information technology - Security techniques - Information security management systems Requirements developed by incites. Google Scholar; 8.R. Anderson, Security Engineering: A Guide to Building Dependable Distributed Systems, Wiley, 2001. Google Scholar; 9.J. Viega and G. McGraw, Building Security Software, New York:Addison-Wesley, 2001. Google Scholar; 10.B. Kitchenham and S. L. Pfleeger, Software Quality: The Elusive Target. IEEE Software, vol. 13, no. 1, pp. 12-21, 1996. Google Scholar; 11.R. Savola, ""Towards a Security Metrics Taxonomy for the Information and Communication Technology Industry"", International Conference on Software Engineering Advances (ICSEA 2007). View Article  Google Scholar; 12.F. Deissenboeck, S. Wagner, M. Pizka, S. Teuchert and J.-F. Girard, ""An Activity-Based Quality Model for Maintainability ICSM"", Proc. of the 23rd IEEE International Conference on Software Maintenance, vol. 07, 2007. Google Scholar"			Included	Included				2	IEEE		Measuring security requirements for software security	https://ieeexplore.ieee.org/document/6169137	IEEE	nan; Pages; Year; Bibtex
394	TrustSE	A literature review of research in software defect reporting	In 2002, the National Institute of Standards and Technology (NIST) estimated that software defects cost the U.S. economy in the area of $60 billion a year. It is well known that identifying and tracking these defects efficiently has a measurable impact on software reliability. In this work, we evaluate 104 academic papers on defect reporting published since the NIST report to 2012 to identify the most important advancements in improving software reliability though the efficient identification and tracking of software defects. We categorize the research into the areas of automatic defect detection, automatic defect fixing, attributes of defect reports, quality of defect reports, and triage of defect reports. We then summarize the most important work being done in each area. Finally, we provide conclusions on the current state of the literature, suggest tools and lessons learned from the research for practice, and comment on open research problems.	Computer software selection and evaluation; Quality assurance; Research; Software reliability; Software testing; Automatic defect detections; Literature reviews; National Institute of Standards and Technology; Quality of defect reports; Research problems; Software defects; Software quality assurance; Software test automation; Defects; Computer software selection and evaluation;  Quality assurance;  Research;  Software reliability;  Software testing;  Automatic defect detections;  Literature reviews;  National Institute of Standards and Technology;  Quality of defect reports;  Research problems;  Software defects;  Software quality assurance;  Software test automation;  Defects	Strate, Jonathan D.; Laplante, Phillip A.	IEEE Transactions on Reliability	https://doi.org/10.1109/TR.2013.2259204		444 - 454	"""@ARTICLE{Strate2013444,
    author = ""Strate, Jonathan D. and Laplante, Phillip A."",
    title = ""A literature review of research in software defect reporting"",
    year = ""2013"",
    journal = ""IEEE Transactions on Reliability"",
    volume = ""62"",
    number = ""2"",
    pages = ""444 - 454"",
    doi = ""10.1109/TR.2013.2259204"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84878678886\&doi=10.1109\%2fTR.2013.2259204\&partnerID=40\&md5=97243610790b2de8474f4677383c4c17"",
    affiliations = ""Pennsylvania State University, Malvern, PA 19355, United States"",
    abstract = ""In 2002, the National Institute of Standards and Technology (NIST) estimated that software defects cost the U.S. economy in the area of $60 billion a year. It is well known that identifying and tracking these defects efficiently has a measurable impact on software reliability. In this work, we evaluate 104 academic papers on defect reporting published since the NIST report to 2012 to identify the most important advancements in improving software reliability though the efficient identification and tracking of software defects. We categorize the research into the areas of automatic defect detection, automatic defect fixing, attributes of defect reports, quality of defect reports, and triage of defect reports. We then summarize the most important work being done in each area. Finally, we provide conclusions on the current state of the literature, suggest tools and lessons learned from the research for practice, and comment on open research problems. (c) 2012 IEEE."",
    author_keywords = ""Software defect reporting; software quality assurance; software test automation"",
    keywords = ""Computer software selection and evaluation; Quality assurance; Research; Software reliability; Software testing; Automatic defect detections; Literature reviews; National Institute of Standards and Technology; Quality of defect reports; Research problems; Software defects; Software quality assurance; Software test automation; Defects"",
    issn = ""00189529"",
    coden = ""IEERA"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans Reliab"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 32""
}
"""	Excluded	Excluded				2	Scopus Signed In		A literature review of research in software defect reporting	https://www.scopus.com/record/display.uri?eid=2-s2.0-84878678886&origin=resultslist&sort=r-f&src=s&sid=588bd5a66d3a4e824bf155a634138cf1&sot=b&sdt=b&s=TITLE%28a+literature+review+of+research+in+software+defect+reporting%29&sl=67&sessionSearchId=588bd5a66d3a4e824bf155a634138cf1&relpos=0		nan; References; Publisher
395	TrustSE	Software editions: An application of segmentation theory to the packaged software market	Introducing multiple editions of the same software is a relatively recent innovation in the software market. The editions serve to differentiate among different user segments. Introduction of similar low- and high-end products in other markets has been analyzed using segmentation theory. However, the software market is fundamentally different from other product markets in two respects: (1) Software is characterized by negligible marginal production cost, and (2) the option of offering upgrades also exists. We analyze the problem of software introduction using segmentation theory. Our analysis shows that if cannibalization is low, the vendor should introduce the full software as one edition. This result differs from that obtained in prior research, which showed that the seller should introduce two distinct products in such cases. When cannibalization is high, introducing multiple editions simultaneously is optimal under a variety of conditions. The strategy of introducing a high end edition in the first p eriod followed by the low-end edition in the second period is optimal only when the consumers are extremely impatient and the software is large. A significant result of our analysis is that offering upgrades is clearly superior to other strategies only in a very restricted range of parameters. Our analysis also suggests that the vendor's profit is higher when it announces the future strategy. Our theoretical results are supported by evidence from the software market.	Economics of software;; Information goods;; Market segmentation;; Software editions;; Software introduction;; Software marketing;; Software pricing	Raghunathan, S.	Journal of Management Information Systems	https://doi.org/10.1080/07421222.2000.11045638	Bakos, Y., Brynjolffson, E.Bundling information goods: Pricing, profits, and efficiency(2000)Management Sciencein press; Boehm, B.W.(1981)Software Engineering Economics.Cited 4173 times.Englewood Cliffs, NJ: Prentice-Hall; Boehm, B.W., Papaccio, P.N.; Brynjolfsson, E., Kemerer, C.F.; Dobson, G., Kalish, S.Positioning and pricing a product line(1988)Marketing Science, 5, pp. 107-125.Cited 264 times.Summer; Green, P., Desarbo, W.Componential segmentation in the analysis of consumer tradeoffs(1979)Journal of Marketing, 43, pp. 83-91.Cited 51 times.; Hughes, J., Ralf, M., Michels, B.(1998)Transform Your Supply Chain.Cited 54 times.Boston, MA: International Thompson Business Press; Kalish, S., Dobson, G., Nelson, P.An empirical evaluation of multiattribute utility and reservation price measurement(1988)Working Paper.Cited 2 times.Purdue University, Lafayette, IN; Kekre, S., Krishnan, M.S., Srinivasan, K.Drivers of customer satisfaction for software products: Implications for design and service support(1995)Management Science, 41 (9), pp. 1456-1470.Cited 107 times.September; Moorthy, K.S.Market segmentation, self-selection, and product line design(1984)Marketing Science, 3, pp. 288-305.Cited 511 times.Fall; Moorthy, K.S., Png, I.P.L.Market segmentation, cannibalization, and the timing of product introductions(1992)Management Science, 38 (3), pp. 345-359.Cited 362 times.March; Mussa, M., Rosen, S.; Padmanabhan, V., Rajiv, S., Srinivasan, K.Optimal product introductions under uncertainty with network externality(1997)Journal of Marketing Research, 34 (4), pp. 439-455.; Shapiro, C., Varian, H.R.Versioning: The smart way to sell information(1998)Harvard Business Review, pp. 106-114.Cited 192 times.November-December; Srinagesh, P., Bradburd, R.M.Quality distortion by a discriminating monopolist(1989)American Economic Review, 79, pp. 96-105.Cited 39 times.March; Wilson, L.O., Norton, J.A.Optimal entry timing for a product line extension(1989)Marketing Science, 8, pp. 1-17.Cited 142 times.Winter	87 - 113	"""@ARTICLE{Raghunathan200087,
    author = ""Raghunathan, S."",
    title = ""Software editions: An application of segmentation theory to the packaged software market"",
    year = ""2000"",
    journal = ""Journal of Management Information Systems"",
    volume = ""17"",
    number = ""1"",
    pages = ""87 - 113"",
    doi = ""10.1080/07421222.2000.11045638"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034434745\&doi=10.1080\%2f07421222.2000.11045638\&partnerID=40\&md5=42f862b57320e2e7a13ca9e018911511"",
    affiliations = ""School of Management, University of Texas at Dallas, Richardson, TX, United States"",
    abstract = ""Introducing multiple editions of the same software is a relatively recent innovation in the software market. The editions serve to differentiate among different user segments. Introduction of similar low- and high-end products in other markets has been analyzed using segmentation theory. However, the software market is fundamentally different from other product markets in two respects: (1) Software is characterized by negligible marginal production cost, and (2) the option of offering upgrades also exists. We analyze the problem of software introduction using segmentation theory. Our analysis shows that if cannibalization is low, the vendor should introduce the full software as one edition. This result differs from that obtained in prior research, which showed that the seller should introduce two distinct products in such cases. When cannibalization is high, introducing multiple editions simultaneously is optimal under a variety of conditions. The strategy of introducing a high end edition in the first p eriod followed by the low-end edition in the second period is optimal only when the consumers are extremely impatient and the software is large. A significant result of our analysis is that offering upgrades is clearly superior to other strategies only in a very restricted range of parameters. Our analysis also suggests that the vendor's profit is higher when it announces the future strategy. Our theoretical results are supported by evidence from the software market."",
    author_keywords = ""Economics of software; Information goods; Market segmentation; Software editions; Software introduction; Software marketing; Software pricing"",
    publisher = ""M.E. Sharpe Inc."",
    issn = ""07421222"",
    coden = ""JMISE"",
    language = ""English"",
    abbrev_source_title = ""J Manage Inf Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 37""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software editions: An application of segmentation theory to the packaged software market	https://www.scopus.com/record/display.uri?eid=2-s2.0-0034434745&origin=resultslist&sort=r-f&src=s&sid=78dd3055b09f015930a45f2639645108&sot=b&sdt=b&s=TITLE%28software+editions+an+application+of+segmentation+theory+to+the+packaged+software+market%29&sl=94&sessionSearchId=78dd3055b09f015930a45f2639645108&relpos=0	M.E. Sharpe Inc	
396	TrustSE	Patch Release Behaviors of Software Vendors in Response to Vulnerabilities: An Empirical Analysis	Software vulnerabilities have become a serious concern because unpatched software runs the risk of being exploited by hackers. There is a need for software vendors to make software patches available in a timely manner for vulnerabilities in their products. We develop a survival analysis model of software vendors' patch release behavior and test it using a data set compiled from the National Vulnerability Database, United States Computer Emergency Readiness Team, and vendor Web sites. This model helps to understand how factors specific to vulnerabilities, patches, software vendors, and software affect the patch release behavior of software vendors based on their cost structure. This study also analyzes the impact of the presence of multiple vendors and type of vendor on the patch release behavior of software vendors. Our results indicate that vulnerabilities with high confidentiality impact or high integrity impact are patched faster than vulnerabilities with high availability impact. Interesting differences in the patch release behavior of software vendors based on software type (new release versus update) and type of vendor (open source versus proprietary) are found. Our results illustrate that when there are legislative pressures, vendors react faster in patching vulnerabilities. Thus, appropriate regulations can be an important policy tool to influence vendor behavior toward socially desirable security outcomes.	patch quality; patch release time; patch types; software vendor types; software vulnerability characteristics; survival analysis; patch quality;  patch release time;  patch types;  software vendor types;  software vulnerability characteristics;  survival analysis	Temizkan, Orcun; Kumar, Ram L.; Park, SungJune; Subramaniam, Chandrasekar	JOURNAL OF MANAGEMENT INFORMATION SYSTEMS	https://doi.org/10.2753/MIS0742-1222280411		305-337	"""@article{WOS:000303603900012,
    Author = ""Temizkan, Orcun and Kumar, Ram L. and Park, SungJune and Subramaniam, Chandrasekar"",
    Title = ""Patch Release Behaviors of Software Vendors in Response to Vulnerabilities: An Empirical Analysis"",
    Journal = ""JOURNAL OF MANAGEMENT INFORMATION SYSTEMS"",
    Year = ""2012"",
    Volume = ""28"",
    Number = ""4"",
    Pages = ""305-337"",
    Month = ""SPR"",
    Abstract = ""Software vulnerabilities have become a serious concern because unpatched software runs the risk of being exploited by hackers. There is a need for software vendors to make software patches available in a timely manner for vulnerabilities in their products. We develop a survival analysis model of software vendors' patch release behavior and test it using a data set compiled from the National Vulnerability Database, United States Computer Emergency Readiness Team, and vendor Web sites. This model helps to understand how factors specific to vulnerabilities, patches, software vendors, and software affect the patch release behavior of software vendors based on their cost structure. This study also analyzes the impact of the presence of multiple vendors and type of vendor on the patch release behavior of software vendors. Our results indicate that vulnerabilities with high confidentiality impact or high integrity impact are patched faster than vulnerabilities with high availability impact. Interesting differences in the patch release behavior of software vendors based on software type (new release versus update) and type of vendor (open source versus proprietary) are found. Our results illustrate that when there are legislative pressures, vendors react faster in patching vulnerabilities. Thus, appropriate regulations can be an important policy tool to influence vendor behavior toward socially desirable security outcomes."",
    Publisher = ""ROUTLEDGE JOURNALS, TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OX14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Temizkan, O (Corresponding Author), Univ N Carolina, Belk Coll Business Adm, Charlotte, NC 28223 USA. Temizkan, Orcun; Kumar, Ram L.; Park, SungJune; Subramaniam, Chandrasekar, Univ N Carolina, Belk Coll Business Adm, Charlotte, NC 28223 USA."",
    DOI = ""10.2753/MIS0742-1222280411"",
    ISSN = ""0742-1222"",
    EISSN = ""1557-928X"",
    Keywords = ""patch quality; patch release time; patch types; software vendor types; software vulnerability characteristics; survival analysis"",
    Keywords-Plus = ""INFORMATION; COMPLEXITY; IMPACT; DISCLOSURE; PERFORMANCE; MODELS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Affiliations = ""University of North Carolina; University of North Carolina Charlotte"",
    ResearcherID-Numbers = ""Temizkan, Orcun/AAE-7008-2019 Park, Sungjune/J-9525-2016"",
    ORCID-Numbers = ""Park, Sungjune/0000-0001-7482-4553"",
    Number-of-Cited-References = ""51"",
    Times-Cited = ""30"",
    Usage-Count-Last-180-days = ""6"",
    Usage-Count-Since-2013 = ""60"",
    Journal-ISO = ""J. Manage. Inform. Syst."",
    Doc-Delivery-Number = ""936QA"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000303603900012"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Patch release behaviors of software vendors in response to vulnerabilities: An empirical analysis	https://www.webofscience.com/wos/woscc/full-record/WOS:000303603900012	ROUTLEDGE JOURNALS, TAYLOR \& FRANCIS LTD	nan; References
397	TrustSE	Improvement of Open Source Software Usability: An Empirical Evaluation from Developers' Perspective	User satisfaction has always been important for software success whether it is Open Source Software (OSS) or closed proprietary software. Even though we do not presume that OSS always has poor usability, as there are examples of good usable open source software, it would still be agreed that OSS usability has room for further improvement. This paper presents an empirical investigation to study the impact of some key factors on OSS usability from developers' points of view. This is one of the series of four studies that we are conducting regarding improvement of OSS usability from OSS developers, users, contributors, and industry perspectives. The research model of this empirical investigation studies and establishes the relationship between the key usability factors from developers' perspective and OSS usability. A data set of 106 OSS developers from 18 open source projects of varied size has been used to study the research model. The results of this study provide empirical evidence that the studied key factors play a significant role in improving OSS usability.		Arif Raza; Luiz F. Capretz; Faheem Ahmed	Advances in Software Engineering	https://onlinelibrary.wiley.com/doi/full/10.1155/2010/517532			"""nan"""	Excluded	Excluded				2	Google Scholar		Improvement of open source software usability: an empirical evaluation from developers' perspective	https://onlinelibrary.wiley.com/doi/full/10.1155/2010/517532	Wiley Online Library	
398	TrustSE	Assessing Free/Open Source Software Quality	According to its proponents, one of the most acclaimed advantages of Free/Open Source Software (F/OSS) is its superior quality. However, this suggestion is an open issue, since there is little concrete evidence to justify whether F/OSS quality is indeed better or worse than that of proprietary software products. The general perspective of this article is to discuss the current status of F/OSS quality and to assess its performance in various aspects of quality, based on existing literature. Specifically, this article will provide some answers to various questions raised by the assertion concerning the quality of F/OSS. In this regard issues addressed in this article include the quality framework, through which F/OSS quality should be investigated and the performance of F/OSS in various quality factors within this quality framework. Answers to these issues are given by providing evidence from various research papers, empirical studies and reports based on experience about the quality of F/OSS products. The overall results seem to indicate that F/OSS has achieved an acceptable level of quality, although there is more to be done in order to outperform proprietary software.	Free Software; Open Source Software; Software Quality	Ioannis Samoladas; Ioannis Stamelos		https://d1wqtxts1xzle7.cloudfront.net/41833459/Assessing_freeopen_source_software_quali20160131-16550-1t1tkw1-libre.pdf?1454309508=&response-content-disposition=inline%3B+filename%3DAssessing_free_open_source_software_qual.pdf&Expires=1733484615&Signature=N8zWrS6oLb1wM2BkUYkk1NEs3bMZAqUDJqe4xS~crpZGznAGKHXEqEgYDxRNDyamqnuhiu~LwDC4aH-LZeNBqgnLE46dlo1lBKjo3rOm8Jkb0JwftoV66cXMb-dg8P9unI4ZDx-ywiZOgoR0c3QJuo3~6gcE-LdtdF8~46PRzdAvXRECPYyTCBS9M5EMnvqFiQ5Sqjv~23yEPa1BdSOErEBMFA00J3bZrArA7sqLgxkBVq14AahNqgWOXg7QOH6QOgxInM-I-xcF6nAPi94xPsOOmF8zx2gTUDMXkIK2WbYXda9yMLqQmj9LEODgT2Cpy2sFNjz7NgFGrBgRZSET7A__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA		36	"""nan"""	Excluded	Excluded				2	Google Scholar		Assessing free/open source software quality	https://d1wqtxts1xzle7.cloudfront.net/41833459/Assessing_freeopen_source_software_quali20160131-16550-1t1tkw1-libre.pdf?1454309508=&response-content-disposition=inline%3B+filename%3DAssessing_free_open_source_software_qual.pdf&Expires=1733484615&Signature=N8zWrS6oLb1wM2BkUYkk1NEs3bMZAqUDJqe4xS~crpZGznAGKHXEqEgYDxRNDyamqnuhiu~LwDC4aH-LZeNBqgnLE46dlo1lBKjo3rOm8Jkb0JwftoV66cXMb-dg8P9unI4ZDx-ywiZOgoR0c3QJuo3~6gcE-LdtdF8~46PRzdAvXRECPYyTCBS9M5EMnvqFiQ5Sqjv~23yEPa1BdSOErEBMFA00J3bZrArA7sqLgxkBVq14AahNqgWOXg7QOH6QOgxInM-I-xcF6nAPi94xPsOOmF8zx2gTUDMXkIK2WbYXda9yMLqQmj9LEODgT2Cpy2sFNjz7NgFGrBgRZSET7A__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA	University of Informatics Greece	
399	TrustSE	Exploitation and exploration networks in open source software development: An artifact-level analysis	Open source software (OSS) development is an increasingly important paradigm of software development. However, key aspects of OSS such as the determinants of project success and motivations of developers in joining these projects are not well understood. Based on organizational theory, we propose that OSS activities of patch development and feature request can be classified as exploitation (implementation-oriented) and exploration (innovation-oriented) activities, respectively. We empirically examine how the structure of social network affects the success of patch-development and feature-request networks in OSS projects, using a data set collected from the SourceForge database. Our results provide empirical support for the view that patch development and feature request are exploitation and exploration activities, respectively. Network structures differ due to team formation differences and have a differential impact on development success based on the type of activity. The concepts of ambidextrous developers and ambidexterity are explored in the context of OSS projects. Collectively, our results indicate that studying OSS projects at the artifact level could improve our understanding of OSS project success and team formation. This, in turn, could lead to better management of OSS projects.	Computer software; Open systems; Social networking (online); Social sciences computing; Software design; Software engineering; Data set; Exploitation and explorations; Feature requests; Network structures; Organizational theory; Project success; SourceForge; Team formation; Open source software; Computer software;  Open systems;  Social networking (online);  Social sciences computing;  Software design;  Software engineering;  Data set;  Exploitation and explorations;  Feature requests;  Network structures;  Organizational theory;  Project success;  SourceForge;  Team formation;  Open source software	Temizkan, Orcun; Kumar, Ram L.	Journal of Management Information Systems	https://doi.org/10.1080/07421222.2015.1029382		116 - 150	"""@ARTICLE{Temizkan2015116,
    author = ""Temizkan, Orcun and Kumar, Ram L."",
    title = ""Exploitation and exploration networks in open source software development: An artifact-level analysis"",
    year = ""2015"",
    journal = ""Journal of Management Information Systems"",
    volume = ""32"",
    number = ""1"",
    pages = ""116 - 150"",
    doi = ""10.1080/07421222.2015.1029382"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943401067\&doi=10.1080\%2f07421222.2015.1029382\&partnerID=40\&md5=6cd325a69affc3a21834c9ed0265b4a3"",
    affiliations = ""Belk College of Business, University of North Carolina, Charlotte, United States; Belk College of Business, UNC, Charlotte, United States"",
    abstract = ""Open source software (OSS) development is an increasingly important paradigm of software development. However, key aspects of OSS such as the determinants of project success and motivations of developers in joining these projects are not well understood. Based on organizational theory, we propose that OSS activities of patch development and feature request can be classified as exploitation (implementation-oriented) and exploration (innovation-oriented) activities, respectively. We empirically examine how the structure of social network affects the success of patch-development and feature-request networks in OSS projects, using a data set collected from the SourceForge database. Our results provide empirical support for the view that patch development and feature request are exploitation and exploration activities, respectively. Network structures differ due to team formation differences and have a differential impact on development success based on the type of activity. The concepts of ambidextrous developers and ambidexterity are explored in the context of OSS projects. Collectively, our results indicate that studying OSS projects at the artifact level could improve our understanding of OSS project success and team formation. This, in turn, could lead to better management of OSS projects. Copyright (c) Taylor \& Francis Group, LLC."",
    author_keywords = ""Exploitation and exploration; Open source software development; Project success; Social networks; Software development; Team formation"",
    keywords = ""Computer software; Open systems; Social networking (online); Social sciences computing; Software design; Software engineering; Data set; Exploitation and explorations; Feature requests; Network structures; Organizational theory; Project success; SourceForge; Team formation; Open source software"",
    publisher = ""Routledge"",
    issn = ""07421222"",
    coden = ""JMISE"",
    language = ""English"",
    abbrev_source_title = ""J Manage Inf Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 37""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Exploitation and exploration networks in open source software development: An artifact-level analysis	https://www.scopus.com/record/display.uri?eid=2-s2.0-84943401067&origin=resultslist&sort=r-f&src=s&sid=7d3c1dddb4a0ca886889009da41f551b&sot=b&sdt=b&s=TITLE%28exploitation+and+exploration+networks+in+open+source+software+development+an+artifact+level+analysis%29&sl=107&sessionSearchId=7d3c1dddb4a0ca886889009da41f551b&relpos=0	Routledge	nan; References
400	TrustSE	Software Vulnerability Markets: Discoverers and Buyers	Some of the key aspects of vulnerability--discovery, dissemination, and disclosure--have received some attention recently. However, the role of interaction among the vulnerability discoverers and vulnerability acquirers has not yet been adequately addressed. Our study suggests that a major percentage of discoverers, a majority in some cases, are unaffiliated with the software developers and thus are free to disseminate the vulnerabilities they discover in any way they like. As a result, multiple vulnerability markets have emerged. In some of these markets, the exchange is regulated, but in others, there is little or no regulation. In recent vulnerability discovery literature, the vulnerability discoverers have remained anonymous individuals. Although there has been an attempt to model the level of their efforts, information regarding their identities, modes of operation, and what they are doing with the discovered vulnerabilities has not been explored. Reports of buying and selling of the vulnerabilities are now appearing in the press; however, the existence of such markets requires validation, and the natures of the markets need to be analyzed. To address this need, we have attempted to collect detailed information. We have identified the most prolific vulnerability discoverers throughout the past decade and examined their motivation and methods. A large percentage of these discoverers are located in Eastern and Western Europe and in the Far East. We have contacted several of them in order to collect firsthand information regarding their techniques, motivations, and involvement in the vulnerability markets. We examine why many of the discoverers appear to retire after a highly successful vulnerability-finding career. The paper identifies the actual vulnerability markets, rather than the hypothetical ideal markets that are often examined. The emergence of worldwide government agencies as vulnerability buyers has significant implications. We discuss potential factors that can impact the risk to society and the need for detailed exploration.	Risk management; software security; vulnerability discoverers; vulnerability markets	Abdullah M. Algarni; Yashwant K. Malaiya	International Journal of Computer and Information Engineering	https://d1wqtxts1xzle7.cloudfront.net/68167572/Software_Vulnerability_Markets_Discovere20210717-16515-1jmvhgu.pdf?1626564659=&response-content-disposition=inline%3B+filename%3DSoftware_Vulnerability_Markets_Discovere.pdf&Expires=1733484747&Signature=e11PLz~4tjF37AhTVnuiur11yvd2JOAS5b7jHwgKzp5ud8prvWYi~HdNqcOyYmoYzulX~RURQRr1WgSIyPYVxogWCJgo76uYZOe3QR9pdAHCUDctL4JDKsKHOOd6BmEYg2z9e5LtVckCDOXGi0iuUHHlvyBlaaHhj9RiOyuURxwXKhm2xDqyEcAdD4787hBW6Zm4btfr2N0XAkWw43tpFwSXOTW67GI3SycGBqiMffemKUVzmhSZC2OUgkA5mrvnKkUAdtWcJ19voT6-tjiwmJCS8cMvBmTHhg7~qfvlh5yYteIQRkz6~nrNtY55IetjGoWO-pBR0ycQAufjNN7jsQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA		11	"""nan"""	Excluded	Excluded				2	Google Scholar		Software vulnerability markets: Discoverers and buyers	https://d1wqtxts1xzle7.cloudfront.net/68167572/Software_Vulnerability_Markets_Discovere20210717-16515-1jmvhgu.pdf?1626564659=&response-content-disposition=inline%3B+filename%3DSoftware_Vulnerability_Markets_Discovere.pdf&Expires=1733484747&Signature=e11PLz~4tjF37AhTVnuiur11yvd2JOAS5b7jHwgKzp5ud8prvWYi~HdNqcOyYmoYzulX~RURQRr1WgSIyPYVxogWCJgo76uYZOe3QR9pdAHCUDctL4JDKsKHOOd6BmEYg2z9e5LtVckCDOXGi0iuUHHlvyBlaaHhj9RiOyuURxwXKhm2xDqyEcAdD4787hBW6Zm4btfr2N0XAkWw43tpFwSXOTW67GI3SycGBqiMffemKUVzmhSZC2OUgkA5mrvnKkUAdtWcJ19voT6-tjiwmJCS8cMvBmTHhg7~qfvlh5yYteIQRkz6~nrNtY55IetjGoWO-pBR0ycQAufjNN7jsQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA	World Academy of Science, Engineering and Technology	
401	TrustSE	Firms' involvement in Open Source projects: A trade-off between software structural quality and popularity	Open Source (OS) was born as a pragmatic alternative to the ideology of Free Software and it is now increasingly seen by companies as a new approach to developing and making business upon software. Whereas the role of firms is clear for commercial OS projects, it still needs investigation for projects based on communities. This paper analyses the impact of firms' participation on popularity and internal software design quality for 643 SourceForge.net projects. Results show that firms' involvement improves the ranking of OS projects, but, on the other hand. puts corporate constraints to OS developing practices, thus leading to lower structural software design quality.	Open Source Community Projects; Firm participation; Internal software design quality; Open Source projects popularity; Structural Equation Modeling; Open Source Community Projects;  Firm participation;  Internal software design quality;  Open Source projects popularity;  Structural Equation Modeling	Capra, Eugenio; Francalanci, Chiara; Merlo, Francesco; Rossi-Lamastra, Cristina	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2010.09.004		144-161	"""@article{WOS:000285442400015,
    Author = ""Capra, Eugenio and Francalanci, Chiara and Merlo, Francesco and Rossi-Lamastra, Cristina"",
    Title = ""Firms' involvement in Open Source projects: A trade-off between software structural quality and popularity"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2011"",
    Volume = ""84"",
    Number = ""1, SI"",
    Pages = ""144-161"",
    Month = ""JAN"",
    Note = ""23rd International Conference on Advanced Information Networking and Applications Workshops, Bradford, ENGLAND, MAY 26-29, 2009"",
    Organization = ""IEEE"",
    Abstract = ""Open Source (OS) was born as a pragmatic alternative to the ideology of Free Software and it is now increasingly seen by companies as a new approach to developing and making business upon software. Whereas the role of firms is clear for commercial OS projects, it still needs investigation for projects based on communities. This paper analyses the impact of firms' participation on popularity and internal software design quality for 643 SourceForge.net projects. Results show that firms' involvement improves the ranking of OS projects, but, on the other hand. puts corporate constraints to OS developing practices, thus leading to lower structural software design quality. (C) 2010 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Capra, E (Corresponding Author), Politecn Milan, Dipartimento Elettron \\& Informaz, Via Ponzio 34-5, I-20133 Milan, Italy. Capra, Eugenio; Francalanci, Chiara; Merlo, Francesco, Politecn Milan, Dipartimento Elettron \\& Informaz, I-20133 Milan, Italy. Rossi-Lamastra, Cristina, Politecn Milan, Dipartimento Ingn Gest, I-20133 Milan, Italy."",
    DOI = ""10.1016/j.jss.2010.09.004"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Open Source Community Projects; Firm participation; Internal software design quality; Open Source projects popularity; Structural Equation Modeling"",
    Keywords-Plus = ""GOVERNANCE; METRICS; COMPLEXITY; COMMUNITY; MOTIVATION; INNOVATION; BUSINESS; SUCCESS; MODELS; TALE"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""capra@elet.polimi.it francala@elet.polimi.it merlo@elet.polimi.it cristina1.rossi@polimi.it"",
    Affiliations = ""Polytechnic University of Milan; Polytechnic University of Milan"",
    Number-of-Cited-References = ""109"",
    Times-Cited = ""33"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""17"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""696LH"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000285442400015"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Firms' involvement in Open Source projects: A trade-off between software structural quality and popularity	https://www.webofscience.com/wos/woscc/full-record/WOS:000285442400015	ELSEVIER SCIENCE INC	nan; References
402	TrustSE	Technical perspective: Bootstrapping a future of open source, specialized hardware	No abstract available.		Taylor, Michael B.	Commun. ACM	https://doi.org/10.1145/3366341		78	"""@article{10.1145/3366341,
    author = ""Taylor, Michael B."",
    title = ""Technical perspective: Bootstrapping a future of open source, specialized hardware"",
    year = ""2019"",
    issue_date = ""December 2019"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""62"",
    number = ""12"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/3366341"",
    doi = ""10.1145/3366341"",
    journal = ""Commun. ACM"",
    month = ""November"",
    pages = ""78"",
    numpages = ""1""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Future of Open Source	https://doi.org/10.1145/3366341	Association for Computing Machinery	nan; Keywords; References; Link
403	TrustSE	Quality of EIS support and maintenance services	Company X delivers integrated information systems for enterprises operating in various business areas. In addition to planning, implementing and deploying these systems, the company provides continuous support and maintenance services to its customers. However these services have not been systematically developed and quality of service can vary greatly.  The purpose of this thesis was to identify the problem areas causing low customer satisfaction and operational inefficiency. The objective was to understand how the identified problems are related to each other and present some ideas on how service quality could be improved.  Customers and Company X employees were interviewed and results were analyzed and compared to theoretical frameworks. Service quality gap analysis indicated that the service delivery processes were insufficient and lacking the support of top management. This caused the customers to perceive the service as unreliable and unresponsive even if the employees were knowledgeable and service oriented.  Recent indications of poor service quality and the identified potential for growth has increased the interest of the company's top management. Changes are already being done, but the effectiveness of these changes and improvements on operational efficiency, service quality, and customer satisfaction need to be monitored and regularly analyzed. Similar activities as presented in this research can be performed to continually improve the services and a long-term focus on customer service orientation is needed to stay competitive.		Laakso, Tiina	Tampereen ammattikorkeakoulu	https://www.theseus.fi/handle/10024/97207			"""nan"""	Excluded	Excluded				2	Google Scholar		Quality of EIS support and maintenance services	https://www.theseus.fi/handle/10024/97207	Theseus	
404	TrustSE	Future Trends and Development Methods in Software Quality Assurance	The main purpose of this thesis is to study the future trends and development methods in software quality assurance from a testing point of view. The main scope of this thesis is to study what views and expectations customers and personnel of Comiq Ltd have about the future trends and development methods in software quality assurance, how those trends will impact the development methods in the future and what should be the focus areas of Comiq in the future to update and maintain employee's high competence levels.  The background studies of the thesis focus on current predictions in relation to agile and DevOps principles as well as test automation. Agile and DevOps are the main trends that are commonly used in software development and quality assurance is an essential part of both agile and DevOps.  The research method was a quantitative data analysis. The sample data was collected in June 2017 by conducting an online questionnaire that was addressed to Comiq customers and personnel. A total of 93 people participated. The questionnaire had a total of 15 questions relating to the properties of quality assurance experts, test automation and methods of importance in achieving future quality goals.  Based on the study results, the most important properties of quality assurance experts are understanding the customer's needs, communications skills, and continuous development of skills and understanding the business area. Test automation is currently seen as one of the most important factors in improving the quality of software. Overall quality can be assured by automating all necessary functionalities including regression testing. Test environments should be automated and version control and functional requirement management should continuously support testing.  The biggest obstacles seen by the participants in achieving the overall target state of quality assurance are lack of test automation, money, time, recourses, and current software development methods and efficient ways of working.  Test automation is an area that will continue to grow and it should be invested in more in the future. Results show that customers and personnel are aware of current trends and want to improve overall quality assurance by growing maturity of agile and DevOps and by involving testing as early as possible.		Williams, Paivi	Haaga-Helia ammattikorkeakoulu	https://www.theseus.fi/handle/10024/135804			"""nan"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Google Scholar		Future Trends and Development Methods in Software Quality Assurance	https://www.theseus.fi/handle/10024/135804	Theseus	
405	TrustSE	A Case Study in Open Source Patch Submission	Although open source and the related processes have become an inherent part of the computer industry, companies and other contributors are often reluctant when it comes to active involvement and participation. The reasons are manifold. Strong ones are that most open source projects are self-governing, without a fixed road map or schedule, each which its own development process. This seems to make them unreliable and unpredictable, because personal intentions cannot be enforced and rely on the open source community in charge of leading the projects. Within an exemplary case study, a new feature spawning multiple layers of a GNU/Linux based operating system, and thus different open source projects, will be implemented and submitted for inclusion. All this bounded by a predefined, fixed time frame, which might be exemplary for schedule and budget driven company structures. The underlying development processes of the Linux kernel, a middle ware project called UDisks and the GNOME desktop will be considered and acted upon accordingly. As a whole, the feature submission failed, because it was not possible to include all the required changes in all target projects in time. The failure has two main reasons: First, it is caused by technical problems which could occur in every software project, and thus not related to open source processes in particular. Second, and more relevant for this research, delays occurred due to common obstacles one has to face in the individual open source development processes. Individuals cannot put as much pressure as they like on the projects and are kind of at their mercy. As an overall outcome, trying to include a new feature in different open source projects depending on each other is possible, however, unpredictable to a certain extent. The open source community has its own rules and processes, companies or other contributors cannot rely on being able to influence in whatever way they want. The advancements heavily depend on the relevant community and project members and thus the process involved. Conclusion: When submitting patches, always expect another iteration.		Holger Macht		https://homac.github.io/publications/A_Case_Study_in_Open_Source_Patch_Submission.pdf		70	"""nan"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Google Scholar		A Case Study in Open Source Patch Submission	https://homac.github.io/publications/A_Case_Study_in_Open_Source_Patch_Submission.pdf	Friedrich-Alexander University Erlangen-Nuremberg	
406	TrustSE	SECURA: Unified Reference Architecture for Advanced Security and Trust in Safety Critical Infrastructures	In the evolving landscape of safety-critical infrastructures, ensuring the integrity and security of systems has become paramount. Building upon a previously established security architecture tailored for the railway sector, this work introduces significant enhancements that extend its applicability beyond the confines of any singular industry. Key advancements include the integration of a security heartbeat to augment safety monitoring, the implementation of a sophisticated secure update mechanism leveraging Trusted Platform Module (TPM) Enhanced Authorization (EA) policies, local Trusted Platform Module (TPM) based attestation, a cyber-resiliency watchdog in a Trusted Execution Environment (TEE) that detects compromised system components and triggers remediation actions, automated vulnerability scanning leveraging Linux Integrity Measurement Architecture (IMA) logs to check against vulnerability databases, and a formal evaluation of system integrity reporting capabilities through remote attestation. Moreover, aiming for a universally adaptable framework, this paper proposes a reference architecture to accommodate various operational contexts. We use compartments--such as virtual machines, software containers, and RTOSes partitions--as a universal abstraction for system components, designed to be compatible with various real-time operating systemss (RTOSess), including the safety-certified PikeOS, the ACRN hypervisor, and beyond.	Confidential Computing;  Trusted Computing;  critical infrastructures;  cyber-resiliency watchdog;  local attestation;  remote attestation;  safety;  secure update;  security; Confidential Computing, Trusted Computing, critical infrastructures, cyber-resiliency watchdog, local attestation, remote attestation, safety, secure update, security	"Eckel, Michael; G\""{u}rgens, Sigrid"	ARES '24: Proceedings of the 19th International Conference on Availability, Reliability and Security	https://doi.org/10.1145/3664476.3664513		1-13	"""@inproceedings{10.1145/3664476.3664513,
    author = {Eckel, Michael and G\""{u}rgens, Sigrid},
    title = ""SECURA: Unified Reference Architecture for Advanced Security and Trust in Safety Critical Infrastructures"",
    year = ""2024"",
    isbn = ""9798400717185"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3664476.3664513"",
    doi = ""10.1145/3664476.3664513"",
    abstract = ""In the evolving landscape of safety-critical infrastructures, ensuring the integrity and security of systems has become paramount. Building upon a previously established security architecture tailored for the railway sector, this work introduces significant enhancements that extend its applicability beyond the confines of any singular industry. Key advancements include the integration of a security heartbeat to augment safety monitoring, the implementation of a sophisticated secure update mechanism leveraging Trusted Platform Module (TPM) Enhanced Authorization (EA) policies, local Trusted Platform Module (TPM) based attestation, a cyber-resiliency watchdog in a Trusted Execution Environment (TEE) that detects compromised system components and triggers remediation actions, automated vulnerability scanning leveraging Linux Integrity Measurement Architecture (IMA) logs to check against vulnerability databases, and a formal evaluation of system integrity reporting capabilities through remote attestation. Moreover, aiming for a universally adaptable framework, this paper proposes a reference architecture to accommodate various operational contexts. We use compartments--such as virtual machines, software containers, and RTOSes partitions--as a universal abstraction for system components, designed to be compatible with various real-time operating systemss (RTOSess), including the safety-certified PikeOS, the ACRN hypervisor, and beyond."",
    booktitle = ""Proceedings of the 19th International Conference on Availability, Reliability and Security"",
    articleno = ""9"",
    numpages = ""13"",
    keywords = ""Confidential Computing, Trusted Computing, critical infrastructures, cyber-resiliency watchdog, local attestation, remote attestation, safety, secure update, security"",
    location = ""Vienna, Austria"",
    series = ""ARES '24""
}
"""	Excluded	Excluded				2	ACM		Security and Trust	https://doi.org/10.1145/3664476.3664513	Association for Computing Machinery	nan; References; Link
407	TrustSE	Quality assurance for open source software configuration management	Commonly used open source configuration management systems, such as Puppet, Chef and CFEngine, allow for system configurations to be expressed as scripts. A number of quality issues that may arise when executing these scripts are identified. An automated quality assurance service is proposed that identifies the presence of these issues by automatically executing scripts across a range of environments. Test results are automatically published to a format capable of being consumed by script catalogues and social coding sites. This would serve as an independent signal of script trustworthiness and quality to script consumers and would allow developers to be made quickly aware of quality issues. As a result, potential consumers of scripts can be assured that a script is likely to work when applied to their particular environment. Script developers can be notified of compatibility issues and take steps to address them.	Automation; Open systems; Quality assurance; Assurance; Automated configuration; Automated deployment; Configuration management; Continuous integrations; Service orchestration; Open source software; Automation;  Open systems;  Quality assurance;  Assurance;  Automated configuration;  Automated deployment;  Configuration management;  Continuous integrations;  Service orchestration;  Open source software	Meyer, Stefan; Healy, Philip; Lynn, Theo; Morrison, John	Proceedings - 15th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing, SYNASC 2013	https://doi.org/10.1109/SYNASC.2013.66	Dabbish, L., Stuart, C., Tsay, J., Herbsleb, J.; Liu, F., Tong, J., Mao, J., Bohn, R., Messina, J., Badger, L., Leaf, D.(2011)NIST Cloud Computing Reference Architecture, 500, p. 292.Cited 263 times.; Aiello, R., Sachs, L.(2010)Configuration Management Best Practices: Practical Methods That Work in the Real World.Cited 21 times.Pearson Education; Swartout, P.(2012)Continuous Delivery and DevOps: A Quickstart Guide.Cited 25 times.Birmingham: Packt; Nelson-Smith, S.(2011)Test-driven Infrastructure with Chef.Cited 51 times.O'Reilly; Learning CFEngine 3. O'Reilly, 2011; Burgess, M.(2006)A Control Theory Perspective on Configuration Management and Cfengine, 3 (2), pp. 12-16.Cited 4 times.Apr; Bergstra, J., Burgess, M.(2008)A Static Theory of Promises.Cited 5 times.; J. Arundel, Puppet 2.7 Cookbook. Packt, 2011; Turnbull, J., McCune, J.(2011)Pro Puppet.Cited 15 times.Apress; Puppet forge; Ewart, J.(2013)Instant Chef StarterBirmingham: Packt; opscode blog; Opscode community; How to contribute-chef-opscode open source wikihttp://wiki.opscode.com/display/chef/How+to+Contribute; OpsWorks DevOps cloud application management solutionAWS; Chef configuration managementRightScale; FrontPage-juju; Language guide-documentation-puppet labshttp://docs.puppetlabs.com/guides/languageguide.html; Beck, K., Andres, C.(2004)Extreme Programming Explained: Embrace Change.Cited 5357 times.Addison-Wesley Professional; Pham, R., Singer, L., Liskin, O., Filho, F.F., Schneider, K.; Pham, R., Singer, L., Schneider, K.; Pandey, S.(2012)Investigating Community, Reliability and Usability of CFEngine, Chef and Puppet.Cited 6 times.Ph.D. dissertation, Universitas OSLOENSIS, May; Delaet, T., Joosen, W., Vanbrabant, B.; Devanbu, P., Gertz, M., Stubblebine, S.Security for automated, distributed configuration management(1999)ICSE Workshop on Software Engineering over the Internet.Cited 3 times.; Classification (Capec)C. A. P. Enumerationhttps://capec.mitre.org; Lynn, T., Healy, P., McClatchey, R., Morrison, J., Pahl, C., Lee, B.	454 - 461	"""@CONFERENCE{Meyer2013454,
    author = ""Meyer, Stefan and Healy, Philip and Lynn, Theo and Morrison, John"",
    title = ""Quality assurance for open source software configuration management"",
    year = ""2013"",
    journal = ""Proceedings - 15th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing, SYNASC 2013"",
    pages = ""454 - 461"",
    doi = ""10.1109/SYNASC.2013.66"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904551205\&doi=10.1109\%2fSYNASC.2013.66\&partnerID=40\&md5=da0d406371e4242ac66b37b5285023d5"",
    affiliations = ""Irish Centre for Cloud Computing and Commerce, University College Cork, Ireland; Irish Centre for Cloud Computing and Commerce, Dublin City University, Ireland"",
    abstract = ""Commonly used open source configuration management systems, such as Puppet, Chef and CFEngine, allow for system configurations to be expressed as scripts. A number of quality issues that may arise when executing these scripts are identified. An automated quality assurance service is proposed that identifies the presence of these issues by automatically executing scripts across a range of environments. Test results are automatically published to a format capable of being consumed by script catalogues and social coding sites. This would serve as an independent signal of script trustworthiness and quality to script consumers and would allow developers to be made quickly aware of quality issues. As a result, potential consumers of scripts can be assured that a script is likely to work when applied to their particular environment. Script developers can be notified of compatibility issues and take steps to address them. (c) 2013 IEEE."",
    author_keywords = ""Assurance; Automated configuration; Automated deployment; Configuration management; Continuous integration; Service orchestration"",
    keywords = ""Automation; Open systems; Quality assurance; Assurance; Automated configuration; Automated deployment; Configuration management; Continuous integrations; Service orchestration; Open source software"",
    publisher = ""IEEE Computer Society"",
    isbn = ""978-147993035-7"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Int. Symp. Symb. Numer. Algorithms Sci. Comput., SYNASC"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; Conference name: 15th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing, SYNASC 2013; Conference date: 23 September 2013 through 26 September 2013; Conference code: 106426""
}
"""	Excluded	Excluded				2	Scopus Signed In		Quality assurance for open source software configuration management	https://www.scopus.com/record/display.uri?eid=2-s2.0-84904551205&origin=resultslist&sort=r-f&src=s&sid=79d0acff2fb62506f50a027f781a36a6&sot=b&sdt=b&s=TITLE%28quality+assurance+for+open+source+software+configuration+management%29&sl=74&sessionSearchId=79d0acff2fb62506f50a027f781a36a6&relpos=0	IEEE Computer Society	
408	TrustSE	Free and open source cloud technology based on the type Software as a Service	The aim of this study is to design and implement the cloud computing technology with types of the services Software as a Service (SaaS). Objectives of the study is to analyze the free and open source cloud technology based on the type Software as a Service. The object of research is the process of using of the cloud computing technology with types of the services Software as a Service in education. The subject of research is the use of free cloud computing technology with types of the services Software as a Service in education for students of university. This article covers the free and open source cloud computing technology and its application in Web-based IT education. One of the technologies that can be used in teaching online IT courses is cloud computing. In this work the analysis and systematization of research on the use of free cloud-based ICT in education, research and organizational activities. Results of the study is planned to use for the design of methods e-learning education with the free and open source cloud technology.	loud computing; learning ICT; cloud-based environment; Software as a Service (SaaS)	Nataliya Mihailivna Kiyanovska		https://lib.iitta.gov.ua/id/eprint/716591/1/052-058_Kiyanovska.pdf		7	"""nan"""	Excluded	Excluded				2	Google Scholar		Free and open source cloud technology based on the type Software as a Service	https://lib.iitta.gov.ua/id/eprint/716591/1/052-058_Kiyanovska.pdf		
409	TrustSE	RLM: A general model for trust representation and aggregation	Reputation-based trust systems provide important capability in open and service-oriented computing environments. Most existing trust models fail to assess the variance of a reputation prediction. Moreover, the summation method, widely used for reputation feedback aggregation, is vulnerable to malicious feedbacks. This paper presents a general trust model, called RLM, for a more comprehensive and robust reputation evaluation. Concretely, we define a comprehensive reputation evaluation method based on two attributes: reputation value and reputation prediction variance. The reputation predication variance serves as a quality measure of the reputation value computed based on aggregation of feedbacks. For feedback aggregation, we propose the novel Kalman aggregation method, which can inherently support robust trust evaluation. To defend against malicious and coordinated feedbacks, we design the Expectation Maximization algorithm to autonomously mitigate the influence of a malicious feedback, and further apply the hypothesis test method to resist malicious feedbacks precisely. Through theoretical analysis, we demonstrate the robustness of the RLM design against adulating and defaming attacks, two popular types of feedback attacks. Our experiments show that the RLM model can effectively capture the reputation's evolution and outperform the popular summation-based trust models in terms of both accuracy and attack resilience. Concretely, under the attack of collusive malicious feedbacks, RLM offers higher robustness for the reputation prediction and a lower false positive rate for the malicious feedback detection.	Distributed computer systems; Forecasting; Robustness (control systems); Security of data; Accuracy assessment; Aggregation methods; Evaluation Method; Expectation-maximization algorithms; False positive rates; Feed-back detection; Feedback aggregation; General model; Hypothesis tests; Prediction Variance; Quality measures; Reputation feedbacks; Service oriented computing; Trust evaluation; Trust models; Trust representations; Trust systems; Feedback; Distributed computer systems;  Forecasting;  Robustness (control systems);  Security of data;  Accuracy assessment;  Aggregation methods;  Evaluation Method;  Expectation-maximization algorithms;  False positive rates;  Feed-back detection;  Feedback aggregation;  General model;  Hypothesis tests;  Prediction Variance;  Quality measures;  Reputation feedbacks;  Service oriented computing;  Trust evaluation;  Trust models;  Trust representations;  Trust systems;  Feedback	Wang, Xiaofeng; Liu, Ling; Su, Jinshu	IEEE Transactions on Services Computing	https://doi.org/10.1109/TSC.2010.56		131 - 143	"""@ARTICLE{Wang2012131,
    author = ""Wang, Xiaofeng and Liu, Ling and Su, Jinshu"",
    title = ""RLM: A general model for trust representation and aggregation"",
    year = ""2012"",
    journal = ""IEEE Transactions on Services Computing"",
    volume = ""5"",
    number = ""1"",
    pages = ""131 - 143"",
    doi = ""10.1109/TSC.2010.56"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863285104\&doi=10.1109\%2fTSC.2010.56\&partnerID=40\&md5=a9c78c677f7ad3d6fa3c4c65b8791f70"",
    affiliations = ""School of Computer, National University of Defense Technology, Changsha 410073, Hunan, China; College of Computing, Georgia Institute of Technology, Atlanta, GA 30332-0765, 266 Ferst Dr., United States"",
    abstract = ""Reputation-based trust systems provide important capability in open and service-oriented computing environments. Most existing trust models fail to assess the variance of a reputation prediction. Moreover, the summation method, widely used for reputation feedback aggregation, is vulnerable to malicious feedbacks. This paper presents a general trust model, called RLM, for a more comprehensive and robust reputation evaluation. Concretely, we define a comprehensive reputation evaluation method based on two attributes: reputation value and reputation prediction variance. The reputation predication variance serves as a quality measure of the reputation value computed based on aggregation of feedbacks. For feedback aggregation, we propose the novel Kalman aggregation method, which can inherently support robust trust evaluation. To defend against malicious and coordinated feedbacks, we design the Expectation Maximization algorithm to autonomously mitigate the influence of a malicious feedback, and further apply the hypothesis test method to resist malicious feedbacks precisely. Through theoretical analysis, we demonstrate the robustness of the RLM design against adulating and defaming attacks, two popular types of feedback attacks. Our experiments show that the RLM model can effectively capture the reputation's evolution and outperform the popular summation-based trust models in terms of both accuracy and attack resilience. Concretely, under the attack of collusive malicious feedbacks, RLM offers higher robustness for the reputation prediction and a lower false positive rate for the malicious feedback detection. (c) 2008 IEEE."",
    author_keywords = ""accuracy assessment; malicious feedback; robustness; Trust model"",
    keywords = ""Distributed computer systems; Forecasting; Robustness (control systems); Security of data; Accuracy assessment; Aggregation methods; Evaluation Method; Expectation-maximization algorithms; False positive rates; Feed-back detection; Feedback aggregation; General model; Hypothesis tests; Prediction Variance; Quality measures; Reputation feedbacks; Service oriented computing; Trust evaluation; Trust models; Trust representations; Trust systems; Feedback"",
    correspondence_address = ""X. Wang; School of Computer, National University of Defense Technology, Changsha 410073, Hunan, China; email: xf\_wang@nudt.edu.cn"",
    issn = ""19391374"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans. Serv. Comput."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 74""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		RLM: A general model for trust representation and aggregation	https://www.scopus.com/record/display.uri?eid=2-s2.0-84863285104&origin=resultslist&sort=r-f&src=s&sid=c33e03d09e81b84183614998e67ba4fd&sot=b&sdt=b&s=TITLE%28rlm+a+general+model+for+trust+representation+and+aggregation%29&sl=67&sessionSearchId=c33e03d09e81b84183614998e67ba4fd&relpos=0		nan; References; Publisher
410	TrustSE	ERP in China: one package, two profiles	How and why the same software system implementation can produce fundamentally different results.		Martinsons, Maris G.	Commun. ACM	https://doi.org/10.1145/1005817.1005823		65-68	"""@article{10.1145/1005817.1005823,
    author = ""Martinsons, Maris G."",
    title = ""ERP in China: one package, two profiles"",
    year = ""2004"",
    issue_date = ""July 2004"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""47"",
    number = ""7"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1005817.1005823"",
    doi = ""10.1145/1005817.1005823"",
    abstract = ""How and why the same software system implementation can produce fundamentally different results."",
    journal = ""Commun. ACM"",
    month = ""July"",
    pages = ""65-68"",
    numpages = ""4""
}
"""	Excluded	Excluded				2	ACM		ERP in China: one package, two profiles	https://doi.org/10.1145/1005817.1005823	Association for Computing Machinery	nan; Keywords; References; Link
411	TrustSE	centralized package management using Stork	Managing the software installed on multiple systems can be one of the duller aspects of system administration. One has to deal with varied sets of packages, each replicated on numerous machines, and bring up new systems, with the complica- tion of those that are almost like the others, but not quite. In many cases, great amounts of time could be saved and more than a few mistakes avoided by using tools specifically created to make this job easier.		Justin Samuel; Jeremy Plichta; Justin Cappos	;LOGIN:	https://www.usenix.org/system/files/login/issues/login_feb_2008.pdf#page=27		27-31	"""nan"""	Excluded	Excluded				2	Google Scholar		centralized package management using Stork	https://www.usenix.org/system/files/login/issues/login_feb_2008.pdf#page=27	USENIX	
412	TrustSE	A survey of trust in internet applications	Trust is an important aspect of decision making for Internet applications and particularly influences the specification of security policy, i.e., who is authorized to perform actions as well as the techniques needed to manage and implement security to and for the applications. This survey examines the various definitions of trust in the literature and provides a working definition of trust for Internet applications. The properties of trust relationships are explained and classes of different types of trust identified in the literature are discussed with examples. Some influential examples of trust management systems are described.	Internet; Decision making; Electronic commerce; Mobile computing; Information security; Business; Risk management; Electronic mail; Telecommunication computing; Authorization	Tyrone Grandison; Morris Sloman	IEEE Communications Surveys & Tutorials	https://doi.org/10.1109/COMST.2000.5340804	"1.M. Blaze, ""Managing Trust in an Information-Labeling System"", European Transactions on Telecommunications, vol. 8, pp. 491-501, 1997,  [online]  Available: http://www.si.umich.edu/~presnick/papers/bfrs/Paper.ps. CrossRef  Google Scholar; 2.M. Blaze, J. Feigenbaum and J. Lacy, Managing Trust in Medical Information Systems, AT, 1996,  [online]  Available: http://citeseer.nj.nec. com/did/35925. Google Scholar; 3.S. J. Harrington and C. P. Ruppel, ""Telecommuting: A Test of Trust Competing Values and Relative Advantage"", IEEE Trans. Professional Communication, vol. 42, no. 4, pp. 223-239, 1999,  [online]  Available: http://ieeexplore.ieee.org/iel5/47/17506/00807960.pdf. View Article  Google Scholar; 4.J. J. Ordille, ""When Agents Roam Who Can You Trust?"", 1st Annual Conf. Emerging Technologies and Applications in Communications, 1996,  [online]  Available: http://ieeexplore.ieee.org/iel4/3740/10938/00502505. pdf. View Article  Google Scholar; 5.U. G. Wilhelm, S. Staamann and L. Buttyan, ""On the Problem of Trust in Mobile Agent Systems"", IEEE Symp. Network And Distributed System Security, 1998,  [online]  Available: http://citeseer.nj.nec.com/pdf/139207. Google Scholar; 6.J. Feigenbaum and P. Lee, ""Trust Management and Proof-Carrying Code in Secure Mobile Code Applications: Position Paper"", DARPA Wksp. Foundations for Secure Mobile Code, 1997,  [online]  Available: http://www.research.att.com/~jf/pubs/darpa-mobile.ps. Google Scholar; 7.T. H. Clark and G. L. Ho, ""Electronic Intermediaries: Trust Building and Market Differentiation"", 32nd Annual Hawaii Intl. Conf. Systems Sciences, 1999,  [online]  Available: http://ieeexplore. ieee.org/iel5/6293/16785/0077 2939. pdf. View Article  Google Scholar; 8.C. P. Holland and A. G. Lockett, ""Business Trust and the Formation of Virtual Organizations"", 31st Annual Hawaii Intl. Conf. System Sciences, 1998,  [online]  Available: http://ieeexplore.ieee. org/iel4/5217/14260/00654821.pdf. View Article  Google Scholar; 9.A. JOsang, ""Trust-based Decision Making for Electronic Transactions"", The 4th Nordic Wksp. Secure IT Systems (NORD-SEC99), 1999. Google Scholar; 10.C. S. Iacono and S. Weisband, ""Developing Trust in Virtual Teams"", 13th Hawaii Intl. Conf. System Sciences, 1997,  [online]  Available: http://ieeexplore.ieee.Org/ieI4/5350/14595/00665615.pdf. View Article  Google Scholar; 11.S. L. Jarvenpaa, Consumer Trust in an Internet Store: A Cross-Cultural Validation Journal of Computer-Meditated Communication, 1999,  [online]  Available: http://www.ascusc.org/jcmc/vol5/issue2/jarvenpaa.html. Google Scholar; 12.S. Jiawen and D. W. Manchala, ""Trust vs. Threats: Recovery and Survival in Electronic Commerce"", 19th IEEE Intl. Conf. Distributed Computing Systems, 1999,  [online]  Available: http://ieeexplore.ieee. org/iel5/6307/16865/00776513.pdf. View Article  Google Scholar; 13.S. P. Ketchpel and H. Garcia-Molina, ""Making Trust Explicit in Distributed Commerce Transactions"", 16th Intl. Conf. Distributed Computing Systems, 1996,  [online]  Available: http://ieeexplore.ieee.Org/iel3/3771/11006/00507925.pdf. View Article  Google Scholar; 14.J. Su and D. Manchala, ""Trust vs. Threats: Recovery and Survival in Electronic Commerce"", 19th Intl. Conf. Distributed Computing Systems, 1999. View Article  Google Scholar; 15.N. Damianou, ""The Ponder Policy Specification Language"", Policy 2001: Wksp. Policies for Distributed Systems and Networks, 2001,  [online]  Available: http://www-dse.doc.ic.ac.uk/policies/. CrossRef  Google Scholar; 16.R. Khare and A. Rifkin, ""Trust Management on the World Wide Web"", Peer-reviewed Journal on the Internet, vol. 3, no. 6,  [online]  Available: http://www.firstmonday.dk/issues/khare/index.html. CrossRef  Google Scholar; 17.V. Swarup and C. Schmidt, ""Interoperating between Security Domains"", ECOOP (European Conference on Object-Oriented Programming) Wksp. Distributed Object Security, 1998. Google Scholar; 18.E. Amoroso, ""Toward an Approach to Measuring Software Trust"", IEEE Computer Society Symp. Research in Security and Privacy, 1991,  [online]  Available: http://ieeexplore.ieee.org/iel2/349/3628/00130788.pdf. View Article  Google Scholar; 19.A. Josang and S. J. Knapskog, ""A Metric for Trusted Systems"", 21st National Security Conf., 1998,  [online]  Available: http://www.idt.ntnu. no/~ajos/papers.html. Google Scholar; 20.D. W. Manchala, ""Trust Metrics Models and Protocols for Electronic Commerce Transactions"", 18th Intl. Conf. Distributed Computing Systems, 1998,  [online]  Available: http://ieeexplore.ieee.org/iel4/5583/14954/00679731.pdf. View Article  Google Scholar; 21.K. Konrad, G. Fuchs and J. Bathel, ""Trust and Electronic Commerce - More than a Technical Problem"", The 18th Symp. Reliable Distributed Systems, 1999,  [online]  Available: . View Article  Google Scholar; 22.D. Povey, Developing Electronic Trust Policies Using a Risk Management Model, 1999,  [online]  Available: http://security.dstc.edu.au/staff/povey/papers/CQRE/123.pdf. CrossRef  Google Scholar; 23.D. Povey, Trust Management, 1999,  [online]  Available: http://security.dstc.edu. au/presentations/trust/. Google Scholar; 24.Building a Foundation of Trust in the PC, 2000,  [online]  Available: http://www.trustedpc.org. Google Scholar; 25.N. M. Frank and L. Peters, ""Building Trust: the Importance of Both Task and Social Precursors"", Intl. Conf. Engineering and Technology Management: Pioneering New Technologies -Management Issues and Challenges in the Third Millennium, 1998,  [online]  Available: http://ieeexplore.ieee.org/iel4/5884/15675/00727781.pdf. View Article  Google Scholar; 26.A. Kini and J. Choobineh, ""Trust in Electronic Commerce: Definition and Theoretical Considerations"", 31st Annual Hawaii Intl. Conf. System Sciences, 1998,  [online]  Available: http://ieeexplore. ieee.org/iel4/5217/14270/00655251.pdf. View Article  Google Scholar; 27.S. Jones, TRUST-EC: Requirements for Trust and Confidence in E-Commerce, European Commission, Joint Research Centre, 1999. Google Scholar; 28.E. Gerck and M.-C. Group, Overview of Certification Systems: X.509 CA PGP and SKIP, Meta-Certificate Group, 1997,  [online]  Available: http://www.mcg.org.br/cert.htm. Google Scholar; 29.B. Christianson and W. S. Harbison, ""Why Isnt Trust Transitive?"", Security Protocols Intl. Wksp., 1996. Google Scholar; 30.F. L. Mayer, ""A Brief Comparison of Two Different Environmental Guidelines for Determining Levels Of Trust (Computer Security)"", 6th Annual Computer Security Applications Conf., 1990,  [online]  Available: http://ieeexpiore.ieee.org/iel2/319/3856/00143781.pdf. View Article  Google Scholar"	2- 16		Included	Included				2	IEEE		A survey of trust in internet applications	https://ieeexplore.ieee.org/document/5340804	IEEE	nan; Year; Bibtex
413	TrustSE	Interdependencies, trust and information in relationships, alliances and networks	The last decade has been characterised by the increased development of cross-company relationships, alliances and more complex business networks. This paper examines fundamental concepts that relate to the needs for information, including accounting information, in these interactive structures. It considers, initially, some consequences for accounting when planning and control is to be exercised across organisational boundaries, but the main thrust of the paper is to focus on the fact that all relationships depend to some extent on trust. The interaction between trust and information in personal relationships is explored to serve as a template against which to consider whether the information needs of inter-organisational relationships are similar. Having examined information needs of business relationships in general, the analysis is developed to consider the needs of different forms of corporate alliances and then wider business networks. This paper is an attempt to create a debate on new questions that seem to be fundamental to the design of information and accounting systems. It is not claimed to have provided definitive answers, but it is proposed that the lack of a well-developed theory of the interaction between trust and information has been a fundamental gap in our knowledge.		Tomkins, Cyril	Accounting, Organizations and Society	https://doi.org/10.1016/S0361-3682(00)00018-0		161 - 191	"""@ARTICLE{Tomkins2001161,
    author = ""Tomkins, Cyril"",
    title = ""Interdependencies, trust and information in relationships, alliances and networks"",
    year = ""2001"",
    journal = ""Accounting, Organizations and Society"",
    volume = ""26"",
    number = ""2"",
    pages = ""161 - 191"",
    doi = ""10.1016/S0361-3682(00)00018-0"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0035285362\&doi=10.1016\%2fS0361-3682\%2800\%2900018-0\&partnerID=40\&md5=fef7b47d895f3d79d55fe134cbfa073c"",
    affiliations = ""School of Management, University of Bath, Bath BA2 7AY, United Kingdom"",
    abstract = ""The last decade has been characterised by the increased development of cross-company relationships, alliances and more complex business networks. This paper examines fundamental concepts that relate to the needs for information, including accounting information, in these interactive structures. It considers, initially, some consequences for accounting when planning and control is to be exercised across organisational boundaries, but the main thrust of the paper is to focus on the fact that all relationships depend to some extent on trust. The interaction between trust and information in personal relationships is explored to serve as a template against which to consider whether the information needs of inter-organisational relationships are similar. Having examined information needs of business relationships in general, the analysis is developed to consider the needs of different forms of corporate alliances and then wider business networks. This paper is an attempt to create a debate on new questions that seem to be fundamental to the design of information and accounting systems. It is not claimed to have provided definitive answers, but it is proposed that the lack of a well-developed theory of the interaction between trust and information has been a fundamental gap in our knowledge. (c) 2000 Elsevier Science Ltd. All rights reserved."",
    correspondence_address = ""C. Tomkins; School of Management, University of Bath, Bath BA2 7AY, United Kingdom; email: c.r.tomkins@bath.ac.uk"",
    issn = ""03613682"",
    language = ""English"",
    abbrev_source_title = ""Account. Organ. Soc."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 476""
}
"""	Excluded	Excluded				2	Scopus Signed In		Interdependencies, trust and information in relationships, alliances and networks	https://www.scopus.com/record/display.uri?eid=2-s2.0-0035285362&origin=resultslist&sort=r-f&src=s&sid=329ad48259c7d3f8eab8b462850b098d&sot=b&sdt=b&s=TITLE%28interdependencies+trust+and+information+in+relationships+alliances+and+networks%29&sl=86&sessionSearchId=329ad48259c7d3f8eab8b462850b098d&relpos=0		nan; Keywords; References; Publisher
414	TrustSE	Self-Governance Developer Framework	Success of software developers should be attributed to developers' knowledge of what to do and their discipline and trust to their self-organization. To achieve this, the software community should provide appropriate process frameworks recommending developers what needs to be done, still however, allowing maximal freedom, flexibility and self-discipline. The Self-Governance Software Developer (SGD) Framework is the solution to this. In this paper, we suggest and motivate the SGD Framework. We also benchamark it against Personal Software Process (PSP). Our results show that SGD has a higher coverage of the developer activities. Still, however, it needs to be evaluated within the industrial context.	personal software process; self-discipline; self-organization; software development; software methods; process models; coding; unit testing; personal software process;  self-discipline;  self-organization;  software development;  software methods;  process models;  coding;  unit testing	Kajko-Mattsson, Mira; Jeppesen, Gudrun	THIRD INTERNATIONAL CONFERENCE ON ADVANCES AND TRENDS IN SOFTWARE ENGINEERING (SOFTENG 2017)	https://www.webofscience.com/wos/woscc/full-record/WOS:000430353700015		103-109	"""@inproceedings{WOS:000430353700015,
    Author = ""Kajko-Mattsson, Mira and Jeppesen, Gudrun"",
    Editor = ""KajkoMattsson, M and Ellingsen, P and Maresca, P"",
    Title = ""Self-Governance Developer Framework"",
    Booktitle = ""THIRD INTERNATIONAL CONFERENCE ON ADVANCES AND TRENDS IN SOFTWARE ENGINEERING (SOFTENG 2017)"",
    Year = ""2017"",
    Pages = ""103-109"",
    Note = ""3rd International Conference on Advances and Trends in Software Engineering (SOFTENG), Venice, ITALY, APR 23-27, 2017"",
    Organization = ""IARIA"",
    Abstract = ""Success of software developers should be attributed to developers' knowledge of what to do and their discipline and trust to their self-organization. To achieve this, the software community should provide appropriate process frameworks recommending developers what needs to be done, still however, allowing maximal freedom, flexibility and self-discipline. The Self-Governance Software Developer (SGD) Framework is the solution to this. In this paper, we suggest and motivate the SGD Framework. We also benchamark it against Personal Software Process (PSP). Our results show that SGD has a higher coverage of the developer activities. Still, however, it needs to be evaluated within the industrial context."",
    Publisher = ""IARIA XPS PRESS"",
    Address = ""PO BOX 7827, WILMINGTON, DE 19803 USA"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Kajko-Mattsson, M (Corresponding Author), KTH Royal Inst Technol, Sch ICT, Stockholm, Sweden. Kajko-Mattsson, Mira, KTH Royal Inst Technol, Sch ICT, Stockholm, Sweden. Jeppesen, Gudrun, Stockholm Univ, Dept Comp \\& Syst Sci, Stockholm, Sweden."",
    ISBN = ""978-1-61208-553-1"",
    Keywords = ""personal software process; self-discipline; self-organization; software development; software methods; process models; coding; unit testing"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""mekm2@kth.se gudrunjep@telia.com"",
    Affiliations = ""Royal Institute of Technology; Stockholm University"",
    Number-of-Cited-References = ""19"",
    Times-Cited = ""0"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""1"",
    Doc-Delivery-Number = ""BK0EA"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000430353700015"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Self-Governance Developer Framework	https://www.webofscience.com/wos/woscc/full-record/WOS:000430353700015	IARIA XPS PRESS	nan; References
415	TrustSE	Design architecture, developer networks, and performance of open source software projects	In this study we seek to understand the factors differentiating successful from unsuccessful software projects. This article develops and tests a model measuring the impact on software project performance of (1) software products' design architectures and (2) developers' positions within collaborative networks. Two indicators of project success are used: product quality and project velocity. Two dimensions of design architecture - degree of decomposition and coupling - and one characteristic of developer network structures - degree centrality- are investigated for their impact on project performance. Using data gathered from SourceForge.net and its monthly dumps, we empirically test hypotheses on the top 100 projects according to project rankings. These rankings are generated from the traffic, communication, and development statistics collected for each project hosted on SourceForge.net. Besides the top 100 projects, we also randomly choose another 100 projects to form the data sample. The main findings are that (1) the degree of decomposition has an inverted U-shaped relationship with project performance, (2) when tested on the sample of top 100 projects, average degree centrality of a project team has a positive and significant effect on project performance and (3) the effects of network metrics on some of project performances are positive in the top 100 projects and some of them are negative in the random 100 projects. We employ some control variables such as developer work experiences and sponsorship, to provide insight into the direction of the effect of degree centrality on project success. Theoretical and practical implications are discussed, and several future research directions are outlined.	Architecture; Information systems; Project management; Software design; Software testing; Average degree; Centrality; Collaborative network; Control variable; Data sample; Degree centrality; Degree of decomposition; Design architecture; Future research directions; Modularity; Network metrics; Network structures; Open source software projects; Product quality; Project performance; Project ranking; Project success; Project team; Software products; Software project; Success; Two-dimension; U-shaped; Work experience; Network architecture; Architecture;  Information systems;  Project management;  Software design;  Software testing;  Average degree;  Centrality;  Collaborative network;  Control variable;  Data sample;  Degree centrality;  Degree of decomposition;  Design architecture;  Future research directions;  Modularity;  Network metrics;  Network structures;  Open source software projects;  Product quality;  Project performance;  Project ranking;  Project success;  Project team;  Software products;  Software project;  Success;  Two-dimension;  U-shaped;  Work experience;  Network architecture	Liu, Xiang Michelle; Iyer, Bala	ICIS 2007 Proceedings - Twenty Eighth International Conference on Information Systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870973846&origin=resultslist&sort=r-f&src=s&sid=b3049a128c461a3d14c73a705a78d24c&sot=b&sdt=b&s=TITLE%28design+architecture+developer+networks+and+performance+of+open+source+software+projects%29&sl=94&sessionSearchId=b3049a128c461a3d14c73a705a78d24c&relpos=0			"""@CONFERENCE{Liu2007,
    author = ""Liu, Xiang Michelle and Iyer, Bala"",
    title = ""Design architecture, developer networks, and performance of open source software projects"",
    year = ""2007"",
    journal = ""ICIS 2007 Proceedings - Twenty Eighth International Conference on Information Systems"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870973846\&partnerID=40\&md5=2442d40108ff65b3f8734e08d2007cab"",
    affiliations = ""Boston University School of Management, Boston, MA 02215, 595 Commonwealth Ave., \#610, United States; Babson College TOIM Division, Babson Park, MA 02457, Babson Hall, United States"",
    abstract = ""In this study we seek to understand the factors differentiating successful from unsuccessful software projects. This article develops and tests a model measuring the impact on software project performance of (1) software products' design architectures and (2) developers' positions within collaborative networks. Two indicators of project success are used: product quality and project velocity. Two dimensions of design architecture - degree of decomposition and coupling - and one characteristic of developer network structures - degree centrality- are investigated for their impact on project performance. Using data gathered from SourceForge.net and its monthly dumps, we empirically test hypotheses on the top 100 projects according to project rankings. These rankings are generated from the traffic, communication, and development statistics collected for each project hosted on SourceForge.net. Besides the top 100 projects, we also randomly choose another 100 projects to form the data sample. The main findings are that (1) the degree of decomposition has an inverted U-shaped relationship with project performance, (2) when tested on the sample of top 100 projects, average degree centrality of a project team has a positive and significant effect on project performance and (3) the effects of network metrics on some of project performances are positive in the top 100 projects and some of them are negative in the random 100 projects. We employ some control variables such as developer work experiences and sponsorship, to provide insight into the direction of the effect of degree centrality on project success. Theoretical and practical implications are discussed, and several future research directions are outlined."",
    author_keywords = ""Architecture; Centrality; Developer networks; Modularity; Software design; Success"",
    keywords = ""Architecture; Information systems; Project management; Software design; Software testing; Average degree; Centrality; Collaborative network; Control variable; Data sample; Degree centrality; Degree of decomposition; Design architecture; Future research directions; Modularity; Network metrics; Network structures; Open source software projects; Product quality; Project performance; Project ranking; Project success; Project team; Software products; Software project; Success; Two-dimension; U-shaped; Work experience; Network architecture"",
    correspondence_address = ""X. M. Liu; Boston University School of Management, Boston, MA 02215, 595 Commonwealth Ave., \#610, United States; email: xiangl@bu.edu"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Twenty Eighth Int. Conf. Inf. Syst."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 10; Conference name: 28th International Conference on Information Systems, ICIS 2007; Conference date: 9 December 2007 through 12 December 2007; Conference code: 93592""
}
"""	Included	Included				2	Scopus Signed In		Design architecture, developer networks and performance of open source software projects	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870973846&origin=resultslist&sort=r-f&src=s&sid=b3049a128c461a3d14c73a705a78d24c&sot=b&sdt=b&s=TITLE%28design+architecture+developer+networks+and+performance+of+open+source+software+projects%29&sl=94&sessionSearchId=b3049a128c461a3d14c73a705a78d24c&relpos=0		nan; References; Pages; Publisher
416	TrustSE	Global software development: where are the benefits?	IntroductionGlobal Software Development (GSD) is increasingly becoming the normal practice in the software industry, readily evidenced by U.S. estimates that the value of the offshore software development market has increased 25-fold over the past 10 years, to the extent that one-quarter of U.S. spending on application development, integration and management services is expected to go off-shore according to recent predictions. There are many potential benefits that can arise from GSD. The most frequently cited one is that of reduced development costs due to the salary savings possible. Also, GSD can lead to reduced development duration due to greater time zone effectiveness as companies practice the so-called 'follow-the-sun' software development model. GSD also affords new opportunities for cross-site modularization of development work, potential access to a larger and better-skilled developer pool, and the possibility of greater innovation, learning and transfer of best practices. Finally, GSD can facilitate closer proximity to markets and customers.However, GSD also introduces a number of challenges in relation to communication, coordination and control of the development process. These arise due to the distances involved in three dimensions -- geographical, temporal, and socio-cultural (See Figure 1). As a consequence, much research and practice has focused on trying to find ways to overcome the GSD challenges identified in Figure 1. In the literature to date, the potential benefits of GSD are usually just mentioned very briefly, if they are mentioned at all, and the realization of these benefits seems to be more or less taken for granted. The primary focus instead is on how the problems inherent in GSD might be addressed. Here, we reverse this trend and focus instead on the benefits and the extent to which they are actually being realized in practice in three global companies practicing GSD.		"Conch\'{u}ir, Eoin \'{O}; \r{A}gerfalk, P\""{a}r J.; Olsson, Helena H.; Fitzgerald, Brian"	Commun. ACM	https://doi.org/10.1145/1536616.1536648		127-131	"""@article{10.1145/1536616.1536648,
    author = {Conch\'{u}ir, Eoin \'{O} and \r{A}gerfalk, P\""{a}r J. and Olsson, Helena H. and Fitzgerald, Brian},
    title = ""Global software development: where are the benefits?"",
    year = ""2009"",
    issue_date = ""August 2009"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""52"",
    number = ""8"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1536616.1536648"",
    doi = ""10.1145/1536616.1536648"",
    abstract = ""IntroductionGlobal Software Development (GSD) is increasingly becoming the normal practice in the software industry, readily evidenced by U.S. estimates that the value of the offshore software development market has increased 25-fold over the past 10 years, to the extent that one-quarter of U.S. spending on application development, integration and management services is expected to go off-shore according to recent predictions. There are many potential benefits that can arise from GSD. The most frequently cited one is that of reduced development costs due to the salary savings possible. Also, GSD can lead to reduced development duration due to greater time zone effectiveness as companies practice the so-called 'follow-the-sun' software development model. GSD also affords new opportunities for cross-site modularization of development work, potential access to a larger and better-skilled developer pool, and the possibility of greater innovation, learning and transfer of best practices. Finally, GSD can facilitate closer proximity to markets and customers.However, GSD also introduces a number of challenges in relation to communication, coordination and control of the development process. These arise due to the distances involved in three dimensions -- geographical, temporal, and socio-cultural (See Figure 1). As a consequence, much research and practice has focused on trying to find ways to overcome the GSD challenges identified in Figure 1. In the literature to date, the potential benefits of GSD are usually just mentioned very briefly, if they are mentioned at all, and the realization of these benefits seems to be more or less taken for granted. The primary focus instead is on how the problems inherent in GSD might be addressed. Here, we reverse this trend and focus instead on the benefits and the extent to which they are actually being realized in practice in three global companies practicing GSD."",
    journal = ""Commun. ACM"",
    month = ""August"",
    pages = ""127-131"",
    numpages = ""5""
}
"""	Excluded	Excluded				2	ACM		Global software development: where are the benefits?	https://doi.org/10.1145/1536616.1536648	Association for Computing Machinery	nan; Keywords; References; Link
417	TrustSE	The GNOME Project: A case study of open source, global software development	Many successful free/open source software (FOSS) projects start with the premise that their contributors are rarely colocated, and as a consequence, these projects are cases of global software development (GSD). This article describes how the GNOME Project, a large FOSS project, has tried to overcome the disadvantages of GSD. The main goal of GNOME is to create a GUI desktop for Unix systems, and encompasses close to two million lines of code. More than 500 individuals (distributed across the world) have contributed to the project. This article also describes the software development methods and practices used by the members of the project, and its organizational structure. The article ends by proposing a list of practices that could benefit other global software development projects, both FOSS and commercial.	Computer operating systems; Customer satisfaction; Open systems; Research and development management; Societies and institutions; Software engineering; Spreadsheets; Word processing; Empirical study; Global software development; Management of software projects; Open source software; Project management; Computer operating systems;  Customer satisfaction;  Open systems;  Research and development management;  Societies and institutions;  Software engineering;  Spreadsheets;  Word processing;  Empirical study;  Global software development;  Management of software projects;  Open source software;  Project management	German, Daniel M.	Software Process Improvement and Practice	https://doi.org/10.1002/spip.189	Carmel, E.(1999)Global Software Teams.Cited 756 times.Prentice Hall: Upper Saddle River, New Jersey; Carmel, E., Agarwal, R.; Lawton, George; Damian, D.Workshop on global software development(2002)ACM SIGSOFT Software Engineering Notes, 5 (7), pp. 65-71.; De Icaza, M.(2002)GNOME HistoryThe GNOME Project, Boston, MAhttp://primates.helixcode.com/~miguel/gnome-history.html; German, D.M.The evolution of the GNOME project(2002)Proceedings of the 2nd Workshop on Open Source Software Engineering.Cited 6 times.The GNOME Project, Boston, MA; German, D.M.Using software trails to rebuild the evolution of softwareJournal of Software Maintenance and Evolution: Research and Practice.Cited 2 times.Wiley: New York; in press; German, D.M., Mockus, A.Automating the measurement of open source projects(2003)Proceedings of the 3rd Workshop on Open Source Software Engineering, pp. 63-68.Cited 54 times.University College Cork: Cork Irelandhttp://opensource.ucc.ie/icse2003; Hissam, S., Weinstock, C.B., Plakosh, D., Asundi, J.Perspectives on open-source software(2001)Technical Report, CMU-SEI-2001-TR-019.Cited 14 times.Software Engineering Institute, Carnegie Mellon University: Pittsburg, MA; Herbsleb, J.D., Moitra, D.; Jones, P.Brooks' law and open source: The more the merrier? Does the open source development method defy the adage about cooks in the kitchen?(2000)IBM Developer Works.Cited 2 times.IBM Corporation: White Plains, New Yorkftp://www6.software.ibm.com/software/developer/library/merrier.pdf; Krishnamurthy, S.Cave or community? An empirical examination of 100 mature open source projects(2002)First Monday, 7 (6).Cited 175 times.http://www.firstmonday.org/issues/issue7-6/krishnamurthy/index.html; Lerner, J., Triole, J.(2000)The Simple Economics of Open Source.Cited 125 times.Working Paper 7600. National Bureau of Economic Research: Cambridge, MAhttp://papers.nber.org/papers/w7600; Meeks, M.(2001)ACTION GEP 0: Process for GNOME Enhancement ProposalThe GNOME Project, Boston, MAhttp://developer.gnome.org/gep/gep-0.html; Mockus, A., Fielding, R.T., Herbsleb, J.D.; Mueth, D., Pennington, H.(2002)GNOME Foundation FAQThe GNOME Project, Boston MAhttp://foundation.gnome.org/faq.html; Pennington, H.(2001)GNOME Enhancement ProcedureThe GNOME Project, Boston, MAhttp://ometer.com/policy.html; Raymond, E.(1999)The Cathedral & the Bazaar.Cited 2844 times.O'Reilly & and Associates: Sebastopol, CA; Scacchi, W.; Scacchi, W.; Shirky, C.Linux for the end user-phase 1(2000)Linux Journal, 8 (74).Cited 2 times.; (2002)Sun Microsystems Is Honored with the Helen Keller Achievement Award for Its Leadership in Accessibility AdvancementsPress Releasehttp://www.sun.com/smi/Press/sunflash/2002-09/sunflash.20020924.1.html; (2003)GNOME 2.0 FAQSun Microsystemshttp://www.sun.com/software/star/gnome/faq/generalfaq.html; (2000)GNOME Foundation Charter Draft 0.61The GNOME Project, Boston, MAhttp://foundation.gnome.org/charter.html; (2002)GNOME Foundation BylawsThe GNOME Project, Boston, MAhttp://foundation.gnome.org/bylaws.pdf; The 1999 TR100(1999)Technology Reviewhttp://www.technologyreview.com/articles/99/11/tr1001199.asp; Waugh, J.Candidacy: Jeff Waugh(2002)GNOME Foundation Announce Mailing ListThe GNOME Project, Boston, MAhttp://mail.gnome.org/archives/foundation-announce/2002-November/ msg00008.html	201 - 215	"""@ARTICLE{German2003201,
    author = ""German, Daniel M."",
    title = ""The GNOME Project: A case study of open source, global software development"",
    year = ""2003"",
    journal = ""Software Process Improvement and Practice"",
    volume = ""8"",
    number = ""4"",
    pages = ""201 - 215"",
    doi = ""10.1002/spip.189"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-14344250842\&doi=10.1002\%2fspip.189\&partnerID=40\&md5=8ef34e606bafd769bcd1046adef63342"",
    affiliations = ""Software Engineering Group, Department of Computer Science, University of Victoria, Victoria, BC, Canada"",
    abstract = ""Many successful free/open source software (FOSS) projects start with the premise that their contributors are rarely colocated, and as a consequence, these projects are cases of global software development (GSD). This article describes how the GNOME Project, a large FOSS project, has tried to overcome the disadvantages of GSD. The main goal of GNOME is to create a GUI desktop for Unix systems, and encompasses close to two million lines of code. More than 500 individuals (distributed across the world) have contributed to the project. This article also describes the software development methods and practices used by the members of the project, and its organizational structure. The article ends by proposing a list of practices that could benefit other global software development projects, both FOSS and commercial. Copyright (c) 2004 John Wiley \& Sons, Ltd."",
    author_keywords = ""Empirical study; Global software development; Management of software projects; Open source software; Software engineering"",
    keywords = ""Computer operating systems; Customer satisfaction; Open systems; Research and development management; Societies and institutions; Software engineering; Spreadsheets; Word processing; Empirical study; Global software development; Management of software projects; Open source software; Project management"",
    correspondence_address = ""D.M. German; Software Engineering Group, Department of Computer Science, University of Victoria, Victoria, BC, Canada; email: dmgerman@uvic.ca"",
    issn = ""10774866"",
    language = ""English"",
    abbrev_source_title = ""Softw. Process Improv. Pract."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 129""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		The GNOME project: a case study of open source, global software development	https://www.scopus.com/record/display.uri?eid=2-s2.0-14344250842&origin=resultslist&sort=r-f&src=s&sid=fb919aa29df1e597ba1218ca1e021ba3&sot=b&sdt=b&s=TITLE%28the+gnome+project+a+case+study+of+open+source+global+software+development%29&sl=80&sessionSearchId=fb919aa29df1e597ba1218ca1e021ba3&relpos=0		nan; Publisher
418	TrustSE	"Bootstrapping Trust in a ""Trusted"" Platform"	For the last few years, many commodity computers have come equipped with a Trusted Platform Module (TPM). Ex- isting research shows that the TPM can be used to establish trust in the software executing on a computer. However, at present, there is no standard mechanism for establish- ing trust in the TPM on a particular machine. Indeed, any straightforward approach falls victim to a cuckoo attack. In this work, we propose a formal model for establishing trust in a platform. The model reveals the cuckoo attack problem and suggests potential solutions. Unfortunately, no instan- tiation of these solutions is fully satisfying, and hence, we pose the development of a fully satisfactory solution as an open question to the community.		Bryan Parno	HotSec	https://www.usenix.org/legacy/events/hotsec08/tech/full_papers/parno/parno.pdf		6	"""nan"""	Excluded	Excluded				2	Google Scholar		"Bootstrapping Trust in a"" Trusted"" Platform."	https://www.usenix.org/legacy/events/hotsec08/tech/full_papers/parno/parno.pdf	USENIX	
419	TrustSE	Quality, productivity and economic benefits of software reuse: a review of industrial studies	Systematic software reuse is proposed to increase productivity and software quality and lead to economic benefits. Reports of successful software reuse programs in industry have been published. However, there has been little effort to organize the evidence systematically and appraise it. This review aims to assess the effects of software reuse in industrial contexts. Journals and major conferences between 1994 and 2005 were searched to find observational studies and experiments conducted in industry, returning eleven papers of observational type. Systematic software reuse is significantly related to lower problem (defect, fault or error) density in five studies and to decreased effort spent on correcting problems in three studies. The review found evidence for significant gains in apparent productivity in three studies. Other significant benefits of software reuse were reported in single studies or the results were inconsistent. Evidence from industry is sparse and combining results was done by vote-counting. Researchers should pay more attention to using comparable metrics, performing longitudinal studies, and explaining the results and impact on industry. For industry, evaluating reuse of COTS or OSS components, integrating reuse activities in software processes, better data collection and evaluating return on investment are major challenges.	software reuse; review; quality; productivity; evidence; software reuse;  review;  quality;  productivity;  evidence	Mohagheghi, Parastoo; Conradi, Reidar	EMPIRICAL SOFTWARE ENGINEERING	https://doi.org/10.1007/s10664-007-9040-x		471-516	"""@article{WOS:000249647100003,
    Author = ""Mohagheghi, Parastoo and Conradi, Reidar"",
    Title = ""Quality, productivity and economic benefits of software reuse: a review of industrial studies"",
    Journal = ""EMPIRICAL SOFTWARE ENGINEERING"",
    Year = ""2007"",
    Volume = ""12"",
    Number = ""5"",
    Pages = ""471-516"",
    Month = ""OCT"",
    Abstract = ""Systematic software reuse is proposed to increase productivity and software quality and lead to economic benefits. Reports of successful software reuse programs in industry have been published. However, there has been little effort to organize the evidence systematically and appraise it. This review aims to assess the effects of software reuse in industrial contexts. Journals and major conferences between 1994 and 2005 were searched to find observational studies and experiments conducted in industry, returning eleven papers of observational type. Systematic software reuse is significantly related to lower problem (defect, fault or error) density in five studies and to decreased effort spent on correcting problems in three studies. The review found evidence for significant gains in apparent productivity in three studies. Other significant benefits of software reuse were reported in single studies or the results were inconsistent. Evidence from industry is sparse and combining results was done by vote-counting. Researchers should pay more attention to using comparable metrics, performing longitudinal studies, and explaining the results and impact on industry. For industry, evaluating reuse of COTS or OSS components, integrating reuse activities in software processes, better data collection and evaluating return on investment are major challenges."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Mohagheghi, P (Corresponding Author), ICT, SINTEF, POB 124, N-0314 Oslo, Norway. ICT, SINTEF, N-0314 Oslo, Norway. Norwegian Univ Sci \\& Technol, Dept Comp \\& Informat Sci, N-7491 Trondheim, Norway."",
    DOI = ""10.1007/s10664-007-9040-x"",
    ISSN = ""1382-3256"",
    EISSN = ""1573-7616"",
    Keywords = ""software reuse; review; quality; productivity; evidence"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering"",
    Author-Email = ""parastoo.mohagheghi@sintef.no conradi@idi.ntnu.no"",
    Affiliations = ""SINTEF; Norwegian University of Science \\& Technology (NTNU)"",
    Number-of-Cited-References = ""56"",
    Times-Cited = ""102"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""12"",
    Journal-ISO = ""Empir. Softw. Eng."",
    Doc-Delivery-Number = ""213DU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000249647100003"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Quality, productivity and economic benefits of software reuse: a review of industrial studies	https://www.webofscience.com/wos/woscc/full-record/WOS:000249647100003	SPRINGER	nan; References
420	TrustSE	Quality and the Reliance on Individuals in Free Software Projects	"It has been suggested that the superior quality of many Free Software projects in comparison to their proprietary counterparts is in part due to the Free Software commu- nity's extensive source code peer-review process. While many argue that software is best developed by individuals or small teams, the process of debugging is highly paral- lizable. This ""one and many"" model describes a template employed by many Free Software projects. However, re- liance on a single developer or maintainer creates a sin- gle point of failure that raises a number of serious quality and reliability concerns - especially when considered in the context of the volunteer-based nature of most Free Software projects. This paper will investigate the nature of problems raised by this model within the Debian Project and will ex- plore several possible strategies aimed at removing or de- emphasizing the reliance on individual developers."		Martin Michlmayr; Benjamin Mako Hill	Proceedings of the 3rd Workshop on Open Source Software Engineering	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=c5c8a50f8a80074ff2d795b994182eb4e4c8653f#page=105		105-109	"""nan"""	Excluded	Excluded				2	Google Scholar		Quality and the reliance on individuals in free software projects	https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=c5c8a50f8a80074ff2d795b994182eb4e4c8653f#page=105	Citeseer	
421	TrustSE	Issues in Global Software Development:  A Critical Review	A number of companies have employed Global Software Development (GSD) methodology as a useful tool for their  software development practices. GSD is a contractual relationship between client and vendor organizations in which a  client outsources all or some part of its software development activities to a vendor. The vendor in return provides the  agreed services in lieu of certain amount of remuneration. The main reasons to select the GSD technique include re- duc ed co st, faster development and access to skilled manpower. Though GSD is emerging as an effective technique, but  it suffers from many challenges like poor communication, lack of trust and coordination. These challenges pose serious  risk to the smooth execution of the GSD projects. In this paper, we present a comparative study on GSD to highlight its  merits and demerits. Our findings reveal that much of the research in this area has been focused on addressing issues  faced by client organizations, however, vendor side in the GSD relationship is much ignored due to which this area is  still immature; and, hence, further research work is required to be undertaken to address the issues faced by the vendor  organizations.	Communication; Co-Ordination and Trust; Global Software Development (GSD); Distributed Software; Development (DSD)	Sami ul Haq; Mushtaq Raza; Asraf Zia; M. Naeem Ahm	J. Software Engineering & Applic	https://www.scirp.org/html/7765.html		590-595	"""nan"""	Excluded	Excluded				2	Google Scholar		Issues in global software development: A critical review	https://www.scirp.org/html/7765.html	Scientific Research Open Access	
422	TrustSE	Two case studies of open source software development: Apache and Mozilla	According to its proponents, open source style software development has the capacity to compete successfully, and perhaps in many cases displace, traditional commercial development methods. In order to begin investigating such claims, we examine data from two major open source projects, the Apache web server and the Mozilla browser. By using email archives of source code change history and problem reports we quantify aspects of developer participation, core team size, code ownership, productivity, defect density, and problem resolution intervals for these OSS projects. We develop several hypotheses by comparing the Apache project with several commercial projects. We then test and refine several of these hypotheses, based on an analysis of Mozilla data. We conclude with thoughts about the prospects for high-performance commercial/open source process hybrids.	Apache;  Mozilla;  Open source software;  code ownership;  defect density;  repair interval; Apache, Mozilla, Open source software, code ownership, defect density, repair interval	Mockus, Audris; Fielding, Roy T.; Herbsleb, James D.	ACM Trans. Softw. Eng. Methodol.	https://doi.org/10.1145/567793.567795		309-346	"""@article{10.1145/567793.567795,
    author = ""Mockus, Audris and Fielding, Roy T. and Herbsleb, James D."",
    title = ""Two case studies of open source software development: Apache and Mozilla"",
    year = ""2002"",
    issue_date = ""July 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""11"",
    number = ""3"",
    issn = ""1049-331X"",
    url = ""https://doi.org/10.1145/567793.567795"",
    doi = ""10.1145/567793.567795"",
    abstract = ""According to its proponents, open source style software development has the capacity to compete successfully, and perhaps in many cases displace, traditional commercial development methods. In order to begin investigating such claims, we examine data from two major open source projects, the Apache web server and the Mozilla browser. By using email archives of source code change history and problem reports we quantify aspects of developer participation, core team size, code ownership, productivity, defect density, and problem resolution intervals for these OSS projects. We develop several hypotheses by comparing the Apache project with several commercial projects. We then test and refine several of these hypotheses, based on an analysis of Mozilla data. We conclude with thoughts about the prospects for high-performance commercial/open source process hybrids."",
    journal = ""ACM Trans. Softw. Eng. Methodol."",
    month = ""July"",
    pages = ""309-346"",
    numpages = ""38"",
    keywords = ""Apache, Mozilla, Open source software, code ownership, defect density, repair interval""
}
"""	Included	Included				2	ACM		Two case studies of open source software development: Apache and Mozilla	https://doi.org/10.1145/567793.567795	Association for Computing Machinery	nan; References; Link
423	TrustSE	Requirements engineering meets trust management - Model, methodology, and reasoning	The last years have seen a number of proposals to incorporate Security Engineering into mainstream Software Requirements Engineering. However, capturing trust and security requirements at an organizational level (as opposed to a design level) is still an open problem. This paper presents a formal framework for modeling and analyzing security and trust requirements. It extends the Tropos methodology, an agent-oriented software engineering methodology. The key intuition is that in modeling security and trust, we need to distinguish between the actors that manipulate resources, accomplish goals or execute tasks, and actors that own the resources or the goals. To analyze an organization and its information systems, we proceed in two steps. First, we built a trust model, determining the trust relationships among actors, and then we give a functional model, where we analyze the actual delegations against the trust model, checking whether an actor that offers a service is authorized to have it. The formal framework allows for the automatic verification of security and trust requirements by using a suitable delegation logic that can be mechanized within Datalog. To make the discussion more concrete, we illustrate the proposal with a Health Care case study.		Giorgini, P; Massacci, F; Mylopoulos, J; Zannone, N	TRUST MANAGEMENT, PROCEEDING	https://www.webofscience.com/wos/woscc/full-record/WOS:000189497000014		176-190	"""@inproceedings{WOS:000189497000014,
    Author = ""Giorgini, P and Massacci, F and Mylopoulos, J and Zannone, N"",
    Editor = ""Jensen, C and Poslad, S and Dimitrakos, T"",
    Title = ""Requirements engineering meets trust management - Model, methodology, and reasoning"",
    Booktitle = ""TRUST MANAGEMENT, PROCEEDING"",
    Series = ""Lecture Notes in Computer Science"",
    Year = ""2004"",
    Volume = ""2995"",
    Pages = ""176-190"",
    Note = ""2nd International Conference on Trust Management, Oxford, ENGLAND, MAR 29-APR 01, 2004"",
    Organization = ""Informat Soc Technol, European Union, Future \\& Emerging Technol, iTrust Work Grp"",
    Abstract = ""The last years have seen a number of proposals to incorporate Security Engineering into mainstream Software Requirements Engineering. However, capturing trust and security requirements at an organizational level (as opposed to a design level) is still an open problem. This paper presents a formal framework for modeling and analyzing security and trust requirements. It extends the Tropos methodology, an agent-oriented software engineering methodology. The key intuition is that in modeling security and trust, we need to distinguish between the actors that manipulate resources, accomplish goals or execute tasks, and actors that own the resources or the goals. To analyze an organization and its information systems, we proceed in two steps. First, we built a trust model, determining the trust relationships among actors, and then we give a functional model, where we analyze the actual delegations against the trust model, checking whether an actor that offers a service is authorized to have it. The formal framework allows for the automatic verification of security and trust requirements by using a suitable delegation logic that can be mechanized within Datalog. To make the discussion more concrete, we illustrate the proposal with a Health Care case study."",
    Publisher = ""SPRINGER-VERLAG BERLIN"",
    Address = ""HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Univ Trent, Dept Informat \\& Commun Technol, I-38100 Trento, Italy. Univ Trent, Dept Informat \\& Commun Technol, I-38100 Trento, Italy. Univ Toronto, Dept Comp Sci, Toronto, ON, Canada."",
    ISSN = ""0302-9743"",
    EISSN = ""1611-3349"",
    ISBN = ""3-540-21312-0"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""giorgini@dit.unitn.it massacci@dit.unitn.it jm@cs.toronto.edu zannone@dit.unitn.it"",
    Affiliations = ""University of Trento; Fondazione Bruno Kessler; FBK-ICT - Center for Information \\& Communication Technology; University of Toronto"",
    ResearcherID-Numbers = ""Massacci, Fabio/C-2662-2012 Giorgini, Paolo/G-7886-2012 Zannone, Nicola/H-1318-2012"",
    ORCID-Numbers = ""Massacci, Fabio/0000-0002-1091-8486 Zannone, Nicola/0000-0002-9081-5996"",
    Number-of-Cited-References = ""26"",
    Times-Cited = ""39"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""13"",
    Doc-Delivery-Number = ""BY92S"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000189497000014"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Requirements engineering meets trust management	https://www.webofscience.com/wos/woscc/full-record/WOS:000189497000014	SPRINGER-VERLAG BERLIN	nan; Keywords; References
424	TrustSE	Modelling security and trust with secure tropos	Although the concepts of security and trust play an important issue in the development of information systems, they have been mainly neglected by software engineering methodologies. In this chapter, we present an approach that considers security and trust throughout the software development process. Our approach integrates two prominent software engineering approaches, one that provides a security-oriented process and one that provides a trust management process. The result is the development of a methodology that considers security and trust issues as part of its development process. Such integration represents an advance over the current state of the art by providing the first effort to consider security and trust issues under a single software engineering methodology. A case study from the health domain is employed to illustrate our approach.		Giorgini, P.; Mouratidis, H.; Zannone, N.	Integrating Security and Software Engineering: Advances and Future Visions	https://doi.org/10.4018/978-1-59904-147-6.ch008		160 - 189	"""@BOOK{Giorgini2006160,
    author = ""Giorgini, P. and Mouratidis, H. and Zannone, N."",
    title = ""Modelling security and trust with secure tropos"",
    year = ""2006"",
    journal = ""Integrating Security and Software Engineering: Advances and Future Visions"",
    pages = ""160 - 189"",
    doi = ""10.4018/978-1-59904-147-6.ch008"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84899405437\&doi=10.4018\%2f978-1-59904-147-6.ch008\&partnerID=40\&md5=86a4f7d1ebde2aebdc63b1038b8c248d"",
    affiliations = ""University of Trento, Italy; University of East London, United Kingdom; Department of Information and Communication Technology, University of Trento, Italy"",
    abstract = ""Although the concepts of security and trust play an important issue in the development of information systems, they have been mainly neglected by software engineering methodologies. In this chapter, we present an approach that considers security and trust throughout the software development process. Our approach integrates two prominent software engineering approaches, one that provides a security-oriented process and one that provides a trust management process. The result is the development of a methodology that considers security and trust issues as part of its development process. Such integration represents an advance over the current state of the art by providing the first effort to consider security and trust issues under a single software engineering methodology. A case study from the health domain is employed to illustrate our approach. (c) 2007, Idea Group Inc."",
    publisher = ""IGI Global"",
    isbn = ""978-159904147-6"",
    language = ""English"",
    abbrev_source_title = ""Integrating Security and Softw. Engineering: Advances and Future Visions"",
    type = ""Book chapter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 52""
}
"""	Excluded	Excluded				2	Scopus Signed In		Modelling security and trust with secure tropos	https://www.scopus.com/record/display.uri?eid=2-s2.0-84899405437&origin=resultslist&sort=r-f&src=s&sid=160f15cd5f7637f426c6629331146901&sot=b&sdt=b&s=TITLE%28modelling+security+and+trust+with+secure+tropos%29&sl=54&sessionSearchId=160f15cd5f7637f426c6629331146901&relpos=0	IGI Global	nan; Keywords; References
425	TrustSE	Free/open source software development	The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development.	empirical studies;  free software;  open source software;  socio-technical relationships;  software development practices; empirical studies, free software, open source software, socio-technical relationships, software development practices	Scacchi, Walt	ESEC-FSE '07: Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering	https://doi.org/10.1145/1287624.1287689		459-468	"""@inproceedings{10.1145/1287624.1287689,
    author = ""Scacchi, Walt"",
    title = ""Free/open source software development"",
    year = ""2007"",
    isbn = ""9781595938114"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1287624.1287689"",
    doi = ""10.1145/1287624.1287689"",
    abstract = ""The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development."",
    booktitle = ""Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering"",
    pages = ""459-468"",
    numpages = ""10"",
    keywords = ""empirical studies, free software, open source software, socio-technical relationships, software development practices"",
    location = ""Dubrovnik, Croatia"",
    series = ""ESEC-FSE '07""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Free/open source software development	https://doi.org/10.1145/1287624.1287689	Association for Computing Machinery	nan; References; Link
426	TrustSE	Reuse-conducive development environments	Despite its well-recognized benefits, software reuse has not met its expected success due to technical, cognitive, and social difficulties. We have systematically analyzed the reuse problem (especially the cognitive and social difficulties faced by software developers who reuse) from a multidimensional perspective, drawing on our long-term research on information retrieval, human-computer interaction, and knowledge-based systems. Based on this analysis, we propose the concept of reuse-conducive development environments, which encourage and enable software developers to reuse through the smooth integration of reuse repository systems and development environments. We have designed, implemented, and evaluated CodeBroker-a reuse-conducive development environment-that autonomously locates and delivers task-relevant and personalized components into the current software development environment. Empirical evaluations of CodeBroker have shown that the system is effective in promoting reuse by enabling software developers to reuse components unknown to them, reducing the difficulties in locating components, and augmenting the programming capability of software developers.	Codes (symbols); Computer programming; Human computer interaction; Information retrieval; Knowledge based systems; Software engineering; Virtual reality; Centralized and decentralized development of reuse repositories; Comprehension; High-functionality applications; Information delivery; Latent semantic analysis; Modification model; Personalization; Relevance to the task-at-hand; Reuse-conducive environments; Software reuse; Computer software reusability; Codes (symbols);  Computer programming;  Human computer interaction;  Information retrieval;  Knowledge based systems;  Software engineering;  Virtual reality;  Centralized and decentralized development of reuse repositories;  Comprehension;  High-functionality applications;  Information delivery;  Latent semantic analysis;  Modification model;  Personalization;  Relevance to the task-at-hand;  Reuse-conducive environments;  Software reuse;  Computer software reusability	Ye, Yunwen; Fischer, Gerhard	Automated Software Engineering	https://doi.org/10.1007/s10515-005-6206-x		199 - 235	"""@ARTICLE{Ye2005199,
    author = ""Ye, Yunwen and Fischer, Gerhard"",
    title = ""Reuse-conducive development environments"",
    year = ""2005"",
    journal = ""Automated Software Engineering"",
    volume = ""12"",
    number = ""2"",
    pages = ""199 - 235"",
    doi = ""10.1007/s10515-005-6206-x"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-17444411454\&doi=10.1007\%2fs10515-005-6206-x\&partnerID=40\&md5=3835dc3a2959c7d73a464303fcea16de"",
    affiliations = ""SRA Key Technology Laboratory, Inc., Shinjuku, Tokyo 160-004, 3-12 Yotsuya, Japan; Department of Computer Science, University of Colorado, Boulder, CO 80303-0430, United States"",
    abstract = ""Despite its well-recognized benefits, software reuse has not met its expected success due to technical, cognitive, and social difficulties. We have systematically analyzed the reuse problem (especially the cognitive and social difficulties faced by software developers who reuse) from a multidimensional perspective, drawing on our long-term research on information retrieval, human-computer interaction, and knowledge-based systems. Based on this analysis, we propose the concept of reuse-conducive development environments, which encourage and enable software developers to reuse through the smooth integration of reuse repository systems and development environments. We have designed, implemented, and evaluated CodeBroker-a reuse-conducive development environment-that autonomously locates and delivers task-relevant and personalized components into the current software development environment. Empirical evaluations of CodeBroker have shown that the system is effective in promoting reuse by enabling software developers to reuse components unknown to them, reducing the difficulties in locating components, and augmenting the programming capability of software developers. (c) 2005 Springer Science + Business Media, Inc."",
    author_keywords = ""Comprehension; High-functionality applications; Information delivery; Latent semantic analysis; Location; Modification model; Personalization; Relevance to the task-at-hand; Reuse-conducive environments; Software reuse"",
    keywords = ""Codes (symbols); Computer programming; Human computer interaction; Information retrieval; Knowledge based systems; Software engineering; Virtual reality; Centralized and decentralized development of reuse repositories; Comprehension; High-functionality applications; Information delivery; Latent semantic analysis; Modification model; Personalization; Relevance to the task-at-hand; Reuse-conducive environments; Software reuse; Computer software reusability"",
    correspondence_address = ""Y. Ye; SRA Key Technology Laboratory, Inc., Shinjuku, Tokyo 160-004, 3-12 Yotsuya, Japan; email: yunwen@cs.colorado.edu"",
    issn = ""09288910"",
    coden = ""ASOEE"",
    language = ""English"",
    abbrev_source_title = ""Autom Software Eng"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 69""
}
"""	Excluded	Excluded				2	Scopus Signed In		Reuse-conducive development environments	https://www.scopus.com/record/display.uri?eid=2-s2.0-17444411454&origin=resultslist&sort=r-f&src=s&sid=ff8ee00756b08273c5ff8ad929c85174&sot=b&sdt=b&s=TITLE%28reuse+conducive+development+environments%29&sl=47&sessionSearchId=ff8ee00756b08273c5ff8ad929c85174&relpos=0		nan; References; Publisher
427	TrustSE	Software deployment, past, present and future	This paper examines the dimensions influencing the past and present and speculates on the future of software deployment. Software deployment is a postproduction activity that is performed for or by the customer of a piece of software. Today's software often consists of a large number of components each offering and requiring services of other components. Such components are often deployed into distributed, heterogeneous environments adding to the complexity of software deployment. This paper sets out a standard terminology for the various deployment activities an d the entities over which they operate. Six case studies of current deployment technologies are made to illustrate various approaches to the deployment problems. The paper then examines specific deployment issues in more detail before examining some of the future directions in which the field of deployment might take.	Computer software maintenance; Distributed computer systems; Problem solving; Project management; Requirements engineering; Standards; Deployment technologies; Software deployment; Software engineering; Computer software maintenance;  Distributed computer systems;  Problem solving;  Project management;  Requirements engineering;  Standards;  Deployment technologies;  Software deployment;  Software engineering	Dearle, Alan	FoSE 2007: Future of Software Engineering	https://doi.org/10.1109/FOSE.2007.20		269 - 284	"""@CONFERENCE{Dearle2007269,
    author = ""Dearle, Alan"",
    title = ""Software deployment, past, present and future"",
    year = ""2007"",
    journal = ""FoSE 2007: Future of Software Engineering"",
    pages = ""269 - 284"",
    doi = ""10.1109/FOSE.2007.20"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34748846536\&doi=10.1109\%2fFOSE.2007.20\&partnerID=40\&md5=ad4114c668441952fec1f938e90128f2"",
    affiliations = ""School of Computer Science, University of St. Andrews, St. Andrews Fife, United Kingdom"",
    abstract = ""This paper examines the dimensions influencing the past and present and speculates on the future of software deployment. Software deployment is a postproduction activity that is performed for or by the customer of a piece of software. Today's software often consists of a large number of components each offering and requiring services of other components. Such components are often deployed into distributed, heterogeneous environments adding to the complexity of software deployment. This paper sets out a standard terminology for the various deployment activities an d the entities over which they operate. Six case studies of current deployment technologies are made to illustrate various approaches to the deployment problems. The paper then examines specific deployment issues in more detail before examining some of the future directions in which the field of deployment might take. (c) 2007 IEEE."",
    keywords = ""Computer software maintenance; Distributed computer systems; Problem solving; Project management; Requirements engineering; Standards; Deployment technologies; Software deployment; Software engineering"",
    correspondence_address = ""A. Dearle; School of Computer Science, University of St. Andrews, St. Andrews Fife, United Kingdom; email: al@cs.st-and.ac.uk"",
    isbn = ""0769528295; 978-076952829-8"",
    language = ""English"",
    abbrev_source_title = ""Future Sotw. Eng."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 77; Conference name: FoSE 2007: Future of Software Engineering; Conference date: 23 May 2007 through 25 May 2007; Conference code: 70227; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software deployment, past, present and future	https://www.scopus.com/record/display.uri?eid=2-s2.0-34748846536&origin=resultslist&sort=r-f&src=s&sid=a0ba9b9870f8cc4069908d1b44773cdc&sot=b&sdt=b&s=TITLE%28software+deployment+past+present+and+future%29&sl=50&sessionSearchId=a0ba9b9870f8cc4069908d1b44773cdc&relpos=0		nan; References; Publisher
428	TrustSE	Updating Model of Software Component Trustworthiness Based on Users Feedback	The software trustworthiness measurement is one of the hot topics. Software component technology is the mainstream technology of software development. How to get the trustworthy degree of software component efficiently and accurately is a challenging issue for the component-based software development. Getting the trustworthy degree of software component needs many users' success cases. In this paper, we propose an updating model of software component trustworthiness. First, the trustworthy degree of the software component is computed based on users' feedback. Then, the weight of updating is determined by the number of users. Finally, the method of cluster different companies is based on the Euler distance. A case study shows that the method is reasonable and effective.	Software; Mathematical model; Software measurement; Companies; Computational modeling; Security; Acceleration; Software Components; User Feedback; Successful Cases; Geometric Mean; Weight Function; Software Companies; Attribute Weights; Software trustworthiness; software component; weight; updating model; user feedback	Baohua Wang; Yixiang Chen; Shun Zhang; Hengyang Wu	IEEE Access	https://doi.org/10.1109/ACCESS.2019.2892518	"1.J. Wang et al., ""An approach to measureing and grading software trust for spacecraft software"", Sci. Sinica Technol., vol. 45, pp. 221-228, 2015.Show in Context CrossRef  Google Scholar; 2.K. Liu, Z. Shan, J. Wang, J. He, Z. Zhang and Y.-W. Qin, ""The trusted software basic research summary of major research plan"", Nat. Natural Sci. Found. China, vol. 3, pp. 145-151, 2008.Show in Context Google Scholar; 3.H. Tao and Y. Chen, ""A new metric model for trustworthiness of softwares"", Telecommun. Syst., vol. 51, no. 2, pp. 95-105, Nov. 2012.Show in Context CrossRef  Google Scholar; 4.L. Zhang, Y. Zhou, Y. Chen, M. Zhang and J. Zhang, ""Stability of software trustworthiness measurements models"", Proc. IEEE 7th Int. Conf. Softw. Secur. Rel.-Companion, pp. 219-224, Jun. 2013.Show in Context View Article  Google Scholar; 5.Y. Ma, Y. Chen and B. Gu, ""An attributes-based allocation approach of software trustworthy degrees"", Proc. IEEE 9th Int. Conf. Softw. Secur. Rel.-Companion, pp. 89-94, Aug. 2015.Show in Context View Article  Google Scholar; 6.W. Hasseibring, ""Research on trustworthy software systems"", Computer, vol. 39, no. 4, pp. 91-92, 2006.Show in Context View Article  Google Scholar; 7.J. Voas, ""Trusted software's holy grail"", Softw. Qual. J., vol. 11, no. 1, pp. 9-17, 2003.Show in Context View Article  Google Scholar; 8.B. Lang, X. D. Liu, H. M. Wang, B. Xie and X. Mao, ""A classification model for software trustworthiness"", J. Frontiers Comput. Sci. Technol., vol. 4, no. 3, pp. 231-239, 2010.Show in Context Google Scholar; 9.Y. Shanlin, D. Shuai and C. Wei, ""Trustworthy software evaluation using utility based evidence theory"", J. Comput. Res. Develop., vol. 46, no. 7, pp. 1152-1159, 2009.Show in Context Google Scholar; 10.M. D. McIlroy, J. Buxton, P. Naur and B. Randell, ""Mass-produced software components"", Proc. Softw. Eng. Concepts Techn., pp. 88-98, 1968.Show in Context Google Scholar; 11.C. Szyperski, ""Component technology: What where and how?"", Proc. IEEE Int. Conf. Softw. Eng., pp. 684-693, May 2003.Show in Context View Article  Google Scholar; 12.J. Sametinger, Software Engineering With Reusable Components, Berlin, Germany:Springer-Verlag, pp. 1-63, 1997. CrossRef  Google Scholar; 13.F. Bachman et al., ""Technical concepts of component-based software engineering"", pp. 1-36, 2000.Show in Context CrossRef  Google Scholar; 14.C. Szyperski, Component Software: Beyond Object-Oriented Programming, Reading, MA, USA:Addison-Wesley, pp. 1-22, 2003.Show in Context Google Scholar; 15.M. Abdellatief, A. B. M. Sulta, A. A. A. Ghani and M. A. Jabar, ""Component-based software system dependency metrics based on component information flow measurements"", Proc. 6th Int. Conf. Softw. Eng. Adv. (ICSEA), pp. 76-83, 2011.Show in Context Google Scholar; 16.M. von Detten, M. C. Platenius and S. Becker, ""Reengineering component-based software systems with archimetrix"", Softw. Syst. Model., vol. 13, no. 4, pp. 1239-1268, 2014.Show in Context CrossRef  Google Scholar; 17.T. Vale et al., ""Twenty-eight years of component-based software engineering"", J. Syst. Softw., vol. 111, pp. 128-148, Jan. 2016.Show in Context CrossRef  Google Scholar; 18.B. Meyer, ""The grand challenge of trusted components"", Proc. 25th Int. Conf. Softw. Eng. (ICSE), pp. 660-667, May 2003.Show in Context View Article  Google Scholar; 19.B. Wang and S. Zhang, ""A subjective and objective integration approach of determining weights for trustworthy measurement"", IEEE Access, vol. 6, pp. 25829-25835, 2018.Show in Context View Article  Google Scholar; 20.T. L. Saaty, ""Analytic hierarchy process"", Mathematical Models for Decision Support, pp. 109-121.Show in Context CrossRef  Google Scholar"	60199- 60205		Included	Included				2	IEEE		Updating Model of Software Component Trustworthiness Based on Users Feedback	https://ieeexplore.ieee.org/document/8610145	IEEE	nan; Year; Bibtex
429	TrustSE	SV-AF -- A Security Vulnerability Analysis Framework	The globalization of the software industry has introduced a widespread use of system components across traditional system boundaries. Due to this global reuse, also vulnerabilities and security concerns are no longer limited in their scope to individual systems but instead can now affect global software ecosystems. While known vulnerabilities and security concerns are reported in specialized vulnerability databases, these repositories often remain information silos. In this research, we introduce a modeling approach, which eliminates these silos by linking security knowledge with other software artifacts to improve traceability and trust in software products. In our approach, we introduce a Security Vulnerabilities Analysis Framework (SV-AF) to support evidence based vulnerability detection. Two case studies are presented to illustrate the applicability of our presented approach. In these case studies, we link the NVD vulnerability databases and the Maven build repository to trace vulnerabilities across repository and project boundaries. In our analysis, we identify that 750 Maven project releases are directly affected by known security vulnerabilities and by considering transitive dependencies, an additional 415604 Maven projects can be identified as potentially affected by these vulnerabilities.		Sultan S. Alqahtani; Ellis E. Eghan; Juergen Rilling	2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE)	https://doi.org/10.1109/ISSRE.2016.12				Excluded	Excluded				2	IEEE		SV-AF ?€? A Security Vulnerability Analysis Framework	https://ieeexplore.ieee.org/abstract/document/7774522?casa_token=HQzH3ejuLlgAAAAA:LYHFV7OxkJNJeFPe3Vma0oftfxX4JR_fsht6nVnnONdXmB8dwT9r5PnBu8v4a3lu9e5eyahSmXW44Ao	IEEE	nan; Keywords; References; Pages; Year; Bibtex
430	TrustSE	A software component assembly approach supporting credibility index quantitative evaluation	From the research background of component assembly, in view of the shortage of the current component assembly technology in dealing with the increasing demand of software credibility and customization, this paper presents a solution of component assembly which supports credibility index quantitative evaluation in order to meet the requirements of software functional or non-functional for different clients. The main idea of this solution is to create a software architecture model represented by directed graph. The solution taking the component as base element, the function as target, the credibility index as constraint, automatically computes a variety of solutions which meet the functional requirement. Optimal solution will be obtained by evaluate the credibility index of those solutions in order to form software entity. In the end, this paper designs a assembly algorithm in terms of the component credibility adjacency matrix and provides simulation experiment results.	Assembly; Indexes; Software; Connectors; Computational modeling; Software reliability; Software Components; Credibility Index; Directed Graph; Solution In Order; Software Architecture; Experimental Simulation Results; Assembly Algorithms; Selection Problem; International Organization For Standardization; Linear Graph; Software Quality; Credibility Ratings; assembly; Software architecture; Credibility; Function-driven	Jun Xu; Deng Hui Dong; Yuan Ming Zhang; Zheng Song	2012 IEEE International Conference on Computer Science and Automation Engineering (CSAE)	https://doi.org/10.1109/CSAE.2012.6272857	"1.Xu Li-hua, Ziv H, and Richardson D, ""An Architectural Pattern for Non-functional Dependability Requirements,"" Systems & Software,vol.79, no.10, pp. 1370-1378, 2006. CrossRef  Google Scholar; 2.Mei hong and Cao Dong-gang, ""The challenges of internet posed,"" Communications of the CCF, vol.6,no.2,pp.20-27,2010. Google Scholar; 3.Ca Ka-yuan, ""Some understanding of software dependability and cybernetics,"" Science Foundation in China, vol.4, pp.11-14, 2004. Google Scholar; 4.A. Avizienis, J. C. Laprie, and B. Randell, ""Fundamental Concepts of Computer System Dependability"",2001. [Online].http://www.cs.virginia.edu/ ~jck/cs651/papers/lapire.taxonomy.pdf. Google Scholar; 5.Yang Fu-qing, ""Thinking of software engineering technology development,"" Journal of Software, vol.16, no.01, pp.1-7, 2005. CrossRef  Google Scholar; 6.A. Bondavalli, I. Mura, and S. Chiaradonna, ""DEEP: A Tool for The Dependability Modeling and Evaluation of Multiple Phased Systems,"" Washington: IEEE Computer Society Press, 2000, pp.231-236. Google Scholar; 7.M. Walter, C. Trinitis, and W. Karl, ""Open SESAME: An Intuitive Dependability Modeling Environment Supporting Inter-component Dependencies: Dependable Computing,"" Seoul: 2001 Pacific Rim International Symposium, 2001, pp.76-83. Google Scholar; 8.Meng Fan-chao, Chu Dian-hui, and Zhan De-chen, ""A service quality-driven enterprise application software component assembly method,"" Computer Science,vol.36, no.7, pp.135-140, 2009. Google Scholar; 9.L. Bass, P. C. Clements, and R. Kazman, Software Architecture in Practice. Boston: Addison-Wesley Publishing, 1998. Google Scholar; 10.Lo JH, Huang CY, and Chen IY, ""Reliability assessment and sensitivity analysis of software reliability growth modeling based on software module structure,"" Journal of systems and software, vol.76, pp.3-13, 2005. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		A software component assembly approach supporting credibility index quantitative evaluation	https://ieeexplore.ieee.org/document/6272857	IEEE	nan; Pages; Year; Bibtex
431	TrustSE	Position statement, Software testing, software quality and trust in software-based systems	Software-Based systems cover a very wide range of application domains. They include industrial applications, e.g. rail systems, building management systems, fire safety systems, industrial control systems, Energy applications to support generation, transmission, measurement, control, and numerous Healthcare and Medical applications just to name a few. The Testing requirements and Quality challenges for individual systems are very different. The software in a software-based system in today's world is very likely to originate from multiple sources. Besides the operating system and other infrastructure software, open source software, COTS, components from OEM or 3rd party vendors in addition to the software developed by the company selling the product co-exist. For the integrated product, the overall quality responsibility is with the company or entity whose label is on the product. Products from regulated entities have to meet both the internal quality requirements as well as be compliant with the quality regulations. In the above scenario, what is the scope of testing in a medical software-based system where a software defect from the 3rd party can have a collateral impact on the medical results generated by the system? Do you trust but verify or don't-trust and validate and verify, components of different origins? How is the software developed by external entities and a part of the integrated product tested differently from what is internally developed? These above questions are covered in our presentation. Also, possible software testing strategies for a regulated, e.g. medical software-based system is compared and contrasted with a nonregulated environment. Challenges in developing quality system software in our opinion are very basic. The challenge is in the ability for the testing group to thoroughly understand the system: clear and precise requirements, functional specification, architecture etc, so that proper tests can be designed, prioritized and executed within available resources and timelines. Documentation increases in an outsourced model to offset communication challenges. This is a leveling factor to quality - quality does not suffer from a well established outsourced model because there is an inherent self-correction with better documentation. Two areas that could see more effort are: (i) definitions of quality gates and how are they applied to external and internal software before and after integration, and (ii) Return on Investment calculations on OEM and outsourced components sometimes omit the costs of communication, additional testing and other overheads. Automation reduces time especially for regression, provides re-use and reduces/eliminates errors. Some ideas on test strategy, efficiency, and regression planning for multi-origin software are discussed and compared for regulated and non-regulated environments.	Ability testing; Communication; Computer software selection and evaluation; Health care; Industrial applications; Intelligent buildings; Medical applications; Profitability; Railroad transportation; Safety engineering; Building management system; Different origins; Energy applications; Fire safety systems; Functional specification; Individual systems; Industrial control systems; Infrastructure software; Integrated products; Internal quality; Multiple source; Open Source Software; Outsourced components; Overall quality; Quality challenges; Quality regulation; Quality systems; Rail systems; Return on investments; Self-correction; Software defects; Software Quality; Software-based; Test strategies; Testing requirements; Testing strategies; Trust-but-verify; Software testing; Ability testing;  Communication;  Computer software selection and evaluation;  Health care;  Industrial applications;  Intelligent buildings;  Medical applications;  Profitability;  Railroad transportation;  Safety engineering;  Building management system;  Different origins;  Energy applications;  Fire safety systems;  Functional specification;  Individual systems;  Industrial control systems;  Infrastructure software;  Integrated products;  Internal quality;  Multiple source;  Open Source Software;  Outsourced components;  Overall quality;  Quality challenges;  Quality regulation;  Quality systems;  Rail systems;  Return on investments;  Self-correction;  Software defects;  Software Quality;  Software-based;  Test strategies;  Testing requirements;  Testing strategies;  Trust-but-verify;  Software testing	Subramanyan, Rajesh	Proceedings - International Computer Software and Applications Conference	https://doi.org/10.1109/COMPSAC.2012.108		254	"""@CONFERENCE{Subramanyan2012254,
    author = ""Subramanyan, Rajesh"",
    title = ""Position statement, Software testing, software quality and trust in software-based systems"",
    year = ""2012"",
    journal = ""Proceedings - International Computer Software and Applications Conference"",
    pages = ""254"",
    doi = ""10.1109/COMPSAC.2012.108"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870800495\&doi=10.1109\%2fCOMPSAC.2012.108\&partnerID=40\&md5=9da82dd04ed424da4bf281d76aafea32"",
    affiliations = ""Siemens, United States"",
    abstract = ""Software-Based systems cover a very wide range of application domains. They include industrial applications, e.g. rail systems, building management systems, fire safety systems, industrial control systems, Energy applications to support generation, transmission, measurement, control, and numerous Healthcare and Medical applications just to name a few. The Testing requirements and Quality challenges for individual systems are very different. The software in a software-based system in today's world is very likely to originate from multiple sources. Besides the operating system and other infrastructure software, open source software, COTS, components from OEM or 3rd party vendors in addition to the software developed by the company selling the product co-exist. For the integrated product, the overall quality responsibility is with the company or entity whose label is on the product. Products from regulated entities have to meet both the internal quality requirements as well as be compliant with the quality regulations. In the above scenario, what is the scope of testing in a medical software-based system where a software defect from the 3rd party can have a collateral impact on the medical results generated by the system? Do you trust but verify or don't-trust and validate and verify, components of different origins? How is the software developed by external entities and a part of the integrated product tested differently from what is internally developed? These above questions are covered in our presentation. Also, possible software testing strategies for a regulated, e.g. medical software-based system is compared and contrasted with a nonregulated environment. Challenges in developing quality system software in our opinion are very basic. The challenge is in the ability for the testing group to thoroughly understand the system: clear and precise requirements, functional specification, architecture etc, so that proper tests can be designed, prioritized and executed within available resources and timelines. Documentation increases in an outsourced model to offset communication challenges. This is a leveling factor to quality - quality does not suffer from a well established outsourced model because there is an inherent self-correction with better documentation. Two areas that could see more effort are: (i) definitions of quality gates and how are they applied to external and internal software before and after integration, and (ii) Return on Investment calculations on OEM and outsourced components sometimes omit the costs of communication, additional testing and other overheads. Automation reduces time especially for regression, provides re-use and reduces/eliminates errors. Some ideas on test strategy, efficiency, and regression planning for multi-origin software are discussed and compared for regulated and non-regulated environments. (c) 2012 IEEE."",
    keywords = ""Ability testing; Communication; Computer software selection and evaluation; Health care; Industrial applications; Intelligent buildings; Medical applications; Profitability; Railroad transportation; Safety engineering; Building management system; Different origins; Energy applications; Fire safety systems; Functional specification; Individual systems; Industrial control systems; Infrastructure software; Integrated products; Internal quality; Multiple source; Open Source Software; Outsourced components; Overall quality; Quality challenges; Quality regulation; Quality systems; Rail systems; Return on investments; Self-correction; Software defects; Software Quality; Software-based; Test strategies; Testing requirements; Testing strategies; Trust-but-verify; Software testing"",
    correspondence_address = ""R. Subramanyan; Siemens, United States; email: rajesh.subramanyan@siemens.com"",
    issn = ""07303157"",
    isbn = ""978-076954736-7"",
    coden = ""PSICD"",
    language = ""English"",
    abbrev_source_title = ""Proc Int Comput Software Appl Conf"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: 36th IEEE Annual International Computer Software and Applications Conference, COMPSAC 2012; Conference date: 16 July 2012 through 20 July 2012; Conference code: 94244""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Software Testing, Software Quality and Trust in Software-Based Systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-84870800495&origin=resultslist&sort=r-f&src=s&sid=1275922be7ed62dd85316c1b8c8ea350&sot=b&sdt=b&s=TITLE%28software+testing+software+quality+and+trust+in+software+based+systems%29&sl=76&sessionSearchId=1275922be7ed62dd85316c1b8c8ea350&relpos=0		nan; References; Publisher
432	TrustSE	Enhancing Trust - Software Vulnerability Analysis Framework	Open source projects and the globalization of the software industry have been a driving force in reuse of system components across traditional system boundaries. As a result, vulnerabilities and security concerns are no longer only impact individual but now also global software ecosystems. Known vulnerabilities and security concerns are reported in specialized vulnerability databases, which often remain information silos. In my PhD research, I introduce a modeling approach, which eliminates these information silos by linking the security knowledge with other software artifacts to improve traceability and trust in software products.	Software; Security; Ontologies; Software engineering; Databases; Analytical models; Vulnerability Assessment; Security Vulnerabilities; Modeling Approach; Software Product; Open-source Projects; Software Artifacts; Open-source Software; Source Code; Cybersecurity; Software Development; Processing Software; Source Of Knowledge; Technological Knowledge; Software Engineering; Knowledge Resources; Resource Integration; Semantic Web; Heterogeneous Resources; Heterogeneous Knowledge; Software Repositories; Issue Tracking	Sultan S. Alqahtani	2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)	https://doi.org/10.1109/ICST.2017.76	"1.P. Vermesan, Ovidiu and Friess, Internet of things: converging technologies for smart environments and integrated ecosystems, River Publishers, 2013.Show in Context Google Scholar; 2.P. T. Devanbu and S. Stubblebine, ""Software engineering for security"", ICSE 00 Proceedings of the Conference on The Future of Software Engineering, pp. 227-239, 2000.Show in Context CrossRef  Google Scholar; 3.M. Wursch, G. Ghezzi, M. Hert, G. Reif and H. C. Gall, ""SEON: a pyramid of ontologies for software evolution and its applications"", Computing, vol. 94, no. 11, pp. 857-885, Nov. 2012.Show in Context CrossRef  Google Scholar; 4.G. Stumme, ""Formal Concept Analysis"" in Handbook on Ontologies, Berlin, Heidelberg:Springer Berlin Heidelberg, pp. 177-199, 2009.Show in Context CrossRef  Google Scholar; 5.S. S. Alqahtani, E. E. Eghan and J. Rilling, ""Tracing known security vulnerabilities in software repositories - A Semantic Web enabled modeling approach"", Sci. Comput. Program., vol. 121, pp. 153-175, Jun. 2016.Show in Context CrossRef  Google Scholar; 6.S. S. Alqahtani, E. E. Eghan and J. Rilling, ""SV-AF - A Security Vulnerability Analysis Framework"", IEEE 27th International Symposium on Software Reliability Engineering (ISSRE), 2016.Show in Context View Article  Google Scholar; 7.A. Kimmig, S. Bach, M. Broecheler, B. Huang and L. Getoor, ""A short introduction to Probabilistic Soft Logic"", Proceedings of NIPS Workshop on Probabilistic Programming: Foundations and Applications (NIPS Workshop-12), 2012.Show in Context Google Scholar; 8.S. S. Alqahtani, E. E. Eghan and J. Rilling, ""Recovering Semantic Traceability Links between APIs and Security Vulnerabilities: An Ontological Modeling Approach"", 10th IEEE International Conference on Software Testing Verification and Validation, 2017.Show in Context View Article  Google Scholar; 9.T. Bemers-Lee, J. Hendler and O. Lassila, ""The Semantic Web"", Sci. Am., vol. 284, no. 5, pp. 34-43, May 2001.Show in Context CrossRef  Google Scholar; 10.T. R. Gruber, ""A translation approach to portable ontology specifications"", Knowl. Acquis., vol. 5, no. 2, pp. 199-220, Jun. 1993.Show in Context CrossRef  Google Scholar"			Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		Enhancing Trust ?€? Software Vulnerability Analysis Framework	https://ieeexplore.ieee.org/document/7983295	IEEE	nan; Pages; Year; Bibtex
433	TrustSE	A multi-property trust model for reconfiguring component software	While component software continues to grow in size and complexity, it becomes increasingly difficult to ensure qualities for component services, especially at run-time. This paper focuses on a framework on middleware for dynamic re-configuration of components of different qualities from the view of trust. Firstly, a trust management model is built, in which the management framework and measurement model are presented, Secondly, the reconfiguration algorithm is described based on the model. Thirdly, the trust management is implemented as a kind of public services and some tools on a J2EE-compliant middleware platform, i.e., PKUAS. Finally, the related work is discussed and compared with our research.	Algorithms; Computational complexity; Information management; Mathematical models; Middleware; Quality of service; Software engineering; Component services; Dynamic reconfiguration; Trust management; Computer software; Algorithms;  Computational complexity;  Information management;  Mathematical models;  Middleware;  Quality of service;  Software engineering;  Component services;  Dynamic reconfiguration;  Trust management;  Computer software	Zhou, Minghui; Mei, Hong; Zhang, Lu	Proceedings - International Conference on Quality Software	https://doi.org/10.1109/QSIC.2005.5	OMG: CORBA Components, v3.0. Adopted specification (06/2002).; (2001)Enterprise JavaBeans Specification.Cited 369 times.DeMichiel, L.G, Umit Yalcnalp, L, Krishnan, S, eds, Version 2.0. Sun Microsystems; Heineman, G.T., Loyall, J., Schantz, R.; OMG, R.F.P.(2002)for UML Profile for Modeling Quality of Service and Fault Tolerance Characteristics and Mechanisms; http://www.cs.wustl.edu/~schmidt/TAO.html; de Jonge, M., Muskens, J., Chaudron, M.Scenario-Based Prediction of Runtime esource Consumption in Component-Based Software Systems(2003)Proceedings, th Workshop on Component-Based Software Engineering, in association with International Conference on Software Engineering.Cited 27 times.Portland, OR; Mishra, S.; Grandison, T., Sloman, M.A survey of trust in Internet applications(2000)IEEE Communications Surveys and Tutorials, 4 (4), pp. 2-16.Cited 863 times.; Grandison, T.W.A.Trust Management for Internet Applications(2003) .Cited 99 times.PhD thesis. Department of Computing, Imperial College, London; Pradham, D.K.(1996)Fault-Tolerant Computer System Design.Cited 577 times.Prentice Hall PTR, June; Xiong, L., Liu, L.; Huang, G., Wang, Q.-X., Cao, D.-G., Mei, H.; Vecellio, G., Thomas, W.Infrastructure Support for Predictable Policy EnforcementProceedings, 6th Workshop on Component-Based Software Engineering, in association with International Conference on Software Engineering, Portland, OR(2003) Component Technology and QoS Management, p. 263.; Vecellio, G., Thomas, W., Sanders, R.Containers for Predictable Behavior of Component-based Software(2002)5th Workshop on Component-Based Software Engineering, in association with International Conference on Software Engineering.Cited 6 times.Orlando, FL; Ciuhandu, O., Murphy, J.; Cervantes, H., Hall, R.S.	142 - 149	"""@CONFERENCE{Zhou2005142,
    author = ""Zhou, Minghui and Mei, Hong and Zhang, Lu"",
    title = ""A multi-property trust model for reconfiguring component software"",
    year = ""2005"",
    journal = ""Proceedings - International Conference on Quality Software"",
    volume = ""2005"",
    pages = ""142 - 149"",
    doi = ""10.1109/QSIC.2005.5"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33845924801\&doi=10.1109\%2fQSIC.2005.5\&partnerID=40\&md5=8016b79376c1d0175bb53ae89c617b63"",
    affiliations = ""Institute of Software, School of Electronics Engineering and Computer Science, Peking University, Beijing 100871, China"",
    abstract = ""While component software continues to grow in size and complexity, it becomes increasingly difficult to ensure qualities for component services, especially at run-time. This paper focuses on a framework on middleware for dynamic re-configuration of components of different qualities from the view of trust. Firstly, a trust management model is built, in which the management framework and measurement model are presented, Secondly, the reconfiguration algorithm is described based on the model. Thirdly, the trust management is implemented as a kind of public services and some tools on a J2EE-compliant middleware platform, i.e., PKUAS. Finally, the related work is discussed and compared with our research. (c) 2005 IEEE."",
    author_keywords = ""Component; Dynamic reconfiguration; QoS; Trust management"",
    keywords = ""Algorithms; Computational complexity; Information management; Mathematical models; Middleware; Quality of service; Software engineering; Component services; Dynamic reconfiguration; Trust management; Computer software"",
    correspondence_address = ""M. Zhou; Institute of Software, School of Electronics Engineering and Computer Science, Peking University, Beijing 100871, China; email: zhmh@sei.pku.edu.cn"",
    issn = ""15506002"",
    isbn = ""0769524729; 978-076952472-6"",
    language = ""English"",
    abbrev_source_title = ""Proc. Int. Conf. Qual. Softw."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 16; Conference name: 5th International Conference on Quality Software, QSIC 2005; Conference date: 19 September 2005 through 20 September 2005; Conference code: 69371""
}
"""	Excluded	Excluded				2	Scopus Signed In		A multi-property trust model for reconfiguring component software	https://www.scopus.com/record/display.uri?eid=2-s2.0-33845924801&origin=resultslist&sort=r-f&src=s&sid=5af96f1400898279a68c1eac5c8c3a07&sot=b&sdt=b&s=TITLE%28a+multi+property+trust+model+for+reconfiguring+component+software%29&sl=72&sessionSearchId=5af96f1400898279a68c1eac5c8c3a07&relpos=0		nan; Publisher
434	TrustSE	Assessing uncertainty in reliability of component-based software systems	Many architecture-based software reliability models were proposed in the past. Regardless of the accuracy of these models, if a considerable uncertainty exists in the estimates of the operational profile and components reliabilities then a significant uncertainty exists in calculated software reliability. Therefore, the traditional way of estimating software reliability by plugging point estimates of unknown parameters into the model may not be appropriate since it discards any variance due to uncertainty of the parameters. In this paper we propose a methodology for uncertainty analysis of architecture-based software reliability models suitable for large complex component based applications and applicable throughout the software life cycle. First, we describe different approaches to build the architecture based software reliability model and to estimate parameters. Then, we perform uncertainty analysis using the method of moments and Monte Carlo simulation which enable us to study how the uncertainty of parameters propagates in the reliability estimate. Both methods are illustrated on two case studies and compared using several criteria.	Application programs; Computer software; Intelligent systems; Life cycle; Method of moments; Monte Carlo methods; Reliability; Reliability analysis; Uncertainty analysis; Architecture-based software reliability model; Complex components; Component-based software systems; Estimating software; Operational profile; Point estimate; Reliability estimates; Software life cycles; Software reliability; Application programs;  Computer software;  Intelligent systems;  Life cycle;  Method of moments;  Monte Carlo methods;  Reliability;  Reliability analysis;  Uncertainty analysis;  Architecture-based software reliability model;  Complex components;  Component-based software systems;  Estimating software;  Operational profile;  Point estimate;  Reliability estimates;  Software life cycles;  Software reliability	Goseva-Popstojanova, K.; Kamavaram, S.	Proceedings - International Symposium on Software Reliability Engineering, ISSRE	https://doi.org/10.1109/ISSRE.2003.1251052	Adams, T.; Chen, Mei-Hwa, Mathur, Aditya P., Rego, Vernon; Cheung, R.C.; Farr, W.Software Reliability Modeling Survey(1996)Handbook of Software Reliability Engineering, pp. 71-117.Cited 143 times.M. R. Lyu (Ed.) , McGraw-Hill; Gokhale, S.S., Trivedi, K.S.; Goseva-Popstojanova, K., Trivedi, K.S.; Goseva-Popstojanova, K., Mathur, A.P., Trivedi, K.S.; Goseva-Popstojanova, K., Kamavaram, S.Uncertainty Analysis of Software Reliability Based on Method of Moments(2002)13th Int'l Symp. Software Reliability Engineering, pp. 143-144.Cited 5 times.Fast abstract; Hahn, G.J., Shapiro, S.S.(1994)Statistical Models in Engineering.Cited 1132 times.John Wiley & Sons; Jackson, P.S., Hockenbury, R.W., Yeater, M.L.; Johnson, M.E.(1987)Multivariate Statistical Simulation.Cited 612 times.John Wiley & Sons; Johnson, N.L., Kotz, S.(1969)Distributions in Statistics: Continuous Multivariate Distributions.Cited 2676 times.John Wiley & Sons; Kamavaram, S., Goseva-Popstojanova, K.Entropy as a Measure of Uncertainty in Software Reliability(2002)13th Int'l Symp. Software Reliability Engineering, pp. 209-210.Cited 17 times.Student paper; Kanoun, K., Sabourin, T.; Leung, Y.-W.; Littlewood, B., Wright, D.; Miller, K.W., Noonan, R.E., Park, S.K., Nicol, D.M., More, L.J., Murrill, B.W., Voas, J.M.; Musa, J.D.; Musa, John D.; Nelson, E.A Statistical Bases for Software Reliability(1973)TRW Software Series.Cited 34 times.TRW-SS- 73-02; Pasquini, A., Crespo, A.N., Matrella, P.; Siegrist, K.; Singh, H., Cortellessa, V., Cukic, B., Gunel, E., Bharadwaj, V.; Voas, J.M.; Wesslen, Anders, Runeson, Per, Regnell, Bjorn; Whittaker, J.A., Poore, J.H.; Yacoub, Sherif M., Cukic, Bojan, Ammar, Hany H.; Yin, L., Smith, M.A.J., Trivedi, K.S.; http://www.omg.org/uml/; http://www.gnu.org/manual/gprof-2.9.1/html_mono/gprof.html; http://xsuds.argreenhouse.com	307 - 320	"""@CONFERENCE{Goseva-Popstojanova2003307,
    author = ""Goseva-Popstojanova, K. and Kamavaram, S."",
    title = ""Assessing uncertainty in reliability of component-based software systems"",
    year = ""2003"",
    journal = ""Proceedings - International Symposium on Software Reliability Engineering, ISSRE"",
    volume = ""2003-January"",
    pages = ""307 - 320"",
    doi = ""10.1109/ISSRE.2003.1251052"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-16244393601\&doi=10.1109\%2fISSRE.2003.1251052\&partnerID=40\&md5=8d2089ffa5a024863dc11fb396cd44b4"",
    affiliations = ""Lane Department of Computer Science and Electrical Engineering, West Virginia University, Morgantown, 26506-6109, WV, United States"",
    abstract = ""Many architecture-based software reliability models were proposed in the past. Regardless of the accuracy of these models, if a considerable uncertainty exists in the estimates of the operational profile and components reliabilities then a significant uncertainty exists in calculated software reliability. Therefore, the traditional way of estimating software reliability by plugging point estimates of unknown parameters into the model may not be appropriate since it discards any variance due to uncertainty of the parameters. In this paper we propose a methodology for uncertainty analysis of architecture-based software reliability models suitable for large complex component based applications and applicable throughout the software life cycle. First, we describe different approaches to build the architecture based software reliability model and to estimate parameters. Then, we perform uncertainty analysis using the method of moments and Monte Carlo simulation which enable us to study how the uncertainty of parameters propagates in the reliability estimate. Both methods are illustrated on two case studies and compared using several criteria. (c) 2003 IEEE."",
    keywords = ""Application programs; Computer software; Intelligent systems; Life cycle; Method of moments; Monte Carlo methods; Reliability; Reliability analysis; Uncertainty analysis; Architecture-based software reliability model; Complex components; Component-based software systems; Estimating software; Operational profile; Point estimate; Reliability estimates; Software life cycles; Software reliability"",
    publisher = ""IEEE Computer Society"",
    issn = ""10719458"",
    isbn = ""0769520073"",
    coden = ""PSSRF"",
    language = ""English"",
    abbrev_source_title = ""Proc. Int. Symp. Softw. Reliab. Eng."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 77; Conference name: 14th International Symposium on Software Reliability Engineering, ISSRE 2003; Conference date: 17 November 2003 through 20 November 2003; Conference code: 114226""
}
"""	Excluded	Excluded				2	Scopus Signed In		Assessing uncertainty in reliability of component-based software systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-16244393601&origin=resultslist&sort=r-f&src=s&sid=708f664d5c64a5e9a891481c861133ac&sot=b&sdt=b&s=TITLE%28assessing+uncertainty+in+reliability+of+component+based+software+systems%29&sl=79&sessionSearchId=708f664d5c64a5e9a891481c861133ac&relpos=0	IEEE Computer Society	
435	TrustSE	Decision of Trusted Software Behavior	User's behaviors in information systems have different formats in different working modes, they mean users' intention actually. API callings, menu selections or requests are the familiar base elements of software behaviors, and different technologies are required to monitor and understand them. In information systems, it is necessary to insure that users' software behavior is trusted while processing. Client-Server mode is widely used in distributed computing system, the decision technology of trusted software behaviors from software of client meets the demand of forward defense in information systems. This paper puts forward the definition of software behavior and behavior set in client-server mode, software behavior is composed of requests from client, Request is the component of one or more software behaviors easy to be monitored. The expression of software behavior has been studied, and decision model of trusted software behavior has been built based on fuzzy matching algorithm, it can decide whether the processing software behavior is trusted or not.	Software; Servers; Monitoring; Information systems; Security; Unified modeling language; Computers; Information System; Definition Of Behavior; Logarithm; Access Control; Ongoing Behavior; Kind Of Threat; Client Requests; client-server mode; trusted software behavior; behavior set; fuzzy matching	Weiguang Kong	2010 International Symposium on Intelligence Information Processing and Trusted Computing	https://doi.org/10.1109/IPTC.2010.153	"1.Yanwen Qu, Software Behavior(in Chinese), Beijing:Publishing House of Electronics industry, 2004. Google Scholar; 2.W. Gao, ""Forwardly Defensive Technology"", Software World, vol. 19, 2007. Google Scholar; 3.Tim Mccollum, ""Applications control: Software behavior monitoring offers another layer of protection to corporate information systems"", Computers & Auditing, 2002. Google Scholar; 4.Ivan Porres, Modeling and Analyzing Software Behavior in UML, 2001,  [online]  Available: http://citeseer.ist.psu.edu/porres01modeling.html. Google Scholar; 5.James F. Bowring, Software Behavior: Automatic Classification and its Applications, Georgia Institute of Technology, 2003. Google Scholar; 6.James F. Bowring, ""Active Learning for Automatic Classification of Software Behavior"",  [online]  Available: http://www.cc.gatech.edu/aristotle/Publications/Papers/p398-bowring.pdf. CrossRef  Google Scholar; 7.Software behavior pattern recognition and analysis. Google Scholar; 8.B. Liu, ""The Summarize of the Technique about Proactive Network Security Protection"", Proceedings of the 11th China Symposium on Computer Application in Mordern Science & Technology, pp. 9, 2003. Google Scholar; 9.Fred Cohen, ""Computer Viruses - Theory and Experiments"", Computers & Security, vol. 6, no. 1, pp. 22-35, 1987. CrossRef  Google Scholar; 10.LUO Guang-chun, ""Research of Software Measurement on Behavior"", Journal of University of Electronic Science and Technology of China, vol. 38, no. 3, 2009. Google Scholar; 11.Wu Biao, ""Design and Implementation of Files Tamper-Proofing Software Based on Process Bahavior Analysis"", Application of Computer system, pp. 11, 2009. Google Scholar; 12.Lin Chuang, Tian Liqin and Wang Yuanzuo, ""Research on user behavior trust in trustworthy network"", Journal of Computer Research and Development, vol. 12, pp. 2033-2043, 2008. Google Scholar; 13.M Nielsen and K Krukow, ""A bayesian model for event-based Trust"", Electronic Notes in Theoretical Computer Science (EN TCS), vol. 172, no. 4, pp. 499-521, 2007. CrossRef  Google Scholar; 14.E Dodonov and Mello RF, ""A model for automatic online process behavior extraction classification and prediction in heterogeneous distributed Systems"", CCGR ID 2007, pp. 899-904. Google Scholar; 15.Man Junfeng, ""Research on Trust Analysis and Trend Prediction of Software Interactive Behavior"", Journal of Chinese Computer Systems, vol. 30, no. 11, 2009. Google Scholar; 16.Tao Fen, Yin Zhiyi and Fu Jianming, ""Software Behavior Model Based on System Calls"", Computer Science, vol. 37, no. 4, 2010. Google Scholar"			Excluded	Excluded				2	IEEE		Decision of Trusted Software Behavior	https://ieeexplore.ieee.org/document/5663158	IEEE	nan; Pages; Year; Bibtex
436	TrustSE	Reference Model of Trustworthy Proof for Trusted Components	Nowadays, trusted components have become one of the most focused fields of the software engineer. Trustworthy proof is a very important part of the trusted components, and also an important basis of the trusted components evaluation and relating studies. This paper regards trusted components as the research object, comprehensively analyzes the correlation theories and techniques of the trustworthy proof, gives definition and character of the trustworthy proof, and then proposes a reference model of the trustworthy proof for trusted components life cycle. In the end, two methods about obtaining trustworthy proofs are presented.	Queueing analysis; Feedback; Network servers; Information technology; Conference management; Information management; Technology management; Engineering management; Chaotic communication; Failure analysis; Reference Model; Design Stage; User Satisfaction; Software Components; User Feedback; Security Proof; Kinds Of Components; trusted components; trustworthy proof; proof item; reference model	JiuSong He; Hong Hou; QinBao Song; KeGang Hao	2009 Second International Conference on Future Information Technology and Management Engineering	https://doi.org/10.1109/FITME.2009.39	"1.Andreas S. Andreou and Marios Tziakouris, ""A quality framework for developing and evaluating original"", ELSEVIER: Information and Software Technology, vol. 49, pp. 122-141, 2007. CrossRef  Google Scholar; 2.SHI Shuang-yuan and CHEN Zhao-de, ""Research on the Trustworthiness Evaluation of Business Components"", Comprter Engineering, vol. 31, no. 5, pp. 84-86, 2009. Google Scholar; 3.GUO Shu Hang, LAN Yu Qing, JIN Mao Zhong et al., ""Some Issue about Trusted Components Research"", Journal of Computer Science, vol. 5, pp. 243-246, 2007. Google Scholar; 4.SHI Shuang-yuan and CHEN Qi, Design by Contract in the Application of Trusted Business Component, vol. 28, no. 1, pp. 127-130, 2006. Google Scholar; 5.B Councill and G T Heineman, ""Component - Based Software Engineering and the Issue of Trust"", Proc of the 22nd Intl Conf on Software Engineering, pp. 661-664, 2000. View Article  Google Scholar; 6.B Meyer, ""The grand challenge of trusted components"", Software Engineering 2003 Proceedings 25th International Conference on, pp. 660-667, May 2003. View Article  Google Scholar; 7.David Aspinall and Christoph Luth, Proof Tool Integration with Proof General. Google Scholar; 8.""The group of software components standard for Ministry of Information Industry: Software components quality mode, V0.9"", 12 2004."			Included	Included				2	IEEE		Reference Model of Trustworthy Proof for Trusted Components	https://ieeexplore.ieee.org/document/5380913	IEEE	nan; Pages; Year; Bibtex
437	TrustSE	Third-Party Software's Trust Quagmire	Integrating software developed by third-party organizations into a larger system raises concerns about the software's quality, origin, functionality, security, and interoperability. Addressing these concerns requires rethinking the roles of software's principal supply-chain actors--vendor, assessor, and evaluator.	Software development; Computer security; Software measurement; Third party software developers; Software engineering; Third-party Software; Universe; Cybersecurity; Formal Methods; Probability Of Failure; Software Quality; Hardware Configuration; Malware; commercial-off-the-shelf software; COTS; software reliability; software measurement; software composability; component-based software engineering; CBSE; software liability; third-party software; independent verification and validation; software engineering	Jeffrey Voas; George Hurlburt	Computer	https://doi.org/10.1109/MC.2015.372	"1.S. McConnell, ""The Art Science and Engineering of Software Development"", IEEE Software, vol. 15, no. 1, pp. 118-20, 1998. View Article  Google Scholar; 2.""Test and Evaluation Management Guide"", Dec. 2012,  [online]  Available: www.dau.mil/publications/publicationsDocs/Test%20and%20Evaluation%20Management%20Guide,%20December%202012,%206th%20Edition%20-v1.pdf. Google Scholar; 3.K.R.M. Rao and D. Pant, ""A Threat Risk Modeling Framework for Geospatial Weather Information System: A DREAD based Study"", Int'l J. Advanced Computer Science and Applications, vol. 1, no. 3, pp. 20-28, 2010. Google Scholar; 4.V. Cortellessa, A. Di Marco and P. Inverardi, Model-Based Software Performance Analysis, Springer, 2011. CrossRef  Google Scholar; 5.J. Voas, ""Software's Secret Sauce: the '-ilities'"", IEEE Software, vol. 21, no. 6, pp. 2-3, 2004. View Article  Google Scholar; 6.J. Voas, ""Software Quality Unpeeled"", Crosstalk, pp. 27-30, June 2008. Google Scholar"	80- 87		Included	Included				2	IEEE		Third-Party Software's Trust Quagmire	https://ieeexplore.ieee.org/document/7368015	IEEE	nan; Year; Bibtex
438	TrustSE	Modeling Trusted Software	This paper introduced the process algebra based language and its model-checking tools for trusted software architectural modeling, which deals with incompatibility between two components due to a single interaction or the combination of several interactions and with the lack of interoperability among a set of components through architectural compatibility check and interoperability check relying on weak bi-simulation equivalence.	process algebras; software architecture; trusted model; process algebras;  software architecture;  trusted model	Yang, Jie; Li, Yi	2009 3rd International Conference on Anti-counterfeiting, Security, and Identification in Communication	https://doi.org/10.1109/ICASID.2009.5276956	"1.SUNC A, Jin M, Liu C, ""Software architecture,"" Journal of Software,Vol.7(13), P 1228-1237, 2002. CrossRef  Google Scholar; 2.Bell, D. E. and L. J. Lapadula, ""Secure computer systems: Mathematical foundations"", Technical Report M74-244, The MITRE Corporation, Bedford, Massachusetts, May 1973. Google Scholar; 3.Colin Boyd, ""Security architectures using formal methods"", IEEE Journal on Selected Areas in Communications, Vol. 11(5) , June 1993. View Article  Google Scholar; 4.Bernardo, M., Ciancarini, P., and Donatiello, L., ""On the formalization of architectural types with process algebras"", In Proceedings of the 8th ACM International Symposium on the Foundations of Software Engineering (FSE-8), ACM, P140-148, New York, 2000. CrossRef  Google Scholar; 5.M. Bernardo, P. Ciancarini, L. Donatiello, ""Architecture families of software systems with process algebras"", ACM Transactions on Software Engineering and Methodology, Vol 11(4) , October 2002. CrossRef  Google Scholar; 6.P. Grunbacher, A. Egyed, N. Medvidovic, ""Reconciling software requirements and architectures: The CBSP Approach"", Proceedings of the 5th International Symposium on Requirements Engineering (RE'01), IEEE CS Presss, P202-211, 2001. View Article  Google Scholar"	370-373	"""@inproceedings{WOS:000275166300088,
    Author = ""Yang, Jie and Li, Yi"",
    Book-Group-Author = ""IEEE"",
    Title = ""Modeling Trusted Software"",
    Booktitle = ""PROCEEDINGS OF THE 3RD INTERNATIONAL CONFERENCE ON ANTI-COUNTERFEITING, SECURITY, AND IDENTIFICATION IN COMMUNICATION"",
    Year = ""2009"",
    Pages = ""370-373"",
    Note = ""3rd International Conference on Anti-Counterfeiting, Security, and Identification in Communication, Hong Kong, PEOPLES R CHINA, AUG 20-22, 2009"",
    Organization = ""IEEE Hong Kong Sect, CAS, COM Joint Chapter; City Univ Hong Kong, Dept Elect Engn; Xiamen Univ; Guizhou Normal Univ; IEEE Commun Soc"",
    Abstract = ""This paper introduced the process algebra based language and its model-checking tools for trusted software architectural modeling, which deals with incompatibility between two components due to a single interaction or the combination of several interactions and with the lack of interoperability among a set of components through architectural compatibility check and interoperability check relying on weak bi-simulation equivalence."",
    Publisher = ""IEEE"",
    Address = ""345 E 47TH ST, NEW YORK, NY 10017 USA"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Yang, J (Corresponding Author), S China Univ Technol, Sch Software, Guangzhou, Peoples R China. Yang, Jie; Li, Yi, S China Univ Technol, Sch Software, Guangzhou, Peoples R China."",
    DOI = ""10.1109/ICASID.2009.5276956"",
    ISBN = ""978-1-4244-3882-2"",
    Keywords = ""process algebras; software architecture; trusted model"",
    Research-Areas = ""Computer Science; Engineering; Telecommunications"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods; Engineering, Electrical \\& Electronic; Telecommunications"",
    Author-Email = ""yjclear@scut.edu.cn 391396131@qq.com"",
    Affiliations = ""South China University of Technology"",
    Number-of-Cited-References = ""6"",
    Times-Cited = ""0"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""0"",
    Doc-Delivery-Number = ""BNP05"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000275166300088"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Modeling trusted software	https://www.webofscience.com/wos/woscc/full-record/WOS:000275166300088	IEEE	
439	TrustSE	Toward trustworthy software systems	"Organizations such as Microsoft's Trusted Computing Group and Sun Microsystems' Liberty Alliance are currently leading the debate on ""trustworthy computing."" However, these and other initiatives primarily focus on security, and trustworthiness depends on many other attributes. To address this problem, the University of Oldenburg's TrustSoft Graduate School aims to provide a holistic view of trustworthiness in software - one that considers system construction, evaluation/analysis, and certification - in an interdisciplinary setting. Component technology is the foundation of our research program. The choice of a component architecture greatly influences the resulting software systems' nonfunctional properties. We are developing new methods for the rigorous design of trustworthy software systems with predictable, provable, and ultimately legally certifiable system properties. We are well aware that it is impossible to build completely error-free complex software systems. We therefore complement fault-prevention and fault-removal techniques with fault-tolerance methods that introduce redundancy and diversity into software systems. Quantifiable attributes such as availability, reliability, and performance call for analytical prediction models, which require empirical studies for calibration and validation. To consider the legal aspects of software certification and liability, TrustSoft integrates the disciplines of computer science and computer law."	Software systems; Certification; Law; Sun; Security; Component architectures; Software design; Fault tolerant systems; Redundancy; Availability; System Software; Trustworthy Software; Quality Attributes; Software Defect; Choice Architecture; Software Engineering; Distributed Denial Of Service; Correctional Services; Security; Software technologies; TrustSoft	Hasselbring, W; Reussner, R	COMPUTER	https://doi.org/10.1109/MC.2006.142		91-92	"""@article{WOS:000236612600017,
    Author = ""Hasselbring, W and Reussner, R"",
    Title = ""Toward trustworthy software systems"",
    Journal = ""COMPUTER"",
    Year = ""2006"",
    Volume = ""39"",
    Number = ""4"",
    Pages = ""91-92"",
    Month = ""APR"",
    Publisher = ""IEEE COMPUTER SOC"",
    Address = ""10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA"",
    Type = ""Editorial Material"",
    Language = ""English"",
    Affiliation = ""Hasselbring, W (Corresponding Author), Univ Oldenburg, TrustSoft Grad Sch, D-2900 Oldenburg, Germany. Univ Oldenburg, TrustSoft Grad Sch, D-2900 Oldenburg, Germany. Univ Karlsruhe, Karlsruhe, Germany."",
    DOI = ""10.1109/MC.2006.142"",
    ISSN = ""0018-9162"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Hardware \\& Architecture; Computer Science, Software Engineering"",
    Author-Email = ""hasselbring@informatik.uni-oldenburg.de reussner@ipd.uni-karlsruhe.de"",
    Affiliations = ""Carl von Ossietzky Universitat Oldenburg; Helmholtz Association; Karlsruhe Institute of Technology"",
    ResearcherID-Numbers = ""Hasselbring, Wilhelm/G-4794-2011"",
    Number-of-Cited-References = ""0"",
    Times-Cited = ""72"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""3"",
    Journal-ISO = ""Computer"",
    Doc-Delivery-Number = ""030DD"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000236612600017"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Web of Science		Toward trustworthy software systems	https://www.webofscience.com/wos/woscc/full-record/WOS:000236612600017	IEEE COMPUTER SOC	nan; References
440	TrustSE	Trusted components - 2nd Workshop on Trusted Components	"Summary form only given, as follows. Using ""off-the-shelf"" software components in mission-critical applications is not yet as commonplace as in desktop applications. Opposite to electronic components, there is a lack of methods and quality estimates in the software domain which makes it difficult to build trust into software components. While electronic devices have sets of measures characterizing their quality (reliability, performances, use-domain, speed scale), no real consensus exists to measure such quality characteristics for software components. A second problem is the software component expected capability to evolve (addition of new functionality, implementation change) and to be adapted to various environments. Trusted components are reusable software elements equipped with a strong presumption of high quality, based on a combination of convincing arguments of various kinds: technical (e.g. Design by Contract, thorough and meaningful testing, appropriate programming language, formal proofs), managerial (e.g. systematic process based on CMM or similar), social (e.g. reputation of the components' authors). The idea of trusted components was introduced in an IEEE Computer article of May 1998 and earlier presentations in the same journal (Object Technology column). A first Trusted Components workshop was held at Monash University (Melbourne, Australia) at the end of TOOLS PACIFIC 1998 on November 28, 1998. The purpose of this workshop is to set up a forum where interested people can share their point of view on the idea of trusted components and identify research directions to help the industry move towards this goal."	Software measurement; Software reliability; Conferences	J. Jezequel	Proceedings Technology of Object-Oriented Languages and Systems. TOOLS 29 (Cat. No.PR00275)	https://doi.org/10.1109/TOOLS.1999.779108				Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Trusted components - 2nd Workshop on Trusted Components	https://ieeexplore.ieee.org/document/779108	IEEE	nan; References; Pages; Year; Bibtex
441	TrustSE	Product Review Credibility Analysis	Product reviews are vital sources of customers' opinions and have a significant impact on purchasing decisions and product rankings on online shopping sites. Unfortunately, fraudsters (spammers) may write deceptive reviews (spam reviews) appreciating or deprecating a product, which can mislead potential customers and negatively affect revenues of many genuine organizations. Therefore, there is a great need for an effective approach to detect fake reviews and spammers. In this paper, we propose a statistical credibility scoring mechanism to identify spam reviews. It consists of three components: detection of duplicate reviews, detection of anomaly in review count and rating distribution, and detection of incentivized reviews. These three methodologies complement each other to effectively indicate the credibility of product reviews without requiring significant computational resources. It can aid data mining and online spam filtering systems to filter out spam product reviews and refine product rankings.	Data mining; Filtration; Sales; Computational resources; credibility analysis; Effective approaches; Online shopping sites; Product reviews; Purchasing decisions; Spam detection; Spam filtering; Online systems; Data mining;  Filtration;  Sales;  Computational resources;  credibility analysis;  Effective approaches;  Online shopping sites;  Product reviews;  Purchasing decisions;  Spam detection;  Spam filtering;  Online systems	Prabakaran, Anusha; Chen, Min	2019 International Conference on Computing, Networking and Communications, ICNC 2019	https://doi.org/10.1109/ICCNC.2019.8685490	Bird, S., Loper, E.; Broder, Andrei Z.; Crc 32 HashCRChttps://docs.aws.amazon.com/redshift/latest/dg/crc32-function.html; Feng, S., Xing, L., Gogar, A., Choi, Y.; Fusilier, D.H., Montes-Y-Gomez, M., Rosso, P., Cabrera, R.G.; He, R., McAuley, J.; Hellman, M.E., Raviv, J.; Hochenbaum, J., Vallis, O.S., Kejariwal, A.(2017)Automatic Anomaly Detection in the Cloud Via Statistical Learning.Cited 138 times.arXiv preprint arXiv: 1704.07706; Hu, N., Koh, N.S., Reddy, S.K.; Jindal, N., Liu, B.; Jindal, N., Liu, B.; Jindal, N., Liu, B., Lim, E.-P.; Kost, A.(2012)Woman Paid to Post Five-star Google Feedback..Cited 5 times.ABC7 News; Meyer, D.(2009)Fake Reviews Prompt Belkin Apology..Cited 5 times.CNet News; Miller, C.Company settles case of reviews it faked(2009)New York Times.Cited 6 times.; Popken, B.Ways you can spot fake online reviewsThe Consumerist, (30).; ReviewMeta. Reviewmetahttps://reviewmeta.com/blog/analysis-of-7-millionamazon-reviews-customers-who-receive-free-or-discounteditem-much-more-likelyto-write-positive-review; Anomaly Detection with R Code AccessS-H-ESDhttps://github.com/twitter/AnomalyDetection; Streitfeld, D.For $2 a star, an online retailer gets 5-star product reviews(2012)New YorkTimes, 26.Cited 15 times.; Topping, A.Historian orlando figes agrees to pay damages for fake reviews(2010)The Guardian, 16.Cited 9 times.; Anomaly Detection with Twitter GraphTwitterhttps://anomaly.io/anomaly-detection-Twitter-r; Ullman, J.(1992)Jaccard Similarity -Stanford InfoLabch. 3http://infolab.stanford.edu/ullman/mmds/ch3.pdf; Vassilvitskii, S.(2011)Dealing with Massive Data, pp. 1-30.http://www.cs.columbia.edu/coms699812; Wordnet with NtlkWordNethttps://pythonprogramming.net/wordnetnltk-Tutorial	11 - 15	"""@CONFERENCE{Prabakaran201911,
    author = ""Prabakaran, Anusha and Chen, Min"",
    title = ""Product Review Credibility Analysis"",
    year = ""2019"",
    journal = ""2019 International Conference on Computing, Networking and Communications, ICNC 2019"",
    pages = ""11 - 15"",
    doi = ""10.1109/ICCNC.2019.8685490"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064988302\&doi=10.1109\%2fICCNC.2019.8685490\&partnerID=40\&md5=6c32914a3c315c72e8a6e916c737ca2d"",
    affiliations = ""Division of Computing and Software Systems, School of STEM, University of Washington Bothell, Bothell, United States"",
    abstract = ""Product reviews are vital sources of customers' opinions and have a significant impact on purchasing decisions and product rankings on online shopping sites. Unfortunately, fraudsters (spammers) may write deceptive reviews (spam reviews) appreciating or deprecating a product, which can mislead potential customers and negatively affect revenues of many genuine organizations. Therefore, there is a great need for an effective approach to detect fake reviews and spammers. In this paper, we propose a statistical credibility scoring mechanism to identify spam reviews. It consists of three components: detection of duplicate reviews, detection of anomaly in review count and rating distribution, and detection of incentivized reviews. These three methodologies complement each other to effectively indicate the credibility of product reviews without requiring significant computational resources. It can aid data mining and online spam filtering systems to filter out spam product reviews and refine product rankings. (c) 2019 IEEE."",
    author_keywords = ""credibility analysis; online spam filtering; product review; Spam detection"",
    keywords = ""Data mining; Filtration; Sales; Computational resources; credibility analysis; Effective approaches; Online shopping sites; Product reviews; Purchasing decisions; Spam detection; Spam filtering; Online systems"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-153869223-3"",
    language = ""English"",
    abbrev_source_title = ""Int. Conf. Comput., Netw. Commun., ICNC"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; Conference name: 2019 International Conference on Computing, Networking and Communications, ICNC 2019; Conference date: 18 February 2019 through 21 February 2019; Conference code: 147370""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Product Review Credibility Analysis	https://www.scopus.com/record/display.uri?eid=2-s2.0-85064988302&origin=resultslist&sort=r-f&src=s&sid=eab3e4a1e4651ac281cfaabc7b26cdd4&sot=b&sdt=b&s=TITLE%28product+review+credibility+analysis%29&sl=42&sessionSearchId=eab3e4a1e4651ac281cfaabc7b26cdd4&relpos=0	Institute of Electrical and Electronics Engineers Inc	
442	TrustSE	A trusted model for service selection in trustworthy service composition	Service selection is a great challenge in trustworthy web service composition. This paper proposes a complete and practical model by improving an existing model based on trust and reputation for selecting trusted services. This new model overcomes five shortcomings of the old one, which are about entity (web service) description, cold start of algorithm, weighting component service (services participate in the composition), distinguishing rater and weighting different trust source.	Computer science; Web services; Websites; Cold start; Model-based OPC; New model; Practical model; reputation; Service compositions; Service selection; trust; Trust and reputation; Trustworthy web services; Quality of service; Computer science;  Web services;  Websites;  Cold start;  Model-based OPC;  New model;  Practical model;  reputation;  Service compositions;  Service selection;  trust;  Trust and reputation;  Trustworthy web services;  Quality of service	Liu, Yanghonghao; Tang, Xinhuai	Proceedings of 2011 International Conference on Computer Science and Network Technology, ICCSNT 2011	https://doi.org/10.1109/ICCSNT.2011.6182113	Nguyen, H.T., Zhao, W., Yang, J.; (2003)OWL-S: Semantic Markup for Web Services.Cited 1736 times.Nov.http://www.daml.org/services/owl-s/1.0/owl-s.html; OWL-S: Semantic Markup for Web Services.Cited 1736 times.http://www.ai.sri.com/daml/services/owl-s/1.2/overview/; Vu, L.-H., Hauswirth, M., Aberer, K.; Spanoudakis, G., LoPresti, S.; Maximilien, E.M., Singh, M.P.Multiagent System for Dynamic Web Services SelectionProceedings of 1st Workshop on Service-Oriented Computing and Agent-Based Engineering (SOCABE at AAMAS), Utrecht, the Netherlands, July 25-29, 2005.Cited 60 times.; Karta, K.An Investigation on Personalized Collaborative Filtering for Web Service Selection.Cited 47 times.Technical report, Available online last accessed on May. 15, 2009; Manikrao, U.S., Prabhakar, T.V.; Kalepu, S., Krishnaswamy, S., Loke, S.W.	927 - 930	"""@CONFERENCE{Liu2011927,
    author = ""Liu, Yanghonghao and Tang, Xinhuai"",
    title = ""A trusted model for service selection in trustworthy service composition"",
    year = ""2011"",
    journal = ""Proceedings of 2011 International Conference on Computer Science and Network Technology, ICCSNT 2011"",
    volume = ""2"",
    pages = ""927 - 930"",
    doi = ""10.1109/ICCSNT.2011.6182113"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860582237\&doi=10.1109\%2fICCSNT.2011.6182113\&partnerID=40\&md5=ef3010a42f38271c85c70a1b769ec3f5"",
    affiliations = ""School of Software, Shanghai Jiao Tong University, Shanghai, China"",
    abstract = ""Service selection is a great challenge in trustworthy web service composition. This paper proposes a complete and practical model by improving an existing model based on trust and reputation for selecting trusted services. This new model overcomes five shortcomings of the old one, which are about entity (web service) description, cold start of algorithm, weighting component service (services participate in the composition), distinguishing rater and weighting different trust source. (c) 2011 IEEE."",
    author_keywords = ""reputation; service selection; trust; trustworthy service composition; Web Service"",
    keywords = ""Computer science; Web services; Websites; Cold start; Model-based OPC; New model; Practical model; reputation; Service compositions; Service selection; trust; Trust and reputation; Trustworthy web services; Quality of service"",
    correspondence_address = ""Y. Liu; School of Software, Shanghai Jiao Tong University, Shanghai, China; email: pizzacrystal@sjtu.edu.cn"",
    isbn = ""978-145771584-6"",
    language = ""English"",
    abbrev_source_title = ""Proc. Int. Conf. Comput. Sci. Netw. Technol., ICCSNT"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 2; Conference name: 2011 International Conference on Computer Science and Network Technology, ICCSNT 2011; Conference date: 24 December 2011 through 26 December 2011; Conference code: 89506""
}
"""	Excluded	Excluded				2	Scopus Signed In		A trusted model for service selection in trustworthy service composition	https://www.scopus.com/record/display.uri?eid=2-s2.0-84860582237&origin=resultslist&sort=r-f&src=s&sid=ddb731abeb4c4ffbd96237cd2750498f&sot=b&sdt=b&s=TITLE%28a+trusted+model+for+service+selection+in+trustworthy+service+composition%29&sl=79&sessionSearchId=ddb731abeb4c4ffbd96237cd2750498f&relpos=0		nan; Publisher
443	TrustSE	Sandboxing Adoption in Open Source Ecosystems	Sandboxing mechanisms allow developers to limit how much access applications have to resources, following the least-privilege principle. However, it's not clear how much and in what ways developers are using these mechanisms. This study looks at the use of Seccomp, Landlock, Capsicum, Pledge, and Unveil in all packages of four open-source operating systems. We found that less than 1\% of packages directly use these mechanisms, but many more indirectly use them. Examining how developers apply these mechanisms reveals interesting usage patterns, such as cases where developers simplify their sandbox implementation. It also highlights challenges that may be hindering the widespread adoption of sandboxing mechanisms.		Alhindi, Maysara; Hallett, Joseph	SESoS '24: Proceedings of the 12th ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems	https://doi.org/10.1145/3643655.3643878		13-20	"""@inproceedings{10.1145/3643655.3643878,
    author = ""Alhindi, Maysara and Hallett, Joseph"",
    title = ""Sandboxing Adoption in Open Source Ecosystems"",
    year = ""2024"",
    isbn = ""9798400705571"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3643655.3643878"",
    doi = ""10.1145/3643655.3643878"",
    abstract = ""Sandboxing mechanisms allow developers to limit how much access applications have to resources, following the least-privilege principle. However, it's not clear how much and in what ways developers are using these mechanisms. This study looks at the use of Seccomp, Landlock, Capsicum, Pledge, and Unveil in all packages of four open-source operating systems. We found that less than 1\\% of packages directly use these mechanisms, but many more indirectly use them. Examining how developers apply these mechanisms reveals interesting usage patterns, such as cases where developers simplify their sandbox implementation. It also highlights challenges that may be hindering the widespread adoption of sandboxing mechanisms."",
    booktitle = ""Proceedings of the 12th ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems"",
    pages = ""13-20"",
    numpages = ""8"",
    location = ""Lisbon, Portugal"",
    series = ""SESoS '24""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Open source ecosystems	https://doi.org/10.1145/3643655.3643878	Association for Computing Machinery	nan; Keywords; References; Link
444	TrustSE	Trusted Software Architectural Modeling Method	This paper introduces a new process algebra based language with its powerful model-checking tools for trusted software architecture. It deals with incompatibility between two components due to a single interaction or the combination of several interactions and with the lack of interoperability among a set of components through architectural compatibility check and interoperability check relying on standard observational equivalences and weak bi-simulation equivalence.	Computer architecture; Software architecture; Algebra; Flowcharts; Software tools; Architecture description languages; Concurrent computing; Information processing; Paper technology; Computer science; Software Architecture; Model Checking; Lack Of Interoperability; Access Control; Language Model; Typical Architecture; Description Language; Access Request; trusted modeling; weak bi-simulation equivalence	Yang Jie; Zhou Yu-ren; Zheng Jin-bin	2009 Asia-Pacific Conference on Information Processing	https://doi.org/10.1109/APCIP.2009.193	"1.Sun Chang Ai, Jin Mao, Liu Chao, ""Software Architecture Review"", Software Journal 2002,Vol.7,No.13, pp: 1228-1237. CrossRef  Google Scholar; 2.Bell, D. E. and L. J. Lapadula, ""Secure Computer Systems: Mathematical Foundations"", Technical Report M74-244, The MITRE Corporation, Bedford, Massachusetts, May 1973. Google Scholar; 3.Colin Boyd, ""Security Architectures Using Formal Methods"", IEEE Journal on Selected Areas in Communications, June 1993, Vol. 11, No. 5. View Article  Google Scholar; 4.Bernardo, M., Ciancarini, P., and Donatiello, L., ""On the formalization of architectural types with process algebras"", In Proceedings of the 8th ACM International Symposium on the Foundations of Software Engineering (FSE-8), 2000, ACM, New York, pp: 140-148. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Trusted Software Architectural Modeling Method	https://ieeexplore.ieee.org/document/5197178	IEEE	nan; Pages; Year; Bibtex
445	TrustSE	TRUSTIE: Design of a Trustworthy Software Production Environment	Internet fundamentally changes the model of software development, the demands of software quality, and the process of software resource sharing. Internet- based environment for trustworthy software production is recognized as a key topic of software engineering in both academic and software industry. In this paper, the concepts and models of trustworthy software are introduced which dominate the design of Trustie environment. Trustie provides trustworthy software components sharing by an evolving software repository, and provides collaborative software development in a customizable development platform powered by a software production line framework. Finally the layered practices of research and application based on Trustie preliminarily demonstrate the effectiveness as well as the promising future of this environment.	Software; Production; Collaboration; Internet; Resource management; Software engineering; Programming; Production Environment; Software Product; Trustworthy Software; Modeling Software; Software Engineering; Software Components; Collaborative Development; Software Quality; Trustworthy Software; Production Environment; Collaboration Development	Huaimin Wang	2011IEEE 10th International Conference on Trust, Security and Privacy in Computing and Communications	https://doi.org/10.1109/TrustCom.2011.2	1.Fuqing Yang, Jian Lu, Hong Mei: Technical framework for Internetware: An architecture centric approach. Science in China Series F: Information Sciences 51(6):610-622, 2008. CrossRef  Google Scholar; 2.Ke Liu, Zhiguang Shan, Ji Wang, Jifeng He, et al, Overview on Major Research Plan of Trustworthy Software, Science Foundation in China, 22(3): 145-151, 2008. Google Scholar; 3.Huaimin Wang, Gang Yin, Trustworthy Software Evolution in Internet Era. Communications of China Computer Federation, 6(2): 28-36, 2010. Google Scholar			Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		TRUSTIE: Design of a Trustworthy Software Production Environment	https://ieeexplore.ieee.org/document/6120794	IEEE	nan; Pages; Year; Bibtex
446	TrustSE	Providing Trusted Components to the Industry	The software industry stands on feet of clay. However carefully we may strive to build correct and reliable software, we have no way of guaranteeing the quality of the result. Building correct and reliable software depends on the quality of so much else, from the hardware and the operating system to the compiler and the runtime libraries. And any significant software system has so many details and components of its own that we can hardly expect to get everything right if we do it all by ourselves. We describe an ambitious but realistic project that combines the ideas of reuse and formality with other more pragmatic techniques. The goal is to provide the entire software industry with a powerful set of reusable components deserving a high degree of trust.		Meyer, Bertrand	Computer	https://doi.org/10.1109/2.675643		104 - 105	"""@ARTICLE{Meyer1998104,
    author = ""Meyer, Bertrand"",
    title = ""Providing Trusted Components to the Industry"",
    year = ""1998"",
    journal = ""Computer"",
    volume = ""31"",
    number = ""5"",
    pages = ""104 - 105"",
    doi = ""10.1109/2.675643"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85008590313\&doi=10.1109\%2f2.675643\&partnerID=40\&md5=6f9f0f052567528f12481668bce03d9a"",
    affiliations = ""EiffelSoft Christine Mingins and Heinz Schmidt, Monash University, Australia"",
    issn = ""00189162"",
    language = ""English"",
    abbrev_source_title = ""Computer"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 33""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Scopus Signed In		Providing trusted components to the industry	https://www.scopus.com/record/display.uri?eid=2-s2.0-85008590313&origin=resultslist&sort=r-f&src=s&sid=dca2bebd76042ad521ac644decdc3b05&sot=b&sdt=b&s=TITLE%28providing+trusted+components+to+the+industry%29&sl=51&sessionSearchId=dca2bebd76042ad521ac644decdc3b05&relpos=0		nan; Abstract; Keywords; References; Publisher
447	TrustSE	Towards trusted composition in software design	In this paper, we investigate the issues on software composition at the design level. A formal framework for component composition, replacement, refinement in software design is proposed. This framework can help software designers to design software systems from existing design components and to rigorously analyze these systems. Thus, wrong design decisions, errors, and inconsistencies can be detected early in the development process.	Software design; Contracts; Software tools; Formal specifications; Independent component analysis; Software systems; Programming; Object oriented modeling; Computer science; Buildings; Design Software; Development Process; Design Of Components; Model Formulation; Large Systems; Software Development; Access Control; Implementation Phase; Level Of Implementation; Software Components; Model Checking; Formal Verification; Verification Techniques	Jing Dong; Sheng Yang	Eighth IEEE International Symposium on High Assurance Systems Engineering, 2004. Proceedings.	https://doi.org/10.1109/HASE.2004.1281772	1.G. Booch, J. Rumbaugh, and I. Jacobson. The Unified Modeling Language User Guide. Addison-Wesley, 1999. Google Scholar; 2.D. Dalcher. Disaster in London: The LAS Case Study. Proceedings of the IEEE International Conference on Engineering of Computer Based Systems, pages 41-52, 1999. View Article  Google Scholar; 3.J. Dong. Adding Pattern Related Information in Structural and Behavioral Diagrams. International Journal of Information and Software Technology (IST), Elsevier-Science, 2003 (to appear). CrossRef  Google Scholar; 4.J. Dong, P. Alencar, and D. Cowan. Ensuring Structure and Behavior Correctness in Design Composition. Proceedings of the IEEE International Conference on Engineering of Computer Based Systems, pp279-287, 2000. View Article  Google Scholar; 5.J. Dong, P. Alencar, and D. Cowan. A Behavioral Analysis and Verification Approach to Pattern-Based Design Composition. International Journal of Software and Systems Modeling, Springer-Verlag, 2003 (to appear). CrossRef  Google Scholar; 6.J. Dong, P. Alencar, and D. Cowan. A Formal Framework for Design Component Contracts. Proceedings of the IEEE International Conference on Information Reuse and Integration (IRI), pp53-60, Las Vegas, US, October 2003. View Article  Google Scholar; 7.E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns, Elements of Reusable Object-Oriented Software. Addison-Wesley Publishing Company, 1995. Google Scholar; 8.J.-M. Jezequel and B. Meyer. Design by Contract: The Lessons of Ariane. IEEE Computer, 30(1):129-130, 1997. View Article  Google Scholar; 9.R. Keller and R. Schauer. Design Components: Towards Software Composition at the Design Level. Proceedings of the International Conference on Software Engineering, pages 302-311, 1998. View Article  Google Scholar; 10.R. Milner, Communication and Concurrency. International Series in Computer Science. Prentice Hall, 1989. Google Scholar			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Towards trusted composition in software design	https://ieeexplore.ieee.org/document/1281772	IEEE	nan; Pages; Year; Bibtex
448	TrustSE	A new trusted software modeling method	The paper introduces the process algebra based modeling language and its powerful standard model-checking tools for trusted software architectures, which deals with incompatibility between two components due to a single interaction or the combination of several interactions and with the lack of interoperability among a set of components through architectural compatibility check and interoperability check relying on standard observational equivalences.	Algebra; Software architecture; Computer architecture; Software tools; Software safety; Concurrent computing; Flowcharts; Educational technology; Paper technology; Software standards; Language Model; Software Architecture; Lack Of Interoperability; Semantic; Interaction Analysis; Local Interactions; Access Control; Equivalency; Typical Architecture; Deadlock; Description Language; Access Request; Source Of Danger; process algebras; software architecture; trusted model	Yang Jie; Li Yi; Yu Min-cong	2009 4th International Conference on Computer Science & Education	https://doi.org/10.1109/ICCSE.2009.5228213	"1.SUNC A, Jin M, Liu C, ""Software architecture"" Journal of Software,2002,VoI.7,No.13, pp: 1228-1237.; 2.Bell, D. E. and L. 1. Lapadula, ""Secure computer systems: Mathematical foundations"", Technical Report M74-244, The MITRE Corporation, Bedford, Massachusetts, May 1973.; 3.Colin Boyd, ""Security architectures using formal methods"", IEEE Journal on Selected Areas in Communications, June 1993, Vol. 11, No. 5. View Article  Google Scholar; 4.Bernardo, M., Ciancarini, P., and Donatiello, L., ""On the formalization of architectural types with process algebras"", In Proceedings of the 8th ACM International Symposium on the Foundations of Software Engineering (FSE-8), 2000, ACM, New York, pp: 140-148. CrossRef  Google Scholar; 5.M. Bernardo, P. Ciancarini, L. Donatiello, ""Architecture families of software systems with process algebras."" ACM Transactions on Software Engineering and Methodology, October 2002, Vol.11, No.4. CrossRef  Google Scholar; 6.P. Grunbacher, A. Egyed, N. Medvidovic, ""Reconciling software requirements and architectures: The CBSP Approach"", Proceedings of the 5th International Symposium on Requirements Engineering (RE'01), IEEE CS Presss2001, pp: 202-211. View Article  Google Scholar"			Excluded	Excluded				2	IEEE		A new trusted software modeling method	https://ieeexplore.ieee.org/document/5228213	IEEE	nan; Pages; Year; Bibtex
449	TrustSE	Autonomic trust management for a component-based software system	Trust plays an important role in software systems, especially component-based systems in which components or their environments vary. This paper introduces an autonomic trust management solution for a component-based software system. We propose an adaptive trust control model to specify, evaluate, establish, and ensure the trust relationships among system entities. This model concerns the quality attributes of the entity and a number of trust control modes supported by the system. In particular, its parameters can be adaptively adjusted based on runtime trust assessment in order to reflect real system context and situation. Based on this model, we further develop a number of algorithms that can be adopted by a trust management framework for autonomic management of trust during component execution. We verify the algorithms' feasibility through simulations and demonstrate the effectiveness and benefits of our solution. We also discuss the issues for successful deployment of our solution in a component software platform.	Computer software; Quality assurance; Quality control; Autonomic management; Component based systems; Component software; Component-based software systems; Performance measure; Quality attributes; Trust management frameworks; Trust modeling; Adaptive control systems; Computer software;  Quality assurance;  Quality control;  Autonomic management;  Component based systems;  Component software;  Component-based software systems;  Performance measure;  Quality attributes;  Trust management frameworks;  Trust modeling;  Adaptive control systems	Yan, Zheng; Prehofer, Christian	IEEE Transactions on Dependable and Secure Computing	https://doi.org/10.1109/TDSC.2010.47		810 - 823	"""@ARTICLE{Yan2011810,
    author = ""Yan, Zheng and Prehofer, Christian"",
    title = ""Autonomic trust management for a component-based software system"",
    year = ""2011"",
    journal = ""IEEE Transactions on Dependable and Secure Computing"",
    volume = ""8"",
    number = ""6"",
    pages = ""810 - 823"",
    doi = ""10.1109/TDSC.2010.47"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052880154\&doi=10.1109\%2fTDSC.2010.47\&partnerID=40\&md5=5a86a93239e48404a69825f2ed48c7d0"",
    affiliations = ""XiDian University, Xi'an, China; Aalto University, 02150 Espoo, Otakaari 5, Finland; Kompetenzfeldleiter Adaptive Kommunikationssysteme, Fraunhofer-Einrichtung F. Syst. der Kommunikationstechnik ESK, 80686 Munchen, Hansastrasse 32, Germany"",
    abstract = ""Trust plays an important role in software systems, especially component-based systems in which components or their environments vary. This paper introduces an autonomic trust management solution for a component-based software system. We propose an adaptive trust control model to specify, evaluate, establish, and ensure the trust relationships among system entities. This model concerns the quality attributes of the entity and a number of trust control modes supported by the system. In particular, its parameters can be adaptively adjusted based on runtime trust assessment in order to reflect real system context and situation. Based on this model, we further develop a number of algorithms that can be adopted by a trust management framework for autonomic management of trust during component execution. We verify the algorithms' feasibility through simulations and demonstrate the effectiveness and benefits of our solution. We also discuss the issues for successful deployment of our solution in a component software platform. (c) 2011 IEEE."",
    author_keywords = ""Component software; performance measures; quality assurance; trust modeling and evaluation."",
    keywords = ""Computer software; Quality assurance; Quality control; Autonomic management; Component based systems; Component software; Component-based software systems; Performance measure; Quality attributes; Trust management frameworks; Trust modeling; Adaptive control systems"",
    correspondence_address = ""Z. Yan; XiDian University, Xi'an, China; email: zheng.yan@aalto.fi"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    issn = ""15455971"",
    language = ""English"",
    abbrev_source_title = ""IEEE Trans. Dependable Secure Comput."",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 90""
}
"""	Included	Included				2	Scopus Signed In		Autonomic Trust Management for a Component-Based Software System	https://www.scopus.com/record/display.uri?eid=2-s2.0-80052880154&origin=resultslist&sort=r-f&src=s&sid=ae008e8fd86428decdedd16d416aec3f&sot=b&sdt=b&s=TITLE%28autonomic+trust+management+for+a+component+based+software+system%29&sl=71&sessionSearchId=ae008e8fd86428decdedd16d416aec3f&relpos=0	Institute of Electrical and Electronics Engineers Inc	nan; References
450	TrustSE	Barriers to adoption of software reuse: A qualitative study	With economic pressures to deliver software applications at a faster rate and at lower cost, software reuse is becoming a significant technology for software development. This paper focuses on deriving a descriptive and explanatory theory concerning the individual and organizational barriers associated with the adoption of reuse. A case-study research method was used. A series of five cases were selected on the basis of theoretical replication. The findings, which indicate that barriers occur at both the individual and organizational level, suggest that those at the individual level are actually a consequence of the interaction of barriers caused at the organizational level.	Computer software reusability; Costs; Industrial research; Marketing; Software engineering; Qualitative research; Information management; Computer software reusability;  Costs;  Industrial research;  Marketing;  Software engineering;  Qualitative research;  Information management	Sherif, Karma; Vinze, Ajay	Information and Management	https://doi.org/10.1016/S0378-7206(03)00045-4		159 - 175	"""@ARTICLE{Sherif2003159,
    author = ""Sherif, Karma and Vinze, Ajay"",
    title = ""Barriers to adoption of software reuse: A qualitative study"",
    year = ""2003"",
    journal = ""Information and Management"",
    volume = ""41"",
    number = ""2"",
    pages = ""159 - 175"",
    doi = ""10.1016/S0378-7206(03)00045-4"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0141993812\&doi=10.1016\%2fS0378-7206\%2803\%2900045-4\&partnerID=40\&md5=db56c0f99be1e35b659c60fdd257fdea"",
    affiliations = ""Information Systems Department, College of Business Administration, Texas Tech University, Lubbock, TX 79409, United States; College of Business, Sch. of Acct./Information Management, Arizona State University, Tempe, AZ 85287-3606, United States"",
    abstract = ""With economic pressures to deliver software applications at a faster rate and at lower cost, software reuse is becoming a significant technology for software development. This paper focuses on deriving a descriptive and explanatory theory concerning the individual and organizational barriers associated with the adoption of reuse. A case-study research method was used. A series of five cases were selected on the basis of theoretical replication. The findings, which indicate that barriers occur at both the individual and organizational level, suggest that those at the individual level are actually a consequence of the interaction of barriers caused at the organizational level. (c) 2003 Elsevier Science B.V. All rights reserved."",
    author_keywords = ""Barriers to adoption; Case studies; Component development; Grounded theory methodology; Qualitative research; Software reuse"",
    keywords = ""Computer software reusability; Costs; Industrial research; Marketing; Software engineering; Qualitative research; Information management"",
    correspondence_address = ""K. Sherif; Information Systems Department, College of Business Administration, Texas Tech University, Lubbock, TX 79409, United States; email: ksherif@ba.ttu.edu"",
    issn = ""03787206"",
    coden = ""IMAND"",
    language = ""English"",
    abbrev_source_title = ""Inf Manage"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 44""
}
"""	Included	Included				2	Scopus Signed In		Barriers to adoption of software reuse: A qualitative study	https://www.scopus.com/record/display.uri?eid=2-s2.0-0141993812&origin=resultslist&sort=r-f&src=s&sid=7618eff50a4273deac02265ece109d2a&sot=b&sdt=b&s=TITLE%28barriers+to+adoption+of+software+reuse+a+qualitative+study%29&sl=65&sessionSearchId=7618eff50a4273deac02265ece109d2a&relpos=0		nan; References; Publisher
451	TrustSE	Evaluation and Application of Bounded Generalized Pareto Analysis to Fault Distributions in Open Source Software	In general, one of the most important aspects of software development and project management is how to make predictions and assessments of quality and reliability for developed products. Project data usually will be systematically collected and analyzed during the process of software development. Practically, it would be helpful if developers could identify the most error-prone modules early so that they can optimize testing-resource allocation and increase fault detection effectiveness accordingly. In the past, many research studies revealed the applicability of the Pareto principle to software systems, and some of them reported that the Pareto distribution (PD) model can be used to predict the fault distribution of software. In this paper, a special form of the Generalized PD model, named the Bounded Generalized Pareto distribution (BGPD) model, is further proposed to investigate the fault distributions of Open Source Software (OSS). It can be seen that the BGPD model eliminates the issue which occurred in the classical PD model. Three methods of parameter estimation will be presented, and related experiments are performed based on real OSS failure data. Experimental results show that the BGPD model presents high fitness to the actual failure data of OSS. Finally, the possibility of using early limited fault data to predict the later software fault distribution is also studied. Numerical results indicate that the BGPD model can be trusted to consistently produce accurate estimates of fault predictions during the early stages of development. The findings can provide an effective foundation for managing the necessary activities of software development and testing.	Predictive models; Mathematical model; Data models; Open source software; Cascading style sheets; Software reliability; Open-source Software; Distribution Of Defects; Pareto Analysis; Model Parameters; Mean Square Error; Parameter Estimates; Causal Effect; Maximum Likelihood Estimation; Quality Assurance; Distribution Models; System Software; Software Development; Processing Software; Shape Parameter; Least Squares Estimation; Method Of Moments; Weibull Distribution; Software Testing; Software Defect; Parameter Estimation Method; Open Source Software Projects; Kolmogorov-Smirnov Test; Internal Validity; Value Of Model; Mozilla Firefox; Model Performance; Magnitude Of Error; Software Quality; Heavy-tailed; Hazard Rate; Fault distribution; open source software; Pareto principle; software quality; software reliability; software testing; Weibull model	Chin-Yu Huang; Chih-Song Kuo; Shao-Pu Luan	IEEE Transactions on Reliability	https://doi.org/10.1109/TR.2013.2285056	"1.M. R. Lyu, Handbook of Software Reliability Engineering, USA, NY, New York:McGraw-Hill, 1996. Google Scholar; 2.X. Li, Y. F. Li, M. Xie and S. H. Ng, ""Reliability analysis and optimal version-updating for opensource software"", Inf. Software Technol., vol. 53, no. 9, pp. 929-936, Sept. 2011. CrossRef  Google Scholar; 3.J. D. Musa, A. Iannino and K. Okumoto, Software Reliability Measurement Prediction and Application, USA, NY, New York:McGraw-Hill, 1987. Google Scholar; 4.M. Xie, Software Reliability Modeling, USA, NY, New York:World Scientific Publishing Company, 1991. CrossRef  Google Scholar; 5.C. Y. Huang, M. R. Lyu and S. Y. Kuo, ""A unified scheme of some non-homogenouspoisson process models for software reliability estimation"", IEEE Trans. Software Eng., vol. 29, no. 3, pp. 261-269, Mar. 2003. View Article  Google Scholar; 6.E. O. Costa, A. T. R. Pozo and S. R. Vergilio, ""A genetic programming approachfor software reliability modeling"", IEEE Trans. Rel., vol. 59, no. 1, pp. 222-230, Sep. 2012. View Article  Google Scholar; 7.C. Y. Huang and C. T. Lin, ""Analysis of software reliabilitymodeling considering testing compression factor and failure-to-fault relationship"", IEEE Trans. Comput., vol. 59, no. 2, pp. 283-288, Feb. 2010. View Article  Google Scholar; 8.J. D. Musa and K. Okumoto, ""A comparison of time domainsfor software reliability models"", J. Syst. Software, vol. 4, no. 4, pp. 277-287, Nov. 1984. CrossRef  Google Scholar; 9.P. K. Kapur, H. Pham, S. Anand and K. Yadav, ""A unified approach for developing software reliability growthmodels in the presence of imperfect debugging and error generation"", IEEE Trans. Rel., vol. 60, no. 1, pp. 331-340, Mar. 2011. View Article  Google Scholar; 10.C. Y. Huang and M. R. Lyu, ""Estimation and analysis ofsome generalized multiple change-point software reliability models"", IEEE Trans. Rel., vol. 60, no. 2, pp. 498-514, Jun. 2011. View Article  Google Scholar; 11.E. N. Adams, ""Optimizing preventive serviceof software products"", IBM J. Res. Develop., vol. 28, no. 1, pp. 2-14, Jan. 1984. View Article  Google Scholar; 12.A. Endres, ""An analysis of errors and theircauses in system programs"", IEEE Trans. Software Eng., vol. SE-1, no. 2, pp. 140-149, Jun. 1975. View Article  Google Scholar; 13.T. J. Ostrand and E. J. Weyuker, ""The distribution of faultsin a large industrial software system"", Proc. 2002 ACM/SIGSOFT Int. Symp. Software Testing Anal. (ISSTA 2002), pp. 55-64, 2002-Jul. CrossRef  Google Scholar; 14.M. K. Daskalantonakis, ""A practical view of softwaremeasurement and implementation experiences within motorola (1001-1004)"", IEEE Trans. Software Eng., vol. 18, no. 11, pp. 998-1010, Nov. 1992. View Article  Google Scholar; 15.C. S. Kuo and C. Y. Huang, ""A study of applying the boundedgeneralized pareto function to the analysis of software fault distribution"", Proc. 2010 IEEE Int. Conf. Ind. Eng. Eng. Manag. (IEEM 2010), pp. 611-615, 2010-Dec. View Article  Google Scholar; 16.N. Fenton and N. Ohlsson, ""Quantitative analysis of faultsand failures in a complex software system"", IEEE Trans. Software Eng., vol. 26, no. 8, pp. 797-814, Aug. 2000. View Article  Google Scholar; 17.C. Andersson and P. Runeson, ""A replicated quantitative analysisof fault distributions in complex software systems"", IEEE Trans. Software Eng., vol. 33, no. 5, pp. 273-286, May 2007. View Article  Google Scholar; 18.M. Hamill and K. Goseva-Popstojanova, ""Common trends in software faultsand failure data"", IEEE Trans. Software Eng., vol. 35, no. 4, pp. 484-496, Jul.-Aug. 2009. View Article  Google Scholar; 19.F. Hunt and P. Johnson, ""On the pareto distributionof sourceforge projects"", Proc. Int. Workshop Open Source Software Develop., pp. 122-129, 2002-Feb. Google Scholar; 20.P. L. Li, M. Shaw, J. D. Herbsleb, B. K. Ray and P. Santhanam, ""Empirical evaluation of defect projectionmodels for widely-deployed production software systems"", Proc. 12th ACM SIGSOFT Int. Symp. Foundations Software Eng. (SIGSOFT '04/FSE-12), pp. 263-272, 2004-Nov. CrossRef  Google Scholar; 21.G. Concas, M. Marchesi, A. Murgia, R. Tonelli and I. Turnu, ""On the distribution of bugs in the eclipsesystem"", IEEE Trans. Software Eng., vol. 37, no. 6, pp. 872-877, Nov./Dec. 2011. View Article  Google Scholar; 22.S. H. Kan, Metrics Models Software Quality Eng., USA, MA, Boston:Addison-Wesley, 2003. Google Scholar; 23.Y. Zhou and J. Davis, ""Open source software reliability model:An empirical approach"", Proc. 5th Workshop Open Source Software Eng. Conjunction 27th ACM/IEEE Int. Conf. Software Eng. (ICSE'05), pp. 67-72, 2005-May. CrossRef  Google Scholar; 24.H. Zhang, ""On the distribution of softwarefaults"", IEEE Trans. Software Eng., vol. 34, no. 2, pp. 301-302, Mar./Apr. 2008. View Article  Google Scholar; 25.D. N. P. Murthy, M. Xie and R. Jiang, Weibull Models, USA, NJ, Hoboken:Wiley, 2003. CrossRef  Google Scholar; 26.J. Pickands, ""Statistical inference usingextreme order statistics"", Annals Statist., vol. 3, no. 1, pp. 119-131, 1975. CrossRef  Google Scholar; 27.Accessed on August 15 2012. Google Scholar; 28.K. Kanoun, M. Martini and J. Souza, ""A method for software reliability analysisand prediction application to the TROPICO-R Switching System"", IEEE Trans. Software Engineering, vol. 17, no. 4, pp. 334-344, Apr. 1991. View Article  Google Scholar; 29.P. L. Li, J. Herbsleb and M. Shaw, ""Forecasting field defect rates using a combinedtime-based and metrics-based approach: A case study of OpenBSD"", Proc. 16th IEEE Int. Symp. Software Rel. Eng. (ISSRE 2005), pp. 193-202, 2005-Nov. View Article  Google Scholar; 30.K. Holden, D. A. Peel and J. L. Thompson, Economic Forecasting: An Introduction, U.K., Cambridge:Cambridge Univ. Press, 1991. CrossRef  Google Scholar"	309- 319		Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Evaluation and Application of Bounded Generalized Pareto Analysis to Fault Distributions in Open Source Software	https://ieeexplore.ieee.org/document/6631477	IEEE	nan; Year; Bibtex
452	TrustSE	Trust and vulnerability in open source software	Software plays an ever increasing role in the critical infrastructures that run our cities, manage our economies, and defend our nations. In 1999, the Presidents Information Technology Advisory Committee (PITAC) reported to the United States President the need for software components that are reliable, tested, modelled and secure supporting the development of predictably reliable and secure systems that underscore our critical infrastructures. Open source software (OSS) constitutes a viable source for software components. Some believe that OSS is more reliable and more secure than closed source software (CSS) - due to a phenomenon dubbed 'many eyeballs' - but is this truly the case? Or does OSS give the cyber criminal an edge that he would likewise not have? In this paper, we explore OSS from the perspective of the cyber criminal and discuss what the community of software developers and users alike can do to increase their trust in both open source software and closed source software.	Computer crime; Cost benefit analysis; Information technology; Open systems; Security of data; Software engineering; Open source software (OSS); Computer software; Computer crime;  Cost benefit analysis;  Information technology;  Open systems;  Security of data;  Software engineering;  Open source software (OSS);  Computer software	Hissam, S.A.; Plakosh, D.; Weinstock, C.	IEE Proceedings: Software	https://doi.org/10.1049/ip-sen:20020208	Joy, B., Kennedy, K.(1999)Report to the President, Information Technology Research: Investing in our Future.Cited 71 times.Februaryhttp://www.ccic.gov/ac/report/pitac_report.pdf; Raymond, E.(1999)The cathedral & the bazaar: Musings on Linux and open source by an accidental revolutionary.Cited 2846 times.O'Reilly & Associates, Cambridge, MA; Viega, J.(2000)The myth of open-source security.Cited 6 times.Junehttp://webdeveloper.earthweb.com/websecu/article/012013_62185100.html; (2001)Number of incidents reportedJulyCERT Coordination Center; (2001)Netcraft web server survey.Cited 9 times.OctoberNetcraff; Hissam, S.Case study: Correcting system failure in a COTS information system(1997)SEI Monographs on the Use of Commercial Software in Government Systems (monograph)Pittsburgh, PA, OctoberSoftware Engineering Institute, Carnegie Mellon University; Neumann, P.(1995)Computer-related risks.Cited 318 times.Addison-Wesley, Reading, MA, October; Ellison, R., Fisher, D., Linger, R., Lipson, H., Longstaff, T., Mead, N.(1997)Survivable network systems: An emerging discipline.Cited 370 times.CMU/SEI-97-TR-013, ADA341963, Pittsburgh, PA, NovemberSoftware Engineering Institute, Carnegie Mellon University; Whitlock, N.(2001)Does open source mean an open door?http://www-106.ibm.com/developerworks/linux/library/l-oss.html; Thomas, B.A discussion of open-source software(1990)SEI InteractiveMarchhttp://interactive.sei.cmu.edu/Features/2000/March/Roundtable/Roundtable.mar00.p df; (2001)CERT(r) advisory CA-1999-14 multiple vulnerabilities in BINDCERT Coordination Center; (1981)Internet protocol, DARPA internet program protocol specification (RFC-791).Cited 273 times.Marina Del Ray, CA, University of Southern California, SeptemberInformation Sciences Institute; (2001)Teardrop IP fragmentationInternet Security Systems, Inc.; (2001)CERT(r) advisory CA-1997-28 IP denial-of-service attacksCERT Coordination Center; Feller, J., Fitzgerald, B.; Nakakoji, K., Yamamoto, Y.Taxonomy of open-source software development(2001)Proceedings of the 1st workshop on Open-source software engineering, pp. 41-42.Cited 3 times.Making sense of the bazaar, ICSE'2001, Toronto, Canada, 12-19 May; Asundi, J.(2001)Issues in software development: Outsourcing, design and organizationPhD Dissertation, School of Computer Science, Carnegie Mellon University	47 - 51	"""@ARTICLE{Hissam200247,
    author = ""Hissam, S.A. and Plakosh, D. and Weinstock, C."",
    title = ""Trust and vulnerability in open source software"",
    year = ""2002"",
    journal = ""IEE Proceedings: Software"",
    volume = ""149"",
    number = ""1"",
    pages = ""47 - 51"",
    doi = ""10.1049/ip-sen:20020208"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036477049\&doi=10.1049\%2fip-sen\%3a20020208\&partnerID=40\&md5=5c549912283f44eca6de4110ac417748"",
    affiliations = ""Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA 16066, 4500 5th Avenue, United States"",
    abstract = ""Software plays an ever increasing role in the critical infrastructures that run our cities, manage our economies, and defend our nations. In 1999, the Presidents Information Technology Advisory Committee (PITAC) reported to the United States President the need for software components that are reliable, tested, modelled and secure supporting the development of predictably reliable and secure systems that underscore our critical infrastructures. Open source software (OSS) constitutes a viable source for software components. Some believe that OSS is more reliable and more secure than closed source software (CSS) - due to a phenomenon dubbed 'many eyeballs' - but is this truly the case? Or does OSS give the cyber criminal an edge that he would likewise not have? In this paper, we explore OSS from the perspective of the cyber criminal and discuss what the community of software developers and users alike can do to increase their trust in both open source software and closed source software."",
    keywords = ""Computer crime; Cost benefit analysis; Information technology; Open systems; Security of data; Software engineering; Open source software (OSS); Computer software"",
    issn = ""14625970"",
    coden = ""IPSEF"",
    language = ""English"",
    abbrev_source_title = ""IEE Proc Software"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 21""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Trust and vulnerability in open source software	https://www.scopus.com/record/display.uri?eid=2-s2.0-0036477049&origin=resultslist&sort=r-f&src=s&sid=5ddcb681bf3522e41e1fa91421742a35&sot=b&sdt=b&s=TITLE%28trust+and+vulnerability+in+open+source+software%29&sl=54&sessionSearchId=5ddcb681bf3522e41e1fa91421742a35&relpos=0		nan; Publisher
453	TrustSE	Trustworthy software: lessons from 'goto fail' & heartbleed bugs	In the first four months of 2014, two major vulnerabilities were announced affecting operation of the Transport Layer Security (TLS) protocol, which is used by applications to secure Internet communications. The `goto fail' bug affected Apple's iOS and OS X software and the `Heartbleed' bug affected versions of the OpenSSL software. Whilst the Apple bug was serious because it affected a wide range of Apple products, the Heartbleed bug was of greater significance due to widespread use of the OpenSSL library. This paper considers the lessons to be learned from these incidents. It examines how the use of the Trustworthy Software Framework (TSF) developed by the authors could have helped to reduce the risk of a major bugs like `goto fail' and Heartbleed. It also examines the responsibilities of developers where they use third party libraries and the need for appropriate due diligence. The paper also makes recommendations about how incidents like this should be handled to avoid confusing and contradictory messages being given.	Heartbleed; trustworthy software; software defect; embedded systems; cyber security	H. A. Boyes; P. Norris; I. Bryant; T. Watson	9th IET International Conference on System Safety and Cyber Security (2014)	https://doi.org/10.1049/cp.2014.0970				Included	Included				2	IEEE		Trustworthy Software: lessons from `goto fail' & Heartbleed bugs	https://ieeexplore.ieee.org/document/7111729	IET	nan; References; Pages; Year; Bibtex
454	TrustSE	Trusted software supply chain	Modern software delivery happens in a geographically distributed environment and resembles like a supply chain - consists of various participants, involves various phases, needs adherence to multiple regulations and needs to maintain artifacts' integrity throughout the delivery phases. This shift in software development brings along with it several challenges ranging from communication of information/knowledge, coordination and control of teams, activities adhering to goals and policies and artifacts adhering to quality, visibility, and management. With the dispersion of centralized control over software delivery to autonomous delivery organizations, the variety of processes and tools used turns transparency into opacity as autonomous teams use different software processes, tools, and metrics, leading to issues like ineffective compliance monitoring, friction prone coordination, and lack of provenance, and thereby trust. In this paper, we present a delivery governance framework based on distributed ledger technology that uses a notion of 'software telemetry' to record data from disparate delivery partners and enables compliance monitoring and adherence, provenance and traceability, transparency, and thereby trust.		Singi, Kapil; Bose, R. P. Jagadeesh Chandra; Podder, Sanjay; Burden, Adam P.	ASE '19: Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering	https://doi.org/10.1109/ASE.2019.00141		1212-1213	"""@inproceedings{10.1109/ASE.2019.00141,
    author = ""Singi, Kapil and Bose, R. P. Jagadeesh Chandra and Podder, Sanjay and Burden, Adam P."",
    title = ""Trusted software supply chain"",
    year = ""2020"",
    isbn = ""9781728125084"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ASE.2019.00141"",
    doi = ""10.1109/ASE.2019.00141"",
    abstract = ""Modern software delivery happens in a geographically distributed environment and resembles like a supply chain - consists of various participants, involves various phases, needs adherence to multiple regulations and needs to maintain artifacts' integrity throughout the delivery phases. This shift in software development brings along with it several challenges ranging from communication of information/knowledge, coordination and control of teams, activities adhering to goals and policies and artifacts adhering to quality, visibility, and management. With the dispersion of centralized control over software delivery to autonomous delivery organizations, the variety of processes and tools used turns transparency into opacity as autonomous teams use different software processes, tools, and metrics, leading to issues like ineffective compliance monitoring, friction prone coordination, and lack of provenance, and thereby trust. In this paper, we present a delivery governance framework based on distributed ledger technology that uses a notion of 'software telemetry' to record data from disparate delivery partners and enables compliance monitoring and adherence, provenance and traceability, transparency, and thereby trust."",
    booktitle = ""Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering"",
    pages = ""1212-1213"",
    numpages = ""2"",
    location = ""San Diego, California"",
    series = ""ASE '19""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Trusted Software Supply Chain	https://doi.org/10.1109/ASE.2019.00141	IEEE Press	nan; Keywords; References; Link
455	TrustSE	Research on management scheme of trusted application software	In cognizance of the problem that application software was maliciously tampered, this paper proposes a management scheme of trusted application software. In this scheme, there is a Software Management Group (SMG) which is a trusted third party. SMG executes software credibility assessment and certification. Users communicate with SMG before they install or run software, get the installation certification and status indicators, to ensure that the software has not been tampered maliciously before installation and in the process of use. The proposal for this scheme provides a new idea and management mechanism for the chain of trust transmitting from Operating System to trusted applications in trusted computing. Principles and mechanisms of the scheme are described amply in this paper.	Network security; Application softwares; Chain of trust; Credibility assessment; Management mechanisms; Management scheme; Software integrity; Software Management; Trusted computing; Trusted Software; Trusted third parties; Computer software; Network security;  Application softwares;  Chain of trust;  Credibility assessment;  Management mechanisms;  Management scheme;  Software integrity;  Software Management;  Trusted computing;  Trusted Software;  Trusted third parties;  Computer software	Huang, Hong; Wang, Chang-Hui; Wang, Ben	Proceedings - 2011 International Conference on Network Computing and Information Security, NCIS 2011	https://doi.org/10.1109/NCIS.2011.70	Ren, X.-H.Study on software trusted measure system [J](2008)Computer Knowledge and Technology, 1 (1).; Ziqiu, Z., Yujun, Z., Kan, W., Weibo, L.Achieving the ability to routinely develop trustworthy military software [J](2006)Journal of Wuhan University (Natural Science Edition), 52 (S1).; Garfinkel, T., Pfaff, B., Chow, J.Terra: A virtual machine-based platform for trusted computing(2003)SOSP' 03.Cited 101 times.Bolton Landing, New York, USA, October; Xiaoyong, L., Changxiang, S.Research to a dynamic application transitive trust model [J](2005)Journal of Huazhong University of Science and Technology (Natural Science), p. 33.; Dadda, L., Macchetti, M., Owen, J.; Xi, X., Jun, H.Wang Lunwei.Research on key mechanism of trusted computing platform [J](2007)Journal of Information Engineering University, 8 (2).; Bin, W., Xiangdong, L.Research on platform technology of trusted computing.[C](2005)Severe Environment Computer 15th Annual Conference Proceedings; Chunyan, L.Analysis of key technology in trusted computing platform and its application [J](2006)Computer Engineering, 32 (24).; Yongjun, Z., Junyan, G., Qi, X.Research on linux trusted booting technology[J](2009)Computer Applications and Software, 26 (8).; Canjun, W., Changyun, L.Research and development on behavior monitoring and controlling of trusted software in dynamic evolution environment[J](2009)Application Research of Computers, 26 (4).Cited 3 times.; Gu, L., Guo, Y., Wang, H., Zou, Y.-Z., Xie, B., Shao, W.-Z.	311 - 315	"""@CONFERENCE{Huang2011311,
    author = ""Huang, Hong and Wang, Chang-Hui and Wang, Ben"",
    title = ""Research on management scheme of trusted application software"",
    year = ""2011"",
    journal = ""Proceedings - 2011 International Conference on Network Computing and Information Security, NCIS 2011"",
    volume = ""1"",
    pages = ""311 - 315"",
    doi = ""10.1109/NCIS.2011.70"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-79961132126\&doi=10.1109\%2fNCIS.2011.70\&partnerID=40\&md5=d7b08f5e3566d60cafd29b56a079d0db"",
    affiliations = ""School of Computer SandT, Zhejiang University of Technology, Hangzhou, China"",
    abstract = ""In cognizance of the problem that application software was maliciously tampered, this paper proposes a management scheme of trusted application software. In this scheme, there is a Software Management Group (SMG) which is a trusted third party. SMG executes software credibility assessment and certification. Users communicate with SMG before they install or run software, get the installation certification and status indicators, to ensure that the software has not been tampered maliciously before installation and in the process of use. The proposal for this scheme provides a new idea and management mechanism for the chain of trust transmitting from Operating System to trusted applications in trusted computing. Principles and mechanisms of the scheme are described amply in this paper. (c) 2011 IEEE."",
    author_keywords = ""Software Integrity; Software Management; Trusted Software"",
    keywords = ""Network security; Application softwares; Chain of trust; Credibility assessment; Management mechanisms; Management scheme; Software integrity; Software Management; Trusted computing; Trusted Software; Trusted third parties; Computer software"",
    correspondence_address = ""H. Huang; School of Computer SandT, Zhejiang University of Technology, Hangzhou, China; email: huanghong@zjut.edu.cn"",
    isbn = ""978-076954355-0"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Int. Conf. Network Comput. Inf. Secur., NCIS"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1; Conference name: 2011 International Conference on Network Computing and Information Security, NCIS 2011; Conference date: 14 May 2011 through 15 May 2011; Conference code: 85926""
}
"""	Included	Included				2	Scopus Signed In		Research on Management Scheme of Trusted Application Software	https://www.scopus.com/record/display.uri?eid=2-s2.0-79961132126&origin=resultslist&sort=r-f&src=s&sid=694beaab5c8399997e1f13de6a347902&sot=b&sdt=b&s=TITLE%28research+on+management+scheme+of+trusted+application+software%29&sl=68&sessionSearchId=694beaab5c8399997e1f13de6a347902&relpos=0		nan; Publisher
456	TrustSE	Position Statement: Software Testing, Software Quality and Trust in Software-Based Systems	Software-Based systems cover a very wide range of application domains. They include industrial applications, e.g. rail systems, building management systems, fire safety systems, industrial control systems, Energy applications to support generation, transmission, measurement, control, and numerous Healthcare and Medical applications just to name a few. The Testing requirements and Quality challenges for individual systems are very different.	Software testing; Medical services; Companies; Documentation; Software quality; Software Testing; Software Quality; Software-based System; Open-source Software; Rate Of Return; Medical Applications; Range Of Domains; Software Defect; Wide Range Of Domains; External Entities; Rail System; Industrial Control Systems; Internal Software; Scope Of Testing; 3rd Party	Rajesh Subramanyan	2012 IEEE 36th Annual Computer Software and Applications Conference	https://doi.org/10.1109/COMPSAC.2012.108				Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		Position Statement: Software Testing, Software Quality and Trust in Software-Based Systems	https://ieeexplore.ieee.org/document/6340151	IEEE	nan; References; Pages; Year; Bibtex
457	TrustSE	Trust services: A framework for service-based solutions	It is well understood that using a software component methodology can simplify the development and maintenance of systems. Web services allow this vision to be extended allowing components to be made available on the Internet. This paper proposes the use of trust services as third party web services that allow trust operations to be extracted from solutions and packaged as components. This has obvious advantages in simplifying the task of engendering trust in solutions-both during their creation and in simplifying the maintenance. The paper further argues that using a web service model supports re-usability of not only the software but also the operational environment where the software runs. This operational environment is considered particularly critical in providing security and trust operations.	Computer software maintenance; Computer software reusability; Financial data processing; Government data processing; Security of data; Taxation; World Wide Web; Reusable services; Software component; Web services; Software engineering; Computer software maintenance;  Computer software reusability;  Financial data processing;  Government data processing;  Security of data;  Taxation;  World Wide Web;  Reusable services;  Software component;  Web services;  Software engineering	Baldwin, Adrian; Shiu, Simon; Mont, Marco Casassa	Proceedings-IEEE Computer Society's International Computer Software and Applications Conference	https://doi.org/10.1109/CMPSAC.2002.1045055	Howard, M., Leblanc, D.(2001)Writing Secure Code.Cited 582 times.Microsoft Press; Allen, J.The CERT guide to system and network security practices(2001) .Cited 42 times.Addison-Wesley; Mazza, C.(1996)Software Engineering Guides.Cited 18 times.Prentice Hall; Baldwin, A., Beres, Y., Casassa Mont, M., Shiu, S.Trust services: Reducing risk in e-commerce(2001)ICECR-4; Baldwin, A., Beres, Y., Casassa Mont, M., Shiu, S.Trust services: A trust infrastructure for e-commerce(2001) .Cited 8 times.HP Labs TR HPL-2001-198http://www.hpl.hp.com/techreports/2001/HPL-2001-198.html; Apte, N., Mehta, T.(2001)Web Services: A Java Developer's Guide Using E-speak.Cited 2 times.Prentice Hall; Richter, J.(2002)Applied Microsoft .Net Framework Programming.Cited 60 times.Microsoft Press; Casati, F., Ilnicki, S., Jin, L.-J., Shan, M.-C.; Piccinelli, G., Mokrushin, L.Dynamic e-service composition in DySCo(2001)IEEE DDMA.Cited 2 times.; Bennett, K., Xu, J., Munro, M., Hong, Z., Layzell, P., Gold, N., Budgen, D., (...), Brereton, P.An architectural model for service-based flexible software COMPSAC(2001) .Cited 2 times.; Adams, C., Cain, P., Pinkas, D., Zuccherato, R.(2001)RFC 3161 Internet X.509 Public Key Infrastructure Time Stamp Protocol (TSP).Cited 161 times.http://www.ietff.org/rfc/rfc3161; (2002)Tender Trust; (valid Feb)http://www.ogctendertrust.com/; E-envoy Security Framework 2.0 E-Government Strategy Framework Policy and Guidancehttp://www.e-envoy.gov.uk/publications/consultations/security/index.htm; (2002)Global Trust ServicesIdentrus; (Valid Feb)www.identrus.com; Policies for distributed systems and networksProceedings of the 2nd International Policy Workshop. Lecture Notes in Computer Science Vol 1995 Springer Verlag 2001M. Sloman, J. Lobo, E.C. Lupu (eds); (1999)Electronic Signatures in Global and National Commerce ActHouse Bill 1714 Bliley; Wyke, R.A., Rehman, S., Leupen, B.(2002)XML Programming (Core Reference).Cited 11 times.Microsoft Press	507 - 513	"""@ARTICLE{Baldwin2002507,
    author = ""Baldwin, Adrian and Shiu, Simon and Mont, Marco Casassa"",
    title = ""Trust services: A framework for service-based solutions"",
    year = ""2002"",
    journal = ""Proceedings-IEEE Computer Society's International Computer Software and Applications Conference"",
    pages = ""507 - 513"",
    doi = ""10.1109/CMPSAC.2002.1045055"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036392119\&doi=10.1109\%2fCMPSAC.2002.1045055\&partnerID=40\&md5=755c86a39b1391672a3a2c58da8b7de1"",
    affiliations = ""Hewlett-Packard Laboratories, United States; Hewlett-Packard Laboratories, United States; Hewlett-Packard Laboratories, United States"",
    abstract = ""It is well understood that using a software component methodology can simplify the development and maintenance of systems. Web services allow this vision to be extended allowing components to be made available on the Internet. This paper proposes the use of trust services as third party web services that allow trust operations to be extracted from solutions and packaged as components. This has obvious advantages in simplifying the task of engendering trust in solutions-both during their creation and in simplifying the maintenance. The paper further argues that using a web service model supports re-usability of not only the software but also the operational environment where the software runs. This operational environment is considered particularly critical in providing security and trust operations."",
    keywords = ""Computer software maintenance; Computer software reusability; Financial data processing; Government data processing; Security of data; Taxation; World Wide Web; Reusable services; Software component; Web services; Software engineering"",
    issn = ""07303157"",
    language = ""English"",
    abbrev_source_title = ""Proc IEEE Comput Soc Int Comput Software Appl Conf"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 13""
}
"""	Excluded	Excluded				2	Scopus Signed In		Trust services: a framework for service-based solutions	https://www.scopus.com/record/display.uri?eid=2-s2.0-0036392119&origin=resultslist&sort=r-f&src=s&sid=10304cdff78bdbd7594539ada3fa862e&sot=b&sdt=b&s=TITLE%28trust+services+a+framework+for+service+based+solutions%29&sl=61&sessionSearchId=10304cdff78bdbd7594539ada3fa862e&relpos=0		nan; Publisher
458	TrustSE	Toward a Formalism for Conservative Claims about the Dependability of Software-Based Systems	"In recent work, we have argued for a formal treatment of confidence about the claims made in dependability cases for software-based systems. The key idea underlying this work is ""the inevitability of uncertainty"": It is rarely possible to assert that a claim about safety or reliability is true with certainty. Much of this uncertainty is epistemic in nature, so it seems inevitable that expert judgment will continue to play an important role in dependability cases. Here, we consider a simple case where an expert makes a claim about the probability of failure on demand (pfd) of a subsystem of a wider system and is able to express his confidence about that claim probabilistically. An important, but difficult, problem then is how such subsystem (claim, confidence) pairs can be propagated through a dependability case for a wider system, of which the subsystems are components. An informal way forward is to justify, at high confidence, a strong claim, and then, conservatively, only claim something much weaker: ""I'm 99 percent confident that the pfd is less than 10-5, so it's reasonable to be 100 percent confident that it is less than 10-3."" These conservative pfds of subsystems can then be propagated simply through the dependability case of the wider system. In this paper, we provide formal support for such reasoning."	Uncertainty; Software reliability; Phase frequency detector; Battery powered vehicles; Software systems; Software safety; Programming; Power engineering computing; Reliability engineering; Power engineering and energy; Dependability; Software-based System; Probability Of Failure; Expert Judgment; Wider System; Probability Density Function; Conservation Value; Software Engineering; Probability Mass; Subjective Probability; Nuclear Industry; Epistemic Uncertainty; Sufficient Confidence; Number Of Demands; Aleatoric Uncertainty; Original Claim; Software Reliability; Evidence Of Work; Posterior Beliefs; Improper Function; Bayesian probability; safety case; software reliability.	Peter Bishop; Robin Bloomfield; Bev Littlewood; Andrey Povyakalo; David Wright	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2010.67	"1.P.G. Bishop and R.E. Bloomfield, ""The SHIP Safety Case"", Proc. 14th IFAC Conf. Computer Safety Reliability and Security, 1995. CrossRef  Google Scholar; 2.R.E. Bloomfield, P.G. Bishop, C.C.M. Jones and P.K.D. Froome, ASCADAdelard Safety Case Development Manual., 1998. Google Scholar; 3.J. Gorski, ""Trust CaseA Case for Trustworthiness of IT Infrastructures"", Proc. NATO Advanced Research Workshop Cyberspace Security and Defence: Research Issues, 2004. Google Scholar; 4.T.P. Kelly and R.A. Weaver, ""The Goal Structuring NotationA Safety Argument Notation"", Proc. Workshop Assurance Cases Dependable Systems and Networks, 2004. Google Scholar; 5.J. Penny, A. Eaton, P.G. Bishop and R.E. Bloomfield, ""The Practicalities of Goal-Based Regulation"", Proc. Ninth Safety-Critical Systems Symp., 2001. CrossRef  Google Scholar; 6.SW01: Regulatory Objective for Software Safety Assurance in Air Traffic Service Equipment., 2001. Google Scholar; 7.Def-Stan 00-56 Issue 4: Safety Management Requirements for Defence Systems., 2007. Google Scholar; 8.R. Bloomfield and B. Littlewood, ""Multi-Legged Arguments: The Impact of Diversity Upon Confidence in Dependability Arguments"", Proc. Intl Conf. Dependable Systems and Networks, 2003. View Article  Google Scholar; 9.R. Bloomfield and B. Littlewood, ""Confidence: Its Role in Dependability Cases for Risk Assessment"", Proc. Intl Conf. Dependable Systems and Networks, 2007. View Article  Google Scholar; 10.B. Littlewood and D. Wright, ""The Use of Multi-Legged Arguments to Increase Confidence in Safety Claims for Software-Based Systems: A Study Based on a BBN of an Idealized Example"", IEEE Trans. Software Eng., vol. 33, no. 5, pp. 347-365, May 2007. View Article  Google Scholar; 11.W.L. Oberkampf and J.C. Helton, ""Alternative Representations of Epistemic Uncertainty"", Reliability Eng. and System Safety, 2004. Google Scholar; 12.B. Littlewood and D. Wright, ""Some Conservative Stopping Rules for the Operational Testing of Safety-Critical Software"", IEEE Trans. Software Eng., vol. 23, no. 11, pp. 673-683, Nov. 1997. View Article  Google Scholar; 13.D.L. Parnas, A.J.v. Schowan and S.P. Kwan, ""Evaluation of Safety-Critical Software"", Comm. ACM, vol. 33, no. 6, pp. 636-648, 1990. CrossRef  Google Scholar; 14.R.M. Cooke, ""Expert Judgement"", Reliability Eng. and System Safety, vol. 93, no. 5, 2008. CrossRef  Google Scholar; 15.D.M. Hunns and N. Wainwright, ""Software-Based Protection for Sizewell B: The Regulators Perspective"", Proc. Nuclear Eng. Intl., pp. 38-40, 1991-Sept. Google Scholar; 16.J. May, G. Hughes and A.D. Lunn, ""Reliability Estimation from Appropriate Testing of Plant Protection Software"", Software Eng. J., vol. 10, no. 6, pp. 206-218, 1995. CrossRef  Google Scholar; 17.The Use of Computers in Safety-Critical Applications., 1998. Google Scholar; 18.Safety Assessment Principles for Nuclear Facilities., 2006. Google Scholar; 19.IEC61508: Functional Safety of Electrical Electronic and Programmable Electronic Safety Related Systems Parts 1 to 7., 2000. Google Scholar; 20.Def-Stan 00-56 Issue 2: Hazard Analysis and Safety Classification of the Computer and Programmable Electronic Systems Elements of Defence Equipment., 1996. Google Scholar; 21.R.W. Butler and G.B. Finelli, ""The Infeasibility of Quantifying the Reliability of Life-Critical Real-Time Software"", IEEE Trans Software Eng., vol. 19, no. 1, pp. 3-12, Jan. 1993. View Article  Google Scholar; 22.B. Littlewood and L. Strigini, ""Validation of Ultra-High Dependability for Software-Based Systems"", Comm. ACM, vol. 36, no. 11, pp. 69-80, 1993. CrossRef  Google Scholar; 23.Software Considerations in Airborne Systems and Equipment Certification DO-178B., 1992. Google Scholar; 24.G. Guiho and C. Hennebert, ""SACEM Software Validation"", Proc. 12th Intl Conf. Software Eng., 1990. View Article  Google Scholar"	708- 717		Excluded	Excluded				2	IEEE		Toward a Formalism for Conservative Claims about the Dependability of Software-Based Systems	https://ieeexplore.ieee.org/document/5492693	IEEE	nan; Year; Bibtex
459	TrustSE	Importance Measures for a Modular Software System (Short Paper)	Importance measures of a system provide a sense of the relative priorities of the components from a system reliability perspective. These measures can thus be used to identify critical components and to guide the allocation of resources so that the system reliability can be improved in a cost effective manner. Importance measures are widely used in many engineered hardware and electro-mechanical systems. Their use in the engineering of software systems, however, is lacking. In this paper we develop an analytical methodology to compute the importance measures of a software system. The analytical treatment facilitates an assessment of the sensitivity of the importance measures of a software system to the uncertainties in its architectural parameters, component reliabilities, and operational profiles. The capability of enabling sensitivity analysis, which is a key strength of our approach, is crucial to the adaptation of importance measures in software because the parameters characterizing a software system are inherently expected to be uncertain, especially in the design phase. We illustrate the potential of our approach to provide valuable information towards resource allocation decisions using an example application from the European Space Agency.	IP networks; Reliability; Computer architecture; Software systems; Software; Sensitivity; Software reliability; System Software; Sensitivity Analysis; Sensitive Measure; System Reliability; European Space Agency; Hardware System; Use In Engineering; Architecture Parameters; Resource Allocation Decisions; Component Reliability; Important Component; Reliability Analysis; Variance Components; Transition Probabilities; System Architecture; Taylor Series; Variance Reduction; Overall Variance; Probability Matrix; Decrease In Variability; Discrete-time Markov Chain; Increase In Reliability; Systematic Variance; Importance Ranking; Phases Of Life Cycle; Simple Interpretation; Reliable Change; software reliability; software architecture; uncertainty; importance assessment	Lance Fiondella; Swapna S. Gokhale	2008 The Eighth International Conference on Quality Software	https://doi.org/10.1109/QSIC.2008.42	"1.K. Goseva-Popstojanova, M. Hamill, and X. Wang, ""Adequacy, Accuracy, Scalability, and Uncertainty of Architecture-based Software Reliability: Lessons Learned from Large Empirical Case Studies,"" in Proc. Intl. Symposium on Software Reliability Engineering, Raleigh, NC, November 2006, pp. 197-203. View Article  Google Scholar; 2.S. Yacoub, B. Cukic, and H. Ammar, ""A Scenario-Based Reliability Analysis Approach for Component-Based Software,"" IEEE Trans. Rel., vol. 53, no. 4, pp. 465-480, December 2004. View Article  Google Scholar; 3.R. Barlow and F. Proschan, Statistical Theory of Reliability and Life Testing: Probability Models. New York: Holt, Reinhart, and Winston, 1975. Google Scholar; 4.J. Musa, A. Iannino, and K. Okumoto, Software Reliability: Measurement, Prediction, Application, ser. Software Engineering and Technology. New York, NY: McGraw-Hill, 1987. CrossRef  Google Scholar; 5.Z. Birnbaum, ""On the Importance of Different Components in Multicomponent System,"" in Multivariate Analysis II, P. Krishnaiah, Ed. Dayton, OH: Academic Press, June 1969, pp. 581-592. Google Scholar; 6.R. Cheung, ""A User-Oriented Software Reliability Model,"" IEEE Trans. Software Eng., vol. 6, no. 2, pp. 118-125, March 1980. View Article  Google Scholar; 7.S. Gokhale and K. Trivedi, ""Reliability Prediction and Sensitivity Analysis Based on Software Architecture,"" in Proc. of Intl. Symposium on Software Reliability Engineering, Annapolis, MD, November 2002, pp. 64-75. View Article  Google Scholar; 8.J. Lo, C. Huang, I. Chen, S. Kuo, and M. Lyu, ""Reliability Assessment and Sensitivity Analysis of Software Reliability Growth Modeling Based on Software Module Structure,"" Journal of Systems and Software, vol. 76, no. 1, pp. 3-13, April 2005. CrossRef  Google Scholar; 9.S. Kamavaram and K. Goseva-Popstojanova, ""Sensitivity of Software Usage to Changes in the Operational Profile,"" in NASA/IEEE Software Engineering Workshop, Greenbelt, MD, December 2003, pp. 157-164. View Article  Google Scholar; 10.K. Goseva-Popstojanova and S. Kamavaram, ""Assessing Uncertainty in Reliability of Component-Based Software Systems,"" in Proc. of Intl. Symposium on Software Reliability Engineering, Denver, CO, November 2003, pp. 307-320. View Article  Google Scholar"			Excluded	Excluded				2	IEEE		Importance Measures for a Modular Software System (Short Paper)	https://ieeexplore.ieee.org/document/4601563	IEEE	nan; Pages; Year; Bibtex
460	TrustSE	Software reliability with architectural uncertainties	Architecture-based software reliability analysis can provide early identification of critical components which can then be targeted for cost-effective reliability improvement of the application. However, an important challenge in conducting this analysis early in the life cycle is that it is nearly impossible to estimate the architectural and component parameters with certainty. The issue of estimating software application reliability in the presence of uncertain component reliabilities has been addressed in the previous research. In this paper we consider the estimation of software reliability in the presence of architectural uncertainties. We present a methodology to estimate the confidence levels in the architectural parameters using limited testing or simulation data based on the theory of confidence intervals of the multinomial distribution. The sensitivity of the system reliability to uncertain architectural parameters can then be quantified by varying these parameters within their confidence intervals. The illustration of the methodology using a case study indicates that the impact of the uncertainty in a given architectural parameter on the overall application reliability is determined by the inherent branching behavior of the application and the component reliabilities.	Software reliability; Uncertainty; Application software; Software systems; Availability; Computer architecture; Computer science; Reliability engineering; Life estimation; Testing; Software Reliability; Confidence Interval; Confidence Level; System Reliability; Software Applications; Impact Of Uncertainty; Component Parameters; Multinomial Distribution; Architecture Parameters; Component Reliability; Inherent Behavior; Application Behavior; Transition Probabilities; System Architecture; Impact Of Parameters; Behavioral Components; Design Phase; Confidence Intervals For Estimates; European Space Agency; Trace Data; Discrete-time Markov Chain; Application Components; High Level Of Reliability	Lance Fiondella; Swapna S. Gokhale	2008 IEEE International Symposium on Parallel and Distributed Processing	https://doi.org/10.1109/IPDPS.2008.4536436	"1.W. Farr, Handbook Of Software Reliability Engineering. New York, NY: McGraw-Hill, 1996, chapter Software reliability modeling survey, pp. 71-117.; 2.K. Goseva-Popstojanova and K. Trivedi, ""Architecture based approach to quantitative assessment of software systems,"" Performance Evaluation, vol. 45, no. 2-3, pp. 179-204, June 2001. CrossRef  Google Scholar; 3.S. Gokhale, ""Architecture-based software reliability analysis: Overview and limitations,"" IEEE Trans. Dependable Secure Comput., vol. 4, no. 1, pp. 32-40, January-March 2007. View Article  Google Scholar; 4.J. Musa, G. Fuoco, N. Irving, D. Kropfl, and B. Juhlin, Handbook Of Software Reliability Engineering. New York, NY: McGraw-Hill, 1996, chapter The operational profile, pp. 167-216.; 5.S. Gokhale, ""Quantifying the variance in application reliability,"" in Proc. of Pacific Rim Intl Symposium on Dependable Computing, Tahiti,March 2004, pp. 113-121. View Article  Google Scholar; 6.S. Kamavaram and K. Goseva-Popstojanova, ""Sensitivity of software usage to changes in the operational profile,"" in 28th NASA/IEEE Software Engineering Workshop, Greenbelt, MD, December 2003, pp. 157-164. View Article  Google Scholar; 7.K. Goseva-Popstojanova and S. Kamavaram, ""Assessing uncertainty in reliability of component-based software systems,"" in Proc. of Fourteenth Intl. Symposium on Software Reliability Engineering, Denver, CO, November 2003, pp. 307-320. View Article  Google Scholar; 8.J. Kemeny and J. Snell, Finite Markov Chains. Princeton, NJ: D. Van Nostrand Company, 1960. Google Scholar; 9.R. Cheung, ""A user-oriented software reliability model,"" IEEE Trans. Software Eng., vol. 6, no. 2, pp. 118-125, March 1980. View Article  Google Scholar; 10.N. Johnson, S. Kotz, and N. Balakrishnan, Discrete Multivariate Distributions, ser. Wiley Series in Probability and Statistics. New York, NY: John Wiley  Sons, Inc., 1997. Google Scholar; 11.J. Bromaghin, ""Sample size determination for interval estimation of multinomial probabilities,"" The American Statistician, vol. 47, no. 3, pp. 203-206, August 1993. CrossRef  Google Scholar; 12.J. Correa, ""Interval estimation of the parameters of the multinomial distribution,"" Statistics on the Internet, vol. http://interstat.statjournals.net, October, 2001.; 13.L. Leemis and K. Trivedi, ""A comparison of approximate interval estimators for the bernoulli parameter,"" The American Statistician, vol. 50, no. 1, pp. 63-68, February 1996. CrossRef  Google Scholar; 14.C. Blyth, ""Approximate binomial confidence limits,"" Journal of the American Statistical Association, vol. 81, no. 395, pp. 843-855, September 1986. CrossRef  Google Scholar; 15.G. Casella and R. Berger, Statistical Inference, 2nd ed. New York, NY: Thomson, 2002. Google Scholar; 16.S. Gokhale, J. Horgan, and K. Trivedi, Book on Architecting Dependable Systems, ser. Lecture Notes in Computer Science. Springer-Verlag, July 2003, ch. Specification-level integration of simulation and dependability analysis, pp. 245-266. CrossRef  Google Scholar; 17.S. Gokhale, W. Wong, J. Horgan, and K. Trivedi, ""An analytical approach to architecture-based software performance and reliability prediction,"" Performance Evaluation, vol. 58, no. 4, pp. 391-412, December 2004. CrossRef  Google Scholar; 18.W. Wong and A. Mathur, ""Fault detection effectiveness of mutation and data flow testing,"" Software Quality Journal, vol. 4, pp. 69-83, 1995. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Software reliability with architectural uncertainties	https://ieeexplore.ieee.org/document/4536436	IEEE	nan; Pages; Year; Bibtex
461	TrustSE	Measuring Software Assurance	Assurance is not a specific thing that can be easily measured and monitored. It is an emerging composition of a variety of independently collected data elements that come from loosely linked software life cycle activities. As a system emerges from concept to high-level design to architecture to detailed design to code to components to implementation there is a huge amount of information that is assembled in artifacts, text, and evaluation outputs. This paper proposes a framework for making sense of these pieces to monitor and manage assurance. An example is provided to show how the framework can be applied to evaluating tainted and counterfeit products.	software assurance; measurement; security risk; quality assurance; software assurance;  measurement;  security risk;  quality assurance	Ellison, Robert; Nichols, William; Woody, Carol	PROCEEDINGS 2016 IEEE 40TH ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSAC), VOL 2	https://doi.org/10.1109/COMPSAC.2016.231	"1.2014. Department of Defense Instruction: Cybersecurity, March 2014,  [online]  Available: http://www.dtic.mil/whs/directives/corres/pdf/850001_2014.pdf. Google Scholar; 2.Woody Carol, Ellison Robert and Nichols William, Predicting Software Assurance Using Quality and Reliability Measures, 2014,  [online]  Available: http://resources.sei.cmu.edu/library/asset-view.cfm?AssetID=428589. Google Scholar; 3.Jones Capers and Oliver Bonsignour, ""Title of paper if known"", The Economics of Software Quality, 2011,  [online]  Available: http://www.informit.com/store/economics-of-software-quality-9780132582209. Google Scholar; 4.Card Dave, Leading Indicators for Project Management: Project Headlights, 2008,  [online]  Available: http://www.dtic.mil/ndia/2008cmmi/Track5B/Thursday/AM/6898card.pdf. Google Scholar; 5.Robert D. Austin, Measuring and Managing Performance in Organizations, Dorset House, 1996. Google Scholar; 6.Barry W. Boehm and Kevin J. Sullivan, ""Software Economics"", Proceedings of the Conference on the Future of Software Engineering - ICSE '00, pp. 319-343, June 4-11, 2000. CrossRef  Google Scholar; 7.Robert S. Kaplan and David P. Norton, ""The Balanced Scorecard: Measures That Drive Performance"", Harvard Business Review, July-August 2005,  [online]  Available: https://hbr.org/2005/07/the-balanced-scorecard-measures-that-drive-performance. Google Scholar; 8.Hubbard Douglas, How to Measure Anything: Finding the Value of Intangibles in Business, Wiley, 2014. Google Scholar; 9.Open Trusted Technology Provider Standard (OTTPS), July 2014,  [online]  Available: https://www.opengroup.org/bookstore/catalog/c147.htm. Google Scholar; 10.Open Trusted Technology Provider Standard (OTTPS): Assessment Procedures, April 2015,  [online]  Available: https://www2.opengroup.org/ogsys/catalog/X1316. Google Scholar; 11.""Certified Products: The Common Criteria Portal"", 2015,  [online]  Available: http://www.commoncriteriaportal.org/products/. Google Scholar; 12.Howard Michael, Fending Off Future Attacks by Reducing Attack Surface, February 2003,  [online]  Available: https://msdn.microsoft.com/en-us/library/ms972812.aspx. Google Scholar; 13.Bird Jim and Kim Frank, Survey on Application Security Programs and Practices, February 2014,  [online]  Available: https://www.sans.org/reading-room/whitepapers/analyst/survey-application-security-programs-practices-34765. Google Scholar"	359-364	"""@inproceedings{WOS:000389532200055,
    Author = ""Ellison, Robert and Nichols, William and Woody, Carol"",
    Editor = ""Reisman, S and Ahamed, SI and Liu, L and Milojicic, D and Claycomb, W and Matskin, M and Sato, H and Nakamura, M and Cimato, S and Lung, CH and Zhang, Z"",
    Title = ""Measuring Software Assurance"",
    Booktitle = ""PROCEEDINGS 2016 IEEE 40TH ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSAC), VOL 2"",
    Series = ""Proceedings International Computer Software and Applications Conference"",
    Year = ""2016"",
    Pages = ""359-364"",
    Note = ""40th Annual IEEE Computer Software and Applications Conference Symposium (COMPSAC), Atlanta, GA, JUN 10-14, 2016"",
    Organization = ""IEEE; IEEE Comp Soc; IEEE BigData; IEEE Future Directions; IPS; Korean Inst Informat Scientists \\& Engineers; CCF; Hewlett Packard Enterprise"",
    Abstract = ""Assurance is not a specific thing that can be easily measured and monitored. It is an emerging composition of a variety of independently collected data elements that come from loosely linked software life cycle activities. As a system emerges from concept to high-level design to architecture to detailed design to code to components to implementation there is a huge amount of information that is assembled in artifacts, text, and evaluation outputs. This paper proposes a framework for making sense of these pieces to monitor and manage assurance. An example is provided to show how the framework can be applied to evaluating tainted and counterfeit products."",
    Publisher = ""IEEE"",
    Address = ""345 E 47TH ST, NEW YORK, NY 10017 USA"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Ellison, R (Corresponding Author), Carnegie Mellon Univ, Inst Software Engn, Pittsburgh, PA 15213 USA. Ellison, Robert; Nichols, William; Woody, Carol, Carnegie Mellon Univ, Inst Software Engn, Pittsburgh, PA 15213 USA."",
    DOI = ""10.1109/COMPSAC.2016.231"",
    ISSN = ""0730-3157"",
    ISBN = ""978-1-4673-8845-0"",
    Keywords = ""software assurance; measurement; security risk; quality assurance"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering"",
    Author-Email = ""ellison@sei.cmu.edu wrn@sei.cmu.edu cwoody@cert.org"",
    Affiliations = ""Software Engineering Institute; Carnegie Mellon University"",
    Number-of-Cited-References = ""13"",
    Times-Cited = ""1"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""1"",
    Doc-Delivery-Number = ""BG5LR"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000389532200055"",
    DA = ""2024-11-06""
}
"""	Included	Included				2	Web of Science		Measuring Software Assurance	https://www.webofscience.com/wos/woscc/full-record/WOS:000389532200055	IEEE	
462	TrustSE	Software reliability estimation under certainty: generalization of the method of moments	Traditionally, reliability models of component-based software systems compute the point estimate of system reliability by plugging point estimates of unknown parameters into the model. These models discard the uncertainty of the parameters, that is, do not attempt to answer the question how parameters uncertainties affect the estimates of system reliability. In this paper we focus on uncertainty analysis in software reliability based on method of moments. In particular, we present a generalization of our earlier work that allows us to consider the uncertainty in the operational profile (i.e., the way software is used) in addition to the uncertainty in components failure behavior (i.e., component reliabilities) considered earlier. The method of moments is an approximate analytical method that allows us to generate system reliability moments based on (1) the knowledge of software architecture reflected in the expression of system reliability as a function of component reliabilities and frequencies of control transfer between components, (2) estimates of the moments of components reliabilities, and (3) estimates of the moments of probabilities of control transfer between components. Further, we apply the method of moments on two case studies and discuss its advantages and disadvantages.	Software reliability; Moment methods; Uncertainty; Frequency estimation; Software systems; Parameter estimation; Uncertain systems; Control systems; Computer science; Software architecture; Method Of Moments; Software Reliability; Estimation Method; Point Estimates; System Software; System Reliability; Uncertainty Analysis; Software Architecture; Component Reliability; Knowledge Of Architecture; Point Estimates Of Parameters; Monte Carlo Simulation; Bayesian Model; Transition Probabilities; Uncertainty Estimation; Sources Of Uncertainty; Taylor Series; Term In Equation; Taylor Expansion; Probability Of Failure; Discrete-time Markov Chain; High-order Approximation; Transition Probability Matrix; Design Documents; Independent Random Variables; Hypothetical Example; Expansion Terms; Software Components; European Space Agency; Software Defect	K. Goseva-Popstojanova; S. Kamavaram	Eighth IEEE International Symposium on High Assurance Systems Engineering, 2004. Proceedings.	https://doi.org/10.1109/HASE.2004.1281745	"1.T. Adams, ""Total Variance Approach to Software Reliability Estimation"", IEEE Trans. Software Engineering, vol. 22, no. 9, pp. 687-688, 1996. View Article  Google Scholar; 2.M. Chen, A. P. Mathur and V. J. Rego, ""A Case Study to Investigate Sensitivity of Reliability Estimates to Errors in Operational Profile"", 5th Intl Symp. Software Reliability Engineering, pp. 276-281, 1994. View Article  Google Scholar; 3.R. C. Cheung, ""A User-Oriented Software Reliability Model"", IEEE Trans. Software Engineering, vol. 6, no. 2, pp. 118-125, 1980. View Article  Google Scholar; 4.W. Farr, ""Software Reliability Modeling Survey"" in Handbook of Software Reliability Engineering, McGraw-Hill, pp. 71-117, 1996. Google Scholar; 5.S. Gokhale and K. Trivedi, ""Reliability Prediction and Sensitivity Analysis Based on Software Architecture"", 13th Intl Symp. Software Reliability Engineering, pp. 64-75, 2002. View Article  Google Scholar; 6.K. Go A!eva-Popstojanova and K. S. Trivedi, ""Architecture-Based Approach to Reliability Assessment of Software System"", Performance Evaluation, vol. 45, no. 2-3, pp. 179-204, 2001. CrossRef  Google Scholar; 7.K. Go A!eva-Popstojanova and K. S. Trivedi, ""Architecture Based Approaches to Software Reliability Prediction"", International Journal Computers  Mathematics with Applications, vol. 46, pp. 1023-1036, 2003. CrossRef  Google Scholar; 8.K. Go A!eva-Popstojanova, A. P. Mathur and K. S. Trivedi, ""Comparison of Architecture-Based Software Reliability Models"", 12th Intl Symp. Software Reliability Engineering, pp. 22-31, 2001. View Article  Google Scholar; 9.K. Go A!eva-Popstojanova and S. Kamavaram, ""Assessing Uncertainty in Reliablity of Component-Based Software Systems"", 14th Intl Symp. Software Reliability Engineering, pp. 307-320, Nov. 2003. View Article  Google Scholar; 10.K. Go A!eva-Popstojanova, A. Hassan, A. Guedem, W. Abdelmoez, D. Nassar, H. Ammar, et al., ""Architectural-Level Risk Analysis using UML"", IEEE Trans. on Software Engineering, vol. 29, no. 10, pp. 946-960, 2003. View Article  Google Scholar; 11.P. S. Jackson, R. W. Hockenbury and M. L. Yeater, ""Uncertainty Analysis of System Reliability and Availability Assessment"", Nuclear Engineering and Design, vol. 68, pp. 5-29, 1981. CrossRef  Google Scholar; 12.K. Kanoun and T. Sabourin, ""Software Dependability of a Telephone Switching System"", 17th Intl Symp. on Fault-Tolerant Computing, pp. 236-241, 1987. Google Scholar; 13.Y-W Leung, ""Software Reliability Allocation under an Uncertain Operational Profile"", Journal of the Operational Research Society, vol. 48, no. 1997, pp. 401-411. CrossRef  Google Scholar; 14.B. Littlewood and D. Wright, ""Some Conservative Stopping Rules for Operational Testing of Safety - Critical Software"", IEEE Trans. Software Engineering, vol. 23, no. 11, pp. 673-683, 1997. View Article  Google Scholar; 15.K. W. Miller, L. J. Morell, R. E. Noonan, S. K. Park, D. M. Nikol, B. W. Murrill, et al., ""Estimating the Probability of Failure when Testing Reveals no Failures"", IEEE Trans. Software Engineering, vol. 18, no. 1, pp. 33-43, 1992. View Article  Google Scholar; 16.J. D. Musa, ""Operational Profiles in Software Reliability Engineering"", IEEE Software, vol. 10, pp. 14-32, 1993. View Article  Google Scholar; 17.J. D. Musa, ""Sensitivity of Field Failure Intensity to Operational Profile Errors"", 5th Intl Symp. Software Reliability Engineering, pp. 334-337, 1994. View Article  Google Scholar; 18.E. Nelson, ""A Statistical Bases for Software Reliability"", TRW-SS-73-02 TRW Software series 1973. Google Scholar; 19.A. Pasquini, A. N. Crespo and P. Matrella, ""Sensitivity of Reliability - Growth Models to Operational Profile Errors vs. Testing Accuracy"", IEEE Trans. Reliability, vol. 45, no. 4, pp. 531-540, 1996. View Article  Google Scholar; 20.C. V. Ramamoorthy and F. B. Bastani, ""Software Reliability - Status and Perspectives"", IEEE Trans. on Software Engineering, vol. 8, no. 4, pp. 354-371, 1982. View Article  Google Scholar; 21.K. Sayre and J. Poore, ""A Reliability Estimator for Model Based Software Testing"", 13th Intl Symp. Software Reliability Engineering, pp. 53-63, 2002. View Article  Google Scholar; 22.K. Siegrist, ""Reliability of System with Markov Transfer of Control"", IEEE Trans. Reliability, vol. 14, no. 7, pp. 1409-1053, 1988. View Article  Google Scholar; 23.H. Singh, V. Cortellessa, B. Cukic, E. Guntel and V. Bharadwaj, ""A Bayesian Approach to Reliability Prediction and Assessment of Component Based Systems"", 12th Intl Symp. Software Reliability Engineering, pp. 12-21, 2001. View Article  Google Scholar; 24.C. Smidts, D. Sova and G. K. Mandela, ""An Architectural Model for Software Reliability Quantification"", 8th Intl Symp. Software Reliability Engineering, pp. 324-335, 1997. View Article  Google Scholar; 25.C. Smidts and D. Sova, ""An Architectural Model for Software Reliability Quantification"", Reliability Engineering and System Safety, vol. 64, pp. 279-290, 1999. CrossRef  Google Scholar; 26.J. M. Voas, ""Certifying Off-the-shelf Software Components"", IEEE Computer, vol. 31, no. 6, pp. 53-59, 1998. View Article  Google Scholar; 27.S. M. Yacoub, B. Cukic and H. H. Ammar, ""Scenario-Based Reliability Analysis of Component-Based Software"", 10th Intl Symp. Software Reliability Engineering, pp. 22-31, 1999. View Article  Google Scholar; 28.L. Yin, M. A. J. Smith and K. S. Trivedi, ""Uncertainty Analysis in Reliability Modeling"", 2001 Annual Reliability and Maintainability Symposium, pp. 229-234, 2001. Google Scholar"			Excluded	Excluded				2	IEEE		Software reliability estimation under certainty: generalization of the method of moments	https://ieeexplore.ieee.org/document/1281745	IEEE	nan; Pages; Year; Bibtex
463	TrustSE	"Is My Software ""Good Enough"" to Release? - A Probabilistic Assessment"	"We present the basics of a probabilistic methodology to assess the overall quality of software preparatory to its release through the evaluation of process and product evidence, the 'Good Enough' to Release"" (GETR) Methodology, in this paper. GETR Methodology has three main elements: a model whose elements represent activities and artifacts identified in the literature as being effective assessors of software quality, a process for populating certain parts of the model, and methods for analyzing the importance of contributions made by individual evidence to the determination of overall system quality. First, the methodology's components are briefly introduced. A demonstration of how the methodology can be applied is then given through two case studies reviewing release assessments for inhouse developed analytical tools. The robustness of the model is also illustrated by the results of the case studies."	Uncertainty; Software quality; Bayesian methods; Robustness; Application software; NASA; Software engineering; Conferences; Good Enough; Analytical Tools; System Quality; Software Quality; In-house Development; Use Of Information; Quality Of Evidence; Conditional Probability; Sources Of Uncertainty; Root Node; Formal Methods; System Usability; Node Status; Subjective Probability; Target Node; Probabilistic Assessment; Verification And Validation; Discharge Criteria; Error Handling; Distribution-based Methods; Bayesian Belief Networks; ModelPopulation; Software Quality Assurance; Software Validation and Verification	S.K. Donohue; J.B. Dugan	29th Annual IEEE/NASA Software Engineering Workshop	https://doi.org/10.1109/SEW.2005.30	"1.Susan K. Donohue and Joanne Bechta Dugan. ""Modeling the ""Good Enough to Release"" Decision Using V&V Preference Structures and Bayesian Belief Networks."" In the 2003 Proceedings of the Annual Reliability and Maintainability Symposium, pp. 568-573. View Article  Google Scholar; 2.Susan K. Donohue and Joanne Bechta Dugan. ""Transforming Expert Opinion Into Subjective Conditional Probabilities: The Quantifying Judgment Method for Bayesian Belief Networks."" Submitted to IEEE Transactions on Knowledge and Data Engineering. Google Scholar; 3.Susan K. Donohue and Joanne Bechta Dugan. ""Combining Evidence and Engineering Judgment: A Probabilistic Model for the '""Good Enough"" to Release' Assessment for Computer-Based Systems."" In development. Google Scholar; 4.Daniel Kahneman, Paul Slovic, and Amos Tversky. Judgment Under Uncertainty: Heuristics and Biases. Cambridge, UK: Cambridge University Press, 1982. CrossRef  Google Scholar; 5.Kathryn Blackmond Laskey. ""Sensitivity Analysis for Probability Assessments in Bayesian Networks."" In IEEE Transactions on Systems, Man, and Cybernetics 25(6), June 1995, pp. 901-909. View Article  Google Scholar; 6.Martin Neil, Norman E. Fenton, and L. Nielsen. ""Building Large-Scale Bayesian Networks."" In the Knowledge Engineering Review 15(3), 2000, pp. 257-284. CrossRef  Google Scholar; 7.Judea Pearl. Causality: Models, Reasoning, and Inference. Cambridge, UK: The Cambridge University Press, 2001. Google Scholar"			Included	Included				2	IEEE		"Is My Software ""Good Enough"" to Release? - A Probabilistic Assessment"	https://ieeexplore.ieee.org/document/1521189	IEEE	nan; Pages; Year; Bibtex
464	TrustSE	A low-cost, mobile real-time kinematic geolocation service for engineering and research applications	Centimetre accurate geolocation service is beneficial to a wide range of applications, ranging from sports engineering, civil infrastructure, autonomous vehicles, surveying to digitisation of historically significant structures. Previously, these features were confined to prohibitively expensive commercial hardware, requiring technical knowledge and experience to operate. Continued technological advancements have seen the miniaturisation of electronics and antennas, coupled with an increase in the number and performance of global navigation satellite systems (GNSS) by various nations and organisations, providing global signal coverage. This paper demonstrates a low-cost, mobile, real-time kinematic (RTK) geolocation service for engineering and research applications, fabricated from components readily available from commercial suppliers. This solution, consisting of a mobile RTK base station and RTK rover, provides centimetre-accuracy performance up to a distance of 15 km away from the base station. Correction data is transmitted over the internet using free and open software solutions. The small footprint of both the RTK base station and RTK rover, provides versatile applications even in remote locations. The performance of the geolocation service is validated using field experiments, comparing measurements against state-of-the-art photogrammetry, light detection and ranging (LiDAR) and digital level measurement technologies. The authors encourage the adoption of the RTK geolocation solution based on the calibrated results.	RTK;  GNSS;  GPS;  NTRIP;  PPP;  RTK2go;  RTK-ASM;  UAV;  LiDAR;  U-blox;  Geolocation;  Surveying;  Point cloud;  Photogrammetry; RTK, GNSS, GPS, NTRIP, PPP, RTK2go, RTK-ASM, UAV, LiDAR, U-blox, Geolocation, Surveying, Point cloud, Photogrammetry	Broekman, Andre; Grabe, Petrus Johannes	HardwareX	https://www.webofscience.com/wos/woscc/full-record/WOS:A1995RF71300016		e00203	"""@article{BROEKMAN2021e00203,
    author = ""Broekman, Andre and Grabe, Petrus Johannes"",
    title = ""A low-cost, mobile real-time kinematic geolocation service for engineering and research applications"",
    journal = ""HardwareX"",
    volume = ""10"",
    pages = ""e00203"",
    year = ""2021"",
    issn = ""2468-0672"",
    doi = ""https://doi.org/10.1016/j.ohx.2021.e00203"",
    url = ""https://www.sciencedirect.com/science/article/pii/S2468067221000328"",
    keywords = ""RTK, GNSS, GPS, NTRIP, PPP, RTK2go, RTK-ASM, UAV, LiDAR, U-blox, Geolocation, Surveying, Point cloud, Photogrammetry"",
    abstract = ""Centimetre accurate geolocation service is beneficial to a wide range of applications, ranging from sports engineering, civil infrastructure, autonomous vehicles, surveying to digitisation of historically significant structures. Previously, these features were confined to prohibitively expensive commercial hardware, requiring technical knowledge and experience to operate. Continued technological advancements have seen the miniaturisation of electronics and antennas, coupled with an increase in the number and performance of global navigation satellite systems (GNSS) by various nations and organisations, providing global signal coverage. This paper demonstrates a low-cost, mobile, real-time kinematic (RTK) geolocation service for engineering and research applications, fabricated from components readily available from commercial suppliers. This solution, consisting of a mobile RTK base station and RTK rover, provides centimetre-accuracy performance up to a distance of 15 km away from the base station. Correction data is transmitted over the internet using free and open software solutions. The small footprint of both the RTK base station and RTK rover, provides versatile applications even in remote locations. The performance of the geolocation service is validated using field experiments, comparing measurements against state-of-the-art photogrammetry, light detection and ranging (LiDAR) and digital level measurement technologies. The authors encourage the adoption of the RTK geolocation solution based on the calibrated results.""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		Are we developers liars or just fools [software managers]	https://www.webofscience.com/wos/woscc/full-record/WOS:A1995RF71300016	IEEE COMPUTER SOC	nan; References
465	TrustSE	The three dimensions of software risk: Technical, organizational, and environmental	The technical dimension of software risk results from uncertainty in the task and procedures, the organizational dimension results from poor communication and organizational structure, and the environmental dimension results from changing environments and problems with external relationships with software developers and/or users. Risk management procedures that address each risk dimension are surveyed, suggesting that future work should concentrate on managing the organizational dimension of risk, in particular, the culture changes that accompany the installation of new information systems, and the environmental dimension, i.e., reducing risk in relationships with both software vendors and partners in information alliances and continually adapting systems to changing environments.	Information management; Risk management; Changing environment; Management procedures; Organizational dimensions; Organizational structures; Software developer; Software vendors; Technical dimensions; Three dimensions; Risks; Information management;  Risk management;  Changing environment;  Management procedures;  Organizational dimensions;  Organizational structures;  Software developer;  Software vendors;  Technical dimensions;  Three dimensions;  Risks	Sherer, S.A.	Proceedings of the Annual Hawaii International Conference on System Sciences	https://doi.org/10.1109/HICSS.1995.375618		369 - 378	"""@CONFERENCE{Sherer1995369,
    author = ""Sherer, S.A."",
    title = ""The three dimensions of software risk: Technical, organizational, and environmental"",
    year = ""1995"",
    journal = ""Proceedings of the Annual Hawaii International Conference on System Sciences"",
    volume = ""3"",
    pages = ""369 - 378"",
    doi = ""10.1109/HICSS.1995.375618"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864324770\&doi=10.1109\%2fHICSS.1995.375618\&partnerID=40\&md5=9e632e5647fdea82e7509dd16d629993"",
    affiliations = ""Coll. of Bus. and Econ., Lehigh Univ., 621 Taylor Street, Bethlehem, 18015, PA, United States"",
    abstract = ""The technical dimension of software risk results from uncertainty in the task and procedures, the organizational dimension results from poor communication and organizational structure, and the environmental dimension results from changing environments and problems with external relationships with software developers and/or users. Risk management procedures that address each risk dimension are surveyed, suggesting that future work should concentrate on managing the organizational dimension of risk, in particular, the culture changes that accompany the installation of new information systems, and the environmental dimension, i.e., reducing risk in relationships with both software vendors and partners in information alliances and continually adapting systems to changing environments. (c) 1995 IEEE."",
    keywords = ""Information management; Risk management; Changing environment; Management procedures; Organizational dimensions; Organizational structures; Software developer; Software vendors; Technical dimensions; Three dimensions; Risks"",
    publisher = ""IEEE Computer Society"",
    issn = ""15301605"",
    isbn = ""0818669306"",
    language = ""English"",
    abbrev_source_title = ""Proc. Annu. Hawaii Int. Conf. Syst. Sci."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 22; Conference name: 28th Annual Hawaii International Conference on System Sciences, HICSS 1995; Conference date: 3 January 1995 through 6 January 1995; Conference code: 144500""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		The three dimensions of software risk: technical, organizational, and environmental	https://www.scopus.com/record/display.uri?eid=2-s2.0-84864324770&origin=resultslist&sort=r-f&src=s&sid=aaab375631598da75d12d5b22246f549&sot=b&sdt=b&s=TITLE%28the+three+dimensions+of+software+risk+technical+organizational+and+environmental%29&sl=87&sessionSearchId=aaab375631598da75d12d5b22246f549&relpos=0	IEEE Computer Society	nan; References
466	TrustSE	An entropy based approach for software risk assessment: A perspective of trustworthiness enhancement	Software risk management is an important approach to obtain trustworthy software. In this paper, entropy was applied to uncover the reasons of chaos and gave the mechanism of risk management in development life cycle. Information entropy was introduced to assess risk uncertainty and a three-dimension risk assessment was obtained through a questionnaire survey. The finding of the study shows the necessity and importance of risk management for enhancing software trustworthiness. Additionally, risk uncertainty is a new assessment of software risks, providing a view of analyzing risk in software development process.	Risk management; Information entropy; Uncertainty; Programming; Chaos; Microscopy; Costs; Software development management; Statistics; Mathematics; Risk Management; Software Development; Processing Software; Information Entropy; Risk Of Exposure; High Uncertainty; Low Uncertainty; Aspects Of Risk; Software risk management; Entropy; Information Entropy; Trustworthy software	Hao Song; Dengsheng Wu; Minglu Li; Chen Cai; Jianping Li	The 2nd International Conference on Software Engineering and Data Mining	https://ieeexplore.ieee.org/document/5542858	"1.The Chaos Report, 2009,  [online]  Available: www.standishgroup.com. Google Scholar; 2.B. W. Boehm, ""Software Risk Management - Principles and Practices"", IEEE Software, vol. 8, pp. 32-41, Jan 1991. View Article  Google Scholar; 3.Y. Y. Haimes, Risk modeling assessment and management, Wiley-IEEE, 2004. CrossRef  Google Scholar; 4.C. E. Shannon, ""A Mathematical Theory of Communication"", Bell System Technical Journal, vol. 27, pp. 379-423, 1948. View Article  Google Scholar; 5.B. Henri et al., ""Toward an assessment of software development risk"", Journal of Management Information Systems, vol. 10, pp. 203-225, 1993. Google Scholar; 6.L. Wallace et al., ""Understanding software project risk: a cluster analysis"", Information  Management, vol. 42, pp. 115-125, 2004. CrossRef  Google Scholar; 7.D. X. Houston et al., ""Stochastic simulation of risk factor potential effects for software development risk management"", Journal of Systems and Software, vol. 59, pp. 247-257, Dec 2001. CrossRef  Google Scholar; 8.R. Schmidt et al., ""Identifying software project risks: An international Delphi study"", Journal of Management Information Systems, vol. 17, pp. 5-36, 2001. CrossRef  Google Scholar"			Included	Included				2	IEEE		An entropy based approach for software risk assessment: A perspective of trustworthiness enhancement	https://ieeexplore.ieee.org/document/5542858	IEEE	nan; Pages; Year; Bibtex
467	TrustSE	Extracting development organization from open source software	The increasing demand for open source software in various fields of computer science is obvious. Many developers adopt open source software in their development process, organization culture, and products. Hence, there are many cases where developers who are new to open source software should maintain and continue to develop the software. This paper suggests a methodology to evaluate unseen organizational effort for open source software. It proposes ways to coordinate developers to maintain it.	Open systems; Development process; Open Source Software; Organization culture; Computer software; Open systems;  Development process;  Open Source Software;  Organization culture;  Computer software	Han, Jongdae; Wu, Chisu; Lee, Byungjeong	Proceedings - Asia-Pacific Software Engineering Conference, APSEC	https://doi.org/10.1109/APSEC.2009.59	Gurbani, V.K., Garvert, A., Herbsleb, J.D.; Asklund, U., Bendix, L.; Zachary, W., Neville, K., Fowlkes, J.; Lavazza, L.; Ngamkajornwiwat, K., Zhang, D., Koru, A.G., Zhou, L., Nolker, R.; Glynn, E., Fitzgerald, B., Exton, C.; Chau, P.Y.K., Tam, K.Y.; Crowston, K., Scozzi, B.; Conway, M.E.(1968)How do committees invent.Cited 39 times.Datamation, April, Online, Availablehttp://www.melconway.com/research/committees.html; Raymond, E.S.(1996)The new hacker's dictionary.Cited 200 times.3rd ed, Cambridge, MA, USA: MIT Press; Bowman, I.T., Holt, R.C.Software architecture recovery using conway's law(1998)CASCON '98: Proceedings of the 1998 conference of the Centre for Advanced Studies on Collaborative research, p. 6.Cited 31 times.IBM Press; Coplien, J.O., Harrison, N.B.Organizational Patterns of Agile Software Development.Cited 249 times.Prentice Hall PTR, July 2004, Online, Availablehttp://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20&path=ASIN/0131467409; http://sourceforge.org; Kang, Y., Park, C., Wu, C.; Dutoit, A.H., Bruegge, B.; Dot language.Cited 23 times.Online, Availablehttp://www.graphviz.org/doc/info/lang.html; Graphviz layout guideOnline, Availablehttp://rss.acs.unt.edu/Rdoc/library/Rgraphviz/html/GraphvizLayouts.html; Zhuge, H., Shi, X.; http://www.eclipse.org/jdt	441 - 448	"""@CONFERENCE{Han2009441,
    author = ""Han, Jongdae and Wu, Chisu and Lee, Byungjeong"",
    title = ""Extracting development organization from open source software"",
    year = ""2009"",
    journal = ""Proceedings - Asia-Pacific Software Engineering Conference, APSEC"",
    pages = ""441 - 448"",
    doi = ""10.1109/APSEC.2009.59"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-76349105920\&doi=10.1109\%2fAPSEC.2009.59\&partnerID=40\&md5=a5db7f50d5435e04d9a412c4c6517ab2"",
    affiliations = ""School of Computer Science and Engineering, Seoul National University, Seoul, South Korea; School of Computer Science, University of Seoul, Seoul, South Korea"",
    abstract = ""The increasing demand for open source software in various fields of computer science is obvious. Many developers adopt open source software in their development process, organization culture, and products. Hence, there are many cases where developers who are new to open source software should maintain and continue to develop the software. This paper suggests a methodology to evaluate unseen organizational effort for open source software. It proposes ways to coordinate developers to maintain it. (c) 2009 IEEE."",
    author_keywords = ""Conway's law; Development organization; OSS"",
    keywords = ""Open systems; Development process; Open Source Software; Organization culture; Computer software"",
    correspondence_address = ""J. Han; School of Computer Science and Engineering, Seoul National University, Seoul, South Korea; email: elvenwhite@selab.snu.ac.kr"",
    issn = ""15301362"",
    isbn = ""978-076953909-6"",
    language = ""English"",
    abbrev_source_title = ""Proc. Asia Pac. Softw. Eng. Conf. APSEC"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 6; Conference name: 16th Asia-Pacific Software Engineering Conference, APSEC 2009; Conference date: 1 December 2009 through 3 December 2009; Conference code: 79370""
}
"""	Excluded	Excluded				2	Scopus Signed In		Extracting Development Organization from Open Source Software	https://www.scopus.com/record/display.uri?eid=2-s2.0-76349105920&origin=resultslist&sort=r-f&src=s&sid=65bcd984e8720a360cc61e1caa82feea&sot=b&sdt=b&s=TITLE%28extracting+development+organization+from+open+source+software%29&sl=68&sessionSearchId=65bcd984e8720a360cc61e1caa82feea&relpos=0		nan; Publisher
468	TrustSE	Mining and analyzing the characteristic of projects collaborative relationship in open source software	This paper focus on the relationship between projects that have same participants. A definition of projects collaborative relationship has been presented, and a projects collaborative network model is constructed. By mining and analyzing more than 10000 projects from sourceforge.net, we find that the projects collaborative relationship of software has a great impact on software trustworthiness. The number of project's collaborative project and the proportion of project's participants, who also join in other projects, are mostly important factors of projects collaborative network.	Collaboration; Open source software; Communities; Collaborative work; Data mining; Software quality; Open-source; Open-source Software; Collaborative Project; Definite Relationship; Software Development; Software Quality; Open-source Projects; Open Projects; Project Quality; Software Projects; Trustworthiness Ratings; open source software; trusted software; projects collaborative relationship; evaluation of trustworthiness	Bai Wang; Meng Shi	2012 IEEE 2nd International Conference on Cloud Computing and Intelligence Systems	https://doi.org/10.1109/CCIS.2012.6664590	"1.TANG Tong-Xin, LIU Zeng-Liang, ""Progress in software trustworthiness metrics models,"" Computer Engineering and Applications, vol. 46(27), pp. 12-16, 2010. Google Scholar; 2.CAI Si-Bo, ZOU Yan-Zhen, ""Framework supporting software assets evaluation on trustworthiness,"" Journal of Software, Vol. 21, No. 2, pp. 369-372. CrossRef  Google Scholar; 3.YUAN Lin, WANG Huai-Min, ""Trustworthy evaluation technology of software based on roles,"" Journal of Beijing University of Technology, Vol. 36, No. 5, pp. 611-615, 2010. Google Scholar; 4.G. Robles, JM. Gonzalez. Barahona, ""Evolution of the core team of developers in libre software projects,"" in MSR '09. 6th, pp. 167-171, 2009. View Article  Google Scholar; 5.G. Madey, V. Freeh; R. Tynan, ""The open source software development phenomenon: An analysis based on social network theory,"" in 8th Americas Conference on Information Systems, pp. 1806-1813, 2002. Google Scholar; 6.Lin Yuan, Huaimin Wang, ""Mining frequent development patterns of roles in open source software,"" in 2010 Symposia and Workshops on Ubiquitous, Autonomic and Trusted Computing, pp. 444-448, 2010. View Article  Google Scholar; 7.Liu Ke, Shan Zhi-Guang, ""Overview on major Research Plan of trustworthy software,"" Bulletin of National Natural Science Foundation of China, pp. 145-151, 2008. Google Scholar; 8.Audris Mockus, James D Herbsleb, ""Two case studies of open source software development: Apache and Mozilla,"" ACM Transactions on Software Engineering and Methodology, Vol. 11, No. 3, pp. 309-346, 2002. CrossRef  Google Scholar; 9.Kevin Crowston, James Howsion, ""The social structure of free and open source software development,"" First Monday, Vol. 10, No. 2-7, 2005. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Mining and analyzing the characteristic of projects collaborative relationship in open source software	https://ieeexplore.ieee.org/document/6664590	IEEE	nan; Pages; Year; Bibtex
469	TrustSE	Visibility & Control: Addressing Supply Chain Challenges to Trustworthy Software-Enabled Things	"Software is playing a pivotal role in most enterprises, whether they realize it or not, and with the proliferation of Industrial Internet of Things (IoT) and other cyber/physical systems across our society and critical infrastructure and our collective love affair with automation, optimization, and ""smart"" devices, the role of these types of systems is only going to increase. This talk addresses the myriad of issues that underlie unsafe, insecure, and unreliable software and provides the insights of the Industrial Internet Consortium and other government and industry efforts on how to conquer them and pave the way to a marketplace of trustworthy software-enabled connected things.As the experience of several sectors has shown, the dependence on connected software needs to be met with a strong understanding of the risks to the overall trustworthiness of our software-based capabilities that we, our enterprises, and our world utilize. In many of these new connected systems issues of safety, reliability, and resilience rival or dominate concerns for security and privacy, the long-time focus of many in the IT world. Without a scalable and efficient method for managing these risks so our enterprises can continue to benefit from these advancements that powers our military, commercial industries, cities, and homes to new levels of efficiency, versatility, and cost effectiveness we face the potential for harm, death, and destructiveness.In such a marketplace, creating, exchanging, and integrating components that are trustworthy as well as entering into value-chain relationships with trustworthy partners and service suppliers will be common if we can provide a method for explicitly defining what is meant by the word trustworthy. The approach being pursued by these groups for applying Software Assurance to these systems and their Supply Chains by leveraging Structured Assurance Cases, Software Bill of Materials (the focus of this paper), and secure development practices applied..."	Supply Chain; Internet Of Things; Critical Infrastructure; Industrial Internet Of Things; Software Version; Basic Information; Types Of Information; Pedigree; Software Components; Constituent Parts; Reference Base; Security Vulnerabilities; Usage Scenarios; Terms Of This License; Provenance Information; Unambiguous Information; software; IoT; CyberPhysical; software assurance; software bill of materials; SBOM; DevSecOps	Robert Alan Martin	2020 IEEE Systems Security Symposium (SSS)	https://doi.org/10.1109/SSS47320.2020.9174365	1.National Telecommunications and Information Agency's (NTIA's) Software Transparency efforts,  [online]  Available: www.ntia.doc.gov/Software Transparency. Google Scholar; 2.The Consortium for Information and Software Quality (CISQ) SBOM Working Group,  [online]  Available: https://www.it-cisq.org/sbom/. Google Scholar			Excluded	Excluded				2	IEEE		Visibility & Control: Addressing Supply Chain Challenges to Trustworthy Software-Enabled Things	https://ieeexplore.ieee.org/document/9174365	IEEE	nan; Pages; Year; Bibtex
470	TrustSE	Trustrace: Improving Automated Trace Retrieval through Resource Trust Analysis	Traceability is a task to create/recover traceability links among different software artifacts. It uses resources, such as an expert, source and target document, and traceability approach, to create/recover traceability links. However, it does not provide any guidance that how much we can trust on available resources. We propose Trustrace, a trust-based traceability recovery process, to improve expert trust on a recovered link and trust over the traceability inputs. Trustrace has three sub components, in particular, Link trust improver (LTI), traceability factor controller (TFC), and a hybrid traceability approach (HTA). LTI uses various source of information, such as temporal information, design documents, source code structure, and so on, to increase experts' trust over a link. To develop TFC, we will perform a systematic literature review and empirical studies to find out which factors impact the traceability-process inputs and document these factors in a trust pattern. TFC trust pattern will help practitioner and researchers to know which steps they can take to avoid/control these factors to improve their trust on these inputs. In the HTA, we will combine different traceability recovery approaches. All approaches have different positive and negative points, we will combine all the positive points of different approaches to increase experts' trust over the HTA. In Trustrace, HTA will implement the LTI model following TFC instructions to improve the expert trust over recovered link as well as precision and recall.	Conferences; USA Councils; Software engineering; Software; IEEE Computer Society; Q factor; Unified modeling language; Source Of Information; Empirical Studies; Source Code; Precision And Recall; Temporal Information; Recovery Model; Design Documents; Software Artifacts; Quality Factor; Project Management; Hybrid Approach; Low Precision; Functional Requirements; Mailing Lists; Quality Of Input; Rule-based Approach; Text Similarity; Non-functional Requirements; Bug Reports; Traceability; trust-based model; hybrid approach; quality factors	Nasir Ali	2011 IEEE 19th International Conference on Program Comprehension	https://doi.org/10.1109/ICPC.2011.55	"1.N. Pennington, ""Comprehension Strategies in Programming"", Empirical Studies of Programmers: Second Workshop, 1987. Google Scholar; 2.R. Brooks, ""Towards a theory of the comprehension of computer programs"", International Journal of Man-Machine Studies, vol. 18, pp. 543-554, 1983. CrossRef  Google Scholar; 3.A. De Lucia, M. Di Penta, R. Oliveto and F. Zurolo, ""Improving comprehensibility of source code via traceability information: a controlled experiment"", Program Comprehension 2006. ICPC 2006. 14th IEEE International Conference on, pp. 317-326, 2006. CrossRef  Google Scholar; 4.""IEEE Standard Glossary of Software Engineering Terminology"", ""Ieee std 610.12-1990(r2002)"", 1990. Google Scholar; 5.G. Antoniol, G. Canfora, G. Casazza, A. De Lucia and E. Merlo, Recovering traceability links between code and documentation, Piscataway, NJ, USA, pp. 970-983, October 2002. Google Scholar; 6.J. Cleland-Huang, C. K. Chang and M. Christensen, ""Event-based traceability for managing evolutionary change"", IEEE Transaction Software Engineering, vol. 29, no. 9, pp. 796-810, 2003. View Article  Google Scholar; 7.S. A. Sherba, ""Towards automating traceability: an incremental and scalable approach"" in Ph.D. dissertation, Boulder, CO, USA, 2005. Google Scholar; 8.A. Egyed and P. Grunbacher, ""Automating requirements traceability: Beyond the record & replay paradigm"", ASE'02: Proceedings of the 17th IEEE international conference on Automated software engineering, pp. 163, 2002. View Article  Google Scholar; 9.J. Cleland-Huang, R. Settimi, O. BenKhadra, E. Berezhan-skaya and S. Christina, ""Goal-centric traceability for managing non-functional requirements"", ICSE '05: Proceedings of the 27th international conference on Software engineering, pp. 362-371, 2005. CrossRef  Google Scholar; 10.G. Spanoudakis, A. Zisman, E. Prez-Miana and P. Krause, ""Rule-based generation of requirements traceability relations"", Journal of Systems and Software, vol. 72, no. 2, pp. 105-127, 2004. CrossRef  Google Scholar; 11.R. Oliveto, M. Gethers, D. Poshyvanyk and A. D. Lucia, ""On the equivalence of information retrieval methods for automated traceability link recovery"", ICPC, pp. 68-71, 2010. CrossRef  Google Scholar; 12.A. Abadi, M. Nisenson and Y. Simionovici, ""A traceability technique for specifications"", International Conference on Program Comprehension, pp. 103-112, 2008. CrossRef  Google Scholar; 13.G. Antoniol, ""Recovery of traceability links in software artifacts and systems"", Ph.D. dissertation, 2003. Google Scholar; 14.J. H. Hayes and A. Dekhtyar, ""Humans in the traceability loop: can't live with 'em can't live without 'em"", Proceedings of the 3rd international workshop on Traceability in emerging forms of software engineering, pp. 20-23, 2005. CrossRef  Google Scholar; 15.W. Jirapanthong and A. Zisman, ""Xtraque: traceability for product line systems"", Software and Systems Modeling, vol. 8, no. 1, pp. 117-144, February 2009. CrossRef  Google Scholar; 16.B. Ramesh, ""Factors influencing requirements traceability practice"", Commun. ACM, vol. 41, no. 12, pp. 37-44, 1998. CrossRef  Google Scholar; 17.J. I. Maletic and M. L. Collard, ""Tql: A query language to support traceability"", TEFSE '09: Proceedings of the 2009 ICSE Workshop on Traceability in Emerging Forms of Software Engineering, pp. 16-20, 2009. View Article  Google Scholar; 18.P. Mader, O. Gotel and I. Philippow, ""Getting back to basics: Promoting the use of a traceability information model in practice"", TEFSE '09: Proceedings of the 2009 ICSE Workshop on Traceability in Emerging Forms of Software Engineering, pp. 21-25, 2009. View Article  Google Scholar; 19.P. Arkley and S. Riddle, ""Overcoming the traceability benefit problem"", RE '05: Proceedings of the 13th IEEE International Conference on Requirements Engineering, pp. 385-389, 2005. View Article  Google Scholar; 20.J. Cleland-Huang, J. H. Hayes and J. M. Domel, ""Model-based traceability"", TEFSE '09: Proceedings of the 2009 ICSE Workshop on Traceability in Emerging Forms of Software Engineering, pp. 6-10, 2009. View Article  Google Scholar; 21.S. A. Sherba, K. M. A. and M. Faisal, ""A framework for mapping traceability relationships"", 2nd International Workshop on Traceability in Emerging Forms of Software Engineering at 18th IEEE International Conference on Automated Software Engineering, pp. 32-39, 2003. Google Scholar; 22.K. Osterbye and U. K. Wiil, ""The flag taxonomy of open hypermedia systems"", HYPERTEXT '96: Proceedings of the the seventh ACM conference on Hypertext, pp. 129-139, 1996. CrossRef  Google Scholar; 23.N. Ali, Y.-G. Gueheneuc and G. Antoniol, ""Trust-based requirements traceability"", ICPC '11: Proceedings of the International Conference on Program Comprehension (ICPC'11), 2011. CrossRef  Google Scholar; 24.D. H. McKnight, V. C. and C. K., ""The impact of initial consumer trust on intentions to transact with a web site: a trust building model"", The Journal of Strategic Information Systems, vol. 11, no. 3-4, pp. 297-323, 2002. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		Trustrace: Improving Automated Trace Retrieval through Resource Trust Analysis	https://ieeexplore.ieee.org/document/5970194	IEEE	nan; Pages; Year; Bibtex
471	TrustSE	Secure identification of actively executed code on a generic trusted component	Code identity is a fundamental concept for authenticated operations in Trusted Computing. In today's approach, the overhead of assigning an identity to a protected service increases linearly with the service code size. In addition, service code size continues to grow to accommodate richer services. This trend negatively impacts either the security or the efficiency of current protocols for trusted executions. We present an execution protocol that breaks the dependency between the code size of the service and the identification overhead, without affecting security, and that works on different trusted components. This is achieved by computing an identity for each of the code modules that are actually executed, and then building a robust chain of trust that links them together for efficient verification. We implemented and applied our protocol to a widely-deployed database engine, improving query-processing time up to 2x compared to the monolithic execution of the engine.	Engines; Query languages; Query processing; Trusted computing; Active code; Chain of trust; Code identities; Code modules; Database engine; Fundamental concepts; Generic components; Trusted components; Codes (symbols); Engines;  Query languages;  Query processing;  Trusted computing;  Active code;  Chain of trust;  Code identities;  Code modules;  Database engine;  Fundamental concepts;  Generic components;  Trusted components;  Codes (symbols)	Vavala, Bruno; Neves, Nuno; Steenkiste, Peter	Proceedings - 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2016	https://doi.org/10.1109/DSN.2016.45		419 - 430	"""@CONFERENCE{Vavala2016419,
    author = ""Vavala, Bruno and Neves, Nuno and Steenkiste, Peter"",
    title = ""Secure identification of actively executed code on a generic trusted component"",
    year = ""2016"",
    journal = ""Proceedings - 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2016"",
    pages = ""419 - 430"",
    doi = ""10.1109/DSN.2016.45"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994383069\&doi=10.1109\%2fDSN.2016.45\&partnerID=40\&md5=8ef328b8105f620d149ccb99b770c716"",
    affiliations = ""CSD, Carnegie Mellon University, United States; LaSIGE, Faculdade de Ciencias, Universidade de Lisboa, Portugal"",
    abstract = ""Code identity is a fundamental concept for authenticated operations in Trusted Computing. In today's approach, the overhead of assigning an identity to a protected service increases linearly with the service code size. In addition, service code size continues to grow to accommodate richer services. This trend negatively impacts either the security or the efficiency of current protocols for trusted executions. We present an execution protocol that breaks the dependency between the code size of the service and the identification overhead, without affecting security, and that works on different trusted components. This is achieved by computing an identity for each of the code modules that are actually executed, and then building a robust chain of trust that links them together for efficient verification. We implemented and applied our protocol to a widely-deployed database engine, improving query-processing time up to 2x compared to the monolithic execution of the engine. (c) 2016 IEEE."",
    author_keywords = ""Active code; Code identity; Generic component; Trusted computing"",
    keywords = ""Engines; Query languages; Query processing; Trusted computing; Active code; Chain of trust; Code identities; Code modules; Database engine; Fundamental concepts; Generic components; Trusted components; Codes (symbols)"",
    publisher = ""Institute of Electrical and Electronics Engineers Inc."",
    isbn = ""978-146738891-7"",
    language = ""English"",
    abbrev_source_title = ""Proc. - Annu. IEEE/IFIP Int. Conf. Dependable Syst. Networks, DSN"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 1; Conference name: 46th IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2016; Conference date: 28 June 2016 through 1 July 2016; Conference code: 124145""
}
"""	Excluded	Excluded				2	Scopus Signed In		Secure Identification of Actively Executed Code on a Generic Trusted Component	https://www.scopus.com/record/display.uri?eid=2-s2.0-84994383069&origin=resultslist&sort=r-f&src=s&sid=144cf1bafb93ff832b07f64bc3842f12&sot=b&sdt=b&s=TITLE%28secure+identification+of+actively+executed+code+on+a+generic+trusted+component%29&sl=85&sessionSearchId=144cf1bafb93ff832b07f64bc3842f12&relpos=0	Institute of Electrical and Electronics Engineers Inc	nan; References
472	TrustSE	Trust Trade-off Analysis for Security Requirements Engineering	Security requirements often have implicit assumptions about trust relationships among actors. The more actors trust each other, the less stringent the security requirements are likely to be. Trust always involves the risk of mistrust; hence, trust implies a trade-off: gaining some benefits from depending on a second party in trade for getting exposed to security and privacy risks. When trust assumptions are implicit, these trust trade-offs are made implicitly and in an ad-hoc way. By taking advantage of agent- and goal-oriented analysis, we propose a method for discovering trade-offs that trust relationships bring. This method aims to help the analyst select among alternative dependency relationships by making explicit trust trade-offs. We propose a simple algorithm for making the trade-offs in a way that reaches a balance between costs and benefits.	Permission; Information security; Privacy; Information analysis; Computer security; Computer science; Costs; Navigation; Environmental economics; Psychology; Security Requirements; Requirements Engineering; Trade-off Analysis; Distrust; Trusting Relationship; Dependent Relationship; Security Risks; Privacy Risks; Alternative Relationships; Delegation; Local Estimates; Resultant Signal; Multi-criteria Decision-making; Comparison Criteria; Resource Dependence; WiFi Signals; Quality Goals; Software Agents; Stakeholder Requirements	Golnaz Elahi; Eric Yu	2009 17th IEEE International Requirements Engineering Conference	https://doi.org/10.1109/RE.2009.12	"1.J. Viega, T. Kohno, and B. Potter, ""Trust (and mistrust) in secure applications,"" Commun. ACM, vol. 44, no. 2, pp. 31-36, 2001. CrossRef  Google Scholar; 2.S. P. Marsh and M. R. Dibben, ""Trust, untrust, distrust and mistrust - an exploration of the dark(er) side,"" vol. 3477, pp. 17-33, 2005. Google Scholar; 3.C. Castelfranchi and R. Falcone, ""Principles of trust for MAS: cognitive anatomy, social importance, and quanti cation,"" in Proc. of Multi Agent Systems, 1998, pp. 72-79. View Article  Google Scholar; 4.P. Giorgini, F. Massacci, and N. Zannone, ""Security and trust requirements engineering,"" in Proc. of FOSAD, 2005, pp. 237-272. CrossRef  Google Scholar; 5.P. Giorgini, F. Massacci, J. Mylopoulos, and N. Zannone, ""Modeling security requirements through ownership, permission and delegation,"" in Proc. of RE05, 2005, pp. 167-176. View Article  Google Scholar; 6.B. Haley, C. Laney, D. Moffett, and B. Nuseibeh, ""Using trust assumptions with security requirements,"" Requir. Eng., vol. 11, no. 2, pp. 138-151, 2006. CrossRef  Google Scholar; 7.C. Haley, R. Laney, J. Moffett, and B. Nuseibeh, ""Security requirements engineering: A framework for representation and analysis,"" TSE, vol. 34, no. 1, pp. 133-153, 2008. View Article  Google Scholar; 8.E. S. K. Yu and L. Liu, ""Modelling trust for system design using the i* strategic actors framework,"" in Proc. of the workshop on Deception, Fraud, and Trust in Agent Societies, 2001, pp. 175-194. CrossRef  Google Scholar; 9.A. van Lamsweerde, ""Requirements engineering in the year 00: a research perspective,"" in Proc. of ICSE00, 2000, pp. 5-19. View Article  Google Scholar; 10.E. Yu, ""Modeling Strategic Relationships for Process Reengineering,"" Ph.D. dissertation, University of Toronto, 1995. Google Scholar; 11.L. Liu, E. Yu, and J. Mylopoulos, ""Security and privacy requirements analysis within a social setting,"" in Proc. of RE03, 2003, p. 151. View Article  Google Scholar; 12.G. Elahi and E. Yu, ""A goal oriented approach for modeling and analyzing security trade-offs,"" in Proc. of ER07, ser. LNCS 4801, 2007, pp. 375-390. CrossRef  Google Scholar; 13.G. Elahi, E. Yu, and N. Zannone, ""A vulnerability-centric requirements engineering framework: Analyzing security attacks, countermeasures, and requirements based on vulnerabilities,"" Manuscript submitted to REJ, 2009. CrossRef  Google Scholar; 14.J. Horkoff and E. Yu, ""A Qualitative, Interactive Evaluation Procedure for Goal- and Agent-Oriented Models,"" in CAiSE Forum. CEUR Workshop Proceedings, 2009.; 15.L. Chung, B. A. Nixon, E. Yu, and J. Mylopoulos, Non-Functional Requirements in Software Engineering. Kluwer Academic, 1999. Google Scholar; 16.L. Bass, P. Clements, and R. Kazman, Software Architecture in Practice. Boston, MA, USA: Second Edition, Addison Wesley, 2003. Google Scholar; 17.R. L. Keeney and H. Raiffa, Decisions with multiple objectives : preferences and value tradeoffs. Wiley, 1976. Google Scholar; 18.B. Schneier, Beyond Fear. Springer, 2003. Google Scholar; 19.B. Blakley, E. McDermott, and D. Geer, ""Information security is information risk management,"" in Proc. of NSPW 01, 2001, pp. 97-104. CrossRef  Google Scholar; 20.J. Figueira, S. Greco, and M. Ehrgott, Multiple Criteria Decision Analysis: State of the Art Surveys. Springer Verlag, 2005. Google Scholar; 21.J. S. Hammond, R. L. Keeney, and H. Raiffa, Smart choices : a practical guide to making better life decisions. Broadway Books, 2002. Google Scholar; 22.G. Elahi, Z. Lieber, and E. Yu, ""Trade-off analysis of identity management systems with an untrusted identity provider,"" in Proc. of COMPSAC08, STPSA08 Workshop, 2008, pp. 661-666. View Article  Google Scholar"			Excluded	Excluded				2	IEEE		Trust Trade-off Analysis for Security Requirements Engineering	https://ieeexplore.ieee.org/document/5328522	IEEE	nan; Pages; Year; Bibtex
473	TrustSE	An approach for cross-domain access control policy generation from reputation evaluation to trust management	In view of existing access control mechanisms having coarse granularity and being lack of dynamic adaptability in cross-domain open environment with a lot of strange entities, an access control policy generation approach from reputation evaluation up to trust management is proposed. This approach can generate fine-grained authorization policies automatically and dynamically according to entities' behaviour features and context attributes, which is achieved by integrating reputation evaluation and trust management in an original data mining based way. Such integration makes the approach surpass the limitations of existing integration models, in which reputation evaluation is only subjectively taken as an extension to trust management without overcoming the pre-set policies' limited ability to adapt to dynamic environment. The reputation evaluation combines cloud model and Bayesian networks, which can represent and evaluate the uncertainty of trust more accurately and efficiently. Then the association relationships between entities' attributes and their reputation are extracted from reputation evaluation results. Finally, these relationships will be transformed into attribute based access control policies. Simulation results show that the entities' behaviour features can be automatically mapped into access control policies which can better adapt to cross-domain dynamic environment.	access control policy generation; reputation evaluation; trust management; XACML; association rule	Y. Wang; Z.Y. Liu; C.Z. Hu; X.L. Zhao; J.F. Xue; L.X. Wei	2013 International Conference on Information and Network Security (ICINS 2013)	https://doi.org/10.1049/cp.2013.2461				Excluded	Excluded				2	IEEE		An approach for cross-domain access control policy generation from reputation evaluation to trust management	https://ieeexplore.ieee.org/document/6826010	IET	nan; References; Pages; Year; Bibtex
474	TrustSE	Consumers' Trust Maintenance: From the Perspective of Knowledge-Based and Identification-Based Trust	Trust changes and develops gradually. How to maintain and preserve trust relationship is the key problem to solve as long as initial trust is build. From the perspective of knowledge-based and identification-based trust, this article focuses on trust maintenance and its impact mechanism after transaction. Firstly, based on related literature, this paper constructs a research model of trust maintenance mechanism. Then data are gathered by the method of questionnaire. Finally, the model and hypotheses are tested by Structured Equation Model software. The results show that post-transaction trust contains knowledge-based trust and identification-based trust. Moreover, the model reveals that the former positively affects the latter. Besides, it has been confirmed that security and privacy protection and service quality affect two types of trust respectively, while familiarity affects both of them, which eventually affect satisfactory and loyalty. At last, the paper provides suggestions contributing to the development of e-commerce enterprises and points out the deficiency and the direction of future research.	Knowledge based systems; Privacy; Maintenance engineering; Security; Mathematical model; Software reliability; Perspective Of Trust; Identification-based Trust; Service Quality; Structural Equation Modeling; Impact Force; Privacy Protection; Security Protection; Types Of Trust; Cronbach's Alpha; Entrepreneurial; Fit Index; Personal Information; Levels Of Satisfaction; Path Coefficients; Online Shopping; Customer Loyalty; Security Mechanisms; Development Of Trust; Trust Model; Consumer Trust; Trust Mechanism; Establishment Of Trust; E-commerce Websites; Shopping Experience; After-sales Service; Definition Of Trust; Trust Formation; Concept Of Trust; Protective Impact; Trust maintenance; Knowledge-based trust; Identification-based trust; Satisfaction; Loyalty	Hanyang Luo; Wei Huang; Sai Wang; Lijun Ma; Xudong Lin	2018 15th International Conference on Service Systems and Service Management (ICSSSM)	https://doi.org/10.1109/ICSSSM.2018.8465070	"1.H. Luo and Q. Lu, ""Empirical research on the evolution of consumers trust in B2C e-business in China"", Advances in Information Sciences  Service Sciences, vol. 4, pp. 640-648, 2012. Google Scholar; 2.P. M. Doney and J. P. Cannon, ""An Examination of the Nature of Trust in Buyer-Seller Relationships"", Journal of Marketing, vol. 61, pp. 35-51, 1997. CrossRef  Google Scholar; 3.D. Gefen, ""E-commerce: the role of familiarity and trust"", Omega, vol. 28, pp. 725-737, 2000. CrossRef  Google Scholar; 4.J. K. Rempel et al., ""Trust in close relationships"", Journal of Personality and Social Psychology, vol. 49, pp. 95-112, 1985. CrossRef  Google Scholar; 5.L. G. Zucker, ""Production of trust: Institutional sources of economic structure 1840-1920"", Research in Organizational Behavior, vol. 8, pp. 53-111, 1986. Google Scholar; 6.D. J. McAllister, ""Affect- and cognition-based trust as foundations for interpersonal cooperation in organizations"", The Academy of Management Journal, vol. 38, pp. 24-59, 1995. CrossRef  Google Scholar; 7.R. K. K. Fung and M. K. O. Lee, EC-trust (trust in electronic commerce): Exploring the antecedent factors, 1999. Google Scholar; 8.D. L. Shapiro et al., ""Business on a Handshake"", Negotiation Journal, vol. 8, pp. 365-377, 1992. CrossRef  Google Scholar; 9.R. J. Lewicki and B. B. Bunker, ""Developing and Maintaining Trust in Work Relationships"", Trust in Organizations Frontiers of Theory  Research, 1996. CrossRef  Google Scholar; 10.L. Hanyang et al., ""From Trust to Online Loyalty: Theoretical Models and Empirical Research"", Journal of Information, vol. 29, pp. 190-194, 2010. Google Scholar; 11.L. Hanyang et al., ""Cross-stage Empirical Study on the Evolution of Consumers Trust and Gender Difference in B2C E-business"", Journal of Systems  Management, vol. 25, pp. 484-497, 2016. Google Scholar; 12.P. Ratnasingham, ""Trust in Web - based electronic commerce security"", Information Management  Computer Security, vol. 6, pp. 162-166, 1998. CrossRef  Google Scholar; 13.M. Koufaris and W. Hampton-Sosa, ""The development of initial trust in an online company by new customers"", Information  Management, vol. 41, pp. 377-397, 01 2004. CrossRef  Google Scholar; 14.V. Shankar et al., ""Online trust: a stakeholder perspective concepts implications and future directions"", The Journal of Strategic Information Systems, vol. 11, pp. 325-344, 2002. CrossRef  Google Scholar; 15.C. Flavian and M. Guinaliu, ""Consumer trust perceived security and privacy policy"", Industrial Management  Data Systems, vol. 106, pp. 601-620, 2006. CrossRef  Google Scholar; 16.S.-J. Yoon, ""The antecedents and consequences of trust in online-purchase decisions"", Journal of Interactive Marketing, vol. 16, pp. 47-63, 01 2002. CrossRef  Google Scholar; 17.H. W. Kim et al., ""A Comparison of Online Trust Building Factors between Potential Customers and Repeat Customers"", Journal of the Association for Information Systems, vol. 5, 2004. CrossRef  Google Scholar; 18.J. S. Chiou and C. Droge, ""Service quality trust specific asset investment and expertise: Direct and indirect effects in a satisfaction-loyalty framework"", Journal of the Academy of Marketing Science, vol. 34, pp. 613-627, 2006. CrossRef  Google Scholar; 19.F. Lai et al., ""How quality value image and satisfaction create loyalty at a Chinese telecom"", Journal of Business Research, vol. 62, pp. 980-986, 2009. CrossRef  Google Scholar; 20.Kim et al., ""Trust and Satisfaction Two Stepping Stones for Successful E-Commerce Relationships: A Longitudinal Exploration"", Information Systems Research, vol. 20, pp. 237-257, 2009. CrossRef  Google Scholar; 21.J. Kim et al., ""The role of etail quality e-satisfaction and e-trust in online loyalty development process"", Journal of Retailing  Consumer Services, vol. 16, pp. 239-247, 2009. CrossRef  Google Scholar; 22.R. L. Oliver and R. R. Burke, ""Expectation Processes in Satisfaction Formation: A Field Study"", Journal of Service Research, vol. 1, pp. 196-214, 1999. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Consumers' Trust Maintenance: From the Perspective of Knowledge-Based and Identification-Based Trust	https://ieeexplore.ieee.org/document/8465070	IEEE	nan; Pages; Year; Bibtex
475	TrustSE	A security-enhanced key authorization management scheme for trusted computing platform	Secure storage is one of the important functionalities in trusted computing platform. The key management is one of the important technologies in secure storage. There is a key synchronization problem in the existing trusted key authorization management mechanism for Trusted Computing Platform. To solve the problem, we propose a security-enhanced trusted key authorization management scheme. The new scheme can effectively enhance the trust and security of the trusted storage through adding child key information in parent key.	Authorization; Secure storage; Cryptography; Synchronization; Software; Engines; Management Strategies; Computational Platform; Management Mechanism; Secure Storage; Decoding; Computer Technology; Key Objective; Information Security; Key Nodes; Secret Key; Public Key; Military Technology; Detailed Flow; External Space; Remote Measurement; Protection Objectives; Software Stack; External Storage; Trusted Computing Plaform; Key Synchronization; Trusted Storage; Authorization Data	Song Cheng; Li Jing; Peng Weiping; Tian Xinji	2012 2nd International Conference on Consumer Electronics, Communications and Networks (CECNet)	https://doi.org/10.1109/CECNet.2012.6202130	1.TCG: TCG Specification Architecture Overview. TCG Specification Version 1.2, The Trusted Computing Group (TCG), Portland, Oregon, USA (April 2003). Google Scholar; 2.TCG: TPM Main, Part 1: Design Principles. TCG Specification Version 1.2 Revision94, The Trusted Computing Group (TCG), Portland, Oregon, USA (March 2006). Google Scholar; 3.TCG. Design, Implementation, and Usage Principles Version 2.0. December 2005. Google Scholar; 4.Trusted Computing Group, TCG Software Stack (TSS) Specification, Version 1.2, January 6, 2006. Google Scholar; 5.Balacheff Boris, Chen Liqun, Pearson Siani, Plaquin David, and Proudler Graeme. Trusted Computing Platforms: TCPA Technology in Context. Prentice-Hall, 2003. Google Scholar; 6.TCG: TPM Main, Part 2: TPM Data Structures. TCG Specification Version 1.2 Revision 94, The Trusted Computing Group (TCG), Portland, Oregon, USA (March 2006). Google Scholar; 7.Zhang Xing, Zhang Xiaofei, Liu Yi and Shen Changxiang. A New AuthData Management Scheme. Journal of Wuhan University(Natural Science Edition). Vol. 53(5), PP. 518-522, Oct. 2007. Google Scholar; 8.TCG: TPM Main, Part 3: Commands. TCG Specification Version 1.2 Revision 94, The Trusted Computing Group (TCG), Portland, Oregon, USA (March 2006). Google Scholar			Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		A security-enhanced key authorization management scheme for trusted computing platform	https://ieeexplore.ieee.org/document/6202130	IEEE	nan; Pages; Year; Bibtex
476	TrustSE	On the Personalization of Trust Management	In this paper we present a system architecture for trust management inspired by a human model for the evaluation of trust. We focus on large-scale marketplaces for diverse software resources and services. In such marketplaces, user agents (consumer, provider and broker) are largely autonomous with vastly diverse requirements, capabilities, and trust preferences. We hypothesize the need for personalized trust management system for the robustness and wide-scale adoption of such large-scale heterogeneous marketplaces. Our proposed system architecture for personalized trust management comprises five layers, namely Monitoring, Data, Analytics, Expectation, and Decision management. Additionally, it utilizes a trust model based on the four aspects of intent, integrity, capability and results. Our simulation results demonstrate the effectiveness, efficiency and resilience of our proposed system.	Human Trust Model; Trust Management; Intent; Integrity; Capability; Personalized Trust; Trust Architecture; Human Trust Model;  Trust Management;  Intent;  Integrity;  Capability;  Personalized Trust;  Trust Architecture	Salah, Hisham; Eltoweissy, Mohamed	2017 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW 2017)	https://doi.org/10.1109/SPW.2017.25		1-10	"""@inproceedings{WOS:000852904100001,
    Author = ""Salah, Hisham and Eltoweissy, Mohamed"",
    Book-Group-Author = ""IEEE COMP SOC"",
    Title = ""On the Personalization of Trust Management"",
    Booktitle = ""2017 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW 2017)"",
    Series = ""IEEE Security and Privacy Workshops"",
    Year = ""2017"",
    Pages = ""1-10"",
    Note = ""38th IEEE Symposium on Security and Privacy (SP), San Jose, CA, MAY 22-26, 2017"",
    Organization = ""IEEE; IEEE Comp Soc Tech Comm Secur \\& Privacy; IEEE Comp Soc; Natl Sci Fdn"",
    Abstract = ""In this paper we present a system architecture for trust management inspired by a human model for the evaluation of trust. We focus on large-scale marketplaces for diverse software resources and services. In such marketplaces, user agents (consumer, provider and broker) are largely autonomous with vastly diverse requirements, capabilities, and trust preferences. We hypothesize the need for personalized trust management system for the robustness and wide-scale adoption of such large-scale heterogeneous marketplaces. Our proposed system architecture for personalized trust management comprises five layers, namely Monitoring, Data, Analytics, Expectation, and Decision management. Additionally, it utilizes a trust model based on the four aspects of intent, integrity, capability and results. Our simulation results demonstrate the effectiveness, efficiency and resilience of our proposed system."",
    Publisher = ""IEEE COMPUTER SOC"",
    Address = ""10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Salah, H (Corresponding Author), Arab Acad Sci \\& Technol, Cairo, Egypt. Salah, H (Corresponding Author), Virginia Tech, Blacksburg, VA 24061 USA. Salah, Hisham, Arab Acad Sci \\& Technol, Cairo, Egypt. Salah, Hisham; Eltoweissy, Mohamed, Virginia Tech, Blacksburg, VA 24061 USA. Eltoweissy, Mohamed, Virginia Mil Inst, Lexington, VA 24450 USA."",
    DOI = ""10.1109/SPW.2017.25"",
    ISSN = ""2639-7862"",
    EISSN = ""2770-8411"",
    ISBN = ""978-1-5386-1968-1"",
    Keywords = ""Human Trust Model; Trust Management; Intent; Integrity; Capability; Personalized Trust; Trust Architecture"",
    Keywords-Plus = ""REPUTATION-BASED TRUST"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Interdisciplinary Applications"",
    Author-Email = ""hishamsalah@aast.edu eltoweissymy@vmi.edu"",
    Affiliations = ""Egyptian Knowledge Bank (EKB); Arab Academy for Science, Technology \\& Maritime Transport; Egyptian Academy of Scientific Research \\& Technology (ASRT); Virginia Polytechnic Institute \\& State University"",
    Number-of-Cited-References = ""35"",
    Times-Cited = ""0"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""0"",
    Doc-Delivery-Number = ""BT8EI"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000852904100001"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		On the Personalization of Trust Management	https://www.webofscience.com/wos/woscc/full-record/WOS:000852904100001	IEEE COMPUTER SOC	nan; References
477	TrustSE	Trust-but-Verify in Cyber-Physical Systems	Cyber-physical systems span a wide spectrum, from long-lived legacy systems to more modern installations. Trust is an issue that arises across the spectrum, albeit with different variants of goals and constraints. On the one end of the spectrum, legacy systems are characterized by function-based designs in which trust is an implicitly in-built concept -- the operation is historically designed, implemented, and optimized in a benign stance with respect to intended use. On the other end of the spectrum, modern systems are characterized by offerings from manufacturers, vendors, and system installers -- the devices and deployments use a variety of security features that offer promises of increased trust. All along this spectrum of cyber-physical systems, extending trust beyond the traditional cyber portions to the arteries that connect the physical portions to the cyber portions is a major challenge. Here, we identify a Trust-but-Verify approach that spans this spectrum in addressing trust.	automation;  cyber-physical systems;  intelligent analysis;  machine learning;  security;  trust;  verification;  vetting; automation, cyber-physical systems, intelligent analysis, machine learning, security, trust, verification, vetting	Perumalla, Kalyan	SAT-CPS '21: Proceedings of the 2021 ACM Workshop on Secure and Trustworthy Cyber-Physical Systems	https://doi.org/10.1145/3445969.3450434		1-2	"""@inproceedings{10.1145/3445969.3450434,
    author = ""Perumalla, Kalyan"",
    title = ""Trust-but-Verify in Cyber-Physical Systems"",
    year = ""2021"",
    isbn = ""9781450383196"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3445969.3450434"",
    doi = ""10.1145/3445969.3450434"",
    abstract = ""Cyber-physical systems span a wide spectrum, from long-lived legacy systems to more modern installations. Trust is an issue that arises across the spectrum, albeit with different variants of goals and constraints. On the one end of the spectrum, legacy systems are characterized by function-based designs in which trust is an implicitly in-built concept -- the operation is historically designed, implemented, and optimized in a benign stance with respect to intended use. On the other end of the spectrum, modern systems are characterized by offerings from manufacturers, vendors, and system installers -- the devices and deployments use a variety of security features that offer promises of increased trust. All along this spectrum of cyber-physical systems, extending trust beyond the traditional cyber portions to the arteries that connect the physical portions to the cyber portions is a major challenge. Here, we identify a Trust-but-Verify approach that spans this spectrum in addressing trust."",
    booktitle = ""Proceedings of the 2021 ACM Workshop on Secure and Trustworthy Cyber-Physical Systems"",
    pages = ""1-2"",
    numpages = ""2"",
    keywords = ""automation, cyber-physical systems, intelligent analysis, machine learning, security, trust, verification, vetting"",
    location = ""Virtual Event, USA"",
    series = ""SAT-CPS '21""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	ACM		Trust, but Verify	https://doi.org/10.1145/3445969.3450434	Association for Computing Machinery	nan; References; Link
478	TrustSE	The effect of trust in product chains in a Digital Business Ecosystem	We present a study in product chain creation in a digital business ecosystem (DBE). We perform the study using a simulated DBE. It was created by a software package that receives statistical data from a real DBE as input and outputs a realistic simulated model consisting of a certain number of companies and services. Issues of trust between companies are modelled using the psychophysical law of Weber Fechner and their effect on the quality of the chains of products created is studied.	Ecosystems; Companies; Psychology; Internet; Educational institutions; Software packages; Testing; Statistical analysis; Human factors; Stress measurement; Production Chain; Effect Of Trust; Digital Ecosystem; Trust Issues; Numeric; Distrust; Chain Length; Airport; Statistical Properties; Dynamic Programming; Quality Value; Lack Of Uniformity; Dynamic Programming Algorithm; Bad Reputation; Company Reputation; Virtual Product; DBE; Trust; Weber-Fechner; Chains of products; quality	Konstantinos N Giannoutakis; Maria Petrou	2007 Inaugural IEEE-IES Digital EcoSystems and Technologies Conference	https://doi.org/10.1109/DEST.2007.371982	1.D. P. Cook and W. Luo, The role of third-party seals in building trust on line, e-Service Journal, Indiana University Press, Vol. 2, Issue 3, Summer 2003, pp. 71-84. Google Scholar; 2.D. Gefen, E-commerce: The role of familiarity and trust, Omega, Vol. 28, Issue 6, December 2000, pp. 725-737. CrossRef  Google Scholar; 3.D. Gefen and D. Straub, Managing user-trust in B2C e-services, e-Service Journal, Indiana University Press, Winter 2003, Vol. 2, Issue 2, pp.7-24. Google Scholar; 4.J. Jahng, H. Jain and K. Ramamurthy, Effective design of electronic commerce environments: a proposed theory of congruence and an illustration, IEEE Transactions on System, Man and Cybernetics, Part A: Systems and Humans, Vol. 30, Issue 4, July 2000, pp. 456-471.; 5.S.Y.X. Komiak, W. Wang and I. Benbasat, Trust building in virtual salespersons versus in human salespersons; similarities and differences, e-Service Journal, Indiana University Press, Summer 2004/2005, Vol. 3, Issue 3, pp. 49-63. Google Scholar; 6.M. Limayem, M. Khalifa and A. Frini, What makes consumers buy from internet? A longitudinal study of online shopping, IEEE Transactions on System, Man and Cybernetics, Part A: Systems and Humans, Vol. 30, Issue 4, July 2000, pp. 421-432.; 7.D. W. Manchala, E-commerce trust metrics and models, IEEE Internet Computing, Vol. 4, Issue 2, March - April 2000, pp. 36-44. View Article  Google Scholar; 8.L. W. McKnight and J. P. Bailey, Internet economics: when constitutions collide in cyberspace, IEEE Internet Computing, Vol. 1, Issue 6, November - December 1997, pp. 30-37. View Article  Google Scholar; 9.A. Noteberg, E. Christiaanse and P Wallage, Consumer Trust in electronic channels, e-Service Journal, Indiana University Press, Winter 2003, Vol. 2, Issue 2, pp. 46-67. Google Scholar; 10.A. S. Patrick, Building trustworthy software agents, IEEE Internet Computing, Vol. 6, Issue 6, November - December 2002, pp. 46-52. View Article  Google Scholar; 11.M. Petrou, S. Gautam and K. N. Giannoutakis, Simulating a Digital Business Ecosystem, Proceedings of the 2nd international conference in computational finance and its applications, June 2006, pp. 277-287. CrossRef  Google Scholar; 12.C. Ruppel, L. Underwood-Queen and S. J. Harrington, e-Commerce: The roles of Trust, security and type of e-commerce involvement, e-Service Journal, Indiana University Press, Winter 2003, Vol. 2, Issue 2, pp. 25-45. Google Scholar; 13.M. P. Singh, The e-commerce Inversion, IEEE Internet Computing, Vol. 3, Issue 5, September - October 1999, pp. 4-5. View Article  Google Scholar; 14.W. K. Sung, D. Yang, S. M. Yiu, D. W. Cheung, W. S. Ho and T. W. Lam, Automatic Construction of online catalog topologies, IEEE Transactions on System, Man and Cybernetics, Part C: Applications and Reviews, Vol. 32, Issue 4, November 2002, pp. 382-391.			Excluded	Excluded				2	IEEE		The effect of trust in product chains in a Digital Business Ecosystem	https://ieeexplore.ieee.org/document/4233716	IEEE	nan; Pages; Year; Bibtex
479	TrustSE	Microsoft - Anti trust case	"Microsoft's dominant market position is the result of technological ingenuity of its great leadership. Bearing in mind the natural tendency of successful technologies to become monopolies, Gates unique skill in turning Microsoft's technology in software standards, provide the company the way to the very top. In just five years, from 1981 when licensed MS-DOS version of its operating system, till the 1985, Microsoft has ""won"" more than half of personal computers around the world that work thanks to its program, and who's share in recent years has climbed to a high 90%. Microsoft today holds a substantial portion of the market operating systems, office software and development tools, Internet browsers and services. The American system evaluates this ubiquity of Microsoft as ""abuse of monopoly to suppress competition, to discourage innovation and restrict consumer's choice"", and the Microsoft case as one of the world's largest anti-trust cases."	Competition; DOS; Information technology; Microelectronics; Personal computers; Software design; Development tools; Internet browsers; Market position; MicroSoft; Operating systems; Software standards; Trust case; Windows operating system; Competition;  DOS;  Information technology;  Microelectronics;  Personal computers;  Software design;  Development tools;  Internet browsers;  Market position;  MicroSoft;  Operating systems;  Software standards;  Trust case;  Windows operating system	Cerovic, Ljerka; Maravic, Vedrana; Mihokovic, Aleksandar	MIPRO 2010 - 33rd International Convention on Information and Communication Technology, Electronics and Microelectronics, Proceedings	https://www.scopus.com/record/display.uri?eid=2-s2.0-77956383801&origin=resultslist&sort=r-f&src=s&sid=2b570df7be6777a7c582f9221704f497&sot=b&sdt=b&s=TITLE%28microsoft+anti+trust+case%29&sl=32&sessionSearchId=2b570df7be6777a7c582f9221704f497&relpos=0	http://www.poslovni.hr/89753.aspx; http://hr.wikipedia.org/wiki/Microsoft_Windows; http://www.vjesnik.hr/html/2000/04/03/; http://www.jutarnji.hr/microsoft-pobija-optuzbe-da-gusi-konkurenciju/ 146358/; http://hr.wikipedia.org/wiki/Suradnik:Rje%C4%8Dina/ Pravno_upitni_poslovi_Microsofta; http://www.jutarnji.hr/microsoft-mora-platiti-889-mil-eura-kazne-zbog- monopolizma/244152/; http://www.eu4journalists.eu/index.php/dossiers/croatian/C9/14/; http://www.liderpress.hr/Default.aspx?sid=48206; http://www.mobilebase.com.ba/mobile_vijest+M572cb31c326.html; http://www.24sata.hr/news/microsoft-i-yahoo-zajedno-zele-biti-bolji-od- googlea/128316/; http://www.poslovni.hr/122883.aspx; http://kin.kvarnerinfo.net/svijet/2597-microsoft-se-polako-slama-pod- pritiskom-krize.html	926 - 930	"""@CONFERENCE{Cerovic2010926,
    author = ""Cerovic, Ljerka and Maravic, Vedrana and Mihokovic, Aleksandar"",
    title = ""Microsoft - Anti trust case"",
    year = ""2010"",
    journal = ""MIPRO 2010 - 33rd International Convention on Information and Communication Technology, Electronics and Microelectronics, Proceedings"",
    pages = ""926 - 930"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956383801\&partnerID=40\&md5=cdb9748b9d10ee9a54d07eddff5d6b07"",
    affiliations = ""University of Rijeka, Faculty of Economics, Rijeka, Ivana Filipovica 4, Croatia"",
    abstract = {Microsoft's dominant market position is the result of technological ingenuity of its great leadership. Bearing in mind the natural tendency of successful technologies to become monopolies, Gates unique skill in turning Microsoft's technology in software standards, provide the company the way to the very top. In just five years, from 1981 when licensed MS-DOS version of its operating system, till the 1985, Microsoft has ""won"" more than half of personal computers around the world that work thanks to its program, and who's share in recent years has climbed to a high 90\%. Microsoft today holds a substantial portion of the market operating systems, office software and development tools, Internet browsers and services. The American system evaluates this ubiquity of Microsoft as ""abuse of monopoly to suppress competition, to discourage innovation and restrict consumer's choice"", and the Microsoft case as one of the world's largest anti-trust cases.},
    keywords = ""Competition; DOS; Information technology; Microelectronics; Personal computers; Software design; Development tools; Internet browsers; Market position; MicroSoft; Operating systems; Software standards; Trust case; Windows operating system"",
    correspondence_address = ""L. Cerovic; University of Rijeka, Faculty of Economics, Rijeka, Ivana Filipovica 4, Croatia; email: cerovic@efri.hr"",
    isbn = ""978-953233050-2"",
    language = ""English"",
    abbrev_source_title = ""MIPRO - Int. Conv. Inf. Commun. Technol., Electron. Microelectron., Proc."",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0; Conference name: 33rd International Convention on Information and Communication Technology, Electronics and Microelectronics, MIPRO 2010; Conference date: 24 May 2010 through 28 May 2010; Conference code: 81539""
}
"""	Excluded	Excluded				2	Scopus Signed In		Microsoft - anti trust case	https://www.scopus.com/record/display.uri?eid=2-s2.0-77956383801&origin=resultslist&sort=r-f&src=s&sid=2b570df7be6777a7c582f9221704f497&sot=b&sdt=b&s=TITLE%28microsoft+anti+trust+case%29&sl=32&sessionSearchId=2b570df7be6777a7c582f9221704f497&relpos=0		nan; Publisher
480	TrustSE	Multi-criterion Evaluation of Development Strategy Components in the Presence of Intangibles and Uncertainty	Regional development comprises a complex process. Therefore, its modelling requires application of appropriate tools. The tools have to be able to cope with diversity of issues including intangibility of utilised resources and obtained results, uncertainty with regard to available information, conflicts between different stakeholders etc. An approach for decision support with regard to sustainable development strategy components evaluation is introduced in the paper. It comprises combination of 3 components, namely: multi-criterion decision analysis, simulation and a concept of a game against nature. Each of the components makes it possible to address devoted sources of complexity. Due to computational requirements practical validation and utilisation of the approach is only possible using its software implementation. The implementation is still in development now. But preliminary results obtained for a sample problem of key development areas identification are encouraging.	Modeling; Games; Uncertainty; Software; Computational modeling; Complexity theory; Decision making; Presence Of Uncertainty; Multi-criteria Decision-making; Against Nature; Evaluation Of Alternatives; Single Criterion; Influence Matrix; Ranking Of Alternatives; regional development; decision making; strategy; system analysis; evaluation; MCDA; DEMATEL; simulation; game against nature	Miroslaw Dytczak; Grzegorz Ginda	2008 19th International Conference on Systems Engineering	https://doi.org/10.1109/ICSEng.2008.95	"1.G. Ginda, ""Selected tools for multi-criterion decision analysis"", [In:] R. Knosala (Ed.), Computer-integrated management, OW PTZP, Opole, 2008, pp. 361-370.; 2.T.L. Saaty, The Analytic Hierarchy Process: Planning, Priority Setting, Resource Allocation, McGraw-Hill, New York, 1980. Google Scholar; 3.T.L. Saaty, Decision Making with Dependence and Feedback: The Analytic Network Process, RWS Publ., Pittsburgh, 1996. Google Scholar; 4.E. Fontela, A. Gabus, The DEMATEL Observer, DEMATEL 1976 Report, Geneva Research Center, Geneva, 1976. Google Scholar; 5.M. Dytczak, ""Parallel application of AHP and DEMATEL methods in multi-criterion decision analysis"", [In:] R. Knosala (Ed.), Computer-integrated management, OW PTZP, Opole, 2008, pp. 249-257.; 6.T.J. Stewart, ""Dealing with Uncertainties in MCDA"", [In:] J. Figueira, S. Greco, and M. Ehrgott (Eds.), Multiple Criteria Decision Analysis. State of the Art Surveys, Springer, New York, 2005, pp. 445-470.; 7.M. Dytczak, G. Ginda ""Identification of Key Development Areas For the Opole Region"", [In:] Proceedings of the Nineteenth International Conference on Systems Engineering (ICSENG 2008), Las Vegas, USA, 19-21 August 2008.; 8.R.D. Luce, H. Raiffa Games and decisions. Introduction and critical survey, Jon Wiley & Sons, New York, 1958. Google Scholar"			Excluded	Excluded				2	IEEE		Multi-criterion Evaluation of Development Strategy Components in the Presence of Intangibles and Uncertainty	https://ieeexplore.ieee.org/document/4616681	IEEE	nan; Pages; Year; Bibtex
481	TrustSE	Attack simulation based software protection assessment method	Software protection is an essential aspect of information security to withstand malicious activities on software, and preserving software assets. However, software developers still lacks a methodology for the assessment of the deployed protections. To solve these issues, we present a novel attack simulation based software protection assessment method to assess and compare various protection solutions. Our solution relies on Petri Nets to specify and visualize attack models, and we developed a Monte Carlo based approach to simulate attacking processes and to deal with uncertainty. Then, based on this simulation and estimation, a novel protection comparison model is proposed to compare different protection solutions. Lastly, our attack simulation based software protection assessment method is presented. We illustrate our method by means of a software protection assessment process to demonstrate that our approach can provide a suitable software protection assessment for developers and software companies.	Software; Software protection; Monte Carlo methods; Numerical models; Mathematical model; Software measurement; Petri nets; Assessment Methods; Attack Simulation; Software Development; Types Of Attacks; Suitability Assessment; Software Companies; Petri Nets; Random Variables; Uniform Distribution; Monte Carlo Simulation; Cybersecurity; Set Of Rules; Hyperbolic Tangent; Method In This Paper; Final Assessment; Real Process; Directed Acyclic Graph; Horizontal Coordinates; Protection Methods; Starting State; Attack Process; Uncertain Process; Specific Attack; Probability Of Attack; Simulation Assessment; Multiple Attacks; Vertical Coordinate; Software Security; Software Protection Assessment; Attack Simulation; Monte Carlo Method; Petri Net	Gaofeng Zhang; Paolo Falcarin; Elena Gomez-Martinez; Shareeful Islam; Christophe Tartary; Bjorn De Sutter	2016 International Conference On Cyber Security And Protection Of Digital Services (Cyber Security)	https://doi.org/10.1109/CyberSecPODS.2016.7502352	"1.ASPIRE Project (Advanced Software Protection: Integration Research and Exploitation),  [online]  Available: https://aspire-fp7.eu/. Google Scholar; 2.L. C. Briand, S. Morasca and V. R. Basili, ""Property-based Software Engineering Measurement"", IEEE Transactions on Software Engineering, vol. 22, no. 1, pp. 68-86, January 1996. View Article  Google Scholar; 3.C. K. Cheng, ""Evaluation and Measurement of Software Process Improvement-A Systematic Literature Review"", IEEE Transactions on Software Engineering, vol. 38, no. 2, pp. 398-424, March-April 2012. View Article  Google Scholar; 4.P. Tonella, M. Ceccato, B. De Sutter and B. Coppens, ""A Measurable Framework to Quantify Software Protections"", Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pp. 1505-1507, November 3-7, 2014. Google Scholar; 5.R. Dewri, N. Poolsappasit, I. Ray and D. Whitley, ""Optimal Security Hardening using Multi-Objective Optimization on Attack Tree Models of Networks"", Proceedings of the 14th ACM Conference on Computer and Communications Security, pp. 204-213, October 29-November 02, 2007. CrossRef  Google Scholar; 6.O. Sheyner, J. Haines, S. Jha, R. Lippmann and J. M. Wing, ""Automated Generation and Analysis of Attack Graphs"", Proceedings of the 2002 IEEE Symposium on Security and Privacy, pp. 273-284, May 12-15, 2002. View Article  Google Scholar; 7.X. Ou, W. F. Boyer and M. A. McQueen, ""A Scalable Approach to Attack Graph Generation"", roceedings of the 13th ACM Conference on Computer and Communications Security, pp. 336-345, October 30-November 03, 2006. CrossRef  Google Scholar; 8.T. Murata, ""Petri Nets: Properties Analysis and Applications"", in Proceedings of the IEEE, vol. 77, no. 4, pp. 541-580, April, 1989. View Article  Google Scholar; 9.T. M. Chen, J. C. Sanchez-Aarnoutse and J. Buford, ""Petri Net Modeling of Cyber-Physical Attacks on Smart Grid"", IEEE Transactions on Smart Grid, vol. 2, no. 4, pp. 741-749, December 2011. View Article  Google Scholar; 10.H. Wang, D. Fang, H. Dong, Y. Lei, X. Gong and Y. Gu, ""Software Attack Modelling and Its Application"", Proceeding of the 2014 IEEE International Conference on High Performance Computing and Communication, pp. 1152-1158, November 13-15, 2013. View Article  Google Scholar; 11.S. Raychaudhuri, ""Introduction to Monte Carlo Simulation"", Proceedings of 2008 Winter Simulation Conference, pp. 91-100, December 7-10, 2008. View Article  Google Scholar; 12.M. DellAmico and M. Filippone, ""Monte Carlo Strength Evaluation: Fast and Reliable Password Checking"", Proceedings of the 22nd ACM Conference on Computer and Communications Security, pp. 158-169, October 12-16, 2015. CrossRef  Google Scholar; 13.P. Falcarin, C. Collberg, M. Atallah and M. Jakubowski, ""Guest Editors Introduction: Software Protection"", IEEE Software, vol. 28, no. 2, pp. 24-27, March/April 2011. View Article  Google Scholar; 14.C. Basile and M. Ceccato, ""Towards a Unified Software Attack Model to Assess Software Protections"", Proceeding of 2013 IEEE 21st International Conference on Program Comprehension, pp. 219-222, May 20-21, 2013. View Article  Google Scholar; 15.M. Ceccato, M. DiPenta, P. Falcarin, F. Ricca, M. Torchiano and P. Tonella, ""A Family of Experiments to Assess the Effectiveness and Efficiency of Source Code Obfuscation Techniques"", Empirical Software Engineering, vol. 19, no. 4, pp. 1040-1074, August 2014. Google Scholar; 16.P. Falcarin, ""Preliminary ASPIRE Security Model"",  [online]  Available: https://aspire-fp7.eu/sites/default/files/D4.01-Preliminary-ASPIRE-Security-Model.pdf. Google Scholar; 17.B. D. Sutter, ""Preliminary Complexity Metrics"",  [online]  Available: https://aspire-fp7.eu/sites/default/files/D4.02-ASPIRE-Preliminary-Complexity-Metrics.pdf. Google Scholar; 18.M. Ceccato, ""Early White-Box Cryptography and Data Obfuscation Report"",  [online]  Available: https://aspire-fp7.eu/sites/default/files/D2.01-ASPIRE-Early-White-Box-Cryptography-and-Data-Obfuscation-Report-v1.01.pdf. Google Scholar; 19.M. Ceccato, M. Di Penta, J. Nagra, P. Falcarin, F. Ricca and M. Torchiano, ""Towards Experimental Evaluation of Code Obfuscation Techniques"", Proceedings of the 4th ACM Workshop on Quality of Protection, pp. 39-46, October 27-32, 2008. CrossRef  Google Scholar; 20.M. Ceccato, A. Capiluppi, P. Falcarin and C. Boldyreff, ""A Large Study on the Effect of Code Obfuscation on the Quality of Java Code"", Empirical Software Engineering, vol. 20, no. 6, pp. 1486-1524, December 2015. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Attack simulation based software protection assessment method	https://ieeexplore.ieee.org/document/7502352	IEEE	nan; Pages; Year; Bibtex
482	TrustSE	(Do not) trust in ecosystems	In the context of Smart Ecosystems, systems engage in dynamic cooperation with other systems to achieve their goals. Expedient operation is only possible when all systems cooperate as expected. This requires a level of trust between the components of the ecosystem. New systems that join the ecosystem therefore first need to build up a level of trust. Humans derive trust from behavioral reputation in key situations. In Smart Ecosystems (SES), the reputation of a system or system component can also be based on observation of its behavior.In this paper, we introduce a method and a test platform that support virtual evaluation of decisions at runtime, thereby supporting trust building within SES. The key idea behind the platform is that it employs and evaluates Digital Twins, which are executable models of system components, to learn about component behavior in observed situations. The trust in the Digital Twin then builds up over time based on the behavioral compliance of the real system component with its Digital Twin. In this paper, we use the context of automotive ecosystems and examine the concepts for building up reputation on control algorithms of smart agents dynamically downloaded at runtime to individual autonomous vehicles within the ecosystem.	automotive;  building trust;  malicious behavior;  smart ecosystems;  virtual evaluation; automotive, building trust, malicious behavior, smart ecosystems, virtual evaluation	Cioroaica, Emilia; Kuhn, Thomas; Buhnova, Barbora	ICSE-NIER '19: Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results	https://doi.org/10.1109/ICSE-NIER.2019.00011		9-12	"""@inproceedings{10.1109/ICSE-NIER.2019.00011,
    author = ""Cioroaica, Emilia and Kuhn, Thomas and Buhnova, Barbora"",
    title = ""(Do not) trust in ecosystems"",
    year = ""2019"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ICSE-NIER.2019.00011"",
    doi = ""10.1109/ICSE-NIER.2019.00011"",
    abstract = ""In the context of Smart Ecosystems, systems engage in dynamic cooperation with other systems to achieve their goals. Expedient operation is only possible when all systems cooperate as expected. This requires a level of trust between the components of the ecosystem. New systems that join the ecosystem therefore first need to build up a level of trust. Humans derive trust from behavioral reputation in key situations. In Smart Ecosystems (SES), the reputation of a system or system component can also be based on observation of its behavior.In this paper, we introduce a method and a test platform that support virtual evaluation of decisions at runtime, thereby supporting trust building within SES. The key idea behind the platform is that it employs and evaluates Digital Twins, which are executable models of system components, to learn about component behavior in observed situations. The trust in the Digital Twin then builds up over time based on the behavioral compliance of the real system component with its Digital Twin. In this paper, we use the context of automotive ecosystems and examine the concepts for building up reputation on control algorithms of smart agents dynamically downloaded at runtime to individual autonomous vehicles within the ecosystem."",
    booktitle = ""Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results"",
    pages = ""9-12"",
    numpages = ""4"",
    keywords = ""automotive, building trust, malicious behavior, smart ecosystems, virtual evaluation"",
    location = ""Montreal, Quebec, Canada"",
    series = ""ICSE-NIER '19""
}
"""	Excluded	Excluded				2	ACM		(Do Not) Trust in Ecosystems	https://doi.org/10.1109/ICSE-NIER.2019.00011	IEEE Press	nan; References; Link
483	TrustSE	Openness and requirements: Opportunities and tradeoffs in software ecosystems	A growing number of software systems is characterized by continuous evolution as well as by significant interdependence with other systems (e.g. services, apps). Such software ecosystems promise increased innovation power and support for consumer oriented software services at scale, and are characterized by a certain openness of their information flows. While such openness supports project and reputation management, it also brings some challenges to Requirements Engineering (RE) within the ecosystem. We report from a mixed-method study of IBM(r)'s CLM(r)ecosystem that uses an open commercial development model. We analyzed data from from interviews within several ecosystem actors, participatory observation, and software repositories, to describe the flow of product requirements information through the ecosystem, how the open communication paradigm in software ecosystems provides opportunities for `just-in-time' RE, as well as some of the challenges faced when traditional requirements engineering approaches are applied within such an ecosystem. More importantly, we discuss two tradeoffs brought about the openness in software ecosystems: i) allowing open, transparent communication while keeping intellectual property confidential within the ecosystem, and ii) having the ability to act globally on a long-term strategy while empowering product teams to act locally to answer end-users' context specific needs in a timely manner.	Ecosystems; Software; Context; Interviews; Automotive engineering; Organizations; Collaboration; Software Ecosystems; Specific Context; Information Flow; Participant Observation; Open Communication; Requirements Engineering; Transparent Communication; Reputation Management; Confidential Information; Software Development; Open Channel; Development Team; Technology Platform; Team Leaders; Value Creation; Personal Networks; Management Solutions; Software Product; Open-source Projects; Steep Learning Curve; Open Communication Channels; Issue Tracking; Agile Development; Hackathon; Technical Leadership; Lifecycle Management; High-level Themes; Business Goals; Communication Requirements; Stakeholder Satisfaction; requirements engineering; software ecosystem; mixed method	Eric Knauss; Daniela Damian; Alessia Knauss; Arber Borici	2014 IEEE 22nd International Requirements Engineering Conference (RE)	https://doi.org/10.1109/RE.2014.6912263	"1.P. Feiler, R. P. Gabriel et al., Ultra-Large-Scale Systems: The Software Challenge of the Future. Software Engineering Institute, 2006. Google Scholar; 2.A. Gawer, Platforms, Markets, and Innovation. Edward Elgar, 2009. CrossRef  Google Scholar; 3.J. van Angeren, J. Kabbedijk et al. Managing software ecosystems through partnering, in [4], 85-102. Google Scholar; 4.S. Jansen, M. A. Cusumano, and S. Brinkkemper, Eds., Software Ecosystems: Analyzing and Managing Business Networks in the Software Industry. Cheltenham, UK: Edward Elgar, 2012. Google Scholar; 5.R. Frost, ""Jazz and the eclipse way of collaboration,"" IEEE Software, vol. 24, no. 6, 114-117, 2007. View Article  Google Scholar; 6.S. Jansen, S. Brinkkemper, and A. Finkelstein, Business Network Management as a Survival Strategy, in [4], 29-42. Google Scholar; 7.S. Jansen, S. Brinkkemper et al. ""Shades of gray: Opening up a software producing organization with the open software enterprise model,"" The Journal of Systems and Software, vol. 85, p. 1495-1510, 2012. CrossRef  Google Scholar; 8.L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, ""Leveraging transparency,"" IEEE Software, vol. 30, no. 1, 37-43, 2013. View Article  Google Scholar; 9.O. Barbosa, R. Pereira et al. A Systematic Mapping Study on Software Ecosystems through a Three-dimensional Perspective, in [4], 87-129. Google Scholar; 10.K. Manikas and K. M. Hansen, ""Software ecosystems: A systematic literature review,"" Systems and Software, vol. 86, 1294-1306, 2013. CrossRef  Google Scholar; 11.S. Fricker, ""Requirements Value Chains: Stakeholder Management and Requirements Engineering in Software Ecosystems,"" in Proc. of Requir. Eng.: Foundation for Softw. Quality, Essen, Germany, 2010, 60-66. CrossRef  Google Scholar; 12.S. Jansen, A. Finkelstein, and S. Brinkkemper, ""A sense of community: A research agenda for software ecosystems,"" in Proc. of Intl Conf. on Softw. Eng., 2009, NIER Track. View Article  Google Scholar; 13.D. Damian, S. Marczak, and I. Kwan, ""Collaboration Patterns and the Impact of Distance on Awareness in Requirements-Centred Social Networks,"" in Proc. of Intl Requir. Eng. Conf., 2007. View Article  Google Scholar; 14.K. Manikas and K. M. Hansen, ""Reviewing the Health of Software Ecosystems-A Conceptual Framework Proposal,"" in Proc. of Intl Wksp on Softw. Ecosys., Potsdam, Germany, 2013, 33-44. Google Scholar; 15.C. Castro-Herrera, C. Duan, et al. ""Using Data Mining and Recommender Systems to Facilitate Large-Scale, Open, and Inclusive Requirements Elicitation Processes,"" in Proc. of Intl Requir. Eng. Conf., Barcelona, Spain, 2008, 165-168. View Article  Google Scholar; 16.K. Schneider, ""Focusing Spontaneous Feedback to Support System Evolution,"" in Proc. of Intl Requir. Eng. Conf., Trento, 2011, 165-174. View Article  Google Scholar; 17.K. Schneider, S. Meyer, et al. ""Feedback in Context: Supporting the Evolution of IT-Ecosystems,"" in PROFES, 2010, 191-205. CrossRef  Google Scholar; 18.W. Maalej and A. K. Thurimella, ""Towards a Research Agenda for Recommendation Systems in Requirements Engineering,"" in Proc. of Intl Wksp on Managing Requir. Know., 2009, 32-39. View Article  Google Scholar; 19.O. Brill and E. Knauss, ""Structured and Unobtrusive Observation of Anonymous Users and their Context for Requirements Elicitation,"" in Proc. of Intl Requir. Eng. Conf., Trento, Italy, 2011, 175-184. View Article  Google Scholar; 20.O. Liskin, C. Herrmann, et al. ""Supporting acceptance testing in distributed software projects with integrated feedback systems: Experiences and requirements,"" in Proc. of Intl Conf. on Global Softw. Eng., 2012. View Article  Google Scholar; 21.N. Seyff, N. Maiden, et al. ""Exploring how to use scenarios to discover requirements,"" Requir. Eng., vol. 14, no. 2, 91-111, 2009. CrossRef  Google Scholar; 22.E. Knauss, D. Damian, et al. ""Detecting and Classifying Patterns of Requirements Clarifications,"" in Proc. of Intl Requir. Eng. Conf., Chicago, USA, 2012, 251-260. View Article  Google Scholar; 23.D. Damian and D. Zowghi, ""RE challenges in multi-site software development organisations,"" Requir. Eng., vol. 8, 149-160, 2003. CrossRef  Google Scholar; 24.D. Damian, ""Stakeholders in global requirements engineering: Lessons learned from practice,"" IEEE Software, vol. 24, 21-27, 2007. View Article  Google Scholar; 25.T. Tuunanen and M. Rossi, ""Engineering a Method for Wide Audience Requirements Elicitation and Integrating It to Software Development,"" in Proc. of Hawaii Intl Conf. on System Sciences, vol. 7, Jan. 2004. View Article  Google Scholar; 26.P. Runeson and M. Host, ""Guidelines for conducting and reporting case study research in software engineering,"" Emp. SE, (14) 131-154, 2009. CrossRef  Google Scholar; 27.V. Braun and V. Clarke, ""Using thematic analysis in psychology,"" Qualitative Research in Psychology, vol. 3, 86-94, 2006. CrossRef  Google Scholar; 28.G. Ruhe, Product Release Planning: Methods, Tools and Applications. CRC Press, 2010. CrossRef  Google Scholar; 29.S. Robertson and J. Robertson, Mastering the Requirements Process. Addison-Wesley, 1999. Google Scholar; 30.W. Scacchi, ""Understanding requirements for open source software,"" in Proc. of Design Reqts. Wksp. Springer LNBIP 14, 2009, p. 467-494. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Openness and requirements: Opportunities and tradeoffs in software ecosystems	https://ieeexplore.ieee.org/document/6912263	IEEE	nan; Pages; Year; Bibtex
484	TrustSE	On developers' personality in large-scale distributed projects: the case of the apache ecosystem	Large-scale distributed projects are typically the results of collective efforts performed by multiple developers, each one having a different personality. The study of developers' personalities has the potential of explaining their' behavior in various contexts. For example, the propensity to trust others, a critical factor to the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects.In this paper, we perform a quantitative analysis of developers' personality in open source software projects, intended as an extreme form of distributed projects in which no single organization controls the project. We mine ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects.We find that developers become over time more conscientious, agreeable, and neurotic. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open and more agreeable developers are more likely to become project contributors.1	team-building;  social and human aspects;  personality traits;  open source software;  large-scale distributed projects;  ecosystems;  apache; team-building, social and human aspects, personality traits, open source software, large-scale distributed projects, ecosystems, apache	Calefato, Fabio; Iaffaldano, Giuseppe; Lanubile, Filippo; Vasilescu, Bogdan	ICGSE '18: Proceedings of the 13th International Conference on Global Software Engineering	https://doi.org/10.1145/3196369.3196372		92-101	"""@inproceedings{10.1145/3196369.3196372,
    author = ""Calefato, Fabio and Iaffaldano, Giuseppe and Lanubile, Filippo and Vasilescu, Bogdan"",
    title = ""On developers' personality in large-scale distributed projects: the case of the apache ecosystem"",
    year = ""2018"",
    isbn = ""9781450357173"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3196369.3196372"",
    doi = ""10.1145/3196369.3196372"",
    abstract = ""Large-scale distributed projects are typically the results of collective efforts performed by multiple developers, each one having a different personality. The study of developers' personalities has the potential of explaining their' behavior in various contexts. For example, the propensity to trust others, a critical factor to the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects.In this paper, we perform a quantitative analysis of developers' personality in open source software projects, intended as an extreme form of distributed projects in which no single organization controls the project. We mine ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects.We find that developers become over time more conscientious, agreeable, and neurotic. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open and more agreeable developers are more likely to become project contributors.1"",
    booktitle = ""Proceedings of the 13th International Conference on Global Software Engineering"",
    pages = ""92-101"",
    numpages = ""10"",
    keywords = ""team-building, social and human aspects, personality traits, open source software, large-scale distributed projects, ecosystems, apache"",
    location = ""Gothenburg, Sweden"",
    series = ""ICGSE '18""
}
"""	Excluded	Excluded				2	ACM		On Developers' Personality in Large-Scale Distributed Projects: The Case of the Apache Ecosystem	https://doi.org/10.1145/3196369.3196372	Association for Computing Machinery	nan; References; Link
485	TrustSE	Hackers vs. Testers: A Comparison of Software Vulnerability Discovery Processes	Identifying security vulnerabilities in software is a critical task that requires significant human effort. Currently, vulnerability discovery is often the responsibility of software testers before release and white-hat hackers (often within bug bounty programs) afterward. This arrangement can be ad-hoc and far from ideal; for example, if testers could identify more vulnerabilities, software would be more secure at release time. Thus far, however, the processes used by each group - and how they compare to and interact with each other - have not been well studied. This paper takes a first step toward better understanding, and eventually improving, this ecosystem: we report on a semi-structured interview study (n=25) with both testers and hackers, focusing on how each group finds vulnerabilities, how they develop their skills, and the challenges they face. The results suggest that hackers and testers follow similar processes, but get different results due largely to differing experiences and therefore different underlying knowledge of security concepts. Based on these results, we provide recommendations to support improved security training for testers, better communication between hackers and developers, and smarter bug bounty policies to motivate hacker participation.	Computer hacking;Computer bugs;Software;Interviews;Tools;Sociology;interview study;software vulnerabilities;vulnerability discovery;software testing;usable security;security workers; Computer hacking; Computer bugs; Software; Interviews; Tools; Sociology; interview study; software vulnerabilities; vulnerability discovery; software testing; usable security; security workers	Votipka, Daniel; Stevens, Rock; Redmiles, Elissa; Hu, Jeremy; Mazurek, Michelle		https://doi.org/10.1109/SP.2018.00003		374-391	"""@INPROCEEDINGS{8418614,
    author = ""Votipka, Daniel and Stevens, Rock and Redmiles, Elissa and Hu, Jeremy and Mazurek, Michelle"",
    booktitle = ""2018 IEEE Symposium on Security and Privacy (SP)"",
    title = ""Hackers vs. Testers: A Comparison of Software Vulnerability Discovery Processes"",
    year = ""2018"",
    volume = """",
    number = """",
    pages = ""374-391"",
    abstract = ""Identifying security vulnerabilities in software is a critical task that requires significant human effort. Currently, vulnerability discovery is often the responsibility of software testers before release and white-hat hackers (often within bug bounty programs) afterward. This arrangement can be ad-hoc and far from ideal; for example, if testers could identify more vulnerabilities, software would be more secure at release time. Thus far, however, the processes used by each group - and how they compare to and interact with each other - have not been well studied. This paper takes a first step toward better understanding, and eventually improving, this ecosystem: we report on a semi-structured interview study (n=25) with both testers and hackers, focusing on how each group finds vulnerabilities, how they develop their skills, and the challenges they face. The results suggest that hackers and testers follow similar processes, but get different results due largely to differing experiences and therefore different underlying knowledge of security concepts. Based on these results, we provide recommendations to support improved security training for testers, better communication between hackers and developers, and smarter bug bounty policies to motivate hacker participation."",
    keywords = ""Computer hacking;Computer bugs;Software;Interviews;Tools;Sociology;interview study;software vulnerabilities;vulnerability discovery;software testing;usable security;security workers"",
    doi = ""10.1109/SP.2018.00003"",
    ISSN = ""2375-1207"",
    month = ""May""
}
"""	Excluded	Excluded				2	Scopus Signed In		A survey on technical threat intelligence in the age of sophisticated cyber attacks	https://www.scopus.com/record/display.uri?eid=2-s2.0-85032854895&origin=resultslist&sort=r-f&src=s&sid=52c39535cc29d3c71b1662417a669530&sot=b&sdt=b&s=TITLE%28a+survey+on+technical+threat+intelligence+in+the+age+of+sophisticated+cyber+attacks%29&sl=90&sessionSearchId=52c39535cc29d3c71b1662417a669530&relpos=0		nan; Venue; References; Publisher
486	TrustSE	Selection of third party software in Off-The-Shelf-based software development-An interview study with industrial practitioners	The success of software development using third party components highly depends on the ability to select a suitable component for the intended application. The evidence shows that there is limited knowledge about current industrial OTS selection practices. As a result, there is often a gap between theory and practice, and the proposed methods for supporting selection are rarely adopted in the industrial practice. This paper's goal is to investigate the actual industrial practice of component selection in order to provide an initial empirical basis that allows the reconciliation of research and industrial endeavors. The study consisted of semi-structured interviews with 23 employees from 20 different software-intensive companies that mostly develop web information system applications. It provides qualitative information that help to further understand these practices, and emphasize some aspects that have been overlooked by researchers. For instance, although the literature claims that component repositories are important for locating reusable components: these are hardly used in industrial practice. Instead, other resources that have not received considerable attention are used with this aim. Practices and potential market niches for software-intensive companies have been also identified. The results are valuable from both the research and the industrial perspectives as they provide a basis for formulating well-substantiated hypotheses and more effective improvement strategies.	Software engineering; Software reuse; Empirical study; Off-The-Shelf-based software development; Component selection; Software engineering;  Software reuse;  Empirical study;  Off-The-Shelf-based software development;  Component selection	Ayala, Claudia; Hauge, Oyvind; Conradi, Reidar; Franch, Xavier; Li, Jingyue	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2010.10.019		620-637	"""@article{WOS:000288142500008,
    Author = ""Ayala, Claudia and Hauge, Oyvind and Conradi, Reidar and Franch, Xavier and Li, Jingyue"",
    Title = ""Selection of third party software in Off-The-Shelf-based software development-An interview study with industrial practitioners"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2011"",
    Volume = ""84"",
    Number = ""4, SI"",
    Pages = ""620-637"",
    Month = ""APR"",
    Abstract = ""The success of software development using third party components highly depends on the ability to select a suitable component for the intended application. The evidence shows that there is limited knowledge about current industrial OTS selection practices. As a result, there is often a gap between theory and practice, and the proposed methods for supporting selection are rarely adopted in the industrial practice. This paper's goal is to investigate the actual industrial practice of component selection in order to provide an initial empirical basis that allows the reconciliation of research and industrial endeavors. The study consisted of semi-structured interviews with 23 employees from 20 different software-intensive companies that mostly develop web information system applications. It provides qualitative information that help to further understand these practices, and emphasize some aspects that have been overlooked by researchers. For instance, although the literature claims that component repositories are important for locating reusable components: these are hardly used in industrial practice. Instead, other resources that have not received considerable attention are used with this aim. Practices and potential market niches for software-intensive companies have been also identified. The results are valuable from both the research and the industrial perspectives as they provide a basis for formulating well-substantiated hypotheses and more effective improvement strategies. (C) 2010 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Ayala, C (Corresponding Author), Tech Univ Catalunya, UPC Campus Nord Omega, Barcelona 08034, Spain. Ayala, Claudia; Franch, Xavier, Tech Univ Catalunya, Barcelona 08034, Spain. Hauge, Oyvind; Conradi, Reidar, Norwegian Univ Sci \\& Technol, N-7491 Trondheim, Norway. Li, Jingyue, DNV Res \\& Innovat, N-1363 Hovik, Norway."",
    DOI = ""10.1016/j.jss.2010.10.019"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software engineering; Software reuse; Empirical study; Off-The-Shelf-based software development; Component selection"",
    Keywords-Plus = ""COMPONENTS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""cayala@essi.upc.edu hauge@idi.ntnu.no conradi@idi.ntnu.no franch@essi.upc.edu jingyue.li@dnv.com"",
    Affiliations = ""Universitat Politecnica de Catalunya; Norwegian University of Science \\& Technology (NTNU)"",
    ResearcherID-Numbers = ""Franch, Xavier/A-8588-2008"",
    ORCID-Numbers = ""Franch, Xavier/0000-0001-9733-8830"",
    Funding-Acknowledgement = ""ERCIM; Spanish project {[}TIN2007-64753]"",
    Funding-Text = ""We thank all people that participated in piloting an early version of the interview guide and the interview participants who took time from their workdays to participate in our interviews. Claudia Ayala's work was mostly carried out during the tenure of an ERCIM Alain Bensoussan Postdoctoral Fellowship. This work has been partially supported by the Spanish project ref. TIN2007-64753."",
    Number-of-Cited-References = ""58"",
    Times-Cited = ""23"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""2"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""731XA"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000288142500008"",
    OA = ""Green Published"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Web of Science		Selection of third party software in Off-The-Shelf-based software development—An interview study with industrial practitioners	https://doi.org/10.1016/j.jss.2010.10.019	ELSEVIER SCIENCE INC	nan; References; Link
487	TrustSE	Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review	Context: Component-based software systems require decisions on component origins for acquiring components. A component origin is an alternative of where to get a component from. Objective: To identify factors that could influence the decision to choose among different component origins and solutions for decision-making (For example, optimization) in the literature. Method: A systematic review study of peer-reviewed literature has been conducted. Results: In total we included 24 primary studies. The component origins compared were mainly focused on in-house vs. COTS and COTS vs. OSS. We identified 11 factors affecting or influencing the decision to select a component origin. When component origins were compared, there was little evidence on the relative (either positive or negative) effect of a component origin on the factor. Most of the solutions were proposed for in-house vs. COTS selection and time, cost and reliability were the most considered factors in the solutions. Optimization models were the most commonly proposed technique used in the solutions. Conclusion: The topic of choosing component origins is a green field for research, and in great need of empirical comparisons between the component origins, as well of how to decide between different combinations of them.	OSS; COTS; In-house development; Outsourcing; Decision-making; Component-based software engineering; OSS;  COTS;  In-house development;  Outsourcing;  Decision-making;  Component-based software engineering	Badampudi, Deepika; Wohlin, Claes; Petersen, Kai	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2016.07.027		105-124	"""@article{WOS:000384864500008,
    Author = ""Badampudi, Deepika and Wohlin, Claes and Petersen, Kai"",
    Title = ""Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2016"",
    Volume = ""121"",
    Pages = ""105-124"",
    Month = ""NOV"",
    Abstract = ""Context: Component-based software systems require decisions on component origins for acquiring components. A component origin is an alternative of where to get a component from. Objective: To identify factors that could influence the decision to choose among different component origins and solutions for decision-making (For example, optimization) in the literature. Method: A systematic review study of peer-reviewed literature has been conducted. Results: In total we included 24 primary studies. The component origins compared were mainly focused on in-house vs. COTS and COTS vs. OSS. We identified 11 factors affecting or influencing the decision to select a component origin. When component origins were compared, there was little evidence on the relative (either positive or negative) effect of a component origin on the factor. Most of the solutions were proposed for in-house vs. COTS selection and time, cost and reliability were the most considered factors in the solutions. Optimization models were the most commonly proposed technique used in the solutions. Conclusion: The topic of choosing component origins is a green field for research, and in great need of empirical comparisons between the component origins, as well of how to decide between different combinations of them. (C) 2016 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Badampudi, D (Corresponding Author), Blekinge Inst Technol, Karlskrona, Sweden. Badampudi, Deepika; Wohlin, Claes; Petersen, Kai, Blekinge Inst Technol, Karlskrona, Sweden."",
    DOI = ""10.1016/j.jss.2016.07.027"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""OSS; COTS; In-house development; Outsourcing; Decision-making; Component-based software engineering"",
    Keywords-Plus = ""FRAMEWORK"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""deepika.badampudi@bth.se claes.wohlin@bth.se kai.petersen@bth.se"",
    Affiliations = ""Blekinge Institute Technology"",
    ORCID-Numbers = ""Petersen, Kai/0000-0002-1532-8223"",
    Funding-Acknowledgement = ""Knowledge Foundation in Sweden {[}20140218]"",
    Funding-Text = ""The work is partially supported by a research grant for the ORION project (reference number 20140218) from The Knowledge Foundation in Sweden."",
    Number-of-Cited-References = ""58"",
    Times-Cited = ""40"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""20"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""DY1OO"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000384864500008"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review	https://www.webofscience.com/wos/woscc/full-record/WOS:000384864500008	ELSEVIER SCIENCE INC	nan; References
488	TrustSE	Forecasting IT security vulnerabilities - An empirical analysis	"Today, organizations must deal with a plethora of IT security threats and to ensure smooth and uninterrupted business operations, firms are challenged to predict the volume of IT security vulnerabilities and allocate resources for fixing them. This challenge requires decision makers to assess which system or software packages are prone to vulnerabilities, how many post-release vulnerabilities can be expected to occur during a certain period of time, and what impact exploits might have. Substantial research has been dedicated to techniques that analyze source code and detect security vulnerabilities. However, only limited research has focused on forecasting security vulnerabilities that are detected and reported after the release of software. To address this shortcoming, we apply established methodologies which are capable of forecasting events exhibiting specific time series characteristics of security vulnerabilities, i.e., rareness of occurrence, volatility, non-stationarity, and seasonality. Based on a dataset taken from the National Vulnerability Database (NVD), we use the Mean Absolute Error (MAE) and Root Mean Square Error (RMSE) to measure the forecasting accuracy of single, double, and triple exponential smoothing methodologies, Croston's methodology, ARIMA, and a neural network-based approach. We analyze the impact of the applied forecasting methodology on the prediction accuracy with regard to its robustness along the dimensions of the examined system and software package ""operating systems"", ""browsers"" and ""office solutions"" and the applied metrics. To the best of our knowledge, this study is the first to analyze the effect of forecasting methodologies and to apply metrics that are suitable in this context. Our results show that the optimal forecasting methodology depends on the software or system package, as some methodologies perform poorly in the context of IT security vulnerabilities, that absolute metrics can cover the actual prediction error precisely, and that the prediction accuracy is robust within the two applied forecasting-error metrics."	Decision making; Errors; Mean square error; Network security; Security systems; Software packages; Time series; Actual prediction error; Exponential smoothing; Forecasting accuracy; National vulnerability database; Network-based approach; Prediction accuracy; Root mean square errors; Security vulnerabilities; Forecasting; Decision making;  Errors;  Mean square error;  Network security;  Security systems;  Software packages;  Time series;  Actual prediction error;  Exponential smoothing;  Forecasting accuracy;  National vulnerability database;  Network-based approach;  Prediction accuracy;  Root mean square errors;  Security vulnerabilities;  Forecasting	Yasasin, Emrah; Prester, Julian; Wagner, Gerit; Schryen, Guido	Computers and Security	https://doi.org/10.1016/j.cose.2019.101610			"""@ARTICLE{Yasasin2020,
    author = ""Yasasin, Emrah and Prester, Julian and Wagner, Gerit and Schryen, Guido"",
    title = ""Forecasting IT security vulnerabilities - An empirical analysis"",
    year = ""2020"",
    journal = ""Computers and Security"",
    volume = ""88"",
    doi = ""10.1016/j.cose.2019.101610"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072575374\&doi=10.1016\%2fj.cose.2019.101610\&partnerID=40\&md5=46858a097358255fd410447541faeb50"",
    affiliations = ""Department of Management Information Systems, University of Regensburg, Universitatsstrasse 31, Regensburg, 93053, Germany; School of Information Systems, UNSW Business School, Kensington, 2052, NSW, Australia; Faculty of Business Administration and Economics, Paderborn University, Warburger Strasse 100, Paderborn, 33098, Germany"",
    abstract = ""Today, organizations must deal with a plethora of IT security threats and to ensure smooth and uninterrupted business operations, firms are challenged to predict the volume of IT security vulnerabilities and allocate resources for fixing them. This challenge requires decision makers to assess which system or software packages are prone to vulnerabilities, how many post-release vulnerabilities can be expected to occur during a certain period of time, and what impact exploits might have. Substantial research has been dedicated to techniques that analyze source code and detect security vulnerabilities. However, only limited research has focused on forecasting security vulnerabilities that are detected and reported after the release of software. To address this shortcoming, we apply established methodologies which are capable of forecasting events exhibiting specific time series characteristics of security vulnerabilities, i.e., rareness of occurrence, volatility, non-stationarity, and seasonality. Based on a dataset taken from the National Vulnerability Database (NVD), we use the Mean Absolute Error (MAE) and Root Mean Square Error (RMSE) to measure the forecasting accuracy of single, double, and triple exponential smoothing methodologies, Croston's methodology, ARIMA, and a neural network-based approach. We analyze the impact of the applied forecasting methodology on the prediction accuracy with regard to its robustness along the dimensions of the examined system and software package ""operating systems"", ""browsers"" and ""office solutions"" and the applied metrics. To the best of our knowledge, this study is the first to analyze the effect of forecasting methodologies and to apply metrics that are suitable in this context. Our results show that the optimal forecasting methodology depends on the software or system package, as some methodologies perform poorly in the context of IT security vulnerabilities, that absolute metrics can cover the actual prediction error precisely, and that the prediction accuracy is robust within the two applied forecasting-error metrics. (c) 2019 Elsevier Ltd"",
    author_keywords = ""Competition setup; Forecasting; Prediction; Security vulnerability; Time series"",
    keywords = ""Decision making; Errors; Mean square error; Network security; Security systems; Software packages; Time series; Actual prediction error; Exponential smoothing; Forecasting accuracy; National vulnerability database; Network-based approach; Prediction accuracy; Root mean square errors; Security vulnerabilities; Forecasting"",
    correspondence_address = ""E. Yasasin; Department of Management Information Systems, University of Regensburg, Regensburg, Universitatsstrasse 31, 93053, Germany; email: emrah.yasasin@wiwi.uni-regensburg.de"",
    publisher = ""Elsevier Ltd"",
    issn = ""01674048"",
    coden = ""CPSED"",
    language = ""English"",
    abbrev_source_title = ""Comput Secur"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 34; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Forecasting IT security vulnerabilities – An empirical analysis	https://doi.org/10.1016/j.cose.2019.101610	Elsevier Ltd	nan; References; Pages; Link
489	TrustSE	Dual-use open source security software in organizations - Dilemma: Help or hinder?	Dual-use technology can be used for both peaceful and harmful purposes. While the new type of anonymous, invisible and devastating security threats (malware, worms and viruses) shape contemporary warfare, organizations are challenged by the undefined risks of open source dual-use security tools. The dual-use dilemma is very important. It has not received adequate academic focus: questions such as increased or decreased risk, facilitation of security breaches, and the impact on security awareness have not been clarified or studied. This research closes existing gaps by studying the open source dual-use security software challenges that organizations should consider when using this technology. We utilize a triangulation approach with three independent data sources to conduct a detailed analysis of this phenomenon. Our study has found that the dual-use technology has both positive and negative effects on information system security. The ease of use of the dual-use security software facilitates security breaches and enterprises are using vulnerable open source security libraries and frameworks to develop their own in-house applications. On a positive note, open source dual-use security software is used as a powerful defense tool against attackers. Our study also found that security awareness is the key to maintaining the right level of information security risk in the dual-use context. Dual-use can also be of a great help to organizations in leveraging their information system security.	Dual-use technology; Open source security tools; Information security; Organizational security; OSS; Trust; Dual-use technology;  Open source security tools;  Information security;  Organizational security;  OSS;  Trust	Silic, Mario	COMPUTERS \& SECURITY	https://doi.org/10.1016/j.cose.2013.09.003		386-395	"""@article{WOS:000329007400020,
    Author = ""Silic, Mario"",
    Title = ""Dual-use open source security software in organizations - Dilemma: Help or hinder?"",
    Journal = ""COMPUTERS \\& SECURITY"",
    Year = ""2013"",
    Volume = ""39"",
    Number = ""B"",
    Pages = ""386-395"",
    Month = ""NOV"",
    Abstract = ""Dual-use technology can be used for both peaceful and harmful purposes. While the new type of anonymous, invisible and devastating security threats (malware, worms and viruses) shape contemporary warfare, organizations are challenged by the undefined risks of open source dual-use security tools. The dual-use dilemma is very important. It has not received adequate academic focus: questions such as increased or decreased risk, facilitation of security breaches, and the impact on security awareness have not been clarified or studied. This research closes existing gaps by studying the open source dual-use security software challenges that organizations should consider when using this technology. We utilize a triangulation approach with three independent data sources to conduct a detailed analysis of this phenomenon. Our study has found that the dual-use technology has both positive and negative effects on information system security. The ease of use of the dual-use security software facilitates security breaches and enterprises are using vulnerable open source security libraries and frameworks to develop their own in-house applications. On a positive note, open source dual-use security software is used as a powerful defense tool against attackers. Our study also found that security awareness is the key to maintaining the right level of information security risk in the dual-use context. Dual-use can also be of a great help to organizations in leveraging their information system security. (C) 2013 Elsevier Ltd. All rights reserved."",
    Publisher = ""ELSEVIER ADVANCED TECHNOLOGY"",
    Address = ""OXFORD FULFILLMENT CENTRE THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Silic, M (Corresponding Author), Univ St Gallen, Inst Informat Management, Mueller Friedberg Str 8, CH-9000 St Gallen, Switzerland. Univ St Gallen, Inst Informat Management, CH-9000 St Gallen, Switzerland."",
    DOI = ""10.1016/j.cose.2013.09.003"",
    ISSN = ""0167-4048"",
    EISSN = ""1872-6208"",
    Keywords = ""Dual-use technology; Open source security tools; Information security; Organizational security; OSS; Trust"",
    Keywords-Plus = ""TECHNOLOGY; MOTIVATION; ACCEPTANCE; AWARENESS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems"",
    Author-Email = ""mario.silic@student.unisg.ch"",
    Affiliations = ""University of St Gallen"",
    ORCID-Numbers = ""Silic, Mario/0009-0009-4141-991X"",
    Number-of-Cited-References = ""44"",
    Times-Cited = ""10"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""23"",
    Journal-ISO = ""Comput. Secur."",
    Doc-Delivery-Number = ""280CX"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000329007400020"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Dual-use open source security software in organizations – Dilemma: Help or hinder?	https://doi.org/10.1016/j.cose.2013.09.003	ELSEVIER ADVANCED TECHNOLOGY	nan; References; Link
490	TrustSE	Quality assurance in software ecosystems: A systematic literature mapping and research agenda	Software ecosystems are becoming a common model for software development in which different actors cooperate around a shared platform. However, it is not clear what the implications are on software quality when moving from a traditional approach to an ecosystem, and this is becoming increasingly important as ecosystems emerge in critical domains such as embedded applications. Therefore, this paper investigates the challenges related to quality assurance in software ecosystems, and identifies what approaches have been proposed in the literature. The research method used is a systematic literature mapping, which however only resulted in a small set of six papers. The literature findings are complemented with a constructive approach where areas are identified that merit further research, resulting in a set of research topics that form a research agenda for quality assurance in software ecosystems. The agenda spans the entire system life-cycle, and focuses on challenges particular to an ecosystem setting, which are mainly the results of the interactions across organizational borders, and the dynamic system integration being controlled by the users.	Software ecosystems; Quality; Verification; Testing; Software ecosystems;  Quality;  Verification;  Testing	Axelsson, Jakob; Skoglund, Mats	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2015.12.020		69-81	"""@article{WOS:000370914300005,
    Author = ""Axelsson, Jakob and Skoglund, Mats"",
    Title = ""Quality assurance in software ecosystems: A systematic literature mapping and research agenda"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2016"",
    Volume = ""114"",
    Pages = ""69-81"",
    Month = ""APR"",
    Abstract = ""Software ecosystems are becoming a common model for software development in which different actors cooperate around a shared platform. However, it is not clear what the implications are on software quality when moving from a traditional approach to an ecosystem, and this is becoming increasingly important as ecosystems emerge in critical domains such as embedded applications. Therefore, this paper investigates the challenges related to quality assurance in software ecosystems, and identifies what approaches have been proposed in the literature. The research method used is a systematic literature mapping, which however only resulted in a small set of six papers. The literature findings are complemented with a constructive approach where areas are identified that merit further research, resulting in a set of research topics that form a research agenda for quality assurance in software ecosystems. The agenda spans the entire system life-cycle, and focuses on challenges particular to an ecosystem setting, which are mainly the results of the interactions across organizational borders, and the dynamic system integration being controlled by the users. (c) 2015 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Axelsson, J (Corresponding Author), SICS, Software \\& Syst Engn Lab, POB 1263, SE-16429 Kista, Sweden. Axelsson, Jakob; Skoglund, Mats, SICS, Software \\& Syst Engn Lab, POB 1263, SE-16429 Kista, Sweden."",
    DOI = ""10.1016/j.jss.2015.12.020"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software ecosystems; Quality; Verification; Testing"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""jakob.axelsson@sics.se"",
    Affiliations = ""RISE Research Institutes of Sweden"",
    ResearcherID-Numbers = ""Axelsson, Jakob/AAE-3249-2020"",
    ORCID-Numbers = ""Axelsson, Jakob/0000-0002-3986-1196"",
    Funding-Acknowledgement = ""Vinnova; Swedish Agency for Innovation Systems {[}2013-03492]; consortium of Swedish companies; Vinnova {[}2013-03492] Funding Source: Vinnova"",
    Funding-Text = ""This research has been supported by Vinnova, the Swedish Agency for Innovation Systems (grant no. 2013-03492), and a consortium of Swedish companies."",
    Number-of-Cited-References = ""36"",
    Times-Cited = ""36"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""28"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""DE8VH"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000370914300005"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Quality assurance in software ecosystems: A systematic literature mapping and research agenda	https://www.webofscience.com/wos/woscc/full-record/WOS:000370914300005	ELSEVIER SCIENCE INC	nan; References
491	TrustSE	What happens when software developers are (un)happy	The growing literature on affect among software developers mostly reports on the linkage between happiness, software quality, and developer productivity. Understanding happiness and unhappiness in all its components - positive and negative emotions and moods - is an attractive and important endeavor. Scholars in industrial and organizational psychology have suggested that understanding happiness and unhappiness could lead to cost-effective ways of enhancing working conditions, job performance, and to limiting the occurrence of psychological disorders. Our comprehension of the consequences of (un)happiness among developers is still too shallow, being mainly expressed in terms of development productivity and software quality. In this paper, we study what happens when developers are happy and unhappy while developing software. Qualitative data analysis of responses given by 317 questionnaire participants identified 42 consequences of unhappiness and 32 of happiness. We found consequences of happiness and unhappiness that are beneficial and detrimental for developers' mental well-being, the software development process, and the produced artifacts. Our classification scheme, available as open data enables new happiness research opportunities of cause-effect type, and it can act as a guideline for practitioners for identifying damaging effects of unhappiness and for fostering happiness on the job.	Behavioral software engineering; Developer experience; Human aspects; Happiness; Affect; Emotion; Behavioral software engineering;  Developer experience;  Human aspects;  Happiness;  Affect;  Emotion	Graziotin, Daniel; Fagerholm, Fabian; Wang, Xiaofeng; Abrahamsson, Pekka	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2018.02.041		32-47	"""@article{WOS:000430904500004,
    Author = ""Graziotin, Daniel and Fagerholm, Fabian and Wang, Xiaofeng and Abrahamsson, Pekka"",
    Title = ""What happens when software developers are (un)happy"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2018"",
    Volume = ""140"",
    Pages = ""32-47"",
    Month = ""JUN"",
    Abstract = ""The growing literature on affect among software developers mostly reports on the linkage between happiness, software quality, and developer productivity. Understanding happiness and unhappiness in all its components - positive and negative emotions and moods - is an attractive and important endeavor. Scholars in industrial and organizational psychology have suggested that understanding happiness and unhappiness could lead to cost-effective ways of enhancing working conditions, job performance, and to limiting the occurrence of psychological disorders. Our comprehension of the consequences of (un)happiness among developers is still too shallow, being mainly expressed in terms of development productivity and software quality. In this paper, we study what happens when developers are happy and unhappy while developing software. Qualitative data analysis of responses given by 317 questionnaire participants identified 42 consequences of unhappiness and 32 of happiness. We found consequences of happiness and unhappiness that are beneficial and detrimental for developers' mental well-being, the software development process, and the produced artifacts. Our classification scheme, available as open data enables new happiness research opportunities of cause-effect type, and it can act as a guideline for practitioners for identifying damaging effects of unhappiness and for fostering happiness on the job. (C) 2018 The Authors. Published by Elsevier Inc."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Fagerholm, F (Corresponding Author), Univ Helsinki, Dept Comp Sci, Helsinki, Finland. Fagerholm, F (Corresponding Author), Blekinge Inst Technol, Software Engn Res Lab Sweden, Karlskrona, Sweden. Graziotin, Daniel, Univ Stuttgart, Inst Software Technol, Stuttgart, Germany. Fagerholm, Fabian, Univ Helsinki, Dept Comp Sci, Helsinki, Finland. Fagerholm, Fabian, Blekinge Inst Technol, Software Engn Res Lab Sweden, Karlskrona, Sweden. Wang, Xiaofeng, Free Univ Bozen Bolzano, Fac Comp Sci, Bolzano, Italy. Abrahamsson, Pekka, Univ Jyvaskyla, Fac Informat Technol, Jyvaskyla, Finland."",
    DOI = ""10.1016/j.jss.2018.02.041"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Behavioral software engineering; Developer experience; Human aspects; Happiness; Affect; Emotion"",
    Keywords-Plus = ""MOOD; EMOTIONS; CREATIVITY; HAPPINESS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""daniel.graziotin@informatik.uni-stuttgart.de fabian.fagerholm@helsinki.fi xiaofeng.wang@unibz.it pekka.abrahamsson@jyu.fi"",
    Affiliations = ""University of Stuttgart; University of Helsinki; Blekinge Institute Technology; Free University of Bozen-Bolzano; University of Jyvaskyla"",
    ResearcherID-Numbers = ""Hu, Shaolin/N-1791-2018 Fagerholm, Fabian/B-1952-2015"",
    ORCID-Numbers = ""Fagerholm, Fabian/0000-0002-7298-3021 Graziotin, Daniel/0000-0002-9107-7681"",
    Funding-Acknowledgement = ""Alexander von Humboldt (AvH) Foundation"",
    Funding-Text = ""The authors would like to thank all those who participated in this study. Daniel Graziotin has been supported by the Alexander von Humboldt (AvH) Foundation."",
    Number-of-Cited-References = ""59"",
    Times-Cited = ""108"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""25"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""GE0LE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000430904500004"",
    OA = ""Green Submitted, Green Published, hybrid, Green Accepted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		What happens when software developers are (un)happy	https://www.webofscience.com/wos/woscc/full-record/WOS:000430904500004	ELSEVIER SCIENCE INC	nan; References
492	TrustSE	A trusted feature aggregator federated learning for distributed malicious attack detection	With the rapid development of IoT technology, millions of physical devices embedded with electronics or software are put into regular production. Each IoT device is connected to the user's life and property privacy. Without a credible intrusion detection and defense mechanism installed on the device, it may be attacked by hackers, such as monitoring events of home cameras and control of smart devices. These attack events will have a serious impact on users' production and life. This paper proposes a Blockchained-Federated Learning based cloud intrusion detection scheme. The scheme sends the local training parameters of the IoT intrusion alarm set to the cloud computing center for global prediction, and stores the model training process information and behavior on the blockchain. In order to solve the high probability of false alerts affecting the accuracy of the federated learning model, the scheme proposes an alert filter identification module. At the same time, through the erasure code-based blockchain storage solution, the traditional blockchain storage performance is improved to meet the storage needs of a large number of alert training data in real scenarios.	Blockchain; Digital storage; Electronics industry; Intrusion detection; Personal computing; Trusted computing; Defense mechanism; Global predictions; High probability; Intrusion detection scheme; Malicious attack; Physical devices; Storage performance; Storage solutions; Internet of things; Blockchain;  Digital storage;  Electronics industry;  Intrusion detection;  Personal computing;  Trusted computing;  Defense mechanism;  Global predictions;  High probability;  Intrusion detection scheme;  Malicious attack;  Physical devices;  Storage performance;  Storage solutions;  Internet of things	Hei, Xinhong; Yin, Xinyue; Wang, Yichuan; Ren, Ju; Zhu, Lei	Computers and Security	https://doi.org/10.1016/j.cose.2020.102033			"""@ARTICLE{Hei2020,
    author = ""Hei, Xinhong and Yin, Xinyue and Wang, Yichuan and Ren, Ju and Zhu, Lei"",
    title = ""A trusted feature aggregator federated learning for distributed malicious attack detection"",
    year = ""2020"",
    journal = ""Computers and Security"",
    volume = ""99"",
    doi = ""10.1016/j.cose.2020.102033"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090982865\&doi=10.1016\%2fj.cose.2020.102033\&partnerID=40\&md5=5c927ba22f60059e5ccb5de6677eaba7"",
    affiliations = ""Xi'an University of Technology School of Computer Science and Engineering, China"",
    abstract = ""With the rapid development of IoT technology, millions of physical devices embedded with electronics or software are put into regular production. Each IoT device is connected to the user's life and property privacy. Without a credible intrusion detection and defense mechanism installed on the device, it may be attacked by hackers, such as monitoring events of home cameras and control of smart devices. These attack events will have a serious impact on users' production and life. This paper proposes a Blockchained-Federated Learning based cloud intrusion detection scheme. The scheme sends the local training parameters of the IoT intrusion alarm set to the cloud computing center for global prediction, and stores the model training process information and behavior on the blockchain. In order to solve the high probability of false alerts affecting the accuracy of the federated learning model, the scheme proposes an alert filter identification module. At the same time, through the erasure code-based blockchain storage solution, the traditional blockchain storage performance is improved to meet the storage needs of a large number of alert training data in real scenarios. (c) 2020 Elsevier Ltd"",
    author_keywords = ""Blockchain; Cloud security; Federated learning; IoT; Privacy protection"",
    keywords = ""Blockchain; Digital storage; Electronics industry; Intrusion detection; Personal computing; Trusted computing; Defense mechanism; Global predictions; High probability; Intrusion detection scheme; Malicious attack; Physical devices; Storage performance; Storage solutions; Internet of things"",
    correspondence_address = ""Y. Wang; Xi'an University of Technology School of Computer Science and Engineering, China; email: chuan@xaut.edu.cn"",
    publisher = ""Elsevier Ltd"",
    issn = ""01674048"",
    coden = ""CPSED"",
    language = ""English"",
    abbrev_source_title = ""Comput Secur"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 51""
}
"""	Excluded	Excluded				2	Scopus Signed In		A trusted feature aggregator federated learning for distributed malicious attack detection	https://www.scopus.com/record/display.uri?eid=2-s2.0-85090982865&origin=resultslist&sort=r-f&src=s&sid=5b37be27ee32ebfdc879159d8bd63347&sot=b&sdt=b&s=TITLE%28a+trusted+feature+aggregator+federated+learning+for+distributed+malicious+attack+detection%29&sl=97&sessionSearchId=5b37be27ee32ebfdc879159d8bd63347&relpos=0	Elsevier Ltd	nan; References; Pages
493	TrustSE	Be more familiar with our enemies and pave the way forward: A review of the roles bugs played in software failures	There has been an increasing frequency of failures due to defective software that cost millions of dollars. Recent high profile incidents have drawn increased attention to the risks of failed software systems to the public. Yet aside from the Therac-25 case, very few incidents of software failure causing humans harm have been proven and widely reported. With increased government oversight and the expanded use of social networking for real time reporting of problems, we are only beginning to understand the potential for major injury or death related to software failures. However, debugging defective software can be costly and time consuming. Moreover, undetected bugs could induce great harm to the public when software systems are applied in safety-critical areas, such as consumer products, public infrastructure, transportation systems, etc. Therefore, it is vital that we remove these bugs as early as possible. To gain more understanding of the nature of these bugs, we review the reported software failures that have impacted the health, safety, and welfare of the public. A focus on lessons learned and implications for future software systems is also provided which acts as guidelines for engineers to improve the quality of their products and avoid similar failures from happening.	Accidents; Bugged software systems; Software failures; Mishaps; Lessons learned; Accidents;  Bugged software systems;  Software failures;  Mishaps;  Lessons learned	Wong, W. Eric; Li, Xuelin; Laplante, Philip A.	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2017.06.069		68-94	"""@article{WOS:000412614400005,
    Author = ""Wong, W. Eric and Li, Xuelin and Laplante, Philip A."",
    Title = ""Be more familiar with our enemies and pave the way forward: A review of the roles bugs played in software failures"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2017"",
    Volume = ""133"",
    Pages = ""68-94"",
    Month = ""NOV"",
    Abstract = ""There has been an increasing frequency of failures due to defective software that cost millions of dollars. Recent high profile incidents have drawn increased attention to the risks of failed software systems to the public. Yet aside from the Therac-25 case, very few incidents of software failure causing humans harm have been proven and widely reported. With increased government oversight and the expanded use of social networking for real time reporting of problems, we are only beginning to understand the potential for major injury or death related to software failures. However, debugging defective software can be costly and time consuming. Moreover, undetected bugs could induce great harm to the public when software systems are applied in safety-critical areas, such as consumer products, public infrastructure, transportation systems, etc. Therefore, it is vital that we remove these bugs as early as possible. To gain more understanding of the nature of these bugs, we review the reported software failures that have impacted the health, safety, and welfare of the public. A focus on lessons learned and implications for future software systems is also provided which acts as guidelines for engineers to improve the quality of their products and avoid similar failures from happening. (C) 2017 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Wong, WE (Corresponding Author), Univ Elect Sci \\& Technol China, Sch Comp Sci \\& Engn, Chengdu, Sichuan, Peoples R China. Wong, WE (Corresponding Author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA. Wong, W. Eric, Univ Elect Sci \\& Technol China, Sch Comp Sci \\& Engn, Chengdu, Sichuan, Peoples R China. Wong, W. Eric; Li, Xuelin, Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA. Laplante, Philip A., Penn State Univ, Software \\& Syst Engn, University Pk, PA 16802 USA."",
    DOI = ""10.1016/j.jss.2017.06.069"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Accidents; Bugged software systems; Software failures; Mishaps; Lessons learned"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""ewong@utdallas.edu"",
    Affiliations = ""University of Electronic Science \\& Technology of China; University of Texas System; University of Texas Dallas; Pennsylvania Commonwealth System of Higher Education (PCSHE); Pennsylvania State University; Pennsylvania State University - University Park"",
    ORCID-Numbers = ""Li, Xuelin/0000-0001-7204-0616"",
    Funding-Acknowledgement = ""Direct For Computer \\& Info Scie \\& Enginr; Division of Computing and Communication Foundations {[}1461149] Funding Source: National Science Foundation"",
    Number-of-Cited-References = ""122"",
    Times-Cited = ""66"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""25"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""FJ3EX"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000412614400005"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Be more familiar with our enemies and pave the way forward: A review of the roles bugs played in software failures	https://www.webofscience.com/wos/woscc/full-record/WOS:000412614400005	ELSEVIER SCIENCE INC	nan; References
494	TrustSE	Satisfaction and its correlates in agile software development	In this paper we address the topic of software development team members satisfaction with their development process. We present an in-depth analysis of the results of a nationwide survey about software development in Switzerland. We wanted to find out if satisfaction relates to the applied development method, and to the use of various practices, and impacts on business, team and software issues. We found that higher satisfaction is reported more by those using Agile development than with plan-driven processes. We explored the different perspectives of developers and those with a management role and found a high consistency of satisfaction between Agile developers and Agile management, and differences with those using working plan-driven methods. We found that certain practices and impacts have high correlations to satisfaction, and that collaborative processes are closely related to satisfaction. We then explored the relationship between satisfaction and various other perspectives. Our results in this analysis are principally descriptive, but we think they can be a relevant contribution to understand the challenges for everyone involved in Agile development.		Kropp, Martin; Meier, Andreas; Anslow, Craig; Biddle, Robert	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2020.110544			"""@article{WOS:000527289100003,
    Author = ""Kropp, Martin and Meier, Andreas and Anslow, Craig and Biddle, Robert"",
    Title = ""Satisfaction and its correlates in agile software development"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2020"",
    Volume = ""164"",
    Month = ""JUN"",
    Abstract = ""In this paper we address the topic of software development team members satisfaction with their development process. We present an in-depth analysis of the results of a nationwide survey about software development in Switzerland. We wanted to find out if satisfaction relates to the applied development method, and to the use of various practices, and impacts on business, team and software issues. We found that higher satisfaction is reported more by those using Agile development than with plan-driven processes. We explored the different perspectives of developers and those with a management role and found a high consistency of satisfaction between Agile developers and Agile management, and differences with those using working plan-driven methods. We found that certain practices and impacts have high correlations to satisfaction, and that collaborative processes are closely related to satisfaction. We then explored the relationship between satisfaction and various other perspectives. Our results in this analysis are principally descriptive, but we think they can be a relevant contribution to understand the challenges for everyone involved in Agile development. (C) 2020 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Biddle, R (Corresponding Author), Carleton Univ, Ottawa, ON, Canada. Kropp, Martin, Univ Appl Sci Northwestern Switzerland, Windisch, Switzerland. Meier, Andreas, Zurich Univ Appl Sci, Winterthur, Switzerland. Anslow, Craig, Victoria Univ Wellington, Wellington, New Zealand. Biddle, Robert, Carleton Univ, Ottawa, ON, Canada."",
    DOI = ""10.1016/j.jss.2020.110544"",
    Article-Number = ""110544"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords-Plus = ""JOB-SATISFACTION; TEAMWORK QUALITY; SUCCESS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""martin.kropp@fhnw.ch meea@zhaw.ch craig@ecs.vuw.ac.nz robert.biddle@carleton.ca"",
    Affiliations = ""FHNW University of Applied Sciences \\& Arts Northwestern Switzerland; Zurich University of Applied Sciences; Victoria University Wellington; Carleton University"",
    Funding-Acknowledgement = ""Swiss IT organizations swiss ICT; SWEN"",
    Funding-Text = ""We especially thank the study participants for their most valuable answers, the anonymous referees of this paper, and the Swiss IT organizations swiss ICT and SWEN for supporting and funding the study."",
    Number-of-Cited-References = ""32"",
    Times-Cited = ""13"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""LF2YS"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000527289100003"",
    DA = ""2024-10-22""
}
"""	Excluded	Excluded				2	Web of Science		Satisfaction and its correlates in agile software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000527289100003	ELSEVIER SCIENCE INC	nan; Keywords; References; Pages
495	TrustSE	Software evaluation problem situations	"Evaluating software is a complex decision aiding activity which requires the recognition of the problem situation in which the evaluation is requested, the establishment of a set of problem formulations which represent the client's ""problems"" and, for a specific problem formulation, the construction of an evaluation model which indicates how such an evaluation will be performed. In this paper the first two aspects of such a process are discussed, providing a partial list of software evaluation problem situations, how they are characterised and what problem formulations they allow. Moreover two real case studies, concerning software evaluation, are briefly presented and discussed under this point of view (how the problem is perceived and formulated)."	Computer software; Knowledge acquisition; Knowledge based systems; Problem solving; Problem formulation; Decision making; Computer software;  Knowledge acquisition;  Knowledge based systems;  Problem solving;  Problem formulation;  Decision making	Stamelos, Ioannis; Tsoukias, Alexis	European Journal of Operational Research	https://doi.org/10.1016/S0377-2217(02)00534-9	Basili, V.R.Applying the GQM paradigm in the experience factory(1995)Software Quality Assurance and Measurement, pp. 23-37.Cited 6 times.Fenton N. Whitty R. Iizuka Y. London: Thomson Computer Press; Beroggi, G.Decision modeling in policy management(1999)An Introduction to the Analytic Concepts.Cited 2 times.Dordrecht: Kluwer Academic; Blin, M.-J., Tsoukias, A.; Robillard, P.N.; Bouyssou, D., Marchant, Th., Perny, P., Pirlot, M., Tsoukias, A., Vincke, Ph.(2000)Evaluation and Decision Models: A Critical Perspective.Cited 443 times.Dordrecht: Kluwer Academic; Cardenas-Garcia, Sergio, Zelkowitz, Marvin V.; Giakoumakis, E.A., Xylomenos, G.; (1996)Information Technology - Software quality characteristics and sub-characteristics.Cited 2 times.ISO/IEC 9126-1; Kitchenham, Barbara; Kontio, Jyrki; Le Blanc, L., Jelassi, T.; Meskens, N.; Morisio, M., Tsoukias, A.; Mosley, V.; Park, K.S., Hwan Lim, C.; Paschetta, E., Tsoukias, A.; Poston, R.M., Sexton, M.P.; Roy, B.(1996)Multi-criteria Methodology for Decision Aiding.Cited 1667 times.Dordrecht: Kluwer Academic; Shepperd, M., Schofield, C.; Stamelos, I., Vlahavas, I., Refanidis, I., Tsoukias, A.; Tsoukias, A.Sur la generalisation des concepts de con-cordance et discordance en aide multicritre a la decision(1997)Memoire HDR, 117.Cited 6 times.Universite Paris Dauphine, appeared also as Document du LAMSADE; Vincke, Ph.(1992)Multicriteria decision aid.Cited 1064 times.New York: John Wiley; Vlahavas, I., Stamelos, I., Refanidis, I., Tsoukias, A.; Zahedi, F.	273 - 286	"""@ARTICLE{Stamelos2003273,
    author = ""Stamelos, Ioannis and Tsoukias, Alexis"",
    title = ""Software evaluation problem situations"",
    year = ""2003"",
    journal = ""European Journal of Operational Research"",
    volume = ""145"",
    number = ""2"",
    pages = ""273 - 286"",
    doi = ""10.1016/S0377-2217(02)00534-9"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-0037332893\&doi=10.1016\%2fS0377-2217\%2802\%2900534-9\&partnerID=40\&md5=a07909bb83da8b46d69b96b431ff6d44"",
    affiliations = ""Department of Computer Science, Aristotle University of Thessaloniki, 54006 Thessaloniki, Greece; LAMSADE, CNRS, Universite Paris Dauphine, 75775 Paris Cedex 16, France"",
    abstract = {Evaluating software is a complex decision aiding activity which requires the recognition of the problem situation in which the evaluation is requested, the establishment of a set of problem formulations which represent the client's ""problems"" and, for a specific problem formulation, the construction of an evaluation model which indicates how such an evaluation will be performed. In this paper the first two aspects of such a process are discussed, providing a partial list of software evaluation problem situations, how they are characterised and what problem formulations they allow. Moreover two real case studies, concerning software evaluation, are briefly presented and discussed under this point of view (how the problem is perceived and formulated). (c) 2002 Published by Elsevier Science B.V.},
    author_keywords = ""Multiple criteria methodology; Problem formulation; Software evaluation"",
    keywords = ""Computer software; Knowledge acquisition; Knowledge based systems; Problem solving; Problem formulation; Decision making"",
    correspondence_address = ""A. Tsoukias; LAMSADE, CNRS, Universite Paris Dauphine, 75775 Paris Cedex 16, France; email: tsoukias@lamsade.dauphine.fr"",
    publisher = ""Elsevier"",
    issn = ""03772217"",
    coden = ""EJORD"",
    language = ""English"",
    abbrev_source_title = ""Eur J Oper Res"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 29""
}
"""	Excluded	Excluded				2	Scopus Signed In		Software evaluation problem situations	https://www.scopus.com/record/display.uri?eid=2-s2.0-0037332893&origin=resultslist&sort=r-f&src=s&sid=cb8806e496846cc17e89a7adea9e3832&sot=b&sdt=b&s=TITLE%28software+evaluation+problem+situations%29&sl=45&sessionSearchId=cb8806e496846cc17e89a7adea9e3832&relpos=0	Elsevier	
496	TrustSE	A comparative study of challenges in integrating Open Source Software and Inner Source Software	"Context: Several large software-developing organizations have adopted Open Source Software development (OSSD) practices to develop in-house components that are subsequently integrated into products. This phenomenon is also known as ""Inner Source"". While there have been several reports of successful cases of this phenomenon, little is known about the challenges that practitioners face when integrating software that is developed in such a setting. Objective: The objective of this study was to shed light on challenges related to building products with components that have been developed within an Inner Source development environment. Method: Following an initial systematic literature review to generate seed category data constructs, we performed an in-depth exploratory case study in an organization that has a significant track record in the implementation of Inner Source. Data was gathered through semi-structured interviews with participants from a range of divisions across the organization. Interviews were transcribed and analyzed using qualitative data analysis techniques. Results: We have identified a number of challenges and approaches to address them, and compared the findings to challenges related to development with OSS products reported in the literature. We found that many challenges identified in the case study could be mapped to challenges related to integration of OSS. Conclusion: The results provide important insights into common challenges of developing with OSS and Inner Source and may help organizations to understand how to improve their software development practices by adopting certain OSSD practices. The findings also identify the areas that need further research."	Open systems; Software design; Software engineering; Challenges; Empirical studies; Inner Source; Qualitative data analysis; Semi structured interviews; Software developing organizations; Software development practices; Systematic literature review; Open source software; Open systems;  Software design;  Software engineering;  Challenges;  Empirical studies;  Inner Source;  Qualitative data analysis;  Semi structured interviews;  Software developing organizations;  Software development practices;  Systematic literature review;  Open source software	Stol, Klaas-Jan; Babar, Muhammad Ali; Avgeriou, Paris; Fitzgerald, Brian	Information and Software Technology	https://doi.org/10.1016/j.infsof.2011.06.007		1319 - 1336	"""@ARTICLE{Stol20111319,
    author = ""Stol, Klaas-Jan and Babar, Muhammad Ali and Avgeriou, Paris and Fitzgerald, Brian"",
    title = ""A comparative study of challenges in integrating Open Source Software and Inner Source Software"",
    year = ""2011"",
    journal = ""Information and Software Technology"",
    volume = ""53"",
    number = ""12"",
    pages = ""1319 - 1336"",
    doi = ""10.1016/j.infsof.2011.06.007"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-80053976132\&doi=10.1016\%2fj.infsof.2011.06.007\&partnerID=40\&md5=cea8b5c8e4344051753d40f1ae8bb7b1"",
    affiliations = ""Lero, Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland; IT University of Copenhagen, 2300, Copenhagen, Rued Langgaards Vej 7, Denmark; University of Groningen, Department of Mathematics and Computing Science, 9747 AG, Groningen, Nijenborgh 9, Netherlands"",
    abstract = {Context: Several large software-developing organizations have adopted Open Source Software development (OSSD) practices to develop in-house components that are subsequently integrated into products. This phenomenon is also known as ""Inner Source"". While there have been several reports of successful cases of this phenomenon, little is known about the challenges that practitioners face when integrating software that is developed in such a setting. Objective: The objective of this study was to shed light on challenges related to building products with components that have been developed within an Inner Source development environment. Method: Following an initial systematic literature review to generate seed category data constructs, we performed an in-depth exploratory case study in an organization that has a significant track record in the implementation of Inner Source. Data was gathered through semi-structured interviews with participants from a range of divisions across the organization. Interviews were transcribed and analyzed using qualitative data analysis techniques. Results: We have identified a number of challenges and approaches to address them, and compared the findings to challenges related to development with OSS products reported in the literature. We found that many challenges identified in the case study could be mapped to challenges related to integration of OSS. Conclusion: The results provide important insights into common challenges of developing with OSS and Inner Source and may help organizations to understand how to improve their software development practices by adopting certain OSSD practices. The findings also identify the areas that need further research. (c) 2011 Elsevier B.V. All rights reserved.},
    author_keywords = ""Case study; Challenges; Empirical studies; Inner Source; Open Source Software; Software development"",
    keywords = ""Open systems; Software design; Software engineering; Challenges; Empirical studies; Inner Source; Qualitative data analysis; Semi structured interviews; Software developing organizations; Software development practices; Systematic literature review; Open source software"",
    correspondence_address = ""K.J. Stol; Lero, Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland; email: klaas-jan.stol@lero.ie"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 62; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		A comparative study of challenges in integrating Open Source Software and Inner Source Software	https://www.scopus.com/record/display.uri?eid=2-s2.0-80053976132&origin=resultslist&sort=r-f&src=s&sid=c1c64747aaea3526d19ec4ebb2d2a6da&sot=b&sdt=b&s=TITLE%28a+comparative+study+of+challenges+in+integrating+open+source+software+and+inner+source+software%29&sl=102&sessionSearchId=c1c64747aaea3526d19ec4ebb2d2a6da&relpos=0	Elsevier B.V	nan; References
497	TrustSE	Explaining reputation assessments	Reputation is crucial to enabling human or software agents to select among alternative providers. Although several effective reputation assessment methods exist, they typically distil reputation into a numerical representation, with no accompanying explanation of the rationale behind the assessment. Such explanations would allow users or clients to make a richer assessment of providers, and tailor selection according to their preferences and current context. In this paper, we propose an approach to explain the rationale behind assessments from quantitative reputation models, by generating arguments that are combined to form explanations. Our approach adapts, extends and combines existing approaches for explaining decisions made using multi-attribute decision models in the context of reputation. We present example argument templates, and describe how to select their parameters using explanation algorithms. Our proposal was evaluated by means of a user study, which followed an existing protocol. Our results give evidence that although explanations present a subset of the information of trust scores, they are sufficient to equally evaluate providers recommended based on their trust score. Moreover, when explanation arguments reveal implicit model information, they are less persuasive than scores.	Numerical methods; Arguments; Explanation; Reputation; Trust; User study; Software agents; Numerical methods;  Arguments;  Explanation;  Reputation;  Trust;  User study;  Software agents	Nunes, Ingrid; Taylor, Phillip; Barakat, Lina; Griffiths, Nathan; Miles, Simon	International Journal of Human Computer Studies	https://doi.org/10.1016/j.ijhcs.2018.10.007		1 - 17	"""@ARTICLE{Nunes20191,
    author = ""Nunes, Ingrid and Taylor, Phillip and Barakat, Lina and Griffiths, Nathan and Miles, Simon"",
    title = ""Explaining reputation assessments"",
    year = ""2019"",
    journal = ""International Journal of Human Computer Studies"",
    volume = ""123"",
    pages = ""1 - 17"",
    doi = ""10.1016/j.ijhcs.2018.10.007"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056191497\&doi=10.1016\%2fj.ijhcs.2018.10.007\&partnerID=40\&md5=95cc4626bf2606db791d993104880fc2"",
    affiliations = ""Universidade Federal do Rio Grande do Sul (UFRGS), Porto Alegre, Brazil; TU Dortmund, Dortmund, Germany; University of Warwick, Coventry, United Kingdom; University of Essex, Colchester, United Kingdom; King's College London, London, United Kingdom"",
    abstract = ""Reputation is crucial to enabling human or software agents to select among alternative providers. Although several effective reputation assessment methods exist, they typically distil reputation into a numerical representation, with no accompanying explanation of the rationale behind the assessment. Such explanations would allow users or clients to make a richer assessment of providers, and tailor selection according to their preferences and current context. In this paper, we propose an approach to explain the rationale behind assessments from quantitative reputation models, by generating arguments that are combined to form explanations. Our approach adapts, extends and combines existing approaches for explaining decisions made using multi-attribute decision models in the context of reputation. We present example argument templates, and describe how to select their parameters using explanation algorithms. Our proposal was evaluated by means of a user study, which followed an existing protocol. Our results give evidence that although explanations present a subset of the information of trust scores, they are sufficient to equally evaluate providers recommended based on their trust score. Moreover, when explanation arguments reveal implicit model information, they are less persuasive than scores. (c) 2018"",
    author_keywords = ""Arguments; Explanation; Reputation; Trust; User study"",
    keywords = ""Numerical methods; Arguments; Explanation; Reputation; Trust; User study; Software agents"",
    correspondence_address = ""I. Nunes; Universidade Federal do Rio Grande do Sul (UFRGS), Porto Alegre, Brazil; email: ingridnunes@inf.ufrgs.br"",
    publisher = ""Academic Press"",
    issn = ""10715819"",
    coden = ""IHSTE"",
    language = ""English"",
    abbrev_source_title = ""Int J Hum Comput Stud"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 4; All Open Access, Green Open Access""
}
"""	Included	Included				2	Scopus Signed In		Explaining reputation assessments	https://www.scopus.com/record/display.uri?eid=2-s2.0-85056191497&origin=resultslist&sort=r-f&src=s&sid=8d0f9838b244f2ae380747169743e761&sot=b&sdt=b&s=TITLE%28explaining+reputation+assessments%29&sl=40&sessionSearchId=8d0f9838b244f2ae380747169743e761&relpos=0	Academic Press	nan; References
498	TrustSE	The reliability estimation, prediction and measuring of component-based software	Reliability is a key driver of safety-critical systems such as health-care systems and traffic controllers. It is also one of the most important quality attributes of the systems embedded into our surroundings, e.g. sensor networks that produce information for business processes. Therefore, the design decisions that have a great impact on the reliability of a software system, i.e. architecture and components, need to be thoroughly evaluated. This paper addresses software reliability evaluation during the design and implementation phases; it provides a coherent approach by combining both predicted and measured reliability values with heuristic estimates in order to facilitate a smooth reliability evaluation process. The approach contributes by integrating the component-level reliability evaluation activities (i.e. the heuristic reliability estimation, model-based reliability prediction and model-based reliability measuring of components) and the system-level reliability prediction activity to support the incremental and iterative development of reliable component-based software systems. The use of the developed reliability evaluation approach with the supporting tool chain is illustrated by a case study. The paper concludes with a summary of lessons learnt from the case studies.	Computer software selection and evaluation; Embedded systems; Estimation; Forecasting; Network architecture; Quality assurance; Sensor networks; ComponentBee; Evaluation; Prediction; Rap; Uml; Software reliability; Computer software selection and evaluation;  Embedded systems;  Estimation;  Forecasting;  Network architecture;  Quality assurance;  Sensor networks;  ComponentBee;  Evaluation;  Prediction;  Rap;  Uml;  Software reliability	Palviainen, Marko; Evesti, Antti; Ovaska, Eila	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2011.01.048		1054 - 1070	"""@ARTICLE{Palviainen20111054,
    author = ""Palviainen, Marko and Evesti, Antti and Ovaska, Eila"",
    title = ""The reliability estimation, prediction and measuring of component-based software"",
    year = ""2011"",
    journal = ""Journal of Systems and Software"",
    volume = ""84"",
    number = ""6"",
    pages = ""1054 - 1070"",
    doi = ""10.1016/j.jss.2011.01.048"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-79953717390\&doi=10.1016\%2fj.jss.2011.01.048\&partnerID=40\&md5=44c748f62acf038f4e5986ffc3bfa7d1"",
    affiliations = ""VTT Technical Research Centre of Finland, FIN 02044 Espoo, Vuorimiehentie 3, Finland"",
    abstract = ""Reliability is a key driver of safety-critical systems such as health-care systems and traffic controllers. It is also one of the most important quality attributes of the systems embedded into our surroundings, e.g. sensor networks that produce information for business processes. Therefore, the design decisions that have a great impact on the reliability of a software system, i.e. architecture and components, need to be thoroughly evaluated. This paper addresses software reliability evaluation during the design and implementation phases; it provides a coherent approach by combining both predicted and measured reliability values with heuristic estimates in order to facilitate a smooth reliability evaluation process. The approach contributes by integrating the component-level reliability evaluation activities (i.e. the heuristic reliability estimation, model-based reliability prediction and model-based reliability measuring of components) and the system-level reliability prediction activity to support the incremental and iterative development of reliable component-based software systems. The use of the developed reliability evaluation approach with the supporting tool chain is illustrated by a case study. The paper concludes with a summary of lessons learnt from the case studies. (c) 2011 Elsevier Inc. All rights reserved."",
    author_keywords = ""Architecture; ComponentBee; Evaluation; Prediction; Rap; Tool; Uml"",
    keywords = ""Computer software selection and evaluation; Embedded systems; Estimation; Forecasting; Network architecture; Quality assurance; Sensor networks; ComponentBee; Evaluation; Prediction; Rap; Uml; Software reliability"",
    correspondence_address = ""M. Palviainen; VTT Technical Research Centre of Finland, FIN 02044 Espoo, Vuorimiehentie 3, Finland; email: Marko.Palviainen@vtt.fi"",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 46""
}
"""	Excluded	Excluded				2	Scopus Signed In		The reliability estimation, prediction and measuring of component-based software	https://www.scopus.com/record/display.uri?eid=2-s2.0-79953717390&origin=resultslist&sort=r-f&src=s&sid=c330f7feb0ea352c32ef161e105fe317&sot=b&sdt=b&s=TITLE%28the+reliability+estimation+prediction+and+measuring+of+component+based+software%29&sl=86&sessionSearchId=c330f7feb0ea352c32ef161e105fe317&relpos=0		nan; References; Publisher
499	TrustSE	Characterizing and predicting blocking bugs in open source projects	As software becomes increasingly important, its quality becomes an increasingly important issue. Therefore, prior work focused on software quality and proposed many prediction models to identify the location of software bugs, to estimate their fixing-time, etc. However, one special type of severe bugs is blocking bugs. Blocking bugs are software bugs that prevent other bugs from being fixed. These blocking bugs may increase maintenance costs, reduce overall quality and delay the release of the software systems. In this paper, we study blocking-bugs in six open source projects and propose a model to predict them. Our goal is to help developers identify these blocking bugs early on. We collect the bug reports from the bug tracking systems of the projects, then we obtain 14 different factors related to, for example, the textual description of the bug, the location the bug is found in and the people involved with the bug. Based on these factors we build decision trees for each project to predict whether a bug will be a blocking bug or not. Then, we analyze these decision trees in order to determine which factors best indicate these blocking bugs. Our results show that our prediction models achieve F-measures of 15-42\%, which is a two- to four-fold improvement over the baseline random predictors. We also find that the most important factors in determining blocking bugs are the comment text, comment size, the number of developers in the CC list of the bug report and the reporter's experience. Our analysis shows that our models reduce the median time to identify a blocking bug by 3-18 days.	Code Metrics;  Post-release Defects;  Process Metrics; Code Metrics, Post-release Defects, Process Metrics	Valdivia Garcia, Harold; Shihab, Emad	MSR 2014: Proceedings of the 11th Working Conference on Mining Software Repositories	https://doi.org/10.1145/2597073.2597099		72-81	"""@inproceedings{10.1145/2597073.2597099,
    author = ""Valdivia Garcia, Harold and Shihab, Emad"",
    title = ""Characterizing and predicting blocking bugs in open source projects"",
    year = ""2014"",
    isbn = ""9781450328630"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2597073.2597099"",
    doi = ""10.1145/2597073.2597099"",
    abstract = ""As software becomes increasingly important, its quality becomes an increasingly important issue. Therefore, prior work focused on software quality and proposed many prediction models to identify the location of software bugs, to estimate their fixing-time, etc. However, one special type of severe bugs is blocking bugs. Blocking bugs are software bugs that prevent other bugs from being fixed. These blocking bugs may increase maintenance costs, reduce overall quality and delay the release of the software systems. In this paper, we study blocking-bugs in six open source projects and propose a model to predict them. Our goal is to help developers identify these blocking bugs early on. We collect the bug reports from the bug tracking systems of the projects, then we obtain 14 different factors related to, for example, the textual description of the bug, the location the bug is found in and the people involved with the bug. Based on these factors we build decision trees for each project to predict whether a bug will be a blocking bug or not. Then, we analyze these decision trees in order to determine which factors best indicate these blocking bugs. Our results show that our prediction models achieve F-measures of 15-42\\%, which is a two- to four-fold improvement over the baseline random predictors. We also find that the most important factors in determining blocking bugs are the comment text, comment size, the number of developers in the CC list of the bug report and the reporter's experience. Our analysis shows that our models reduce the median time to identify a blocking bug by 3-18 days."",
    booktitle = ""Proceedings of the 11th Working Conference on Mining Software Repositories"",
    pages = ""72-81"",
    numpages = ""10"",
    keywords = ""Code Metrics, Post-release Defects, Process Metrics"",
    location = ""Hyderabad, India"",
    series = ""MSR 2014""
}
"""	Excluded	Excluded				2	ACM		Characterizing and predicting blocking bugs in open source projects	https://doi.org/10.1145/2597073.2597099	Association for Computing Machinery	nan; References; Link
500	TrustSE	Open source software - an evaluation	The success of Linux and Apache has strengthened the opinion that the open source paradigm is one of the most promising strategies to enhance the maturity, quality, and efficiency of software development activities. This observation, however, has not been discussed in much detail and critically addressed by the software engineering community. Most of the claims associated with open source appear to be weakly motivated and articulated. For this reason, this paper proposes some qualitative reflections and observations on the nature of open source software and on the most popular and important claims associated with the open source approach. The ultimate goal of the paper is to identify the concepts and intuitions that are really peculiar to open source, and to distinguish them from features and aspects that can be equally applied to or found in proprietary software.		Fuggetta, A	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/S0164-1212(02)00065-1		77-90	"""@article{WOS:000183505400008,
    Author = ""Fuggetta, A"",
    Title = ""Open source software - an evaluation"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2003"",
    Volume = ""66"",
    Number = ""1"",
    Pages = ""77-90"",
    Month = ""APR 15"",
    Abstract = ""The success of Linux and Apache has strengthened the opinion that the open source paradigm is one of the most promising strategies to enhance the maturity, quality, and efficiency of software development activities. This observation, however, has not been discussed in much detail and critically addressed by the software engineering community. Most of the claims associated with open source appear to be weakly motivated and articulated. For this reason, this paper proposes some qualitative reflections and observations on the nature of open source software and on the most popular and important claims associated with the open source approach. The ultimate goal of the paper is to identify the concepts and intuitions that are really peculiar to open source, and to distinguish them from features and aspects that can be equally applied to or found in proprietary software. (C) 2002 Elsevier Science Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Fuggetta, A (Corresponding Author), Politecn Milan, Dipartimento Electtron \\& Informaz, Piazza Leonardo Vinci 32, I-20133 Milan, Italy. Politecn Milan, Dipartimento Electtron \\& Informaz, I-20133 Milan, Italy. CEFRIEL, I-20133 Milan, Italy."",
    DOI = ""10.1016/S0164-1212(02)00065-1"",
    ISSN = ""0164-1212"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Affiliations = ""Polytechnic University of Milan"",
    Number-of-Cited-References = ""10"",
    Times-Cited = ""62"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""8"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""689QX"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000183505400008"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Open source software––an evaluation	https://doi.org/10.1016/S0164-1212(02)00065-1	ELSEVIER SCIENCE INC	nan; Keywords; References; Link
501	TrustSE	Comparative case studies of open source software peer review practices	Context The power of open source software peer review lies in the involvement of virtual communities, especially users who typically do not have a formal role in the development process. As communities grow to a certain extent, how to organize and support the peer review process becomes increasingly challenging. A universal solution is likely to fail for communities with varying characteristics. Objective This paper investigates differences of peer review practices across different open source software communities, especially the ones engage distinct types of users, in order to offer contextualized guidance for developing open source software projects. Method Comparative case studies were conducted in two well-established large open source communities, Mozilla and Python, which engage extremely different types of users. Bug reports from their bug tracking systems were examined primarily, complemented by secondary sources such as meeting notes, blog posts, messages from mailing lists, and online documentations. Results The two communities differ in the key activities of peer review processes, including different characteristics with respect to bug reporting, design decision making, to patch development and review. Their variances also involve the designs of supporting technology. The results highlight the emerging role of triagers, who bridge the core and peripheral contributors and facilitate the peer review process. The two communities demonstrate alternative designs of open source software peer review and their tradeoffs were discussed. Conclusion It is concluded that contextualized designs of social and technological solutions to open source software peer review practices are important. The two cases can serve as learning resources for open source software projects, or other types of large software projects in general, to cope with challenges of leveraging enormous contributions and coordinating core developers. It is also important to improve support for triagers, who have not received much research effort yet.	Decision making; Design; Formal methods; Information dissemination; Online systems; Open systems; Social networking (online); Design decision-making; On-line documentations; Open source communities; Open source software community; Open source software projects; Peer review; Technological solution; Virtual community; Open source software; Decision making;  Design;  Formal methods;  Information dissemination;  Online systems;  Open systems;  Social networking (online);  Design decision-making;  On-line documentations;  Open source communities;  Open source software community;  Open source software projects;  Peer review;  Technological solution;  Virtual community;  Open source software	Wang, Jing; Shih, Patrick C.; Wu, Yu; Carroll, John M.	Information and Software Technology	https://doi.org/10.1016/j.infsof.2015.06.002		1 - 12	"""@ARTICLE{Wang20151,
    author = ""Wang, Jing and Shih, Patrick C. and Wu, Yu and Carroll, John M."",
    title = ""Comparative case studies of open source software peer review practices"",
    year = ""2015"",
    journal = ""Information and Software Technology"",
    volume = ""67"",
    pages = ""1 - 12"",
    doi = ""10.1016/j.infsof.2015.06.002"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942011818\&doi=10.1016\%2fj.infsof.2015.06.002\&partnerID=40\&md5=b48f2ae22718a9ce0caae4c0db9bd65b"",
    affiliations = ""College of Information Sciences and Technology, Pennsylvania State University, University Park, 16802, PA, United States; Department of Information and Library Science, Indiana University, Bloomington, IN, United States"",
    abstract = ""Context The power of open source software peer review lies in the involvement of virtual communities, especially users who typically do not have a formal role in the development process. As communities grow to a certain extent, how to organize and support the peer review process becomes increasingly challenging. A universal solution is likely to fail for communities with varying characteristics. Objective This paper investigates differences of peer review practices across different open source software communities, especially the ones engage distinct types of users, in order to offer contextualized guidance for developing open source software projects. Method Comparative case studies were conducted in two well-established large open source communities, Mozilla and Python, which engage extremely different types of users. Bug reports from their bug tracking systems were examined primarily, complemented by secondary sources such as meeting notes, blog posts, messages from mailing lists, and online documentations. Results The two communities differ in the key activities of peer review processes, including different characteristics with respect to bug reporting, design decision making, to patch development and review. Their variances also involve the designs of supporting technology. The results highlight the emerging role of triagers, who bridge the core and peripheral contributors and facilitate the peer review process. The two communities demonstrate alternative designs of open source software peer review and their tradeoffs were discussed. Conclusion It is concluded that contextualized designs of social and technological solutions to open source software peer review practices are important. The two cases can serve as learning resources for open source software projects, or other types of large software projects in general, to cope with challenges of leveraging enormous contributions and coordinating core developers. It is also important to improve support for triagers, who have not received much research effort yet. (c) 2015 Elsevier B.V."",
    author_keywords = ""Design; Open source software; Software peer review; Virtual community"",
    keywords = ""Decision making; Design; Formal methods; Information dissemination; Online systems; Open systems; Social networking (online); Design decision-making; On-line documentations; Open source communities; Open source software community; Open source software projects; Peer review; Technological solution; Virtual community; Open source software"",
    correspondence_address = ""J. Wang; 316C IST Building, University Park, 16802, United States; email: jzw143@ist.psu.edu"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 17""
}
"""	Included	Included				2	Scopus Signed In		Comparative case studies of open source software peer review practices	https://www.scopus.com/record/display.uri?eid=2-s2.0-84942011818&origin=resultslist&sort=r-f&src=s&sid=a5a09244ce7861da3914ab6f1206610e&sot=b&sdt=b&s=TITLE%28comparative+case+studies+of+open+source+software+peer+review+practices%29&sl=77&sessionSearchId=a5a09244ce7861da3914ab6f1206610e&relpos=0	Elsevier B.V	nan; References
502	TrustSE	Empirical study of the effects of open source adoption on software development economics	In this paper, we present the results of empirical study of the effects of open source software (OSS) components reuse on software development economics. Specifically, we examined three economic factors - cost, productivity, and quality. This study started with an extensive literature review followed by an exploratory study conducted through interviews with 18 senior project/quality managers, and senior software developers. Then, the result of the literature review and the exploratory study was used to formulate research model, hypotheses, and survey questionnaire. Software intensive companies from Canada and the US were targeted for this study. The period of study was between September 2004 and March 2006. Our findings show that there are strong significant statistical correlations between the factors of OSS components reuse and software development economics. The conclusion from this study shows that software organizations can achieve some economic gains in terms of software development productivity and product quality if they implement OSS components reuse adoption in a systematic way. A big lesson learned in this study is that OSS components are of highest quality and that open source community is not setting a bad example (contrary to some opinion) so far as 'good practices' are concerned.	Productivity; Quality control; Reusability; Software engineering; Statistical methods; Empirical study; Open source software; Software intensive companies; Software organizations; Software process improvement; Open systems; Productivity;  Quality control;  Reusability;  Software engineering;  Statistical methods;  Empirical study;  Open source software;  Software intensive companies;  Software organizations;  Software process improvement;  Open systems	Ajila, Samuel A.; Wu, Di	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2007.01.011		1517 - 1529	"""@ARTICLE{Ajila20071517,
    author = ""Ajila, Samuel A. and Wu, Di"",
    title = ""Empirical study of the effects of open source adoption on software development economics"",
    year = ""2007"",
    journal = ""Journal of Systems and Software"",
    volume = ""80"",
    number = ""9"",
    pages = ""1517 - 1529"",
    doi = ""10.1016/j.jss.2007.01.011"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547731494\&doi=10.1016\%2fj.jss.2007.01.011\&partnerID=40\&md5=bbed7e5884455543d6f41271c6094ec9"",
    affiliations = ""Department of Systems and Computer Engineering, Carleton University, Ottawa, Ont. K1S 5B6, 1125 Colonel By Drive, Canada; Computing and Communication Services, Carleton University, Ottawa, Ont. K1S 5B6, 1125 Colonel By Drive, Canada"",
    abstract = ""In this paper, we present the results of empirical study of the effects of open source software (OSS) components reuse on software development economics. Specifically, we examined three economic factors - cost, productivity, and quality. This study started with an extensive literature review followed by an exploratory study conducted through interviews with 18 senior project/quality managers, and senior software developers. Then, the result of the literature review and the exploratory study was used to formulate research model, hypotheses, and survey questionnaire. Software intensive companies from Canada and the US were targeted for this study. The period of study was between September 2004 and March 2006. Our findings show that there are strong significant statistical correlations between the factors of OSS components reuse and software development economics. The conclusion from this study shows that software organizations can achieve some economic gains in terms of software development productivity and product quality if they implement OSS components reuse adoption in a systematic way. A big lesson learned in this study is that OSS components are of highest quality and that open source community is not setting a bad example (contrary to some opinion) so far as 'good practices' are concerned. (c) 2007 Elsevier Inc. All rights reserved."",
    author_keywords = ""Adoption; Measurement and economics; Open source software; Productivity; Quality; Reuse; Software process improvement"",
    keywords = ""Productivity; Quality control; Reusability; Software engineering; Statistical methods; Empirical study; Open source software; Software intensive companies; Software organizations; Software process improvement; Open systems"",
    correspondence_address = ""S.A. Ajila; Department of Systems and Computer Engineering, Carleton University, Ottawa, Ont. K1S 5B6, 1125 Colonel By Drive, Canada; email: ajila@sce.carleton.ca"",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 87""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Scopus Signed In		Empirical study of the effects of open source adoption on software development economics	https://www.scopus.com/record/display.uri?eid=2-s2.0-34547731494&origin=resultslist&sort=r-f&src=s&sid=7e7d0f598f5277bac20b382d3adbbde3&sot=b&sdt=b&s=TITLE%28empirical+study+of+the+effects+of+open+source+adoption+on+software+development+economics%29&sl=95&sessionSearchId=7e7d0f598f5277bac20b382d3adbbde3&relpos=0		nan; References; Publisher
503	TrustSE	Social network analysis of open source software: A review and categorisation	Context: As companies have become large users of Open Source Software, it is important that they feel comfortable in their Open Source strategies. One of the critical differences between Open Source and Proprietary Software is the communication networks. Objective: This paper tries to set a base for understanding how open source teams are structured and how they change. This is vital to understanding Open Source Software Communities. Method: The paper looks into previous research on Social Network Analysis of Open Source Software, using a systematic literature review. Papers were gathered from Scopus, IEEEXplore and ACM Digital Library, and used or discarded based on predetermined inclusion and exclusion criteria. Research which focuses on the success factors of Open Source Software through Network Analysis is also examined. Results: A subjective categorisation is established for the papers: Structure, Lifecycle and Communication. It was found that the structure of a project has a large bearing on project success, with developers having previously worked together being indicative of project success. Other structure indicators of success are having a small but structured hierarchy, a diverse user and developer base, and project prominence. However, it was found that information on how these structures appear and evolve over time is lacking, and future research into temporal data models to determine project success information is suggested. Conclusions: A categorisation of existing research on Social Network Analysis is provided as a basis for further research. Further work into the lifecycle of OSS projects through Social Network Analysis of temporal project information is suggested.	Digital libraries; Life cycle; Open systems; Social networking (online); Social sciences computing; Inclusion and exclusions; Open source software community; Project informations; Project success; Proprietary software; Success factors; Systematic literature review; Temporal data models; Open source software; Digital libraries;  Life cycle;  Open systems;  Social networking (online);  Social sciences computing;  Inclusion and exclusions;  Open source software community;  Project informations;  Project success;  Proprietary software;  Success factors;  Systematic literature review;  Temporal data models;  Open source software	McClean, Kelvin; Greer, Des; Jurek-Loughrey, Anna	Information and Software Technology	https://doi.org/10.1016/j.infsof.2020.106442			"""@ARTICLE{McClean2021,
    author = ""McClean, Kelvin and Greer, Des and Jurek-Loughrey, Anna"",
    title = ""Social network analysis of open source software: A review and categorisation"",
    year = ""2021"",
    journal = ""Information and Software Technology"",
    volume = ""130"",
    doi = ""10.1016/j.infsof.2020.106442"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092235449\&doi=10.1016\%2fj.infsof.2020.106442\&partnerID=40\&md5=6de54c64120a6a18ff8a10db2e79fbd8"",
    affiliations = ""School of Electronics, Electrical Engineering and Computer Science Queen's University, Belfast, BT71NN, United Kingdom"",
    abstract = ""Context: As companies have become large users of Open Source Software, it is important that they feel comfortable in their Open Source strategies. One of the critical differences between Open Source and Proprietary Software is the communication networks. Objective: This paper tries to set a base for understanding how open source teams are structured and how they change. This is vital to understanding Open Source Software Communities. Method: The paper looks into previous research on Social Network Analysis of Open Source Software, using a systematic literature review. Papers were gathered from Scopus, IEEEXplore and ACM Digital Library, and used or discarded based on predetermined inclusion and exclusion criteria. Research which focuses on the success factors of Open Source Software through Network Analysis is also examined. Results: A subjective categorisation is established for the papers: Structure, Lifecycle and Communication. It was found that the structure of a project has a large bearing on project success, with developers having previously worked together being indicative of project success. Other structure indicators of success are having a small but structured hierarchy, a diverse user and developer base, and project prominence. However, it was found that information on how these structures appear and evolve over time is lacking, and future research into temporal data models to determine project success information is suggested. Conclusions: A categorisation of existing research on Social Network Analysis is provided as a basis for further research. Further work into the lifecycle of OSS projects through Social Network Analysis of temporal project information is suggested. (c) 2020 Elsevier B.V."",
    author_keywords = ""Open source software; Review; Social network analysis"",
    keywords = ""Digital libraries; Life cycle; Open systems; Social networking (online); Social sciences computing; Inclusion and exclusions; Open source software community; Project informations; Project success; Proprietary software; Success factors; Systematic literature review; Temporal data models; Open source software"",
    correspondence_address = ""D. Greer; School of Electronics, Electrical Engineering and Computer Science Queen's University, Belfast, BT71NN, United Kingdom; email: des.greer@qub.ac.uk"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Review"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 8; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Social network analysis of open source software: A review and categorisation	https://www.scopus.com/record/display.uri?eid=2-s2.0-85092235449&origin=resultslist&sort=r-f&src=s&sid=6581471d46df3582ee05462f260751c7&sot=b&sdt=b&s=TITLE%28social+network+analysis+of+open+source+software+a+review+and+categorisation%29&sl=82&sessionSearchId=6581471d46df3582ee05462f260751c7&relpos=0	Elsevier B.V	nan; References; Pages
504	TrustSE	Towards comprehending the non-functional requirements through Developers' eyes: An exploration of Stack Overflow using topic analysis	Context: As a vital role for the quality of software, non-functional requirements (NFRs) are attracting greater attention from developers. The programming question and answer (Q\&A) websites like Stack Overflow gathered the knowledge and expertise of developers worldwide which reflects some insight into the development activities (e.g., NFRs), but the NFR5 in the Q\&A site are rarely investigated. Objective: Our research aims to aid comprehension on the actual thoughts and needs of the developers by analyzing the NFRs on Stack Overflow. Method: We extracted the textual content of Stack Overflow discussions, and then we applied the topic modeling technique called latent Dirichlet allocation (LDA) helping us to discover the main topics of the corpus. Next, we labelled the topics with NFR5 by the wordlists to analyze the hot, unresolved, difficult NFRs, and the evolutionary trends which involves the trends of the NFR5 focus and NFRs difficulty. Results: Our findings show that (1) The developers mostly discuss usability and reliability while discussing less on maintainability and efficiency. (2) The most unresolved problems also occurred in usability and reliability. (3) The visualization of the NFR evolutions over time shows the functionality and reliability attract more and more attention from developers and usability remains hot. (4) The NFRs investigation in specific technologies indicates the quality is a similar concern among different technologies and some NFRs are of more interest as time progresses. (5) The research on NFRs difficulty in specific technologies shows the maintainability is the most difficult NFR In addition, the trends of the NFRs difficulty over time in the seven categories signal that we should focus more on usability to address them. Conclusion: We present an empirical study on 21.7 million posts and 32.5 million comments of Stack Overflow, and our research provides some guide to understand the NFR5 through developers' eyes.	Non-functional requirements (NFRs); Topic model; Latent Dirichlet allocation (LDA); Stack Overflow; Non-functional requirements (NFRs);  Topic model;  Latent Dirichlet allocation (LDA);  Stack Overflow	Zou, Jie; Xu, Ling; Yang, Mengning; Zhang, Xiaohong; Yang, Dan	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2016.12.003		19-32	"""@article{WOS:000393252400002,
    Author = ""Zou, Jie and Xu, Ling and Yang, Mengning and Zhang, Xiaohong and Yang, Dan"",
    Title = ""Towards comprehending the non-functional requirements through Developers' eyes: An exploration of Stack Overflow using topic analysis"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2017"",
    Volume = ""84"",
    Pages = ""19-32"",
    Month = ""APR"",
    Abstract = ""Context: As a vital role for the quality of software, non-functional requirements (NFRs) are attracting greater attention from developers. The programming question and answer (Q\\&A) websites like Stack Overflow gathered the knowledge and expertise of developers worldwide which reflects some insight into the development activities (e.g., NFRs), but the NFR5 in the Q\\&A site are rarely investigated. Objective: Our research aims to aid comprehension on the actual thoughts and needs of the developers by analyzing the NFRs on Stack Overflow. Method: We extracted the textual content of Stack Overflow discussions, and then we applied the topic modeling technique called latent Dirichlet allocation (LDA) helping us to discover the main topics of the corpus. Next, we labelled the topics with NFR5 by the wordlists to analyze the hot, unresolved, difficult NFRs, and the evolutionary trends which involves the trends of the NFR5 focus and NFRs difficulty. Results: Our findings show that (1) The developers mostly discuss usability and reliability while discussing less on maintainability and efficiency. (2) The most unresolved problems also occurred in usability and reliability. (3) The visualization of the NFR evolutions over time shows the functionality and reliability attract more and more attention from developers and usability remains hot. (4) The NFRs investigation in specific technologies indicates the quality is a similar concern among different technologies and some NFRs are of more interest as time progresses. (5) The research on NFRs difficulty in specific technologies shows the maintainability is the most difficult NFR In addition, the trends of the NFRs difficulty over time in the seven categories signal that we should focus more on usability to address them. Conclusion: We present an empirical study on 21.7 million posts and 32.5 million comments of Stack Overflow, and our research provides some guide to understand the NFR5 through developers' eyes. (C) 2016 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Xu, L (Corresponding Author), Chongqing Univ, Minist Educ, Key Lab Dependable Serv Comp Cyber Phys Soc, Chongqing 400044, Peoples R China. Xu, L (Corresponding Author), Chongqing Univ, Sch Software Engn, Chongqing 401331, Peoples R China. Xu, Ling, Chongqing Univ, Minist Educ, Key Lab Dependable Serv Comp Cyber Phys Soc, Chongqing 400044, Peoples R China. Zou, Jie; Xu, Ling; Yang, Mengning; Zhang, Xiaohong; Yang, Dan, Chongqing Univ, Sch Software Engn, Chongqing 401331, Peoples R China."",
    DOI = ""10.1016/j.infsof.2016.12.003"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Non-functional requirements (NFRs); Topic model; Latent Dirichlet allocation (LDA); Stack Overflow"",
    Keywords-Plus = ""LATENT; CLASSIFICATION; DISTRIBUTIONS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""xuling@cqu.edu.cn"",
    Affiliations = ""Chongqing University; Chongqing University"",
    ResearcherID-Numbers = ""Zhang, Xiaohong/A-3060-2015 YANG, Dan/HHD-2733-2022"",
    Funding-Acknowledgement = ""Chongqing University Postgraduates' Innovation Project {[}CYS15022]; National Natural Science Foundation of China {[}91118005, 61173131]; Changjiang Scholars and Innovative Research Team in University {[}IRT1196]"",
    Funding-Text = ""The work described in this paper was partially supported by Chongqing University Postgraduates' Innovation Project (Grant No. CYS15022), the National Natural Science Foundation of China (Grant Nos. 91118005, 61173131), and Changjiang Scholars and Innovative Research Team in University (Grant No. IRT1196)."",
    Number-of-Cited-References = ""65"",
    Times-Cited = ""28"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""EJ5IV"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000393252400002"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Web of Science		Towards comprehending the non-functional requirements through Developers’ eyes: An exploration of Stack Overflow using topic analysis	https://doi.org/10.1016/j.infsof.2016.12.003	ELSEVIER	nan; References; Link
505	TrustSE	Open source software ecosystems: A Systematic mapping	Context: Open source software (OSS) and software ecosystems (SECOs) are two consolidated research areas in software engineering. OSS influences the way organizations develop, acquire, use and commercialize software. SECOs have emerged as a paradigm to understand dynamics and heterogeneity in collaborative software development. For this reason, SECOs appear as a valid instrument to analyze OSS systems. However, there are few studies that blend both topics together. Objective: The purpose of this study is to evaluate the current state of the art in OSS ecosystems (OSSECOs) research, specifically: (a) what the most relevant definitions related to OSSECOs are; (b) what the particularities of this type of SECO are; and	Computer software; Ecology; Ecosystems; Groupware; Mapping; Open source software; Quality control; Software design; Software engineering; Literature reviews; OSSECO; SECO; Software ecosystems; Systematic mapping; Open systems; Computer software;  Ecology;  Ecosystems;  Groupware;  Mapping;  Open source software;  Quality control;  Software design;  Software engineering;  Literature reviews;  OSSECO;  SECO;  Software ecosystems;  Systematic mapping;  Open systems	Franco-Bedoya, Oscar; Ameller, David; Costal, Dolors; Franch, Xavier	Information and Software Technology	https://doi.org/10.1016/j.infsof.2017.07.007		160 - 185	"""@ARTICLE{Franco-Bedoya2017160,
    author = ""Franco-Bedoya, Oscar and Ameller, David and Costal, Dolors and Franch, Xavier"",
    title = ""Open source software ecosystems: A Systematic mapping"",
    year = ""2017"",
    journal = ""Information and Software Technology"",
    volume = ""91"",
    pages = ""160 - 185"",
    doi = ""10.1016/j.infsof.2017.07.007"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025476436\&doi=10.1016\%2fj.infsof.2017.07.007\&partnerID=40\&md5=c278b91aac8625aa16a3579476baf6e3"",
    affiliations = ""Universitat Politecnica de Catalunya, Software and Service Engineering Group, Barcelona, Spain; Universidad de Caldas, Manizales, Colombia"",
    abstract = ""Context: Open source software (OSS) and software ecosystems (SECOs) are two consolidated research areas in software engineering. OSS influences the way organizations develop, acquire, use and commercialize software. SECOs have emerged as a paradigm to understand dynamics and heterogeneity in collaborative software development. For this reason, SECOs appear as a valid instrument to analyze OSS systems. However, there are few studies that blend both topics together. Objective: The purpose of this study is to evaluate the current state of the art in OSS ecosystems (OSSECOs) research, specifically: (a) what the most relevant definitions related to OSSECOs are; (b) what the particularities of this type of SECO are; and (c) how the knowledge about OSSECO is represented. Method: We conducted a systematic mapping following recommended practices. We applied automatic and manual searches on different sources and used a rigorous method to elicit the keywords from the research questions and selection criteria to retrieve the final papers. As a result, 82 papers were selected and evaluated. Threats to validity were identified and mitigated whenever possible. Results: The analysis allowed us to answer the research questions. Most notably, we did the following: (a) identified 64 terms related to the OSSECO and arranged them into a taxonomy; (b) built a genealogical tree to understand the genesis of the OSSECO term from related definitions; (c) analyzed the available definitions of SECO in the context of OSS; and (d) classified the existing modelling and analysis techniques of OSSECOs. Conclusion: As a summary of the systematic mapping, we conclude that existing research on several topics related to OSSECOs is still scarce (e.g., modelling and analysis techniques, quality models, standard definitions, etc.). This situation calls for further investigation efforts on how organizations and OSS communities actually understand OSSECOs. (c) 2017 Elsevier B.V."",
    author_keywords = ""Literature review; Open source software; OSS; OSSECO; SECO; Software ecosystem; Systematic mapping"",
    keywords = ""Computer software; Ecology; Ecosystems; Groupware; Mapping; Open source software; Quality control; Software design; Software engineering; Literature reviews; OSSECO; SECO; Software ecosystems; Systematic mapping; Open systems"",
    correspondence_address = ""O. Franco-Bedoya; Universitat Politecnica de Catalunya, Barcelona, Software and Service Engineering Group, Spain; email: ohernan@essi.upc.edu"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 75; All Open Access, Green Open Access""
}
"""	Included	Included				2	Scopus Signed In		Open source software ecosystems: A Systematic mapping	https://www.scopus.com/record/display.uri?eid=2-s2.0-85025476436&origin=resultslist&sort=r-f&src=s&sid=f696e84e69e95ae5deb9e17135b1f924&sot=b&sdt=b&s=TITLE%28open+source+software+ecosystems+a+systematic+mapping%29&sl=59&sessionSearchId=f696e84e69e95ae5deb9e17135b1f924&relpos=0	Elsevier B.V	nan; References
506	TrustSE	A large-scale, in-depth analysis of developers' personalities in the Apache ecosystem	Context Large-scale distributed projects are typically the results of collective efforts performed by multiple developers with heterogeneous personalities. Objective: We aim to find evidence that personalities can explain developers' behavior in large scale-distributed projects. For example, the propensity to trust others - a critical factor for the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects. Method: In this paper, we perform a quantitative analysis of ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects. Results: We find that there are three common types of personality profiles among Apache developers, characterized in particular by their level of Agreeableness and Neuroticism. We also confirm that developers' personality is stable over time. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open developers are more likely to make contributors to Apache projects. Conclusion: Overall, our findings reinforce the need for future studies on human factors in software engineering to use psychometric tools to control for differences in developers' personalities.	Personality traits; Large-scale distributed projects; Ecosystems; Apache; Big five; Five-Factor model; Open source software; Human aspects; Psychometric analysis; Computational personality detection; Personality traits;  Large-scale distributed projects;  Ecosystems;  Apache;  Big five;  Five-Factor model;  Open source software;  Human aspects;  Psychometric analysis;  Computational personality detection	Calefato, Fabio; Lanubile, Filippo; Vasilescu, Bogdan	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2019.05.012		1-20	"""@article{WOS:000480669200001,
    Author = ""Calefato, Fabio and Lanubile, Filippo and Vasilescu, Bogdan"",
    Title = ""A large-scale, in-depth analysis of developers' personalities in the Apache ecosystem"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2019"",
    Volume = ""114"",
    Pages = ""1-20"",
    Month = ""OCT"",
    Abstract = ""Context Large-scale distributed projects are typically the results of collective efforts performed by multiple developers with heterogeneous personalities. Objective: We aim to find evidence that personalities can explain developers' behavior in large scale-distributed projects. For example, the propensity to trust others - a critical factor for the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects. Method: In this paper, we perform a quantitative analysis of ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects. Results: We find that there are three common types of personality profiles among Apache developers, characterized in particular by their level of Agreeableness and Neuroticism. We also confirm that developers' personality is stable over time. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open developers are more likely to make contributors to Apache projects. Conclusion: Overall, our findings reinforce the need for future studies on human factors in software engineering to use psychometric tools to control for differences in developers' personalities."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Calefato, F (Corresponding Author), Univ Bari, Bari, Italy. Calefato, Fabio; Lanubile, Filippo, Univ Bari, Bari, Italy. Vasilescu, Bogdan, Carnegie Mellon Univ, Pittsburgh, PA 15213 USA."",
    DOI = ""10.1016/j.infsof.2019.05.012"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Personality traits; Large-scale distributed projects; Ecosystems; Apache; Big five; Five-Factor model; Open source software; Human aspects; Psychometric analysis; Computational personality detection"",
    Keywords-Plus = ""5-FACTOR MODEL; WORK PREFERENCES; SOFTWARE; TRAITS; SATISFACTION; RECOGNITION; COOPERATION; PERSPECTIVE; MOTIVATION; PROFILES"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""fabio.calefato@uniba.it filippo.lanubile@uniba.it vasilescu@cmu.edu"",
    Affiliations = ""Universita degli Studi di Bari Aldo Moro; Carnegie Mellon University"",
    ResearcherID-Numbers = ""Lanubile, Filippo/AAF-9132-2020 Calefato, Fabio/H-4177-2014"",
    ORCID-Numbers = ""Vasilescu, Bogdan/0000-0003-4418-5783 Calefato, Fabio/0000-0003-2654-1588"",
    Funding-Acknowledgement = ""MIUR under the program ``PON RC 2007-2013{''}"",
    Funding-Text = ""We thank IBM for providing free access to the Personality Insights API. The computational work has been executed on the IT resources made available by two projects, ReCaS and PRISMA, funded by MIUR under the program ``PON R\\&C 2007-2013.{''} We are also grateful to Marco Iannotta for his help in the data extraction process."",
    Number-of-Cited-References = ""132"",
    Times-Cited = ""22"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""5"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""IQ3RQ"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000480669200001"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		A large-scale, in-depth analysis of developers’ personalities in the Apache ecosystem	https://doi.org/10.1016/j.infsof.2019.05.012	ELSEVIER	nan; References; Link
507	TrustSE	An empirically-based characterization and quantification of information seeking through mailing lists during Open Source developers' software evolution	Context: Several authors have proposed information seeking as an appropriate perspective for studying software evolution. Empirical evidence in this area suggests that substantial time delays can accrue, due to the unavailability of required information, particularly when this information must travel across geographically distributed sites. Objective: As a first step in addressing the time delays that can occur in information seeking for distributed Open Source (OS) programmers during software evolution, this research characterizes the information seeking of OS developers through their mailing lists. Method: A longitudinal study that analyses 17 years of developer mailing list activity in total, over 6 different OS projects is performed, identifying the prevalent information types sought by developers, from a qualitative, grounded analysis of this data. Quantitative analysis of the number-of-responses and response time-lag is also performed. Results: The analysis shows that Open Source developers are particularly implementation centric and team focused in their use of mailing lists, mirroring similar findings that have been reported in the literature. However novel findings include the suggestion that OS developers often require support regarding the technology they use during development, that they refer to documentation fairly frequently and that they seek implementation-oriented specifics based on system design principles that they anticipate in advance. In addition, response analysis suggests a large variability in the response rates for different types of questions, and particularly that participants have difficulty ascertaining information on other developer's activities. Conclusion: The findings provide insights for those interested in supporting the information needs of OS developer communities: They suggest that the tools and techniques developed in support of co-located developers should be largely mirrored for these communities: that they should be implementation centric, and directed at illustrating ``how{''} the system achieves its functional goals and states. Likewise they should be directed at determining the reason for system bugs: a type of question frequently posed by OS developers but less frequently responded to.	Information seeking software maintenance; Open source software; Qualitative empirical study; Information seeking software maintenance;  Open source software;  Qualitative empirical study	Sharif, Khaironi Y.; English, Michael; Ali, Nour; Exton, Chris; Collins, J. J.; Buckley, Jim	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2014.09.003		77-94	"""@article{WOS:000345947500006,
    Author = ""Sharif, Khaironi Y. and English, Michael and Ali, Nour and Exton, Chris and Collins, J. J. and Buckley, Jim"",
    Title = ""An empirically-based characterization and quantification of information seeking through mailing lists during Open Source developers' software evolution"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2015"",
    Volume = ""57"",
    Pages = ""77-94"",
    Month = ""JAN"",
    Abstract = ""Context: Several authors have proposed information seeking as an appropriate perspective for studying software evolution. Empirical evidence in this area suggests that substantial time delays can accrue, due to the unavailability of required information, particularly when this information must travel across geographically distributed sites. Objective: As a first step in addressing the time delays that can occur in information seeking for distributed Open Source (OS) programmers during software evolution, this research characterizes the information seeking of OS developers through their mailing lists. Method: A longitudinal study that analyses 17 years of developer mailing list activity in total, over 6 different OS projects is performed, identifying the prevalent information types sought by developers, from a qualitative, grounded analysis of this data. Quantitative analysis of the number-of-responses and response time-lag is also performed. Results: The analysis shows that Open Source developers are particularly implementation centric and team focused in their use of mailing lists, mirroring similar findings that have been reported in the literature. However novel findings include the suggestion that OS developers often require support regarding the technology they use during development, that they refer to documentation fairly frequently and that they seek implementation-oriented specifics based on system design principles that they anticipate in advance. In addition, response analysis suggests a large variability in the response rates for different types of questions, and particularly that participants have difficulty ascertaining information on other developer's activities. Conclusion: The findings provide insights for those interested in supporting the information needs of OS developer communities: They suggest that the tools and techniques developed in support of co-located developers should be largely mirrored for these communities: that they should be implementation centric, and directed at illustrating ``how{''} the system achieves its functional goals and states. Likewise they should be directed at determining the reason for system bugs: a type of question frequently posed by OS developers but less frequently responded to. (C) 2014 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""English, M (Corresponding Author), Univ Limerick, Irish Software Engn Res Ctr LERO, Limerick, Ireland. Sharif, Khaironi Y., Univ Putra Malaysia, FSKTM, SERG, Serdang 43400, Malaysia. English, Michael; Exton, Chris; Collins, J. J.; Buckley, Jim, Univ Limerick, Irish Software Engn Res Ctr LERO, Limerick, Ireland. Ali, Nour, Brighton Univ, Sch Comp Engn \\& Math, Brighton, E Sussex, England."",
    DOI = ""10.1016/j.infsof.2014.09.003"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Information seeking software maintenance; Open source software; Qualitative empirical study"",
    Keywords-Plus = ""PROGRAM COMPREHENSION; MAINTENANCE; GOVERNANCE; QUESTIONS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Affiliations = ""Universiti Putra Malaysia; University of Limerick; University of Brighton"",
    ResearcherID-Numbers = ""English, Michael/KIC-0937-2024 Collins, J.J./E-5574-2014"",
    ORCID-Numbers = ""Buckley, Jim/0000-0001-6928-6746 Ali, Nour/0000-0002-0161-5600 Sharif, Khaironi Yatim/0000-0003-3894-1773"",
    Funding-Acknowledgement = ""Science Foundation Ireland {[}10/CE/I1855]"",
    Funding-Text = ""This work was supported, in part, by Science Foundation Ireland Grant 10/CE/I1855 to Lero - the Irish Software Engineering Research Centre (www.lero.ie)."",
    Number-of-Cited-References = ""90"",
    Times-Cited = ""17"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""8"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""AU9YI"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000345947500006"",
    OA = ""Green Submitted, Green Accepted"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		An empirically-based characterization and quantification of information seeking through mailing lists during Open Source developers’ software evolution	https://doi.org/10.1016/j.infsof.2014.09.003	ELSEVIER	nan; References; Link
508	TrustSE	A theory of power in emerging software ecosystems formed by small-to-medium enterprises	In a software ecosystem, partner companies rely on each other to succeed and survive. This scenario of mutual dependence entails a flow of power among companies. Power is an intrinsic property of their relationship and an asset to be exercised with a degree of intentionality. This paper presents a substantive theory to explain how power and dependence manifest in partnerships among small-to-medium enterprises (SMEs) building a software ecosystem. We performed exploratory case studies of two emerging software ecosystems formed by SMEs. We interpreted the results in light of a theoretical framework underpinned by French and Raven's power taxonomy. Finally, we performed a cross-case analysis to evaluate our findings and build the theory. The proposed theory highlights the interactions among different forms of power and corresponding sources of power employed by companies. It provides a better understanding on how power and dependence influence the behaviour and coordination of companies within a software ecosystem. The theory is a useful lens for researchers to explore ecosystem partnerships by understanding the structure and impact of power relationships between partners. In addition, it is a valuable tool for companies to analyse power distribution and define sustainable strategies for software ecosystem governance.	Software ecosystem; Small-to-medium enterprises; Power; Dependence; Multiple case studies; Software ecosystem;  Small-to-medium enterprises;  Power;  Dependence;  Multiple case studies	Valenca, George; Alves, Carina	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2017.08.044		76-104	"""@article{WOS:000415909200006,
    Author = ""Valenca, George and Alves, Carina"",
    Title = ""A theory of power in emerging software ecosystems formed by small-to-medium enterprises"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2017"",
    Volume = ""134"",
    Pages = ""76-104"",
    Month = ""DEC"",
    Abstract = ""In a software ecosystem, partner companies rely on each other to succeed and survive. This scenario of mutual dependence entails a flow of power among companies. Power is an intrinsic property of their relationship and an asset to be exercised with a degree of intentionality. This paper presents a substantive theory to explain how power and dependence manifest in partnerships among small-to-medium enterprises (SMEs) building a software ecosystem. We performed exploratory case studies of two emerging software ecosystems formed by SMEs. We interpreted the results in light of a theoretical framework underpinned by French and Raven's power taxonomy. Finally, we performed a cross-case analysis to evaluate our findings and build the theory. The proposed theory highlights the interactions among different forms of power and corresponding sources of power employed by companies. It provides a better understanding on how power and dependence influence the behaviour and coordination of companies within a software ecosystem. The theory is a useful lens for researchers to explore ecosystem partnerships by understanding the structure and impact of power relationships between partners. In addition, it is a valuable tool for companies to analyse power distribution and define sustainable strategies for software ecosystem governance. (C) 2017 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Valenca, G (Corresponding Author), Univ Fed Rural Pernambuco UFRPE, Dept Estat \\& Informat, Recife, PE, Brazil. Valenca, George, Univ Fed Rural Pernambuco UFRPE, Dept Estat \\& Informat, Recife, PE, Brazil. Alves, Carina, Univ Fed Pernambuco UFPE, Ctr Informat, Recife, PE, Brazil."",
    DOI = ""10.1016/j.jss.2017.08.044"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software ecosystem; Small-to-medium enterprises; Power; Dependence; Multiple case studies"",
    Keywords-Plus = ""EVOLUTION; BASES; CONFLICT; CHANNELS; DYNAMICS; FRENCH; RAVEN"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""george.valenca@ufrpe.br cfa@cin.ufpe.br"",
    Affiliations = ""Universidade Federal Rural de Pernambuco (UFRPE); Universidade Federal de Pernambuco"",
    Number-of-Cited-References = ""89"",
    Times-Cited = ""19"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""FN3OR"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000415909200006"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		A theory of power in emerging software ecosystems formed by small-to-medium enterprises	https://www.webofscience.com/wos/woscc/full-record/WOS:000415909200006	ELSEVIER SCIENCE INC	nan; References
509	TrustSE	Security view: Making the operating system trusted - A trend	No abstract available.		Hancock, Bill	Comput. Secur.	https://doi.org/10.1016/S0167-4048(99)90832-5		462-463	"""@article{10.1016/S0167-4048(99)90832-5,
    author = ""Hancock, Bill"",
    title = ""Security view: Making the operating system trusted - A trend"",
    year = ""1999"",
    issue_date = ""January, 1999"",
    publisher = ""Elsevier Advanced Technology Publications"",
    address = ""GBR"",
    volume = ""18"",
    number = ""6"",
    issn = ""0167-4048"",
    url = ""https://doi.org/10.1016/S0167-4048(99)90832-5"",
    doi = ""10.1016/S0167-4048(99)90832-5"",
    journal = ""Comput. Secur."",
    month = ""January"",
    pages = ""462-463"",
    numpages = ""2""
}
"""	Excluded	Excluded			Studies that were books or gray literature	2	ACM		Making the operating system trusted — A trend	https://dl.acm.org/doi/abs/10.1016/S0167-4048%2899%2990832-5	Elsevier Advanced Technology Publications	nan; Keywords; References
510	TrustSE	Whom Do You Trust		Conflict of Interest; Humans; Trust; conflict of interest; human; trust; Conflict of Interest;  Humans;  Trust;  conflict of interest;  human;  trust	Platt, Lois M.	Journal of the American Psychiatric Nurses Association	https://doi.org/10.1177/1078390318756199	Pearson, G.S.	187	"""@ARTICLE{Platt2018187,
    author = ""Platt, Lois M."",
    title = ""Whom Do You Trust"",
    year = ""2018"",
    journal = ""Journal of the American Psychiatric Nurses Association"",
    volume = ""24"",
    number = ""3"",
    pages = ""187"",
    doi = ""10.1177/1078390318756199"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042233046\&doi=10.1177\%2f1078390318756199\&partnerID=40\&md5=a89abe17c2d4331aa1579e24d7983fad"",
    affiliations = ""University of Illinois at Chicago, IL, United States"",
    keywords = ""Conflict of Interest; Humans; Trust; conflict of interest; human; trust"",
    publisher = ""SAGE Publications Inc."",
    issn = ""10783903"",
    pmid = ""29457507"",
    language = ""English"",
    abbrev_source_title = ""J. Am. Psychiatr. Nurs. Assoc."",
    type = ""Letter"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 0""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Scopus Signed In		Whom do you trust?	https://www.scopus.com/record/display.uri?eid=2-s2.0-85042233046&origin=resultslist&sort=r-f&src=s&sid=526f86d17f24481ee30c90647f4b0594&sot=b&sdt=b&s=TITLE%28whom+do+you+trust%29&sl=24&sessionSearchId=526f86d17f24481ee30c90647f4b0594&relpos=0	SAGE Publications Inc	nan; Abstract
511	TrustSE	DESIGN AND IMPLEMENTATION OF A QUERY PROCESSOR FOR A TRUSTED DISTRIBUTED DATA-BASE MANAGEMENT-SYSTEM	Distributed systems are vital for the efficient processing required in military and commercial applications. For many of these applications, it is especially important that the distributed data base management systems (DDBMS) operate in a secure manner. For example, the DDBMS should allow users, who are cleared at different security levels access to the data base at different levels of data sensitivity without compromising security. A DDBMS with multilevel user/data-handling capability is called a trusted distributed data base management system (TDDBMS). This article focuses on query processing in a TDDBMS. It describes the security issues, algorithms for query processing, and design and implementation of a query processor prototype for a TDDBMS.		RUBINOVITZ, H; THURAISINGHAM, B	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/0164-1212(93)90017-R		49-69	"""@article{WOS:A1993KV37300006,
    Author = ""RUBINOVITZ, H and THURAISINGHAM, B"",
    Title = ""DESIGN AND IMPLEMENTATION OF A QUERY PROCESSOR FOR A TRUSTED DISTRIBUTED DATA-BASE MANAGEMENT-SYSTEM"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""1993"",
    Volume = ""21"",
    Number = ""1"",
    Pages = ""49-69"",
    Month = ""APR"",
    Abstract = ""Distributed systems are vital for the efficient processing required in military and commercial applications. For many of these applications, it is especially important that the distributed data base management systems (DDBMS) operate in a secure manner. For example, the DDBMS should allow users, who are cleared at different security levels access to the data base at different levels of data sensitivity without compromising security. A DDBMS with multilevel user/data-handling capability is called a trusted distributed data base management system (TDDBMS). This article focuses on query processing in a TDDBMS. It describes the security issues, algorithms for query processing, and design and implementation of a query processor prototype for a TDDBMS."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""655 AVENUE OF THE AMERICAS, NEW YORK, NY 10010"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""MITRE CORP,BEDFORD,MA 01730."",
    DOI = ""10.1016/0164-1212(93)90017-R"",
    ISSN = ""0164-1212"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Affiliations = ""MITRE Corporation"",
    Number-of-Cited-References = ""23"",
    Times-Cited = ""1"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""3"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""KV373"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:A1993KV37300006"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Design and implementation of a query processor for a trusted distributed data base management system	https://www.webofscience.com/wos/woscc/full-record/WOS:A1993KV37300006	ELSEVIER SCIENCE INC	nan; Keywords; References
512	TrustSE	Adopters' trust in enterprise open source vendors: An empirical examination	Although significant research attention has been directed at understanding open source software (OSS) adoption, very little attention has been paid to understanding what leads potential adopters to trust enterprise open source vendors. This study identifies organizational trust factors in enterprise open source vendors, namely vendors' security, embracement of open standards, and support services. It also examines the impact of system trust on adopters' attitudes and intentions. The study draws upon a total of 192 questionnaires collected from enterprise IT and project managers. Our results show that trust factors have a positive effect on system trust. We also found system trust to be effective in increasing adopters' attitudes and intentions. Finally, our results provide several managerial implications for organizations as well as enterprise open source vendors.	Computer software; Enterprise software; Managers; Open systems; Software engineering; Surveys; Adoption intent; Empirical examination; Managerial implications; Open Standards; Organizational adoptions; Project managers; Support services; System trust; Open source software; Computer software;  Enterprise software;  Managers;  Open systems;  Software engineering;  Surveys;  Adoption intent;  Empirical examination;  Managerial implications;  Open Standards;  Organizational adoptions;  Project managers;  Support services;  System trust;  Open source software	Roumani, Yaman; Nwankpa, Joseph K.; Roumani, Yazan F.	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2016.12.006		256 - 270	"""@ARTICLE{Roumani2017256,
    author = ""Roumani, Yaman and Nwankpa, Joseph K. and Roumani, Yazan F."",
    title = ""Adopters' trust in enterprise open source vendors: An empirical examination"",
    year = ""2017"",
    journal = ""Journal of Systems and Software"",
    volume = ""125"",
    pages = ""256 - 270"",
    doi = ""10.1016/j.jss.2016.12.006"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85007102894\&doi=10.1016\%2fj.jss.2016.12.006\&partnerID=40\&md5=ab3a1b14f7b293b73f5ab9c67d415642"",
    affiliations = ""Computer Information Systems, Eastern Michigan University, 419 Owen Bldg, Ypsilanti, 48197, MI, United States; Information Systems, University of Texas Rio Grande Valley 1201 W. University Drive, Edinburg, 78539, TX, United States; Decision and Information Sciences, Oakland University, 342 Elliott Hall, Rochester, 48309, MI, United States"",
    abstract = ""Although significant research attention has been directed at understanding open source software (OSS) adoption, very little attention has been paid to understanding what leads potential adopters to trust enterprise open source vendors. This study identifies organizational trust factors in enterprise open source vendors, namely vendors' security, embracement of open standards, and support services. It also examines the impact of system trust on adopters' attitudes and intentions. The study draws upon a total of 192 questionnaires collected from enterprise IT and project managers. Our results show that trust factors have a positive effect on system trust. We also found system trust to be effective in increasing adopters' attitudes and intentions. Finally, our results provide several managerial implications for organizations as well as enterprise open source vendors. (c) 2016 Elsevier Inc."",
    author_keywords = ""Adoption intent; Enterprise open source software vendor; Organizational adoption; System trust"",
    keywords = ""Computer software; Enterprise software; Managers; Open systems; Software engineering; Surveys; Adoption intent; Empirical examination; Managerial implications; Open Standards; Organizational adoptions; Project managers; Support services; System trust; Open source software"",
    correspondence_address = ""Y. Roumani; Computer Information Systems, Eastern Michigan University, Ypsilanti, 419 Owen Bldg, 48197, United States; email: yroumani@emich.edu"",
    publisher = ""Elsevier Inc."",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 13""
}
"""	Included	Included				2	Scopus Signed In		Adopters’ trust in enterprise open source vendors: An empirical examination	https://doi.org/10.1016/j.jss.2016.12.006	Elsevier Inc	nan; References; Link
513	TrustSE	A fuzzy-based credibility model to assess Web services trust under uncertainty	This paper discusses the assessment of Web services trust. This assessment is undermined by the uncertainty that raises due to end-users' ratings that can be questioned and variations in Web services performance at run-time. To tackle the first uncertainty a fuzzy-based credibility model is suggested so that the gap between end-users (known as strict) and the current majority is reduced. To deal with the second uncertainty two trust approaches (i.e., deterministic and probabilistic) are proposed so that trust levels for future interactions with WSs are made available to users. The deterministic approach takes account end-users' credibility values and the probabilistic one is built upon probabilistic databases and a fuzzy-based credibility model. A series of experiments are carried out to validate the suggested credibility model and these trust approaches. The results show that the probabilistic approach improves significantly trust quality and is more robust compared to the deterministic one. Future work consists of incorporating several credibility models into a single probabilistic trust model.	Uncertainty analysis; Websites; Credibility; Credibility models; Deterministic approach; Probabilistic approaches; Probabilistic database; Probabilistic trust models; Trust; Trust level; Web services; Uncertainty analysis;  Websites;  Credibility;  Credibility models;  Deterministic approach;  Probabilistic approaches;  Probabilistic database;  Probabilistic trust models;  Trust;  Trust level;  Web services	Saoud, Zohra; Faci, Noura; Maamar, Zakaria; Benslimane, Djamal	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2015.09.040		496 - 506	"""@ARTICLE{Saoud2016496,
    author = ""Saoud, Zohra and Faci, Noura and Maamar, Zakaria and Benslimane, Djamal"",
    title = ""A fuzzy-based credibility model to assess Web services trust under uncertainty"",
    year = ""2016"",
    journal = ""Journal of Systems and Software"",
    volume = ""122"",
    pages = ""496 - 506"",
    doi = ""10.1016/j.jss.2015.09.040"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84949580160\&doi=10.1016\%2fj.jss.2015.09.040\&partnerID=40\&md5=4e13bf1b33e78c98604b250f282281bf"",
    affiliations = ""Boulevard Niels Bohr, Villeurbanne Cedex, 69622, France; Zayed University Po Box 19282, Dubai, United States"",
    abstract = ""This paper discusses the assessment of Web services trust. This assessment is undermined by the uncertainty that raises due to end-users' ratings that can be questioned and variations in Web services performance at run-time. To tackle the first uncertainty a fuzzy-based credibility model is suggested so that the gap between end-users (known as strict) and the current majority is reduced. To deal with the second uncertainty two trust approaches (i.e., deterministic and probabilistic) are proposed so that trust levels for future interactions with WSs are made available to users. The deterministic approach takes account end-users' credibility values and the probabilistic one is built upon probabilistic databases and a fuzzy-based credibility model. A series of experiments are carried out to validate the suggested credibility model and these trust approaches. The results show that the probabilistic approach improves significantly trust quality and is more robust compared to the deterministic one. Future work consists of incorporating several credibility models into a single probabilistic trust model. (c) 2015 Elsevier Inc."",
    author_keywords = ""Credibility; Trust; Web service"",
    keywords = ""Uncertainty analysis; Websites; Credibility; Credibility models; Deterministic approach; Probabilistic approaches; Probabilistic database; Probabilistic trust models; Trust; Trust level; Web services"",
    correspondence_address = ""Z. Saoud; Boulevard Niels Bohr, Villeurbanne Cedex, 69622, France; email: saoud.zohra@gmail.com"",
    publisher = ""Elsevier Inc."",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 13""
}
"""	Excluded	Excluded				2	Scopus Signed In		A fuzzy-based credibility model to assess Web services trust under uncertainty	https://www.scopus.com/record/display.uri?eid=2-s2.0-84949580160&origin=resultslist&sort=r-f&src=s&sid=19337c18b5029d346d6df112b6f4fbd2&sot=b&sdt=b&s=TITLE%28a+fuzzy+based+credibility+model+to+assess+web+services+trust+under+uncertainty%29&sl=85&sessionSearchId=19337c18b5029d346d6df112b6f4fbd2&relpos=0	Elsevier Inc	nan; References
514	TrustSE	A formal approach for the specification and verification of trustworthy component-based systems	Software systems are increasingly becoming ubiquitous affecting the way we experience the world. Embedded software systems, especially those used in smart devices, have become an essential constituent of the technological infrastructure of modern societies. Such systems, in order to be trusted in society, must be proved to be trustworthy. Trustworthiness is a composite non-functional property that implies safety, timeliness, security, availability, and reliability. This paper presents a formal approach for the development of trustworthy component-based systems. The approach involves a formal component model for the specification of component's structure, functional, and non-functional (trustworthiness) properties, a model transformation technique for the automatic generation of component behavior using the specified structure and restricted by the specified properties, and a unified formal verification method for safety, security, reliability and availability properties using model checking.	Embedded software; Embedded systems; Network security; Software engineering; Specifications; Automatic Generation; Component based systems; Component behavior; Component model; Component-Based Development; Embedded software systems; Formal approach; Formal verification methods; Formal verifications; Model transformation technique; Non functional properties; Non-functional; Reliability and availability; Smart devices; Software systems; Specification and verification; Technological infrastructure; Trustworthiness; Model checking; Embedded software;  Embedded systems;  Network security;  Software engineering;  Specifications;  Automatic Generation;  Component based systems;  Component behavior;  Component model;  Component-Based Development;  Embedded software systems;  Formal approach;  Formal verification methods;  Formal verifications;  Model transformation technique;  Non functional properties;  Non-functional;  Reliability and availability;  Smart devices;  Software systems;  Specification and verification;  Technological infrastructure;  Trustworthiness;  Model checking	Mohammad, Mubarak; Alagar, Vangalur	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2010.08.048	(2009)Architecture Analysis and Design Language.Cited 24 times.AADL; Abrial, J.-R., Borger, E., Langmaack, H.(1996)Formal Methods for Industrial Applications, Specifying and Programming the Steam Boiler Control (the Book Grow out of A Dagstuhl Seminar, June 1995). Vol. 1165 of Lecture Notes in Computer Science, pp. 1-12.Cited 34 times.Springer; Akerholm, M., Carlson, J., Fredriksson, J., Hansson, H., Hakansson, J., Moller, A., Pettersson, P., (...), Tivoli, M.; Amnell, T., Fersman, E., Mokrushin, L., Pettersson, P., Yi, W.; Atkinson, C., Paech, B., Reinhold, J., Sander, T.; Avizienis, A., Laprie, J.-C., Randell, B., Landwehr, C.; Behrmann, G., David, A., Larsen, K.G.; Bishop, M.(2003)Computer Security: Art and Science.Cited 805 times.Addison-Wesley; Bruneton, E., Coupaye, T., Leclercq, M., Quema, V., Stefani, J.-B.; Bures, T., Hnetynka, P., Plasil, F.; Cheung, L., Roshandel, R., Medvidovic, N., Golubchik, L.; Crnkovic, I., Chaudron, M., Sentilles, S., Vulgarakis, A.A classification framework for component models(2007)Proceedings of the 7th Conference on Software Engineering and Practice in Sweden.Cited 22 times.Goteborg, Sweden; Crnkovic, I., Larsson, M.(2002)Building Reliable Component-based Software Systems.Cited 383 times.Artech House Publishers; Garlan, D., Monroe, R.T., Wile, D.Acme: Architectural description of component-based systems(2000)Foundations of Component-Based Systems, pp. 47-68.Cited 351 times.; Gokhale, S.S.; Heineman, G.T., Councill, W.T.(2001)Component-based Software Engineering: Putting the Pieces Together.Cited 667 times.Addison-Wesley; Hissam, S., Ivers, J., Plakosh, D., Wallnau, K.C.Pin Component Technology (v1.0) and its c Interface(2005)Tech. Rep. CMU/SEI-2005-TN-001. Software Engineering Institute.Cited 12 times.April Carnegie Mellon University; Ibrahim, N.(2009)Transforming Architectural Descriptions of Component-based Systems for Formal Analysis.Cited 2 times.Master Thesis. Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Immonen, A., Niemela, E.; Jackson, D.; Lau, K.-K., Wang, Z.; McLean, J.; Mohammad, M.S.(2009)A Formal Component-based Software Engineering Approach for Developing Trustworthy Systems.Cited 6 times.PhD Thesis. Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Mundie, C., De Vries, P., Haynes, P., Corwine, M.(2002)Trustworthy Computing. Microsoft White Paper.Cited 52 times.October; Nierstrasz, O., Arevalo, G., Ducasse, S., Wuyts, R., Black, A.P., Muller, P.O., Zeidler, C., (...), van den Born, R.; Pretschner, A., Broy, M., Kruger, I.H., Stauner, T.; Rausch, A., Reussner, R., Mirandola, R., Plasil, F.(2008)The Common Component Modeling Example: Comparing Software Component Models.Cited 50 times.Springer; Schneider, F.B., Bellovin, S.M., Inouye, A.S.; Show, M., Garlan, D.(1996)Software Architecture: Perspectives on An Emerging Discipline.Cited 2204 times.Prentice Hall Publishing; Sommerville, I.(2007)Software Engineering.Cited 6782 times.8th edition Addison-Wesley; Van Ommering, R., Van Der Linden, F., Kramer, J., Magee, J.; Yun, Z.(2009)A Visual Modeling Tool for the Development of Trustworthy Component-based Systems.Cited 3 times.Master Thesis. Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada	77 - 104	"""@ARTICLE{Mohammad201177,
    author = ""Mohammad, Mubarak and Alagar, Vangalur"",
    title = ""A formal approach for the specification and verification of trustworthy component-based systems"",
    year = ""2011"",
    journal = ""Journal of Systems and Software"",
    volume = ""84"",
    number = ""1"",
    pages = ""77 - 104"",
    doi = ""10.1016/j.jss.2010.08.048"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-78649326944\&doi=10.1016\%2fj.jss.2010.08.048\&partnerID=40\&md5=801154139092f1fcd198c49b9428a50d"",
    affiliations = ""Department of Computer Science and Software Engineering, Concordia University, Montreal H3G 2W1, Canada; Department of Computer Science and Software Engineering, Xi'An Jiaotong-Liverpool University, Suzhou, China"",
    abstract = ""Software systems are increasingly becoming ubiquitous affecting the way we experience the world. Embedded software systems, especially those used in smart devices, have become an essential constituent of the technological infrastructure of modern societies. Such systems, in order to be trusted in society, must be proved to be trustworthy. Trustworthiness is a composite non-functional property that implies safety, timeliness, security, availability, and reliability. This paper presents a formal approach for the development of trustworthy component-based systems. The approach involves a formal component model for the specification of component's structure, functional, and non-functional (trustworthiness) properties, a model transformation technique for the automatic generation of component behavior using the specified structure and restricted by the specified properties, and a unified formal verification method for safety, security, reliability and availability properties using model checking. (c) 2010 Elsevier Inc."",
    author_keywords = ""Component model; Component-based development; Formal verification; Trustworthiness"",
    keywords = ""Embedded software; Embedded systems; Network security; Software engineering; Specifications; Automatic Generation; Component based systems; Component behavior; Component model; Component-Based Development; Embedded software systems; Formal approach; Formal verification methods; Formal verifications; Model transformation technique; Non functional properties; Non-functional; Reliability and availability; Smart devices; Software systems; Specification and verification; Technological infrastructure; Trustworthiness; Model checking"",
    correspondence_address = ""M. Mohammad; Department of Computer Science and Software Engineering, Concordia University, Montreal H3G 2W1, Canada; email: ms\_moham@cse.concordia.ca"",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 28""
}
"""	Excluded	Excluded				2	Scopus Signed In		A formal approach for the specification and verification of trustworthy component-based systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-78649326944&origin=resultslist&sort=r-f&src=s&sid=e25a735f01dd7fe046a4d2153e27aee0&sot=b&sdt=b&s=TITLE%28a+formal+approach+for+the+specification+and+verification+of+trustworthy+component+based+systems%29&sl=102&sessionSearchId=e25a735f01dd7fe046a4d2153e27aee0&relpos=0		nan; Publisher
515	TrustSE	Model checking of robustness properties in trust and reputation systems	Trust and reputation systems (TRSs) are used in cooperative environments where an agent needs to make a decision for requesting or performing a service. However, TRSs can be abused by malicious agents who do sequences of dishonest actions (attacks). Although there are proposals on verification of TRSs against attacks, they are not comprehensive enough to evaluate various Trust Computation Models (TCMs) and/or do not provide sufficient expressive power to specify different required robustness properties. In this paper, we introduce a comprehensive framework for specifying and verifying various robustness properties in TRSs through model checking approach. The proposed framework includes three main parts: (1) a logic for specification of robustness properties of TRSs named Probabilistic Action and Reward based Computation Tree Logic (PARCTL), (2) an enhanced version of our previously proposed model for specifying TRSs in hostile environments named Trust and Reputation Interaction Model (TRIM), and (3) the required algorithms for quantitative and probabilistic model checking of PARCTL properties over the specified model. The proposed framework has been implemented as a tool named TRIM-Checker. Our experimental results on robustness analysis of famous eBay, Beta, and CORE TCMs using TRIM-Checker are presented and their robustness against attacks is evaluated and compared together.	Robustness (control systems); Software engineering; Verification; Computation tree logic; Cooperative environment; Probabilistic model checking; Reputation; Robustness properties; TRIM-Checker; Trust; Trust and reputation systems; Model checking; Robustness (control systems);  Software engineering;  Verification;  Computation tree logic;  Cooperative environment;  Probabilistic model checking;  Reputation;  Robustness properties;  TRIM-Checker;  Trust;  Trust and reputation systems;  Model checking	Ghasempouri, Seyed Asgary; Tork Ladani, Behrouz	Future Generation Computer Systems	https://doi.org/10.1016/j.future.2020.02.070		302 - 319	"""@ARTICLE{Ghasempouri2020302,
    author = ""Ghasempouri, Seyed Asgary and Tork Ladani, Behrouz"",
    title = ""Model checking of robustness properties in trust and reputation systems"",
    year = ""2020"",
    journal = ""Future Generation Computer Systems"",
    volume = ""108"",
    pages = ""302 - 319"",
    doi = ""10.1016/j.future.2020.02.070"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85080912007\&doi=10.1016\%2fj.future.2020.02.070\&partnerID=40\&md5=7a57b0e4d12fe96933da9f0094a3a5cd"",
    affiliations = ""Department of Software Engineering, Faculty of Computer Engineering, University of Isfahan, Isfahan, Iran"",
    abstract = ""Trust and reputation systems (TRSs) are used in cooperative environments where an agent needs to make a decision for requesting or performing a service. However, TRSs can be abused by malicious agents who do sequences of dishonest actions (attacks). Although there are proposals on verification of TRSs against attacks, they are not comprehensive enough to evaluate various Trust Computation Models (TCMs) and/or do not provide sufficient expressive power to specify different required robustness properties. In this paper, we introduce a comprehensive framework for specifying and verifying various robustness properties in TRSs through model checking approach. The proposed framework includes three main parts: (1) a logic for specification of robustness properties of TRSs named Probabilistic Action and Reward based Computation Tree Logic (PARCTL), (2) an enhanced version of our previously proposed model for specifying TRSs in hostile environments named Trust and Reputation Interaction Model (TRIM), and (3) the required algorithms for quantitative and probabilistic model checking of PARCTL properties over the specified model. The proposed framework has been implemented as a tool named TRIM-Checker. Our experimental results on robustness analysis of famous eBay, Beta, and CORE TCMs using TRIM-Checker are presented and their robustness against attacks is evaluated and compared together. (c) 2020 Elsevier B.V."",
    author_keywords = ""Model checking; Reputation; Robustness; TRIM-Checker; Trust; Verification"",
    keywords = ""Robustness (control systems); Software engineering; Verification; Computation tree logic; Cooperative environment; Probabilistic model checking; Reputation; Robustness properties; TRIM-Checker; Trust; Trust and reputation systems; Model checking"",
    correspondence_address = ""B. Tork Ladani; Department of Software Engineering, Faculty of Computer Engineering, University of Isfahan, Isfahan, Iran; email: ladani@eng.ui.ac.ir"",
    publisher = ""Elsevier B.V."",
    issn = ""0167739X"",
    coden = ""FGCSE"",
    language = ""English"",
    abbrev_source_title = ""Future Gener Comput Syst"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 7""
}
"""	Excluded	Excluded				2	Scopus Signed In		Model checking of robustness properties in trust and reputation systems	https://www.scopus.com/record/display.uri?eid=2-s2.0-85080912007&origin=resultslist&sort=r-f&src=s&sid=5cbaf167405568d7946131261b1f43a0&sot=b&sdt=b&s=TITLE%28model+checking+of+robustness+properties+in+trust+and+reputation+systems%29&sl=78&sessionSearchId=5cbaf167405568d7946131261b1f43a0&relpos=0	Elsevier B.V	nan; References
516	TrustSE	An extended attribute based access control model with trust and privacy: Application to a collaborative crisis management system	Many efforts in the area of computer security have been drawn to attribute-based access control (ABAC). Compared to other adopted models, ABAC provides more granularity, scalability, and flexibility. This makes it a valuable access control system candidate for securing platforms and environments used for coordination and cooperation among organizations and communities, especially over open networks such as the Internet. On the other hand, the basic ABAC model lacks provisions for context, trust and privacy issues, all of which are becoming increasingly critical, particularly in high performance distributed collaboration environments. This paper presents an extended access control model based on attributes associated with objects and subjects. It incorporates trust and privacy issues in order to make access control decisions sensitive to the cross-organizational collaboration context. Several aspects of the proposed model are implemented and illustrated by a case study that shows realistic ABAC policies in the domain of distributed multiple organizations crisis management systems. Furthermore, the paper shows a collaborative graphical tool that enables the actors in the emergency management system to make better decisions. The prototype shows how it guarantees the privacy of object's attributes, taking into account the trust of the subjects. This tool incorporates a decision engine that relies on attribute based policies and dynamic trust and privacy evaluation. The resulting platform demonstrates the integration of the ABAC model, the evolving context, and the attributes of actors and resources.	Access control; ABAC; Trust; Privacy; Context; Distributed collaboration; Crisis management system; Access control;  ABAC;  Trust;  Privacy;  Context;  Distributed collaboration;  Crisis management system	Smari, Waleed W.; Clemente, Patrice; Lalande, Jean-Francois	FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE	https://doi.org/10.1016/j.future.2013.05.010		147-168	"""@article{WOS:000329683200014,
    Author = ""Smari, Waleed W. and Clemente, Patrice and Lalande, Jean-Francois"",
    Title = ""An extended attribute based access control model with trust and privacy: Application to a collaborative crisis management system"",
    Journal = ""FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE"",
    Year = ""2014"",
    Volume = ""31"",
    Pages = ""147-168"",
    Month = ""FEB"",
    Abstract = ""Many efforts in the area of computer security have been drawn to attribute-based access control (ABAC). Compared to other adopted models, ABAC provides more granularity, scalability, and flexibility. This makes it a valuable access control system candidate for securing platforms and environments used for coordination and cooperation among organizations and communities, especially over open networks such as the Internet. On the other hand, the basic ABAC model lacks provisions for context, trust and privacy issues, all of which are becoming increasingly critical, particularly in high performance distributed collaboration environments. This paper presents an extended access control model based on attributes associated with objects and subjects. It incorporates trust and privacy issues in order to make access control decisions sensitive to the cross-organizational collaboration context. Several aspects of the proposed model are implemented and illustrated by a case study that shows realistic ABAC policies in the domain of distributed multiple organizations crisis management systems. Furthermore, the paper shows a collaborative graphical tool that enables the actors in the emergency management system to make better decisions. The prototype shows how it guarantees the privacy of object's attributes, taking into account the trust of the subjects. This tool incorporates a decision engine that relies on attribute based policies and dynamic trust and privacy evaluation. The resulting platform demonstrates the integration of the ABAC model, the evolving context, and the attributes of actors and resources. (C) 2013 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Smari, WW (Corresponding Author), Ball Aerosp \\& Technol Corp, Dayton, OH 45324 USA. Smari, Waleed W., Ball Aerosp \\& Technol Corp, Dayton, OH 45324 USA. Clemente, Patrice; Lalande, Jean-Francois, ENSI Bourges, LIFO, F-18020 Bourges, France."",
    DOI = ""10.1016/j.future.2013.05.010"",
    ISSN = ""0167-739X"",
    EISSN = ""1872-7115"",
    Keywords = ""Access control; ABAC; Trust; Privacy; Context; Distributed collaboration; Crisis management system"",
    Keywords-Plus = ""AUTHENTICATION"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""smari@aiys.org"",
    Affiliations = ""Ball Aerospace \\& Technologies"",
    ResearcherID-Numbers = ""Lalande, Jean-Francois/I-1128-2019"",
    ORCID-Numbers = ""Lalande, Jean-Francois/0000-0003-4984-2199"",
    Number-of-Cited-References = ""95"",
    Times-Cited = ""56"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""74"",
    Journal-ISO = ""Futur. Gener. Comp. Syst."",
    Doc-Delivery-Number = ""289LE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000329683200014"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		An extended attribute based access control model with trust and privacy: Application to a collaborative crisis management system	https://www.webofscience.com/wos/woscc/full-record/WOS:000329683200014	ELSEVIER	nan; References
517	TrustSE	Special Section: Trusted computing			Xiang, Yang; Zhou, Wanlei	FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF GRID COMPUTING AND ESCIENCE	https://doi.org/10.1016/j.future.2010.11.016		527-528	"""@article{WOS:000290086300009,
    Author = ""Xiang, Yang and Zhou, Wanlei"",
    Title = ""Special Section: Trusted computing"",
    Journal = ""FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF GRID COMPUTING AND ESCIENCE"",
    Year = ""2011"",
    Volume = ""27"",
    Number = ""5"",
    Pages = ""527-528"",
    Month = ""MAY"",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Editorial Material"",
    Language = ""English"",
    Affiliation = ""Xiang, Y (Corresponding Author), Deakin Univ, Sch Informat Technol, 221 Burwood Highway, Burwood, Vic 3125, Australia. Xiang, Yang; Zhou, Wanlei, Deakin Univ, Sch Informat Technol, Burwood, Vic 3125, Australia."",
    DOI = ""10.1016/j.future.2010.11.016"",
    ISSN = ""0167-739X"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""yang@deakin.edu.au wanlei@deakin.edu.au"",
    Affiliations = ""Deakin University"",
    ResearcherID-Numbers = ""Zhou, Wanlei/HKV-8022-2023 Xiang, Yang/D-1280-2009"",
    ORCID-Numbers = ""Zhou, Wanlei/0000-0002-1680-2521 Xiang, Yang/0000-0001-5252-0831"",
    Number-of-Cited-References = ""8"",
    Times-Cited = ""0"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""4"",
    Journal-ISO = ""Futur. Gener. Comp. Syst."",
    Doc-Delivery-Number = ""757LK"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000290086300009"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	Web of Science		Special Section: Trusted computing	https://www.webofscience.com/wos/woscc/full-record/WOS:000290086300009	ELSEVIER SCIENCE BV	nan; Abstract; Keywords; References
518	TrustSE	Facilitating contagion trust through tools in Global Systems Engineering teams	Context: In Global Systems Engineering teams, researchers have found that trust can be transitive to some degree or imported (swift trust) under certain conditions. We argue that trust can be contagion and seeded by tools (spread from one individual to another through tools). Objective: We sought to investigate the potential for using tools to support the development of trust in such teams and facilitate contagion trust. Specifically, we sought to investigate whether any existing tools support the development of trust in such teams and which information helps such development, whether the visualization of past collaborations would help developing trust, and what tools or features practitioners would wish for, if they had a magic wand. Method: We interviewed 71 employees from five multinational organizations. We focused on gaining an understanding of the tools that are currently used to engender trust and the information needed to facilitate contagion, in which conditions visualizations of past collaborations are helpful, and what software tool features could help develop trust. Our analysis was guided by grounded theory. Results: We found evidence that supports the theory of contagion trust and tools can be used to initiate the development of trust. These tools include software tools, office technologies, or organizational structures. Practitioners' needs were functional (e.g. audio channel with remote colleagues) and/or non-functional (e.g. can be adopted in sites with poor infrastructure). Conclusion: Our study illustrates that tools can be used to facilitate contagion trust and provides three main contributions. First, our exploration of how existing tools are used provides a guide to effective practices in such teams. Second, the descriptions of features that can facilitate contagion trust provide useful design implications for future tools. Third, the identification of the kind of information that facilitates contagion trust provides an understanding of practitioners' underlying needs that can be used to develop collaboration tools.	Global collaboration; Contagion trust; Swift trust; Global collaboration;  Contagion trust;  Swift trust	Al-Ani, Ban; Marczak, Sabrina; Redmiles, David; Prikladnicki, Rafael	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2013.11.001		309-320	"""@article{WOS:000331353000003,
    Author = ""Al-Ani, Ban and Marczak, Sabrina and Redmiles, David and Prikladnicki, Rafael"",
    Title = ""Facilitating contagion trust through tools in Global Systems Engineering teams"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2014"",
    Volume = ""56"",
    Number = ""3"",
    Pages = ""309-320"",
    Month = ""MAR"",
    Abstract = ""Context: In Global Systems Engineering teams, researchers have found that trust can be transitive to some degree or imported (swift trust) under certain conditions. We argue that trust can be contagion and seeded by tools (spread from one individual to another through tools). Objective: We sought to investigate the potential for using tools to support the development of trust in such teams and facilitate contagion trust. Specifically, we sought to investigate whether any existing tools support the development of trust in such teams and which information helps such development, whether the visualization of past collaborations would help developing trust, and what tools or features practitioners would wish for, if they had a magic wand. Method: We interviewed 71 employees from five multinational organizations. We focused on gaining an understanding of the tools that are currently used to engender trust and the information needed to facilitate contagion, in which conditions visualizations of past collaborations are helpful, and what software tool features could help develop trust. Our analysis was guided by grounded theory. Results: We found evidence that supports the theory of contagion trust and tools can be used to initiate the development of trust. These tools include software tools, office technologies, or organizational structures. Practitioners' needs were functional (e.g. audio channel with remote colleagues) and/or non-functional (e.g. can be adopted in sites with poor infrastructure). Conclusion: Our study illustrates that tools can be used to facilitate contagion trust and provides three main contributions. First, our exploration of how existing tools are used provides a guide to effective practices in such teams. Second, the descriptions of features that can facilitate contagion trust provide useful design implications for future tools. Third, the identification of the kind of information that facilitates contagion trust provides an understanding of practitioners' underlying needs that can be used to develop collaboration tools. (C) 2013 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Al-Ani, B (Corresponding Author), 400 Covina Blvd, San Dimas, CA 91773 USA. Al-Ani, Ban; Redmiles, David, Univ Calif Irvine, Dept Informat, Donald Bren Sch Informat \\& Comp Sci, Irvine, CA 92697 USA. Marczak, Sabrina; Prikladnicki, Rafael, Pontificia Univ Catolica Rio Grande Sul PUCRS, Fac Informat, BR-90619900 Porto Alegre, RS, Brazil."",
    DOI = ""10.1016/j.infsof.2013.11.001"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Global collaboration; Contagion trust; Swift trust"",
    Keywords-Plus = ""SOFTWARE-DEVELOPMENT; VIRTUAL TEAMS; COMMUNICATION; COLLABORATION; TECHNOLOGY; TIME"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""balani@ics.uci.edu sabrina.marczak@pucrs.br redmiles@ics.uci.edu rafael.prikladnicki@pucrs.br"",
    Affiliations = ""University of California System; University of California Irvine; Pontificia Universidade Catolica Do Rio Grande Do Sul"",
    Funding-Acknowledgement = ""National Science Foundation {[}0943262, 0808783, 1111446]; Dell Computers of Brazil Ltd. {[}Law 8.248/91]; CNPq {[}309000/2012-2]; Direct For Computer \\& Info Scie \\& Enginr {[}0808783, 1111446] Funding Source: National Science Foundation; Direct For Computer \\& Info Scie \\& Enginr; Div Of Information \\& Intelligent Systems {[}0943262] Funding Source: National Science Foundation; Div Of Information \\& Intelligent Systems {[}1111446, 0808783] Funding Source: National Science Foundation"",
    Funding-Text = ""This work was supported by National Science Foundation 0943262, 0808783, and 1111446. We also thank the PDTI Program, financed by Dell Computers of Brazil Ltd. (Law 8.248/91), and CNPq (309000/2012-2). Special thanks to the participants for their collaboration and time."",
    Number-of-Cited-References = ""40"",
    Times-Cited = ""6"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""16"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""AA8NU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000331353000003"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Facilitating contagion trust through tools in Global Systems Engineering teams	https://www.webofscience.com/wos/woscc/full-record/WOS:000331353000003	ELSEVIER SCIENCE BV	nan; References
519	TrustSE	Multi-Value Models for Allocation of Software Component Development Costs Based on Trustworthiness	The trustworthiness of software is an important attribute. The cost of software development increases with its improvement by software trustworthiness. As one of main methods of software development, component-based software development can reduce development costs to a certain extent. However, it is important to study how to allocate the given development costs to each component so that software trustworthiness can be optimized. First, multi-value models for allocation of software component development costs are established based on different structures of software system. Second, algorithms for allocation of software component development costs can be designed by using dynamic programming. The proposed allocation algorithms can allocate development costs to each component to optimize software trustworthiness. Furthermore, in order to allocate development costs to each component automatically, a web-based software tool for allocating development costs to each component is developed. Finally, a case study of a self-service ticketing system is provided to show the feasibility of the proposed allocation algorithms.	Resource management; Software systems; Software algorithms; Mathematical model; Heuristic algorithms; Computational modeling; Development Costs; Software Components; System Software; Software Development; Dynamic Programming; Web-based Tool; Allocation Algorithm; Cost Allocation; Component Of Complex; Additional Costs; Loop Structure; Space Complexity; Analytic Hierarchy Process; Branching Structure; Allocation Model; Software Quality; Two-dimensional Array; Basic Cost; Recursive Equation; Top Components; Array Output; Trustworthiness Ratings; Allocation algorithm; component; development costs; dynamic programming; software trustworthiness	Mengyue Wang; Yanfang Ma; Guanru Li; Wei Zhou; Liang Chen	IEEE Access	https://doi.org/10.1109/ACCESS.2020.3007158	"1.T. A. Ahanger and A. Aljumah, ""Internet of Things: A comprehensive study of security issues and defense mechanisms"", IEEE Access, vol. 7, pp. 11020-11028, 2019.Show in Context View Article  Google Scholar; 2.P. G. Neumann, ""Trustworthiness and truthfulness are essential"", Commun. ACM, vol. 60, pp. 26-28, May 2017.Show in Context CrossRef  Google Scholar; 3.F. Schneider, Trust in Cyberspace, Washington, DC, USA:National Academy Press, 1998.Show in Context Google Scholar; 4.J. He, Z. Shan, J. Wang, G. Y. Pu; Fang, K. Liu, R. Zhao, et al., ""Review of the achievements of major research plan of trustworthy software"", Bull. Natl. Nat. Sci. Found., vol. 32, no. 3, pp. 291-296, 2018.Show in Context Google Scholar; 5.W. Hasselbring and R. Reussner, ""Toward trustworthy software systems"", Computer, vol. 39, no. 4, pp. 91-92, Apr. 2006.Show in Context View Article  Google Scholar; 6.H. Tao and Y. Chen, ""A new metric model for trustworthiness of software"", Telecommun. Syst., vol. 51, pp. 95-105, Nov. 2010.Show in Context CrossRef  Google Scholar; 7.H. Tao, H. Wu and Y. Chen, ""An approach of trustworthy measurement allocation based on sub-attributes of software"", Mathematics, vol. 7, pp. 237, Mar. 2019.Show in Context CrossRef  Google Scholar; 8.H. Tao, Y. Chen and J. Pang, ""Axiomatic approaches based software trustworthiness measure"", Proc. Int. Conf. Appl. Syst. Innov. (ICASI), pp. 135-142, May 2015.Show in Context Google Scholar; 9.B. Gu, J. Xu, J. Zhang, Y. Chen, X. Guo, S. Jin, et al., ""An approach to measureing and grading software trust for spacecraft software"", Scientia Sinica Technologica, vol. 45, no. 2, pp. 221-228, Jan. 2015.Show in Context CrossRef  Google Scholar; 10.F. Brosig, P. Meier, S. Becker, A. Koziolek, H. Koziolek and S. Kounev, ""Quantitative evaluation of model-driven performance analysis and simulation of component-based architectures"", IEEE Trans. Softw. Eng., vol. 41, no. 2, pp. 157-175, Feb. 2015.Show in Context View Article  Google Scholar; 11.T. Hongwei, C. Yixiang, W. Hengyang and D. Rumei, ""A survey of software trustworthiness measurements"", Int. J. Performability Eng., vol. 15, no. 9, pp. 2364, 2019.Show in Context CrossRef  Google Scholar; 12.J. Li, M. Li, D. Wu and H. Song, ""An integrated risk measurement and optimization model for trustworthy software process management"", Inf. Sci., vol. 191, pp. 47-60, May 2012.Show in Context CrossRef  Google Scholar; 13.S. Ding, S.-L. Yang and C. Fu, ""A novel evidential reasoning based method for software trustworthiness evaluation under the uncertain and unreliable environment"", Expert Syst. Appl., vol. 39, no. 3, pp. 2700-2709, Feb. 2012.Show in Context CrossRef  Google Scholar; 14.Y. Ma, Y. Chen and B. Gu, ""An attributes-based allocation approach of software trustworthy degrees"", Proc. IEEE Int. Conf. Softw. Quality Rel. Secur. Companion, pp. 89-94, Aug. 2015.Show in Context View Article  Google Scholar; 15.H. Tao, Y. Chen and H. Wu, ""A reallocation approach for software trustworthiness based on trustworthy attributes"", Mathematics, vol. 8, no. 1, pp. 14, Dec. 2019.Show in Context CrossRef  Google Scholar; 16.T. Vale, I. Crnkovic, E. S. de Almeida, P. A. D. M. S. Neto, Y. C. Cavalcanti and S. R. D. L. Meira, ""Twenty-eight years of component-based software engineering"", J. Syst. Softw., vol. 111, pp. 128-148, Jan. 2016.Show in Context CrossRef  Google Scholar; 17.B. Wang, Y. Chen, S. Zhang and H. Wu, ""Updating model of software component trustworthiness based on users feedback"", IEEE Access, vol. 7, pp. 60199-60205, 2019.Show in Context View Article  Google Scholar; 18.D. Huang, ""Component-based software trustworthiness measurement and allocation model"", 2019.Show in Context Google Scholar; 19.Y. Ma, M. Wang and W. Zhou, ""Trustworthiness-based development costs allocation algorithm of modular software"", Comput. Eng. Sci., vol. 42, no. 6, pp. 50-57, 2020.Show in Context Google Scholar; 20.C. J. Dale and A. Winterbottom, ""Optimal allocation of effort to improve system reliability"", IEEE Trans. Rel., vol. R-35, no. 2, pp. 188-191, Jun. 1986.Show in Context View Article  Google Scholar; 21.W. F. Lu Xu and L. Jia, ""An approach of software reliability evolution in open environment"", Chin. J. Computers., vol. 33, no. 3, pp. 452-461, 2010.Show in Context CrossRef  Google Scholar"	122673- 122684		Excluded	Excluded				2	IEEE		Multi-Value Models for Allocation of Software Component Development Costs Based on Trustworthiness	https://ieeexplore.ieee.org/document/9133387	IEEE	nan; Year; Bibtex
520	TrustSE	A preliminary analysis on the effects of propensity to trust in distributed software development	Establishing trust between developers working at distant sites facilitates team collaboration in distributed software development. While previous research has focused on how to build and spread trust in absence of direct, face-to-face communication, it has overlooked the effects of the propensity to trust, i.e., the trait of personality representing the individual disposition to perceive the others as trustworthy. In this study, we present a preliminary, quantitative analysis on how the propensity to trust affects the success of collaborations in a distributed project, where the success is represented by pull requests whose code changes and contributions are successfully merged into the project's repository.	trust;  pull requests;  personality traits;  distributed software development; trust, pull requests, personality traits, distributed software development	Calefato, Fabio; Lanubile, Filippo; Novielli, Nicole	ICGSE '17: Proceedings of the 12th International Conference on Global Software Engineering	https://doi.org/10.1109/ICGSE.2017.1		56-60	"""@inproceedings{10.1109/ICGSE.2017.1,
    author = ""Calefato, Fabio and Lanubile, Filippo and Novielli, Nicole"",
    title = ""A preliminary analysis on the effects of propensity to trust in distributed software development"",
    year = ""2017"",
    isbn = ""9781538615874"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ICGSE.2017.1"",
    doi = ""10.1109/ICGSE.2017.1"",
    abstract = ""Establishing trust between developers working at distant sites facilitates team collaboration in distributed software development. While previous research has focused on how to build and spread trust in absence of direct, face-to-face communication, it has overlooked the effects of the propensity to trust, i.e., the trait of personality representing the individual disposition to perceive the others as trustworthy. In this study, we present a preliminary, quantitative analysis on how the propensity to trust affects the success of collaborations in a distributed project, where the success is represented by pull requests whose code changes and contributions are successfully merged into the project's repository."",
    booktitle = ""Proceedings of the 12th International Conference on Global Software Engineering"",
    pages = ""56-60"",
    numpages = ""5"",
    keywords = ""trust, pull requests, personality traits, distributed software development"",
    location = ""Buenos Aires, Argentina"",
    series = ""ICGSE '17""
}
"""	Excluded	Excluded				2	ACM		A Preliminary Analysis on the Effects of Propensity to Trust in Distributed Software Development	https://doi.org/10.1109/ICGSE.2017.1	IEEE Press	nan; References; Link
521	TrustSE	Model Checking the Uncertainties in Software Systems Introduced by Intelligent Components	An intelligent software system consists of intelligent components, fundamentally modeled by neural networks and traditional software components, in which the intelligent components are responsible to make decisions. Thus, intelligent systems can adapt to environment changes in the running time. However, due to the fact that a neural network highly relies on the training data, its structure and quality are both uncertain. These uncertainties will be passed to the rest of the software system by the intelligent components. This paper presents a framework to model checking such kind of intelligent system software.	Petri nets; Adaptation models; Neural networks; Software systems; Computational modeling; Adaptive systems; Uncertainty; System Software; Model Checking; Neural Network; Training Data; Intelligent Systems; Traditional Software; Intelligent Software; Material Costs; Adaptive Model; Manufacturing Systems; Fuzzy Rules; High-quality Materials; Supplier Selection; Petri Nets; Customer Requests; Intelligent software system, Intelligent system software, adaptive model, model checking	Zuohua Ding; Wenjie Jiang; Mingyue Jiang; Zhi Jin; He Jiang	2018 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)	https://doi.org/10.1109/ISSREW.2018.00-18	"1.X.Q. Wu, ""An intelligent Petri nets model based on competitive neural network"", Computer Supported Cooperative Work in Design, pp. 388-397, 2005. CrossRef  Google Scholar; 2.Z. Ding, M. Zhou and Y. Zhou, ""Modeling self-adaptive software system with learning Petri nets"", IEEE Transactions on Systems Man And Cybernetics: Systems, vol. 46, no. 4, pp. 483-498, 2016. View Article  Google Scholar; 3.I. Enbutsu, K. Baba and N. Hara, ""Fuzzy rule extraction from a multilayered neural network"", Proceedings of the International Joint Conference on Neural Networks, pp. 461-465, 1991. View Article  Google Scholar; 4.Z. Ding, Y. Zhou and M. Zhou, ""Modeling self-adaptive software systems by fuzzy rules and petri nets"", IEEE Transactions on Fuzzy Systems, 2018. View Article  Google Scholar; 5.G. J. Holzmann, ""The Model Checker SPIN"", IEEE Transactions on Software Engineering, vol. 23, no. 5, pp. 279-295, 1997. View Article  Google Scholar"			Excluded	Excluded			Studies that were incomplete, short papers, or only provided literature in the form of abstracts, prefaces, or presentation slides	2	IEEE		Model Checking the Uncertainties in Software Systems Introduced by Intelligent Components	https://ieeexplore.ieee.org/document/8539176	IEEE	nan; Pages; Year; Bibtex
522	TrustSE	Designing Safety Critical Software Systems to Manage Inherent Uncertainty	Deploying machine learning algorithms in safety critical systems raises new challenges for system designers. The opaque nature of some algorithms together with the potentially large input space makes reasoning or formally proving safety difficult. In this paper, we argue that the inherent uncertainty that comes from using certain classes of machine learning algorithms can be mitigated through the development of software architecture design patterns. New or adapted patterns will allow faster roll out time for new technologies and decrease the negative impact machine learning components can have on safety critical systems. We outline the important safety challenges that machine learning algorithms raise and define three important directions for the development of new architectural patterns.	Safety; Software algorithms; Software architecture; Uncertainty; Software; Cognition; Machine learning algorithms; System Software; Safety-critical; Inherent Uncertainty; Machine Learning; Learning Algorithms; Evolutionary Patterns; Architectural Design; Input Space; Large Input; Design Patterns; Software Architecture; Safety Challenges; Architectural Patterns; Training Data; Components Of System; Object Recognition; Unmanned Aerial Vehicles; Fault-tolerant; Autonomous Vehicles; Design Space; Formal Verification; Safe Design; Systematic Uncertainties; Safety Properties; Responsibility For Safety; Safe Conditions; Output Space; Software Components; Deep Learning System; Safety Systems; Software architecture; Software safety; Machine Learning	Alexandru Constantin Serban	2019 IEEE International Conference on Software Architecture Companion (ICSA-C)	https://doi.org/10.1109/ICSA-C.2019.00051	"1.M. Bojarski, D. Del, D. Dworakowski, B. Firner, B. Flepp, P. Goyal, L. D. Jackel, M. Monfort, U. Muller, J. Zhang et al., End to end learning for self-driving cars, 2016. Google Scholar; 2.A. Rodriguez-Ramos, C. Sampedro, H. Bavle, P. de la Puente and P. Campoy, ""A deep reinforcement learning strategy for uav autonomous landing on a moving platform"", Journal of Intelligent & Robotic Systems, pp. 1-16, 2018. Google Scholar; 3.D. Sarikaya, J. J. Corso and K. A. Guru, ""Detection and localization of robotic tools in robot-assisted surgery videos using deep neural networks for region proposal and detection"", IEEE transactions on medical imaging, vol. 36, no. 7, pp. 1542-1549, 2017. View Article  Google Scholar; 4.ISO standard 26262:2011 Road vehicles - Functional safety, International Organization for Standardization (ISO), 2011. Google Scholar; 5.C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. Goodfellow, et al., Intriguing properties of neural networks, 2013. Google Scholar; 6.A. C. Serban and E. Poll, Adversarial examples - a complete characterisation of the phenomenon, 2018. Google Scholar; 7.K. R. Varshney and H. Alemzadeh, ""On the safety of machine learning: Cyber-physical systems decision sciences and data products"", Big data, vol. 5, no. 3, pp. 246-255, 2017. CrossRef  Google Scholar; 8.R. Kazman, M. Klein, M. Barbacci, T. Longstaff, H. Lipson and J. Carriere, ""The architecture tradeoff analysis method"" in IEEE ICECCS'98, IEEE, pp. 68-78, 1998. CrossRef  Google Scholar; 9.S. Shafaei, S. Kugele, M. H. Osman and A. Knoll, ""Un-certainty in machine learning: A safety perspective on autonomous driving"", International Conference on Computer Safety Reliability and Security, pp. 458-464, 2018. Google Scholar; 10.A. C. Serban, E. Poll and J. Visser, ""Tactical safety reasoning. a case for autonomous vehicles"", IEEE 87th Vehicular Technology Conference (VTC Spring), pp. 1-5, 2018. View Article  Google Scholar; 11.L. Gauerhof, P. Munk and S. Burton, ""Structuring validation targets of a machine learning function applied to automated driving"", International Conference on Computer Safety Reliability and Security, pp. 45-58, 2018. CrossRef  Google Scholar; 12.A. K. Saberi, E. Barbier, F. Benders and M. van den Brand, ""On functional safety methods: A system of systems approach"", Systems Conference (SysCon) 2018 Annual IEEE International, pp. 1-6, 2018. View Article  Google Scholar; 13.IEC 615038 - Functional Safety of Electrical/Electronic/Programmable Electronic Safety- Related Systems, International Electrotechnical Commission, 1998. Google Scholar; 14.B. O'Connor, ""NASA Software Safety Guidebook"" in NASA Technical Standard NASA-GB-8719.13, 2004. Google Scholar; 15.C. Preschern, N. Kajtazovic and C. Kreiner, ""            Building                          a                        safety architecture pattern system          "", European Conference on Pattern Languages of Program, pp. 17, 2015. CrossRef  Google Scholar; 16.W. Wu and T. Kelly, ""Safety tactics for software architecture design"" in COMPSAC, IEEE, pp. 368-375, 2004. Google Scholar; 17.J. S. Albus, ""The NIST real-time control system (RCS): an approach to intelligent systems research"", Journal of Experimental & Theoretical Artificial Intelligence, vol. 9, no. 2-3, pp. 157-174, 1997. CrossRef  Google Scholar; 18.E. Gat and R. P. Bonnasso, ""On three-layer architectures"", Artificial intelligence and mobile robots, vol. 195, pp. 210, 1998. Google Scholar; 19.R. Volpe, I. Nesnas, T. Estlin, D. Mutz, R. Petras and H. Das, ""The CLARAty architecture for robotic autonomy"", IEEE Aerospace Conference, vol. 1, pp. 121-132, 2001. View Article  Google Scholar; 20.A. Armoush, Design patterns for safety-critical embedded systems, 2010. Google Scholar; 21.R. Salay and K. Czarnecki, Using machine learning safely in automotive software: An assessment and adaption of software process requirements in ISO 26262, 2018. Google Scholar"			Excluded	Excluded				2	IEEE		Designing Safety Critical Software Systems to Manage Inherent Uncertainty	https://ieeexplore.ieee.org/document/8712362	IEEE	nan; Pages; Year; Bibtex
523	TrustSE	Expert software development estimation with uncertainty correction	Creation of an effective metrics and estimation program is an important but daunting step for the maturing software development organization This paper outlines a roadmap for implementing a process that establishes a program that will reap a large portion of the benefits early in the process with a minimum of implementation effort and cost This process includes a mechanism to improve software estimation accuracy as historical data becomes available for more sophisticated methods. Furthermore, we present a practical proposal for software estimation in industry based on software task size, complexity, and uncertainty.	Programming; Uncertainty; Costs; Job shop scheduling; Computer industry; Project management; Research and development; Biomedical optical imaging; Proposals; Calibration; Software Development; Linear Model; Complex Problems; Sources Of Error; Project Management; Estimation Process; Individual Estimates; Person Years; Expert Judgment; Anchoring Effect; Problem Space; Subject Matter Experts; Cost Overruns; Probability Curves; Top-down Methods; Types Of Requirements; Software Projects; Project Life Cycle; Improve Estimation Accuracy; Worst-case Estimate; Expert Estimates; Point Estimates; software estimation; metrics; process; effort and cost; dependency; historical data; accuracy; complexity; uncertainty	Ron Rammage; Hairong Lei; Michael Claus; David Baer	The 2nd International Conference on Software Engineering and Data Mining	https://ieeexplore.ieee.org/document/5542847	"1.The Standish Group: Chaos Chronicles Version 3.0. 2003: West Yarmouth MA. Google Scholar; 2.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 181-193, 2006. Google Scholar; 3.R. Stutzke, Estimating Software-Intensive System: Projects Products and Processes, Upper Saddle River, NJ, pp. 49-79, 2005. Google Scholar; 4.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 3, 2006. Google Scholar; 5.L. Laranjeira, ""Software Size Estimation of Object Oriented Systems"", IEEE Transactions on Software Engineering, vol. 16, no. 5, pp. 510-512, May 1990. View Article  Google Scholar; 6.McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 35, 2006. Google Scholar; 7.B. Boehm, Software Engineering Economics, Englewood Cliffs, NJ:Prentice-Hall Inc., pp. 311, 1981. Google Scholar; 8.M. J rgensen, ""A review of studies on Expert Estimation of software development effort"" Simula Research Laboratory"", Feb 2010. Google Scholar; 9.M. J. Rgensen and D.I.K. Sjberg, ""The impact of customer expectation on software development effort estimates"" International Journal of Project Management"", vol. 22, pp. 317-325, Feb 2004. Google Scholar; 10.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 109, 2006. Google Scholar; 11.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 150-155, 2006. Google Scholar; 12.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 122, 2006. Google Scholar; 13.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 110, 2006. Google Scholar; 14.Lei Hairong, Claus Michael, Rammage Ron, C. David Baer, Rene Decool, Joe Michael Kniss, et al., ""Software's Eight Essentials"", International Conference on New Trends in Information and Service Science, 2009. Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Expert software development estimation with uncertainty correction	https://ieeexplore.ieee.org/document/5542847	IEEE	nan; Pages; Year; Bibtex
524	TrustSE	The Use of Multilegged Arguments to Increase Confidence in Safety Claims for Software-Based Systems: A Study Based on a BBN Analysis of an Idealized Example	"The work described here concerns the use of so-called multilegged arguments to support dependability claims about software-based systems. The informal justification for the use of multilegged arguments is similar to that used to support the use of multiversion software in pursuit of high reliability or safety. Just as a diverse 1-out-of-2 system might be expected to be more reliable than each of its two component versions, so might a two-legged argument be expected to give greater confidence in the correctness of a dependability claim (for example, a safety claim) than would either of the argument legs alone. Our intention here is to treat these argument structures formally, in particular, by presenting a formal probabilistic treatment of ""confidence,? which will be used as a measure of efficacy. This will enable claims for the efficacy of the multilegged approach to be made quantitatively, answering questions such as, ""How much extra confidence about a system's safety will I have if I add a verification argument leg to an argument leg based upon statistical testing?? For this initial study, we concentrate on a simplified and idealized example of a safety system in which interest centers upon a claim about the probability of failure on demand. Our approach is to build a ""Bayesian Belief Network? (BBN) model of a two-legged argument and manipulate this analytically via parameters that define its node probability tables. The aim here is to obtain greater insight than what is afforded by the more usual BBN treatment, which involves merely numerical manipulation. We show that the addition of a diverse second argument leg can indeed increase confidence in a dependability claim; in a reasonably plausible example, the doubt in the claim is reduced to one-third of the doubt present in the original single leg. However, we also show that there can be some unexpected and counterintuitive subtleties here; for example, an entirely supportive second leg can sometimes undermine an..."	Leg; Software safety; Uncertainty; Battery powered vehicles; Particle measurements; System testing; Probability; Software reliability; Bayesian methods; Control systems; Use Of Arguments; Bayesian Belief Network; Software-based System; Confidence In Claims; Form Of Treatment; Dependability; Probability Of Failure; Single Leg; Model Parameters; Numeric; Posterior Probability; Probability Density; Use Of Variables; Conditional Probability; Conditional Distribution; Conditional Independence; Statistical Evidence; Entailment; Beta Distribution; Row Of Table; Ideal Observer; Marginal Probability; Conservative Assumption; Improvement In Confidence; Reliability Issues; Unconditional Probability; Variable C; Verification And Validation; Simple Assumption; Arguments In Support; Safety claims; safety arguments; software safety; software reliability; Bayesian belief networks.	Bev Littlewood; David Wright	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2007.1002	"1.Handbook of Math. Functions, 1970. Google Scholar; 2.B. Littlewood and D. Wright, ""Some Conservative Stopping Rules for the Operational Testing of Safety-Critical Software"", IEEE Trans. Software Eng., vol. 23, no. 11, pp. 673-683, Nov. 1997. View Article  Google Scholar; 3.S.K. Andersen, K.G. Olesen, F.V. Jensen and F. Jensen, ""Hugin A Shell for Building Bayesian Belief Universes for Expert Systems"", Proc. 11th Intl Joint Conf. Artificial Intelligence, pp. 1080-1084, 1989. Google Scholar; 4.S. Yih and C.-F. Fan, ""Search for the Unnecessary"", Nuclear Eng. Intl, pp. 24-26, 2001. Google Scholar; 5.R. Bloomfield, P.-J. Courtois, L. Strigini and B. Littlewood, ""Letter to the Editor"", Nuclear Eng. Intl, pp. 11, 2002. Google Scholar; 6.""GAPGroups Algorithms and Programming"", 2007. Google Scholar; 7.L.H. Soicher, ""GRAPE: A System for Computing with Graphs and Groups"", 2007. Google Scholar; 8.Requirements for Safety Related Software in Defence Equipment, Aug. 1997. Google Scholar; 9.""Regulatory Objective for Software Safety Assurance in Air Traffic Service Equipment"", 2001. Google Scholar; 10.R.E. Bloomfield and B. Littlewood, ""Multi-Legged Arguments: The Impact of Diversity upon Confidence in Dependability Arguments"", Proc. Intl Conf. Dependable Systems and Networks (DSN 03), pp. 25-34, 2003. View Article  Google Scholar; 11.D.E. Eckhardt and L.D. Lee, ""A Theoretical Basis for the Analysis of Multi-Version Software Subject to Coincident Errors"", IEEE Trans. Software Eng., vol. 11, no. 12, pp. 1511-1517, Dec. 1985. View Article  Google Scholar; 12.B. Littlewood and D.R. Miller, ""Conceptual Modeling of Coincident Failures in Multiversion Software"", IEEE Trans. Software Eng., vol. 15, pp. 1596-1614, 1989. View Article  Google Scholar; 13.J.C. Knight and N.G. Leveson, ""An Experimental Evaluation of the Assumption of Independence in Multi-Version Programming"", IEEE Trans. Software Eng., vol. 12, no. 1, pp. 96-109, Jan. 1986. View Article  Google Scholar; 14.J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference Mathematics and Its Applications, 1991. Google Scholar; 15.M. Volf and M. Studen, ""A Graphical Characterisation of the Largest Chain Graphs"", Intl J. Approximate Reasoning, no. 3, pp. 209-236, 1999. CrossRef  Google Scholar; 16.D.R. Wright, ""Elicitation and Validation of Graphical Dependability Models"", 2003. CrossRef  Google Scholar; 17.A.P. Dawid, ""Conditional Independence in Statistical Theory"", J. Royal Statistical Soc. B, vol. 41, no. 1, pp. 1-31, 1979. CrossRef  Google Scholar; 18.R.G. Cowell, A.P. Dawid, S.L. Lauritzen and D.J. Spiegelhalter, Statistics for Engineering and Information Science, 1999. View Article  Google Scholar; 19.S.L. Lauritzen, Graphical Models., 1996. Google Scholar; 20.G. Shafer, ""Probabilistic Expert Systems"", Proc. Conf. Board Math. SciencesNatl Science Foundation Regional Conf. Series Applied Math., 1996. CrossRef  Google Scholar; 21.A.P. Dawid, ""Conditional Independence for Statistical Operations"", Annals of Statistics, vol. 8, no. 3, pp. 598-617, 1980. CrossRef  Google Scholar; 22.M. Studen, On Mathematical Description of Probabilistic Conditional Independence Structures, May 2001. Google Scholar; 23.N. Wermuth and S.L. Lauritzen, ""On Substantive Research Hypotheses Conditional Independence Graphs and Graphical Chain Models"", J. Royal Statistical Soc. B, vol. 52, no. 1, pp. 21-72, 1990. CrossRef  Google Scholar; 24.D. Wright, ""Elicitation and Validation of Graphical Dependability Models"", Proc. 22nd Intl Conf. Computer Safety (SAFECOMP 03), pp. 8-21, 2003-Sept. CrossRef  Google Scholar; 25.G. de Barra, Measure Theory and Integration Mathematics and Its Applications., 1981. Google Scholar; 26.M.H. DeGroot, Optimal Statistical Decisions., 2004. CrossRef  Google Scholar"	347- 365		Excluded	Excluded				2	IEEE		The Use of Multilegged Arguments to Increase Confidence in Safety Claims for Software-Based Systems: A Study Based on a BBN Analysis of an Idealized Example	https://ieeexplore.ieee.org/document/4160972	IEEE	nan; Year; Bibtex
525	TrustSE	Software reuse with uncertainties	A software component design technique using fuzzy logic is presented. To handle uncertainty in software component reuse, we propose a two-level software component design. The top-level is represented by fuzzy logic rules and the low level is represented by fuzzy membership functions. We analyze some properties of this fuzzy logic software component.	Uncertainty; Fuzzy logic; Software maintenance; Software design; Programming; Application software; Concrete; Planets; Hardware; Automatic control	J. Chen; D.C. Rine	FUZZ-IEEE'99. 1999 IEEE International Fuzzy Systems. Conference Proceedings (Cat. No.99CH36315)	https://doi.org/10.1109/FUZZY.1999.793261	"1.J. Chen, A Training Approach to Develop Reusable Software Components by Combining Adaptation Algorithms, 1998. Google Scholar; 2.J. Chen and D. C. Rine, ""Maintenance of Controller Software Components Using Adaptation Algorithms"", Proceedings of 1998 Joint Conference on Information Sciences, vol. 4, pp. 5-8, 1998-Oct.-23-28. Google Scholar; 3.C. Doherty and T. Uslander, ""Plug-And-Play Software Hones Car And Plane Manufacture"", IEEE Spectrum, pp. 39-42, Oct. 1998. View Article  Google Scholar; 4.FLDE for Windows User's Manual, 1997. Google Scholar; 5.Spacecraft Attitude Determination and Control, Holland, Dordrecht:Kluwer, 1997. Google Scholar; 6.S. Murakami and M. Maeda, ""Automobile Speed Control System Using A Fuzzy Logic Controller"", Industrial Applications of Fuzzy Control, pp. 105-123, 1985. Google Scholar; 7.J. T. Nosek and P. Palvia, ""Software maintenance management: changes in the last decade"", Software Maintenance: Research and Practice, vol. 2, no. 3, pp. 157-174, 1990. CrossRef  Google Scholar; 8.D. C. Rine, ""Software perfective maintenance: including retainable software in software reuse"", Information Sciences: International Journal, vol. 75, Dec. 1993. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Software reuse with uncertainties	https://ieeexplore.ieee.org/document/793261	IEEE	nan; Pages; Year; Bibtex
526	TrustSE	Scenario-based reliability analysis of component-based software	"Software designers are motivated to utilize off-the-shelf software components for rapid application development. Such applications are expected to have high reliability as a result of deploying trusted components. The claims of high reliability need further investigation based on reliability analysis techniques that are applicable to component-based applications. This paper introduces a probabilistic model and a reliability analysis technique that is applicable to high-level designs. The technique is named scenario-based reliability analysis (SBRA). SBRA is specific to component-based software whose analysis is strictly based on execution scenarios. Using scenarios, we construct a probabilistic model named a ""component-dependency graph"" (CDG). CDGs are directed graphs that represent components, component reliabilities, link and interface reliabilities, transitions and transition probabilities. In CDGs, component interfaces and link reliabilities are treated as first-class elements of the model. Based on CDGs, an algorithm is presented to analyze the reliability of the application as the function of reliabilities of its components and interfaces. A case study illustrates the applicability of the algorithm. The SBRA is used to identify critical components and critical component interfaces, and to investigate the sensitivity of the application reliability to changes in the reliabilities of components and their interfaces."	Application software; Software maintenance; System testing; Computerized monitoring; NASA; Computer science; Software reliability; Programming; Assembly; Software quality	S.M. Yacoub; B. Cukic; H.H. Ammar	Proceedings 10th International Symposium on Software Reliability Engineering (Cat. No.PR00443)	https://doi.org/10.1109/ISSRE.1999.809307	"1.M. Delamaro, J. Maldonado and A. Mathur, ""Integration Testing using Interface Mutations"", Proc. of Seventh International Symposium on Software Reliability Engineering ISSRE96, pp. 112-121, 1996-Nov-2. View Article  Google Scholar; 2.W. Everett, ""Software Component Reliability Analysis"", Proc. of the 1999 IEEE Symposium on Application-Specific Systems and Software Engineering  Technology ASSET99, pp. 204-211, 1999-March-24-27. View Article  Google Scholar; 3.S. Gokhale and K. Trivedi, ""Dependency Characterization in Path-Based Approaches to Architecture-Based Software Reliability Prediction"", Proc. of the 1998 IEEE Workshop on Application Specific Software Engineering and Technology ASSET98, pp. 86-89, 1998-March-26-28. View Article  Google Scholar; 4.S. Gokhale, M. Lyu and K. Trivedi, ""Reliability Simulation of Component-Based Software Systems"", Proc. of the Ninth International Symposium on Software Reliability Engineering ISSRE98, pp. 192-201, 1998-Nov. View Article  Google Scholar; 5.J. Horgan and A. Mathur, ""Software Testing and Reliability"" in Handbook of Software Reliability Engineering, NY, New York:McGraw-Hill, pp. 531-566, 1996. Google Scholar; 6.S. Krishnamurthy and A. P. Mathur, ""On the Estimation of Reliability of a Software System using Reliabilities of its Components"", Proc. of Eighth International Symposium on Software Reliability Engineering. ISSRE97, pp. 146-155, 1997-Nov. View Article  Google Scholar; 7.D. Mason and D. Woit, ""Problems with Software Reliability Composition"", Ninth International Symposium on Software Reliability Engineering ISSRE98, pp. 41-42, 1998-Nov. Google Scholar; 8.B. Meyer, C. Mingins and H. Schmidt, ""Building Trusted Components to the Industry"", IEEE Computer Magazine, pp. 104-105, May 1998. View Article  Google Scholar; 9.J. Musa, G. Fuoco, N. Irving, D. Kropfl and B. Julin, ""The Operational Profile"" in Handbook of Software Reliability Engineering, NY, New York:McGraw-Hill, pp. 167-216, 1996. CrossRef  Google Scholar; 10.S. Sanyal, V. Shah and S. Bhattacharya, ""Framework of a Software Reliability Engineering Tool"", Proc. of the IEEE High-Assurance Systems Engineering Workshop HASE97, pp. 114-119, 1997. View Article  Google Scholar; 11.V. Shah and S. Bhattacharya, ""Fault Propagation Analysis Based Variable Length Checkpoint Placement for Fault Tolerant Parallel and Distributed System"", Proc. of the Twenty-First Annual International Computer Software and Applications Conference COMPSAC97, 1997-August. View Article  Google Scholar; 12. [online]  Available: http://www.rational.com/uml/documentation.html.; 13.J Voas, F. Charron and K. Miller, ""Tolerant Software Interfaces: Can COTS-based Systems be Trusted Without Them?"", Proc. of the 15 Intl. Conference on Computer Safety Reliability and Security SAFECOMP96, pp. 126-135, 1996-October. CrossRef  Google Scholar; 14.J. Voas and J. Payne, ""COTS Failures: Can Anything be Done?"", Proc. of the IEEE Workshop on Application Specific Software Engineering and Technology ASSET98, pp. 140-144, 1998-March-26-28. View Article  Google Scholar; 15.J. Voas, ""Error Propagation Analysis for COTS Systems"", IEEE Computing and Control Engineering Journal, vol. 8, no. 6, pp. 269-272, Dec. 1997. CrossRef  Google Scholar; 16.J. Voas, ""Certifying Off-the-Shelf Software Components"", IEEE Computer June, pp. 53-59, 1998. View Article  Google Scholar; 17.K. Weidenhaupt, K. Pohl, M. Jarke and P. Haumer, ""Scenarios in System Development: Current Practice"", IEEE Software, pp. 34-45, March/April 1998. View Article  Google Scholar; 18.D Woit and D. Mason, ""Component Independence for Software System Reliability"", 2 International Software Quality Week Europe QWE98, 1998-Nov.-9-13. Google Scholar; 19.E. Addy, A. Mili and S. Yacoub, ""A Controlled Experiment in Software Reuse"", Empirical Software Engineering Journal, Jan 1999. Google Scholar; 20.Recommendation Z.120 (10/96) for Message Sequence Charts (MSC),  [online]  Available: http://www.itu.int/itudoc/itu-t/rec/z/zl20.html. Google Scholar"			Excluded	Excluded				2	IEEE		Scenario-based reliability analysis of component-based software	https://ieeexplore.ieee.org/document/809307	IEEE	nan; Pages; Year; Bibtex
527	TrustSE	Software quality: a market perspective	"The author investigates software quality in a market setting. He points out that imperfections in reputation place downward pressure on a product's price and lower the average quality of the delivered software. Testing, verification, and validation improve quality only when reputation is important to end users, when demand satiation is low, and when the marginal cost of improving quality is low in comparison with the improvement in quality. As firms improve total quality control, testing, verification, and validation become less relevant, until they may actually become counterproductive. Where complex products are produced, high quality may lower marginal costs of software, and this is shown to provide an accelerator effect that enhances other competitive strategies. Warranties can ameliorate the underprovision of quality by improving software reputation. But even with warranties, the authors shows that software developers will tend to underprovide quality.<
>"	Software quality; Costs; Warranties; Testing; Quality control; Software measurement; Electronic mail; Failure analysis; Probability density function; Capacity planning	J.C. Westland	[1993] Proceedings of the Twenty-sixth Hawaii International Conference on System Sciences	https://doi.org/10.1109/HICSS.1993.284261	"1.W. J. Abernathy, K. B. Clark and A. M. Kantrow, ""The new industrial Competition"", Harvard Business Review, pp. 68-81, September-October 1981. CrossRef  Google Scholar; 2.G. A. Akerlof, ""The Market for Lemons"", Quarterly Journal of Economics, vol. 84, pp. 488-500, 1970. CrossRef  Google Scholar; 3.G. A. Akerlof, ""A Theory of Social Custom of Which Unemployment May Be One Consequence"", The Quarterly Journal of Economics, vol. 94, pp. 749-775, 1980. CrossRef  Google Scholar; 4.G. C. Archibald and G. Rosenbluth, ""The New Theory of Consumer Demand and Monopolistic Competition"", Quarterly Journal of Economics, vol. 89. CrossRef  Google Scholar; 5.K. J. Arrow, ""Models of Job Discrimination"" in Racial Discrimination in Economic Life, MA, Lexington:Heath, pp. 83-102, 1972. Google Scholar; 6.G. S. Becker, The Economics of Discrimination, Chicago:University of Chicago Press, 1957. Google Scholar; 7.G. S. Becker, ""A Theory of Marriage: Part I&II"", J. of Political Economy, vol. 81, pp. 813-846, 1973. CrossRef  Google Scholar; 8.A. Braverman, J. L. Guasch and S. Salop, ""Defects in Disneyland: quality control as a two-part tariff"", Review of Economic Studies, vol. 50, pp. 121-131, 1983. CrossRef  Google Scholar; 9.E. Chamberlin, The Theory of Monopolistic Competition, MA, Cambridge:Harvard University Press, 1956. Google Scholar; 10.E. Chamberlin, The Theory of Monopolistic Competition, MA, Cambridge:Harvard University Press, 1956. Google Scholar; 11.R. B. Chase and N. J. Aquilano, Software and Operations Software developer, IL, Homewood:Irwin, 1989. Google Scholar; 12.R. Cooper and T. W. Ross, ""Software warranties and double moral hazard"", Rand Journal of Economics, vol. 16, pp. 103-113, 1985. CrossRef  Google Scholar; 13.P. B. Crosby, Quality is Free, New York:McGraw-Hill, 1979. Google Scholar; 14.W. E. Deming, Some Theory of Sampling, New York:Wiley, 1950. Google Scholar; 15.W. E. Deming, Quality Productivity and Competitive Position, M.I.T. Center for Advanced Engineering Study, 1982. Google Scholar; 16.A. K. Dixit and J. E. Stiglitz, ""Monopolistic Competition and Optimum Software Diversity"", The American Economic Review, vol. 67, 1977. Google Scholar; 17.C. H. Fine, ""Quality Improvement and Learning in Productive Systems"", Software developer Science, pp. 1301-1315, 1986. CrossRef  Google Scholar; 18.D. A. Garvin, ""Quality on the Line"", Harvard Business Review, pp. 64-75, September-October 1983. Google Scholar; 19.H. Hotelling, ""Stability in competition"", Economic Journal, vol. 39, pp. 41-57, 1929. CrossRef  Google Scholar; 20.J. Kambhu, ""Optimal software quality under asymmetric information and moral hazard"", B ell Journal of Economics, vol. 13, pp. 483-492, 1982. CrossRef  Google Scholar; 21.J. J. Lartont and E. Maskin, ""Monopoly with asymmetric information about quality: behavior and regulation"", European Economic Review, vol. 31, pp. 483-489, 1987. CrossRef  Google Scholar; 22.H. E. Leland, ""Quacks Lemons and Licensing: A Theory of Minimum Quality Standards"", Journal of Political Economy, vol. 87, no. 6, pp. 1328-1346, 1979. CrossRef  Google Scholar; 23.D. M. Lundvall and J. M. Juran, ""Quality Costs"" in Quality Control Handbook, San Francisco:McGraw-Hill, 1974. Google Scholar; 24.P. R. Milgrom and J. Roberts, ""Informational Asymmetries Strategic Behavior and Industrial Organization"", American Economic Review, vol. 77, pp. 184-193, 1987. Google Scholar; 25.M. J. J. Nakane and T. Vollmann, The 1985 Global Manufacturing Futures Survey, Boston University, 1986. Google Scholar; 26.P. Plsek, ""Defining Quality at the Marketing/Development Interface"", Quality Progress, pp. 28-36, June 1987. Google Scholar; 27.A. M. Spence, Job Market Signaling Quarterly Journal of Economics, pp. 355-374, August 1973. Google Scholar; 28.A. M. Spence, ""Monopoly quality and regulation"", Bell J. of Econ., vol. 2, no. l, pp. 417-429, 1975. CrossRef  Google Scholar; 29.A. M. Spence, ""Software Selection Fixed Costs and Monopolistic Competition"", Review of Economic Studies, vol. 43, 1976. CrossRef  Google Scholar; 30.G. J. Stigler, ""The Economics of Information"", Journal of Political Economy, vol. 69, pp. 213-285, 1961. CrossRef  Google Scholar"			Excluded	Excluded			Studies that were not accessible in full-text	2	IEEE		Software quality: a market perspective	https://ieeexplore.ieee.org/document/284261	IEEE	nan; Pages; Year; Bibtex
528	TrustSE	Early prediction of software component reliability	The ability to predict the reliability of a software system early in its development, e.g., during architectural design, can help to improve the system's quality in a cost-effective manner. Existing architecture-level reliability prediction approaches focus on system-level reliability and assume that the reliabilities of individual components are known. In general, this assumption is unreasonable, making component reliability prediction an important missing ingredient in the current literature. Early prediction of component reliability is a challenging problem because of many uncertainties associated with components under development. In this paper we address these challenges in developing a software component reliability prediction framework. We do this by exploiting architectural models and associated analysis techniques, stochastic modeling approaches, and information sources available early in the development lifecycle. We extensively evaluate our framework to illustrate its utility as an early reliability prediction approach.	modeling;  reliability prediction;  software architecture; modeling, reliability prediction, software architecture	Cheung, Leslie; Roshandel, Roshanak; Medvidovic, Nenad; Golubchik, Leana	ICSE '08: Proceedings of the 30th international conference on Software engineering	https://doi.org/10.1145/1368088.1368104		111-120	"""@inproceedings{10.1145/1368088.1368104,
    author = ""Cheung, Leslie and Roshandel, Roshanak and Medvidovic, Nenad and Golubchik, Leana"",
    title = ""Early prediction of software component reliability"",
    year = ""2008"",
    isbn = ""9781605580791"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1368088.1368104"",
    doi = ""10.1145/1368088.1368104"",
    abstract = ""The ability to predict the reliability of a software system early in its development, e.g., during architectural design, can help to improve the system's quality in a cost-effective manner. Existing architecture-level reliability prediction approaches focus on system-level reliability and assume that the reliabilities of individual components are known. In general, this assumption is unreasonable, making component reliability prediction an important missing ingredient in the current literature. Early prediction of component reliability is a challenging problem because of many uncertainties associated with components under development. In this paper we address these challenges in developing a software component reliability prediction framework. We do this by exploiting architectural models and associated analysis techniques, stochastic modeling approaches, and information sources available early in the development lifecycle. We extensively evaluate our framework to illustrate its utility as an early reliability prediction approach."",
    booktitle = ""Proceedings of the 30th International Conference on Software Engineering"",
    pages = ""111-120"",
    numpages = ""10"",
    keywords = ""modeling, reliability prediction, software architecture"",
    location = ""Leipzig, Germany"",
    series = ""ICSE '08""
}
"""	Excluded	Excluded				2	ACM		Early prediction of software component reliability	https://doi.org/10.1145/1368088.1368104	Association for Computing Machinery	nan; References; Link
529	TrustSE	Dealing With Uncertainties in Software Project Management	Nowadays it is noticed that many projects fail; software projects are notoriously disaster prone, not necessarily because of technological failure, but more often due to uncertainties. In their efforts to keep their projects, many project managers are implicitly using similar ideas, though not always formally as the subject proposes. In this article, a qualitative research which was conducted through semi-structured interviews with 25 participants is presented. Among the interviewees there are software project managers and management researchers. The aim of the work is to explore practices, strategies and techniques as well as to provide a set of recommendations to guide managers in order to reduce uncertainties in their projects.	Project Management; Uncertainty; Uncertainty in Projects; Uncertainty Management	Marinho, Marcelo; Sampaio, Suzana; Luna, Alexandre; Lima, Telma; Moura, Hermano	CIT/IUCC/DASC/PICOM 2015 IEEE INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION TECHNOLOGY - UBIQUITOUS COMPUTING AND COMMUNICATIONS - DEPENDABLE, AUTONOMIC AND SECURE COMPUTING - PERVASIVE INTELLIGENCE AND COMPUTING	https://doi.org/10.1109/CIT/IUCC/DASC/PICOM.2015.133	"1.R. K. Wysocki, Adaptive project framework: managing complexity in the face of uncertainty, Addison-Wesley Professional, 2010. Google Scholar; 2.M. Marinho, S. Sampaio, T. Lima and H. Moura, ""Uncertainty management in software projects"", Journal of Software, vol. 10, no. 3, pp. 288-303, 2015. CrossRef  Google Scholar; 3.A. Shenhar and D. Dvir, Reinventing project management: the diamond approach to successful growth and innovation, Harvard Business Press, 2007. Google Scholar; 4.C. H. Loch, A. DeMeyer and M. T. Pich, Managing the unknown: A new approach to managing high uncertainty and risk in projects, John Wiley & Sons, 2011. Google Scholar; 5.D. Cleden, Managing project uncertainty, Gower Publishing, Ltd., 2009. Google Scholar; 6.M. Marinho, S. Sampaio and H. Moura, ""An approach related to uncertainty in software projects"", Systems Man and Cybernetics (SMC) 2013 IEEE International Conference on, pp. 894-899, 2013. CrossRef  Google Scholar; 7.M. Marinho, S. Sampaio, T. Lima and H. Moura, ""A systematic review of uncertainties in software projects"", International Journal of Engineering & Applications, vol. 5, no. 6, pp. 1-20, 2014. CrossRef  Google Scholar; 8.B. G. Glaser and A. L. Strauss, The discovery of grounded theory: Strategies for qualitative research, Transaction Publishers, 2009. Google Scholar; 9.S. Dorairaj, J. Noble and P. Malik, ""Bridging cultural differences: A grounded theory perspective"", Proceedings of the 4th India Software Engineering Conference, pp. 3-10, 2011. CrossRef  Google Scholar; 10.S. Adolph, P. Kruchten and W. Hall, ""Reconciling perspectives: A grounded theory of how people manage the process of software development"", Journal of Systems and Software, vol. 85, no. 6, pp. 1269-1286, 2012. CrossRef  Google Scholar; 11.K. E. Weick and K. M. Sutcliffe, Managing the unexpected: Resilient performance in an age of uncertainty, John Wiley & Sons, vol. 8, 2011. Google Scholar; 12.K. E. Weick, Sensemaking in organizations, Sage, vol. 3, 1995. Google Scholar"	889-894		Excluded	Excluded				2	Web of Science		Dealing with Uncertainties in Software Project Management	https://www.webofscience.com/wos/woscc/full-record/WOS:000380514500131	IEEE	nan; Year; Bibtex
530	TrustSE	Managing Non-Technical Requirements in COTS Components Selection	The selection of COTS components is made not only by an analysis of their technical quality but also (and sometimes mostly) by considering how they fulfill those non-technical requirements considered relevant, which refer to licensing, reputation, and similar issues. In this paper we present an approach for managing nontechnical requirements during COTS selection. The proposal is based on extending the ISO/IEC 9126-1 catalogue of quality factors by adding factors related to non-technical issues, obtaining a cohesive and comprehensive framework for managing requirements during selection.	Commercial Off-the-shelf; Commercial-off-the-shelf Components; Quality Factor; Technical Quality; Model Quality; Low-level Properties	Juan Pablo Carvallo; Xavier Franch; Carme Quer	14th IEEE International Requirements Engineering Conference (RE'06)	https://doi.org/10.1109/RE.2006.40	"1.A. Finkelstein, G. Spanoudakis, K. Ryan. ""Software Package Requirements and Procurement"". IWSSD96, Westphalia, 1996. View Article  Google Scholar; 2.J. Kontio. ""A case study in applying a systematic method for COTS selection"". ICSE96, Berlin, 1996. View Article  Google Scholar; 3.B. Wong, D. R. Jeffery. ""A Framework for Software Quality Evaluation"". PROFES02, Rovaniemi, 2002. CrossRef  Google Scholar; 4.D. Kunda. ""STACE: Social Technical Approach to COTS Software Evaluation"". Book Chapter in Component-Based Software Quality - Methods and Techniques, LNCS 2693, 2003. Google Scholar; 5.ISO Standard 9126: Software Engineering - Product Quality, part 1. International Organization for Standarization, 2001. Google Scholar; 6.http://www.lsi.upc.es/~gessi/QMTool/CQM/; 7.X. Franch, J.P. Carvallo. ""A Quality-Model-Based Approach for Describing and Evaluating Software Packages"". RE02, Essen, 2002. View Article  Google Scholar; 8.X. Franch, J.P. Carvallo. ""Using quality models in software package selection"". IEEE Software, 20(1), 2003. View Article  Google Scholar; 9.J.P. Carvallo, X. Franch, C. Quer. ""A Quality Model for Requirements Management Tools"". Book chapter in Requirem-ents Engineering for Sociotechnical Systems, Idea Group, 2005. CrossRef  Google Scholar; 10.J.P. Carvallo, X. Franch, C. Quer, N. Rodriguez. ""A Framework for Selecting Workflow Tools in the Context of Composite Information Systems"". DEXA 04, Zaragoza, 2004. CrossRef  Google Scholar; 11.J.P. Carvallo. ""Supporting Organizational Induction and Goals Alignment for COTS Components Selection by Means of i*"". ICCBSS06, Orlando, 2006. View Article  Google Scholar; 12.J.P. Carvallo, X. Franch. ""Extending the ISO/IEC 9126-1 Quality Model with Non-Technical Factors for COTS Components Selection"". WOSQ06, Shangai, 2006. CrossRef  Google Scholar; 13.D. Kunda, L. Brooks. ""Identifying and classifying processes (traditional and soft factors) that support COTS component selection: a case study"". European Journal of Information Systems, 9(4), 2000. CrossRef  Google Scholar; 14.A. Powell, A. Vickers, W. Lam. ""Evaluating Tools to support Component Based Software Engineering"". SAST95, Los Alamitos, 1997. View Article  Google Scholar; 15.M.F. Bertoa, J.M. Troya, A. Vallecillo. ""A Survey on the Quality Information Provided by Software Component Vendors"". QAOOSE03, Darmstadt, 2003. Google Scholar; 16.M. Torchiano, L. Jaccheri, C.-F. Sorensen, A. I. Wang. ""COTS products characterization"". SEKE02, Ischia, 2002. CrossRef  Google Scholar; 17.CMMI Product Team. ""Capability Maturity Model(r) Integration (CMMI)"", Version 1.1. Carnegie Mellon SEI, Pittsburgh, 2002."			Included	Included				2	IEEE		Managing Non-Technical Requirements in COTS Components Selection	https://ieeexplore.ieee.org/document/1704087	IEEE	nan; Pages; Year; Bibtex
531	TrustSE	Identifying and Addressing Uncertainty in Architecture-Level Software Reliability Modeling	Assessing reliability at early stages of software development, such as at the level of software architecture, is desirable and can provide a cost-effective way of improving a software system's quality. However, predicting a component's reliability at the architectural level is challenging because of uncertainties associated with the system and its individual components due to the lack of information. This paper discusses representative uncertainties which we have identified at the level of a system's components, and illustrates how to represent them in our reliability modeling framework. Our preliminary evaluation indicates promising results in our framework's ability to handle such uncertainties.	Uncertainty; Software reliability; Software systems; Hidden Markov models; Programming; Software quality; Software architecture; Predictive models; Computer architecture; Information resources; Software Reliability; System Software; Software Architecture; Source Of Information; Behavioral Model; Reliable Prediction; State Model; Stochastic Model; Processing Software; Sources Of Uncertainty; Model Architecture; Design Software; Level Of Abstraction; Probability Of Failure; Level Of Granularity; Undesirable Behaviors; Component Reliability; Different Levels Of Abstraction; Three-state Model; Different Levels Of Granularity; Several Sources Of Uncertainty	Leslie Cheung; Leana Golubchik; Nenad Medvidovic; Gaurav Sukhatme	2007 IEEE International Parallel and Distributed Processing Symposium	https://doi.org/10.1109/IPDPS.2007.370524	"1.Banerjee S., Cheung L., Golubchik L., Medvidovic N., Roshandel R., Sukhatme G., ""Engineering Reliability into Hybrid Systems via Rich Design Models: Recent Results and Current Directions"", In Workshop on NSF Next Generation Software (NGS) Program, Apr 2006. View Article  Google Scholar; 2.Boehm B., et al., ""Using Empirical Testbeds to Accelerate Technology Maturity and Transition: The SCRover Experience"", in Proceedings of ISESE'04, pp. 117-126, 2004. View Article  Google Scholar; 3.Cheung, R.C., A User-Oriented Software Reliability Model, IEEE Trans. on Software Engineering, 6 (2), pp. 118-125, 1980. View Article  Google Scholar; 4.Goel A.L., Okumoto K., Time-Dependent Error-Detection Rate Models for Software Reliability and Other Performance Measures, IEEE Trans. on Reliability, 28(3):206-211, 1979. View Article  Google Scholar; 5.Goseva-Popstojanova K. et al., Comparison of Architecture-Based Software Reliability Models, in ISSRE 2001, pp. 22-31 View Article  Google Scholar; 6.Jelinski, Z., Moranda, P. B., Software Reliability Research, Statistical Computer Performance Evaluation, edited by W. Freigerger, Academic Press, 1972. CrossRef  Google Scholar; 7.Littlewood, B.A., Verrall, J.L., A Bayesian Reliability Growth Model for Computer Software, Applied Statistics, Volume 22, pp. 332-346, 1973.; 8.Littlewood, B., Software Reliability Model for Modular Program Structure, IEEE Tran. on Reliability, 28 (3), 1979. View Article  Google Scholar; 9.Musa J.D., Okumoto K., Logarithmic Poisson Execution Time Model for Software Reliability Measurement, in Proceedings of Compsac 1984, pp. 230-238, 1984. Google Scholar; 10.Perry, D.E., Wolf, A.L. Foundations for the Study of Software Architecture, Software Engineering Notes, 17(4), 1992. CrossRef  Google Scholar; 11.Reussner R., Schmidt H., Poernomo I., Reliability prediction for component-based software architectures, In Journal of Systems and Software, 66(3), Elsevier Science Inc, 2003. CrossRef  Google Scholar; 12.Roshandel R., et al., ""Estimating Software Component Reliability by Leveraging Architectural Models"", 28th Int'l Conference on Software Engineering (ICSE'06), May 2006. CrossRef  Google Scholar; 13.Roshandel R., Medvidovic N., Multi-View Software Component Modeling for Dependability, in Architecting Dependable Systems II, LNCS, 2004. CrossRef  Google Scholar; 14.Yacoub S.M., Cukic B., Ammar H.H., Scenario-Based Reliability Analysis of Component-Based Software, in 10th Int'l Symposium on Software Reliability Engr., Boca Raton, Nov. 1999. View Article  Google Scholar"			Excluded	Excluded				2	IEEE		Identifying and Addressing Uncertainty in Architecture-Level Software Reliability Modeling	https://ieeexplore.ieee.org/document/4228252	IEEE	nan; Pages; Year; Bibtex
532	TrustSE	A formal model for the reuse of software specifications	Numerous software specifications are hidden in large repositories in diffuse organizations. Often, new systems development projects contain parts that may have been previously specified, and systems designers are unable to easily detect the existence of such specifications thereby leading to duplication of efforts. So, an efficient system for finding and incorporating such specification components into new development efforts is desirable. We construct a software robot embedded with some intelligence to search specification repositories for reusable components based on the user's request. This model relies on fuzzy logic and set theory concepts to exploit the tolerance for imprecision and uncertainty to achieve tractability and robustness and low solution cost. This system offers some practical implications for systems developers by enabling the system designer to leverage development resources to the potential maximum and directly reap the benefits of component reusability.	Intelligent robots; Robustness; Costs; Uncertainty; Robot kinematics; Fuzzy logic; Software reusability; Data mining; Set theory; Equations	S.A. Ehikioya	Engineering Solutions for the Next Millennium. 1999 IEEE Canadian Conference on Electrical and Computer Engineering (Cat. No.99TH8411)	https://doi.org/10.1109/CCECE.1999.807210				Excluded	Excluded				2	IEEE		A formal model for the reuse of software specifications	https://ieeexplore.ieee.org/document/807210	IEEE	nan; References; Pages; Year; Bibtex
533	TrustSE	A Common Terminology for Software Risk Management	In order to improve and sustain their competitiveness over time, organisations nowadays need to undertake different initiatives to adopt frameworks, models and standards that will allow them to align and improve their business processes. In spite of these efforts, organisations may still encounter governance and management problems. This is where Risk Management (RM) can play a major role, since its purpose is to contribute to the creation and preservation of value in the context of the organisation's processes. RM is a complex and subjective activity that requires experience and a high level of knowledge about risks, and it is for this reason that standardisation institutions and researchers have made great efforts to define initiatives to overcome these challenges. However, the RM field nevertheless presents a lack of uniformity in its terms and concepts, due to the different contexts and scopes of application, a situation that can generate ambiguities and misunderstandings. To address these issues, this paper aims to present an ontology called SRMO (Software Risk Management Ontology), which seeks to unify the terms and concepts associated with RM and provide an integrated and holistic view of risk. In doing so, the Pipeline framework has been applied in order to assure and verify the quality of the proposed ontology, and it has been implemented in Prot\'{e}g\'{e} and validated by means of competency questions. Three application scenarios of this ontology demonstrating their usefulness in the software engineering field are presented in this paper. We believe that this ontology can be useful for organisations that are interested in: (i) establishing an RM strategy from an integrated approach, (ii) defining the elements that help to identify risks and the criteria that support decision-making in risk assessment, and (iii) helping the involved stakeholders during the process of risk management.	ISO 31000;  risk ontology;  integrated risk management;  Risk management; ISO 31000, risk ontology, integrated risk management, Risk management	Masso, Jhon; Garc\'{\i}a, F\'{e}lix; Pardo, C\'{e}sar; Pino, Francisco J.; Piattini, Mario	ACM Trans. Softw. Eng. Methodol.	https://doi.org/10.1145/3498539			"""@article{10.1145/3498539,
    author = ""Masso, Jhon and Garc\'{\i}a, F\'{e}lix and Pardo, C\'{e}sar and Pino, Francisco J. and Piattini, Mario"",
    title = ""A Common Terminology for Software Risk Management"",
    year = ""2022"",
    issue_date = ""October 2022"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""31"",
    number = ""4"",
    issn = ""1049-331X"",
    url = ""https://doi.org/10.1145/3498539"",
    doi = ""10.1145/3498539"",
    abstract = ""In order to improve and sustain their competitiveness over time, organisations nowadays need to undertake different initiatives to adopt frameworks, models and standards that will allow them to align and improve their business processes. In spite of these efforts, organisations may still encounter governance and management problems. This is where Risk Management (RM) can play a major role, since its purpose is to contribute to the creation and preservation of value in the context of the organisation's processes. RM is a complex and subjective activity that requires experience and a high level of knowledge about risks, and it is for this reason that standardisation institutions and researchers have made great efforts to define initiatives to overcome these challenges. However, the RM field nevertheless presents a lack of uniformity in its terms and concepts, due to the different contexts and scopes of application, a situation that can generate ambiguities and misunderstandings. To address these issues, this paper aims to present an ontology called SRMO (Software Risk Management Ontology), which seeks to unify the terms and concepts associated with RM and provide an integrated and holistic view of risk. In doing so, the Pipeline framework has been applied in order to assure and verify the quality of the proposed ontology, and it has been implemented in Prot\'{e}g\'{e} and validated by means of competency questions. Three application scenarios of this ontology demonstrating their usefulness in the software engineering field are presented in this paper. We believe that this ontology can be useful for organisations that are interested in: (i) establishing an RM strategy from an integrated approach, (ii) defining the elements that help to identify risks and the criteria that support decision-making in risk assessment, and (iii) helping the involved stakeholders during the process of risk management."",
    journal = ""ACM Trans. Softw. Eng. Methodol."",
    month = ""July"",
    articleno = ""59"",
    numpages = ""47"",
    keywords = ""ISO 31000, risk ontology, integrated risk management, Risk management""
}
"""	Excluded	Excluded				2	ACM		Software risk management	https://doi.org/10.1145/3498539	Association for Computing Machinery	nan; References; Pages; Link
534	TrustSE	Uncertainties in Software Projects Management	The organizational environment becomes increasingly focused on projects, it is time to unleash the power and energy embedded in projects. The disturbingly poor project success rate makes it imperative that the organization pays more attention to their project activity, their potential, and the competitive advantage that they can bring. The goal of this article is to understand what gives rise to uncertainty; to recognize its symptoms and explore strategies for controlling it. This article offers a classification to source of uncertainty in software projects, a guide to manage software projects in phases of uncertainty and our aim is to assist project managers and staff to reduce uncertainty and thereby contribute to commercial project success.	Project Management; Uncertainty; Uncertainty in Projects; Project Management;  Uncertainty;  Uncertainty in Projects	Marinho, Marcelo; Sampaio, Suzana; Moura, Hermano	PROCEEDINGS OF THE 2014 XL LATIN AMERICAN COMPUTING CONFERENCE (CLEI)	https://doi.org/10.1109/CLEI.2014.6965153	"1.H. Kerzner, Project management: a systems approach to planning, scheduling, and controlling. Wiley, 2009. Google Scholar; 2.B. Boehm, ""Software engineering economics,"" Software Engineering, IEEE Transactions on, no. 1, pp. 4-21, 1984. View Article  Google Scholar; 3.W. Scacchi, ""Managing software engineering projects: a social analysis,"" Software Engineering, IEEE Transactions on, no. 1, pp. 49-59, 1984. View Article  Google Scholar; 4.F. Brooks Jr, ""The mythical man-month: Essays on software engineering,"" Anniversary edition (1975, 1964. Google Scholar; 5.D. Simmons, ""Software organization productivity,"" 2007. Google Scholar; 6.J. Turner, ""Evolution of project management research as evidenced by papers published in the international journal of project management,"" International Journal of Project Management, vol. 28, no. 1, pp. 1-6, 2010. CrossRef  Google Scholar; 7.""Standish group international,"" 2009, [Online; accessed 02-May-2012]. [Online]. Available: http://standishgroup.com Google Scholar; 8.P. M. Institute, ""a guide to the project management body of knowledge: pmbok Guide."" Project Management Institute Newtown Square pa, usa, 2013. Google Scholar; 9.A. Shenhar and D. Dvir, Reinventing project management: the diamond approach to successful growth and innovation. Harvard Business Press, 2007. Google Scholar; 10.R. K. Wysocki, Adaptive project framework: managing complexity in the face of uncertainty. Addison-Wesley Professional, 2010. Google Scholar; 11.D. Howell, C. Windahl, and R. Seidel, ""a project contingency framework based on uncertainty and its consequences,"" International Journal of Project Management, vol. 28, no. 3, pp. 256-264, 2010. CrossRef  Google Scholar; 12.O. Perminova, M. Gustafsson, and K. Wikstrom, ""Defining uncertainty in projects- A new perspective,"" International Journal of Project Management, vol. 26, no. 1, pp. 73-79, 2008. CrossRef  Google Scholar; 13.R. Atkinson, L. Crawford, and S. Ward, ""Fundamental uncertainties in projects and the scope of project management,"" International Journal of Project Management, vol. 24, no. 8, pp. 687-698, 2006. CrossRef  Google Scholar; 14.D. Cleden, Managing project uncertainty. Gower Publishing Company, 2009. Google Scholar; 15.C. H. Loch, A. DeMeyer, and M. T. Pich, Managing the unknown: a new approach to managing high uncertainty and risk in projects. John Wiley  Sons, 2011. Google Scholar; 16.M. Martinsuo, T. Korhonen, and T. Laine, ""Identifying, framing and managing uncertainties in project portfolios,"" International Journal of Project Management, 2014. CrossRef  Google Scholar; 17.G. C. OConnor and M. P. Rice, ""a comprehensive model of uncertainty associated with radical innovation,"" Journal of Product Innovation Management, vol. 30, no. s1, pp. 2-18, 2013. CrossRef  Google Scholar; 18.T. Burns and G. Stalker, ""The management of innovation,"" 2009. Google Scholar; 19.N. Capon, J. Farley, D. Lehmann, and J. Hulbert, ""Profiles of product innovators among large us manufacturers,"" Management Science, pp. 157-169, 1992. CrossRef  Google Scholar; 20.B. Zirger and M. Maidique, ""A model of new product development: an empirical test,"" Management Science, pp. 867-883, 1990. CrossRef  Google Scholar; 21.K. Clark, ""The interaction of design hierarchies and market concepts in technological evolution,"" Research Policy, vol. 14, no. 5, pp. 235-251, 1985. CrossRef  Google Scholar; 22.R. Duncan, ""Characteristics of organizational environments and perceived environmental uncertainty,"" Administrative science quarterly, pp. 313-327, 1972. CrossRef  Google Scholar; 23.L. Jauch and K. Kraft, ""Strategic management of uncertainty,"" Academy of Management Review, pp. 777-790, 1986. CrossRef  Google Scholar; 24.F. Milliken, ""Three types of perceived uncertainty about the environment: State, effect, and response uncertainty,"" Academy of Management review, pp. 133-143, 1987. CrossRef  Google Scholar; 25.C. Chapman and S. Ward, ""Managing Project Risk and Uncertainty: A constructively simple approach to decision making,"" 2002. Google Scholar; 26.K. Weick, ""Enactment processes in organizations,"" New directions in organizational behavior, vol. 267, p. 300, 1977. Google Scholar; 27.K. E. Weick and K. M. Sutcliffe, Managing the unexpected. Jossey-Bass San Francisco, 2001. Google Scholar; 28.-, Managing the unexpected: Resilient performance in an age of uncertainty. John Wiley  Sons, 2011, vol. 8. Google Scholar; 29.K. Jugdev and R. Moller, ""A retrospective look at our evolving understanding of project success,"" IEEE Engineering Management Review, vol. 34, no. 3, pp. 110-127, 2006. View Article  Google Scholar; 30.M. Freeman and P. Beale, ""Measuring project success,"" Project Management Journal, vol. 23, no. 1, pp. 8-17, 1992. CrossRef  Google Scholar"		"""@inproceedings{WOS:000398534300037,
    Author = ""Marinho, Marcelo and Sampaio, Suzana and Moura, Hermano"",
    Editor = ""Ezzatti, P and Delgado, A"",
    Title = ""Uncertainties in Software Projects Management"",
    Booktitle = ""PROCEEDINGS OF THE 2014 XL LATIN AMERICAN COMPUTING CONFERENCE (CLEI)"",
    Series = ""Proceedings of the Latin American Computing Conference"",
    Year = ""2014"",
    Note = ""40th Latin American Computing Conference (CLEI), Univ Republica, Fac Ingn, Montevideo, URUGUAY, SEP 15-19, 2014"",
    Organization = ""Univ Montevideo; Univ De La Empresa; Univ Catolica Uruguay; Univ Ort Uruguay"",
    Abstract = ""The organizational environment becomes increasingly focused on projects, it is time to unleash the power and energy embedded in projects. The disturbingly poor project success rate makes it imperative that the organization pays more attention to their project activity, their potential, and the competitive advantage that they can bring. The goal of this article is to understand what gives rise to uncertainty; to recognize its symptoms and explore strategies for controlling it. This article offers a classification to source of uncertainty in software projects, a guide to manage software projects in phases of uncertainty and our aim is to assist project managers and staff to reduce uncertainty and thereby contribute to commercial project success."",
    Publisher = ""IEEE"",
    Address = ""345 E 47TH ST, NEW YORK, NY 10017 USA"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Marinho, M (Corresponding Author), Fed Univ Pernambuco UFPE, Informat Ctr CIn, Recife, PE, Brazil. Marinho, Marcelo; Sampaio, Suzana; Moura, Hermano, Fed Univ Pernambuco UFPE, Informat Ctr CIn, Recife, PE, Brazil."",
    ISSN = ""2381-1609"",
    ISBN = ""978-1-4799-6130-6"",
    Keywords = ""Project Management; Uncertainty; Uncertainty in Projects"",
    Keywords-Plus = ""INNOVATION; EVOLUTION"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""mlmm@cin.ufpe.br scbs2@cin.ufpe.br hermano@cin.ufpe.br"",
    Affiliations = ""Universidade Federal de Pernambuco"",
    ResearcherID-Numbers = ""de Barros Sampaio, Suzana/ABF-9346-2020 Marinho, Marcelo/M-5107-2018"",
    ORCID-Numbers = ""Sampaio, Suzana/0000-0001-6890-2914 Monteiro Marinho, Marcelo Luiz/0000-0001-9575-8161"",
    Funding-Acknowledgement = ""CAPES"",
    Funding-Text = ""Authors would like to thank CAPES for supporting the development of this work as well as the reviewers."",
    Number-of-Cited-References = ""43"",
    Times-Cited = ""1"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""3"",
    Doc-Delivery-Number = ""BH1TQ"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000398534300037"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded				2	Web of Science		Uncertainties in software projects management	https://www.webofscience.com/wos/woscc/full-record/WOS:000398534300037	IEEE	nan; Pages
535	TrustSE	Towards providing decision support for COTS selection	The evolution of software engineering has led to Component-Based Software Development, which in turn has engendered tremendous interest in the development of plug-and-play reusable software, leading to the concept of Commercial Off-The-Shelf (COTS) software components. The use of COTS is increasingly becoming commonplace. This is mainly due to shrinking budgets, accelerating rates of COTS enhancement, development time and effort constraints, and expanding system requirements. However, the process of selecting COTS products is characterized by a multiplicity of challenges, which should be addressed in order to harness the benefits of COTS-Based Software Development. In this paper we preset a model that splits the COTS selection process into layers; basing on the (intra-layer) activities which affect the choice of a decision support to address a particular challenge. Moreover, we evaluate the COTS selection methods in the reviewed literature according to how they address the challenges. Finally we present the functionalities of an ideal Decision Support System (DSS) for COTS selection, as well as the techniques for achieving the functionalities.	Computer software reusability; Computer software selection and evaluation; Constraint theory; Decision support systems; Information technology; Mathematical models; Commercial Off The Shelf (COTS); Component Based Software Development; COTS-Based Software Development; Software engineering; Computer software reusability;  Computer software selection and evaluation;  Constraint theory;  Decision support systems;  Information technology;  Mathematical models;  Commercial Off The Shelf (COTS);  Component Based Software Development;  COTS-Based Software Development;  Software engineering	Wanyama, Tom; Far, Behrouz Homayoun	Canadian Conference on Electrical and Computer Engineering	https://doi.org/10.1109/CCECE.2005.1557124	Cavanaugh, B.P., Polen, S.M.Add decision analysis to your COTS selection process(2002)The Journal of Defense Software Engineering.Cited 27 times.April; Alves, C.; Alves, C., Finkelstein, A.; Ruhe, G.; Park, J., Port, D., Boehm, B.Supporting distributed collaborative prioritization for WinWin requirements capture and negotiations(1999)Proceedings of the International 3rd World Multi Conference on Systemics. Cybernetics and Informatics (SCI'99), 2, pp. 578-584.Cited 16 times.HIS, July; Kontio, J., Chen, S.F., Limperos, K.A COTS selection method and experiences of its use(1995)Proceeding of Twentieth Annual Software Engineering Workshop.Cited 11 times.NASA Goddard Space Flight Center, Greenbelt, Maryland, Nov.; Chung, L., Cooper, K.; Wanyama, T., Far, B.H.Multi-agent system for group-choice negotiation and decision support(2004)Proceedings of the 3rd Workshop on Agent Oriented Information Systems at the Autonomous Agents and Multi-agent Systems Conference.Cited 10 times.New York, USA, July	908 - 911	"""@CONFERENCE{Wanyama2005908,
    author = ""Wanyama, Tom and Far, Behrouz Homayoun"",
    title = ""Towards providing decision support for COTS selection"",
    year = ""2005"",
    journal = ""Canadian Conference on Electrical and Computer Engineering"",
    volume = ""2005"",
    pages = ""908 - 911"",
    doi = ""10.1109/CCECE.2005.1557124"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-33751318510\&doi=10.1109\%2fCCECE.2005.1557124\&partnerID=40\&md5=4b895ae6195442953106c8b00ba4ac36"",
    affiliations = ""Department of Electrical and Computer Engineering, University of Calgary, Calgary, Alta. T2N 1N4, 2500 University Drive, N.W., Canada"",
    abstract = ""The evolution of software engineering has led to Component-Based Software Development, which in turn has engendered tremendous interest in the development of plug-and-play reusable software, leading to the concept of Commercial Off-The-Shelf (COTS) software components. The use of COTS is increasingly becoming commonplace. This is mainly due to shrinking budgets, accelerating rates of COTS enhancement, development time and effort constraints, and expanding system requirements. However, the process of selecting COTS products is characterized by a multiplicity of challenges, which should be addressed in order to harness the benefits of COTS-Based Software Development. In this paper we preset a model that splits the COTS selection process into layers; basing on the (intra-layer) activities which affect the choice of a decision support to address a particular challenge. Moreover, we evaluate the COTS selection methods in the reviewed literature according to how they address the challenges. Finally we present the functionalities of an ideal Decision Support System (DSS) for COTS selection, as well as the techniques for achieving the functionalities. (c) 2005 IEEE."",
    keywords = ""Computer software reusability; Computer software selection and evaluation; Constraint theory; Decision support systems; Information technology; Mathematical models; Commercial Off The Shelf (COTS); Component Based Software Development; COTS-Based Software Development; Software engineering"",
    correspondence_address = ""T. Wanyama; Department of Electrical and Computer Engineering, University of Calgary, Calgary, Alta. T2N 1N4, 2500 University Drive, N.W., Canada; email: twanyama@ucalgary.ca"",
    issn = ""08407789"",
    coden = ""CCCEF"",
    language = ""English"",
    abbrev_source_title = ""Can Conf Electr Comput Eng"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 20; Conference name: Canadian Conference on Electrical and Computer Engineering 2005; Conference date: 1 May 2005 through 4 May 2005; Conference code: 68639""
}
"""	Excluded	Excluded				2	Scopus Signed In		Towards providing decision support for COTS selection	https://www.scopus.com/record/display.uri?eid=2-s2.0-33751318510&origin=resultslist&sort=r-f&src=s&sid=bc241d3b0f61e358ee030682cff01c02&sot=b&sdt=b&s=TITLE%28towards+providing+decision+support+for+cots+selection%29&sl=60&sessionSearchId=bc241d3b0f61e358ee030682cff01c02&relpos=0		nan; Publisher
536	TrustSE	Uncertainty-aware reliability analysis and optimization	Due to manufacturing tolerances and aging effects, future embedded systems have to cope with unreliable components. The intensity of such effects depends on uncertain aspects like environmental or usage conditions such that highly safety-critical systems are pessimistically designed for worst-case mission profiles. In this work, we propose to explicitly model the uncertain characteristics of system components, i. e. we model components using reliability functions with parameters distributed between a best and worst case. Since destructive effects like temperature may affect several components simultaneously (e. g. those in the same package), a correlation between uncertainties of components exists. The proposed uncertainty-aware method combines a formal analysis approach and a Monte Carlo simulation to consider uncertain characteristics and their different correlations. It delivers a holistic view on the system's reliability with best/worst/average-case behavior and also insights on variance and quantiles. But, existing optimization approaches typically assume design objectives to be single values or to follow a predefined distribution. As a remedy, we propose a dominance criterion for meta-heuristic optimization approaches like evolutionary algorithms that enables the comparison of system implementations with arbitrarily distributed characteristics. Our presented experimental results show that (a) the proposed analysis comes at low overhead while capturing existing uncertainties with sufficient accuracy, and (b) the optimization process is significantly enhanced when guiding the search process by additional aspects like variance and the 95\% quantile, delivering better system implementations as found by an uncertainty-oblivious optimization approach.		"Khosravi, Faramarz; M\""{u}ller, Malte; Gla\ss{}, Michael; Teich, J\""{u}rgen"	DATE '15: Proceedings of the 2015 Design, Automation & Test in Europe Conference & Exhibition	https://doi.org/10.5555/2755753.2755775		97-102	"""@inproceedings{10.5555/2755753.2755775,
    author = {Khosravi, Faramarz and M\""{u}ller, Malte and Gla\ss{}, Michael and Teich, J\""{u}rgen},
    title = ""Uncertainty-aware reliability analysis and optimization"",
    year = ""2015"",
    isbn = ""9783981537048"",
    publisher = ""EDA Consortium"",
    address = ""San Jose, CA, USA"",
    abstract = ""Due to manufacturing tolerances and aging effects, future embedded systems have to cope with unreliable components. The intensity of such effects depends on uncertain aspects like environmental or usage conditions such that highly safety-critical systems are pessimistically designed for worst-case mission profiles. In this work, we propose to explicitly model the uncertain characteristics of system components, i. e. we model components using reliability functions with parameters distributed between a best and worst case. Since destructive effects like temperature may affect several components simultaneously (e. g. those in the same package), a correlation between uncertainties of components exists. The proposed uncertainty-aware method combines a formal analysis approach and a Monte Carlo simulation to consider uncertain characteristics and their different correlations. It delivers a holistic view on the system's reliability with best/worst/average-case behavior and also insights on variance and quantiles. But, existing optimization approaches typically assume design objectives to be single values or to follow a predefined distribution. As a remedy, we propose a dominance criterion for meta-heuristic optimization approaches like evolutionary algorithms that enables the comparison of system implementations with arbitrarily distributed characteristics. Our presented experimental results show that (a) the proposed analysis comes at low overhead while capturing existing uncertainties with sufficient accuracy, and (b) the optimization process is significantly enhanced when guiding the search process by additional aspects like variance and the 95\\% quantile, delivering better system implementations as found by an uncertainty-oblivious optimization approach."",
    booktitle = ""Proceedings of the 2015 Design, Automation \\& Test in Europe Conference \\& Exhibition"",
    pages = ""97-102"",
    numpages = ""6"",
    location = ""Grenoble, France"",
    series = ""DATE '15""
}
"""	Excluded	Excluded				2	ACM		Uncertainty-aware reliability analysis and optimization	https://doi.org/10.5555/2755753.2755775	EDA Consortium	nan; Keywords; References; Link
537	TrustSE	An empirically evaluated checklist for surveys in software engineering	Context: Over the past decade Software Engineering research has seen a steady increase in survey-based studies, and there are several guidelines providing support for those willing to carry out surveys. The need for auditing survey research has been raised in the literature. Checklists have been used both to conduct and to assess different types of empirical studies, such as experiments and case studies. Objective: To operationalize the assessment of survey studies by means of a checklist. To fulfill such goal, we aim to derive a checklist from standards for survey research and further evaluate the appropriateness of the checklist in the context of software engineering research. Method: We systematically aggregated knowledge from 12 methodological studies supporting survey-based research in software engineering. We identified the key stages of the survey process and its recommended practices through thematic analysis and vote counting. We evaluated the checklist by applying it to existing surveys and analyzed the results. Thereafter, we gathered the feedback of experts (the surveys' authors) on our analysis and used the feedback to improve the survey checklist. Results: The evaluation provided insights regarding limitations of the checklist in relation to its understanding and objectivity. In particular, 19 of the 38 checklist items were improved according to the feedback received from experts. Conclusion: The proposed checklist is appropriate for auditing survey reports as well as a support tool to guide ongoing research with regard to the survey design process. A discussion on how to use the checklist and what its implications are for research practice is also provided.	Checklist; Assessment; Survey; Methodology; Checklist;  Assessment;  Survey;  Methodology	Molleri, Jefferson Seide; Petersen, Kai; Mendes, Emilia	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2019.106240			"""@article{WOS:000513290100009,
    Author = ""Molleri, Jefferson Seide and Petersen, Kai and Mendes, Emilia"",
    Title = ""An empirically evaluated checklist for surveys in software engineering"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2020"",
    Volume = ""119"",
    Month = ""MAR"",
    Abstract = ""Context: Over the past decade Software Engineering research has seen a steady increase in survey-based studies, and there are several guidelines providing support for those willing to carry out surveys. The need for auditing survey research has been raised in the literature. Checklists have been used both to conduct and to assess different types of empirical studies, such as experiments and case studies. Objective: To operationalize the assessment of survey studies by means of a checklist. To fulfill such goal, we aim to derive a checklist from standards for survey research and further evaluate the appropriateness of the checklist in the context of software engineering research. Method: We systematically aggregated knowledge from 12 methodological studies supporting survey-based research in software engineering. We identified the key stages of the survey process and its recommended practices through thematic analysis and vote counting. We evaluated the checklist by applying it to existing surveys and analyzed the results. Thereafter, we gathered the feedback of experts (the surveys' authors) on our analysis and used the feedback to improve the survey checklist. Results: The evaluation provided insights regarding limitations of the checklist in relation to its understanding and objectivity. In particular, 19 of the 38 checklist items were improved according to the feedback received from experts. Conclusion: The proposed checklist is appropriate for auditing survey reports as well as a support tool to guide ongoing research with regard to the survey design process. A discussion on how to use the checklist and what its implications are for research practice is also provided."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Molleri, JS (Corresponding Author), BTH, Valhallavagen 1, S-37141 Karlskrona, Sweden. Molleri, JS (Corresponding Author), Simula Metropolitan Ctr Digital Engn, Pilestredet 52, N-0167 Oslo, Norway. Molleri, Jefferson Seide; Petersen, Kai; Mendes, Emilia, BTH, Valhallavagen 1, S-37141 Karlskrona, Sweden. Molleri, Jefferson Seide, Simula Metropolitan Ctr Digital Engn, Pilestredet 52, N-0167 Oslo, Norway. Petersen, Kai, Hsch Flensburg, D-24943 Flensburg, Germany."",
    DOI = ""10.1016/j.infsof.2019.106240"",
    Article-Number = ""106240"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Checklist; Assessment; Survey; Methodology"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""jefferson@simula.no"",
    Affiliations = ""Blekinge Institute Technology"",
    ResearcherID-Numbers = ""Mendes, Maria/B-4207-2015 Molleri, Jefferson/AAY-3288-2020"",
    ORCID-Numbers = ""Molleri, Jefferson/0000-0001-5629-5256 Mendes, Emilia/0000-0003-0449-5322 Petersen, Kai/0000-0002-1532-8223"",
    Funding-Acknowledgement = ""Science Without Borders program; CNPq (National Council for Scientific and Technological Development - Brazil)"",
    Funding-Text = ""The work of Jefferson Seide Moiled is supported by the Science Without Borders program, funded by CNPq (National Council for Scientific and Technological Development - Brazil)."",
    Number-of-Cited-References = ""59"",
    Times-Cited = ""32"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""3"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""KL2WU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000513290100009"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		An empirically evaluated checklist for surveys in software engineering	https://www.webofscience.com/wos/woscc/full-record/WOS:000513290100009	ELSEVIER	nan; References; Pages
538	TrustSE	Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm	Context Reproducibility of Empirical Software Engineering (ESE) studies is an essential part for improving their credibility, as it offers the opportunity to the research community to verify, evaluate and improve their research outcomes. Objective: We aim to study reproducibility and credibility in ESE with a case study, by investigating how they have been addressed in studies where SZZ, a widely-used algorithm by gliwerski, Zimmermann and Zeller to detect the origin of a bug, has been applied. Methodology: We have performed a systematic literature review to evaluate publications that use SZZ. In total, 187 papers have been analyzed for reproducibility, reporting of limitations and use of improved versions of the algorithm. Results: We have found a situation with a lot of room for improvement in ESE as reproducibility is not commonly found; factors that undermine the credibility of results are common. We offer some lessons learned and guidelines for researchers and reviewers to address this problem. Conclusion: Reproducibility and other related aspects that ensure a high quality scientific process should be taken more into consideration by the ESE community in order to increase the credibility of the research results.	Credibility; Reproducibility; SZZ Algorithm; Systematic literature review; Credibility;  Reproducibility;  SZZ Algorithm;  Systematic literature review	Rodriguez-Perez, Gema; Robles, Gregorio; Gonzalez-Barahona, Jesus M.	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2018.03.009		164-176	"""@article{WOS:000432767900014,
    Author = ""Rodriguez-Perez, Gema and Robles, Gregorio and Gonzalez-Barahona, Jesus M."",
    Title = ""Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2018"",
    Volume = ""99"",
    Pages = ""164-176"",
    Month = ""JUL"",
    Abstract = ""Context Reproducibility of Empirical Software Engineering (ESE) studies is an essential part for improving their credibility, as it offers the opportunity to the research community to verify, evaluate and improve their research outcomes. Objective: We aim to study reproducibility and credibility in ESE with a case study, by investigating how they have been addressed in studies where SZZ, a widely-used algorithm by gliwerski, Zimmermann and Zeller to detect the origin of a bug, has been applied. Methodology: We have performed a systematic literature review to evaluate publications that use SZZ. In total, 187 papers have been analyzed for reproducibility, reporting of limitations and use of improved versions of the algorithm. Results: We have found a situation with a lot of room for improvement in ESE as reproducibility is not commonly found; factors that undermine the credibility of results are common. We offer some lessons learned and guidelines for researchers and reviewers to address this problem. Conclusion: Reproducibility and other related aspects that ensure a high quality scientific process should be taken more into consideration by the ESE community in order to increase the credibility of the research results."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Rodriguez-Perez, G (Corresponding Author), Univ Rey Juan Carlos, Madrid, Spain. Rodriguez-Perez, Gema; Robles, Gregorio; Gonzalez-Barahona, Jesus M., Univ Rey Juan Carlos, Madrid, Spain."",
    DOI = ""10.1016/j.infsof.2018.03.009"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Credibility; Reproducibility; SZZ Algorithm; Systematic literature review"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""gema.rodriguez@urjc.es grex@gsyc.urjc.es jgb@gsyc.es"",
    Affiliations = ""Universidad Rey Juan Carlos"",
    ResearcherID-Numbers = ""Robles, Gregorio/I-2507-2012 Rodriguez-Perez, Gema/AAN-7844-2020 Gonzalez-Barahona, Jesus M./L-5646-2017"",
    ORCID-Numbers = ""Rodriguez, Gema/0000-0002-0062-8418 Robles, Gregorio/0000-0002-1442-6761 Gonzalez-Barahona, Jesus M./0000-0001-9682-460X"",
    Funding-Acknowledgement = ""Spanish Government {[}TIN2014-59400-R]"",
    Funding-Text = ""We want to express our gratitude to the Spanish Government, as the authors are funded in part by it, through project TIN2014-59400-R. We would also thank Alexander Serebrenik and Marcos Roman-Gonzalez for their feedback and help."",
    Number-of-Cited-References = ""48"",
    Times-Cited = ""55"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""7"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""GG5XA"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000432767900014"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm	https://www.webofscience.com/wos/woscc/full-record/WOS:000432767900014	ELSEVIER	nan; References
539	TrustSE	Adapting usability techniques for application in open source Software: A multiple case study	Context: As a result of the growth of non-developer users of OSS applications, usability has over the last ten years begun to attract the interest of the open source software (OSS) community. The OSS community has some special characteristics (such as worldwide geographical distribution of both users and developers and missing resources) which are an obstacle to the direct adoption of many usability techniques as specified in the human-computer interaction (HCI) field. Objective: The aim of this research is to adapt and evaluate the feasibility of applying four usability techniques: user profiles, personas, direct observation and post-test information to four OSS projects from the viewpoint of the development team. Method: The applied research method was a multiple case study of the following OSS projects: Quite Universal Circuit Simulator, PSeInt, FreeMind and OpenOffice Writer. Results: We formalized the application procedure of each of the adapted usability techniques. We found that either there were no procedures for adopting usability techniques in OSS or they were not fully systematized. Additionally, we identified the adverse conditions that are an obstacle to their adoption in OSS and propose the special adaptations required to overcome the obstacles. To avoid some of the adverse conditions, we created web artefacts (online survey, wiki and forum) that are very popular in the OSS field. Conclusion: It is necessary to adapt usability techniques for application in OSS projects considering their idiosyncrasy. Additionally, we found that there are obstacles (for example, number of participant users, biased information provided by developers) to the application of the techniques. Despite these obstacles, it is feasible to apply the adapted techniques in OSS projects.	Application programs; Circuit simulation; Geographical distribution; Human computer interaction; Open systems; Selenium compounds; Software testing; Usability engineering; Direct observations; Personas; Post test; Usability techniques; User profile; Open source software; Application programs;  Circuit simulation;  Geographical distribution;  Human computer interaction;  Open systems;  Selenium compounds;  Software testing;  Usability engineering;  Direct observations;  Personas;  Post test;  Usability techniques;  User profile;  Open source software	Llerena, Lucrecia; Rodriguez, Nancy; Castro, John W.; Acuna, Silvia T.	Information and Software Technology	https://doi.org/10.1016/j.infsof.2018.10.011		48 - 64	"""@ARTICLE{Llerena201948,
    author = ""Llerena, Lucrecia and Rodriguez, Nancy and Castro, John W. and Acuna, Silvia T."",
    title = ""Adapting usability techniques for application in open source Software: A multiple case study"",
    year = ""2019"",
    journal = ""Information and Software Technology"",
    volume = ""107"",
    pages = ""48 - 64"",
    doi = ""10.1016/j.infsof.2018.10.011"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059309367\&doi=10.1016\%2fj.infsof.2018.10.011\&partnerID=40\&md5=aeb3a55de33a337048219c9fe2947824"",
    affiliations = ""Departamento de Ingenieria Informatica, Universidad Autonoma de Madrid, Calle Francisco Tomas y Valiente 11, Madrid, 28049, Spain; Departamento de Ingenieria Informatica y Ciencias de la Computacion, Universidad de Atacama, Avenida Copayapu 485, Copiapo, 1530000, Chile"",
    abstract = ""Context: As a result of the growth of non-developer users of OSS applications, usability has over the last ten years begun to attract the interest of the open source software (OSS) community. The OSS community has some special characteristics (such as worldwide geographical distribution of both users and developers and missing resources) which are an obstacle to the direct adoption of many usability techniques as specified in the human-computer interaction (HCI) field. Objective: The aim of this research is to adapt and evaluate the feasibility of applying four usability techniques: user profiles, personas, direct observation and post-test information to four OSS projects from the viewpoint of the development team. Method: The applied research method was a multiple case study of the following OSS projects: Quite Universal Circuit Simulator, PSeInt, FreeMind and OpenOffice Writer. Results: We formalized the application procedure of each of the adapted usability techniques. We found that either there were no procedures for adopting usability techniques in OSS or they were not fully systematized. Additionally, we identified the adverse conditions that are an obstacle to their adoption in OSS and propose the special adaptations required to overcome the obstacles. To avoid some of the adverse conditions, we created web artefacts (online survey, wiki and forum) that are very popular in the OSS field. Conclusion: It is necessary to adapt usability techniques for application in OSS projects considering their idiosyncrasy. Additionally, we found that there are obstacles (for example, number of participant users, biased information provided by developers) to the application of the techniques. Despite these obstacles, it is feasible to apply the adapted techniques in OSS projects. (c) 2018"",
    author_keywords = ""Direct observation; Open source software; Personas; Post-test information; Usability techniques; User profiles"",
    keywords = ""Application programs; Circuit simulation; Geographical distribution; Human computer interaction; Open systems; Selenium compounds; Software testing; Usability engineering; Direct observations; Personas; Post test; Usability techniques; User profile; Open source software"",
    correspondence_address = ""L. Llerena; Departamento de Ingenieria Informatica, Universidad Autonoma de Madrid, Madrid, Calle Francisco Tomas y Valiente 11, 28049, Spain; email: lucrecia.llerena@estudiante.uam.es"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 19; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Adapting usability techniques for application in open source Software: A multiple case study	https://www.scopus.com/record/display.uri?eid=2-s2.0-85059309367&origin=resultslist&sort=r-f&src=s&sid=c37bae839dd225f4fbec5835077b189e&sot=b&sdt=b&s=TITLE%28adapting+usability+techniques+for+application+in+open+source+software+a+multiple+case+study%29&sl=98&sessionSearchId=c37bae839dd225f4fbec5835077b189e&relpos=0	Elsevier B.V	nan; References
540	TrustSE	Uncertainty in information system development: Causes, effects, and coping mechanisms	Information system development (ISD) projects are an ever-growing field of project management (PM) with their unique features, and project failures in ISD are relatively common. In the broader context of PM, uncertainty is a studied, yet mercurial phenomenon. By contrast, uncertainty in ISD projects has received relatively little attention from scholars, and PM literature has not systematically focused on uncertainty in ISD from a viewpoint other than that of project managers. In order to understand uncertainties in ISD projects, we need to first understand the causes behind them, their effects on everyday ISD work, and share coping mechanisms utilized among industry professionals. In the context of ISD projects, we set out to explore what causes uncertainty, what are the effects of uncertainty, and how software industry professionals cope with uncertainty. We conducted eleven semi-structured interviews with a diverse range of ISD professionals, and analyzed the interviews using conventional content analysis. Our results extend and complement current knowledge on the causes, effects, and coping mechanisms of uncertainty, especially in the context of ISD. Additionally, we present practical considerations on how to implement our findings into ISD industry and education.	Information systems; Information use; Project management; Software engineering; Content analysis; Coping mechanisms; Industry professionals; Information system development; Project failures; Project managers; Semi structured interviews; Software industry; Information management; Information systems;  Information use;  Project management;  Software engineering;  Content analysis;  Coping mechanisms;  Industry professionals;  Information system development;  Project failures;  Project managers;  Semi structured interviews;  Software industry;  Information management	Taipalus, Toni; Seppanen, Ville; Pirhonen, Maritta	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2020.110655			"""@ARTICLE{Taipalus2020,
    author = ""Taipalus, Toni and Seppanen, Ville and Pirhonen, Maritta"",
    title = ""Uncertainty in information system development: Causes, effects, and coping mechanisms"",
    year = ""2020"",
    journal = ""Journal of Systems and Software"",
    volume = ""168"",
    doi = ""10.1016/j.jss.2020.110655"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085194972\&doi=10.1016\%2fj.jss.2020.110655\&partnerID=40\&md5=4bafa91ea77475e750024a44717b55f6"",
    affiliations = ""University of Jyvaskyla, Finland"",
    abstract = ""Information system development (ISD) projects are an ever-growing field of project management (PM) with their unique features, and project failures in ISD are relatively common. In the broader context of PM, uncertainty is a studied, yet mercurial phenomenon. By contrast, uncertainty in ISD projects has received relatively little attention from scholars, and PM literature has not systematically focused on uncertainty in ISD from a viewpoint other than that of project managers. In order to understand uncertainties in ISD projects, we need to first understand the causes behind them, their effects on everyday ISD work, and share coping mechanisms utilized among industry professionals. In the context of ISD projects, we set out to explore what causes uncertainty, what are the effects of uncertainty, and how software industry professionals cope with uncertainty. We conducted eleven semi-structured interviews with a diverse range of ISD professionals, and analyzed the interviews using conventional content analysis. Our results extend and complement current knowledge on the causes, effects, and coping mechanisms of uncertainty, especially in the context of ISD. Additionally, we present practical considerations on how to implement our findings into ISD industry and education. (c) 2020 Elsevier Inc."",
    author_keywords = ""Cause; Coping mechanism; Effect; Information system development; Risk; Uncertainty"",
    keywords = ""Information systems; Information use; Project management; Software engineering; Content analysis; Coping mechanisms; Industry professionals; Information system development; Project failures; Project managers; Semi structured interviews; Software industry; Information management"",
    correspondence_address = ""T. Taipalus; University of Jyvaskyla, Faculty of Information Technology, P.O. Box 35, FI-40014, Finland; email: toni.taipalus@jyu.fi"",
    publisher = ""Elsevier Inc."",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 11; All Open Access, Green Open Access""
}
"""	Excluded	Excluded				2	Scopus Signed In		Uncertainty in information system development: Causes, effects, and coping mechanisms	https://www.scopus.com/record/display.uri?eid=2-s2.0-85085194972&origin=resultslist&sort=r-f&src=s&sid=58556f14ce2dc5e3c9b5430165d1eae8&sot=b&sdt=b&s=TITLE%28uncertainty+in+information+system+development+causes+effects+and+coping+mechanisms%29&sl=89&sessionSearchId=58556f14ce2dc5e3c9b5430165d1eae8&relpos=0	Elsevier Inc	nan; References; Pages
541	TrustSE	Reliability prediction for component-based software architectures	One of the motivations for specifying software architectures explicitly is the use of high level structural design information for improved control and prediction of software system quality attributes. In this paper, we present an approach for determining the reliability of component-based software architectures. Our method is based on rich architecture definition language (RADL) oriented towards modem industrial middleware platforms, such as Microsoft's. NET and Sun's EJB. Our methods involve parameterised contractual specifications based on state machines and thus permits efficient static analysis. We show how RADL allows software architects to predict component reliability through compositional analysis of usage profiles and of environment component reliability. We illustrate our approach with an e-commerce example and report about empirical measurements which confirm our analytical reliability prediction through monitoring in our reliability test-bed. Our evaluation confirms that prediction accuracy for software components necessitates modelling the behaviour of binary components and the dependency of provided services on required components. Fortunately, our measurements also show that an abstract protocol, view of that behaviour is sufficient to predict reliability with high accuracy. The reliability of a component most strongly depends on its environment. Therefore, we advocate a reliability model parameterized by required component reliability in a deployment context.	reliability; availability; component-based software; software architecture; reliability;  availability;  component-based software;  software architecture	Reussner, RH; Schmidt, HW; Poernomo, IH	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/S0164-1212(02)00080-8		241-252	"""@article{WOS:000183568400006,
    Author = ""Reussner, RH and Schmidt, HW and Poernomo, IH"",
    Title = ""Reliability prediction for component-based software architectures"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2003"",
    Volume = ""66"",
    Number = ""3"",
    Pages = ""241-252"",
    Month = ""JUN 15"",
    Abstract = ""One of the motivations for specifying software architectures explicitly is the use of high level structural design information for improved control and prediction of software system quality attributes. In this paper, we present an approach for determining the reliability of component-based software architectures. Our method is based on rich architecture definition language (RADL) oriented towards modem industrial middleware platforms, such as Microsoft's. NET and Sun's EJB. Our methods involve parameterised contractual specifications based on state machines and thus permits efficient static analysis. We show how RADL allows software architects to predict component reliability through compositional analysis of usage profiles and of environment component reliability. We illustrate our approach with an e-commerce example and report about empirical measurements which confirm our analytical reliability prediction through monitoring in our reliability test-bed. Our evaluation confirms that prediction accuracy for software components necessitates modelling the behaviour of binary components and the dependency of provided services on required components. Fortunately, our measurements also show that an abstract protocol, view of that behaviour is sufficient to predict reliability with high accuracy. The reliability of a component most strongly depends on its environment. Therefore, we advocate a reliability model parameterized by required component reliability in a deployment context. (C) 2002 Elsevier Science Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Monash Univ, Sch Comp Sci \\& Software Engn, 900 Dandenong Rd,3145, Caulfield, Vic 3800, Australia. Monash Univ, Sch Comp Sci \\& Software Engn, Caulfield, Vic 3800, Australia. Distributed Syst Technol Ctr, Melbourne, Vic, Australia."",
    DOI = ""10.1016/S0164-1212(02)00080-8"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""reliability; availability; component-based software; software architecture"",
    Keywords-Plus = ""MODEL"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""reussner@dstc.monash.edu.au heinz.schmidt@monash.edu.au imanp@dstc.monash.edu.au"",
    Affiliations = ""Monash University"",
    ORCID-Numbers = ""Reussner, Ralf/0000-0002-9308-6290 Schmidt, Heinrich (Heinz) Wilhelm/0000-0001-6278-4793"",
    Number-of-Cited-References = ""27"",
    Times-Cited = ""148"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""690UL"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000183568400006"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Reliability prediction for component-based software architectures	https://www.webofscience.com/wos/woscc/full-record/WOS:000183568400006	ELSEVIER SCIENCE INC	nan; References
542	TrustSE	Characterizing the contribution of quality requirements to software sustainability	Most respondents considered modifiability as relevant for addressing both technical and environmental sustainability. Functional correctness, availability, modifiability, interoperability and recoverability favor positively the endurability of software systems. This study has also identified security, satisfaction, and freedom from risk as very good contributors to social sustainability. Satisfaction was also considered by the respondents as a good contributor to economic sustainability.; Background Since sustainability became a challenge in software engineering, researchers mainly from requirements engineering and software architecture communities have contributed to defining the basis of the notion of sustainability-aware software. Problem Despite these valuable efforts, the assessment and design based on the notion of sustainability as a software quality is still poorly understood. There is no consensus on which sustainability requirements should be considered. Aim and Method To fill this gap, a survey was designed with a double objective: i) determine to which extent quality requirements contribute to the sustainability of software-intensive systems; and ii) identify direct dependencies among the sustainability dimensions. The survey involved different target audiences (e.g. software architects, ICT practitioners with expertise in Sustainability). We evaluated the perceived importance/relevance of each sustainability dimension, and the perceived usefulness of exploiting a sustainability model in different software engineering activities. Results	Computer software selection and evaluation; Interoperability; Software architecture; Software engineering; Surveying; Surveys; Architecture community; Economic sustainability; Engineering activities; Environmental sustainability; Functional correctness; Quality requirements; Software intensive systems; Sustainability dimensions; Sustainable development; Computer software selection and evaluation;  Interoperability;  Software architecture;  Software engineering;  Surveying;  Surveys;  Architecture community;  Economic sustainability;  Engineering activities;  Environmental sustainability;  Functional correctness;  Quality requirements;  Software intensive systems;  Sustainability dimensions;  Sustainable development	Condori-Fernandez, Nelly; Lago, Patricia	Journal of Systems and Software	https://doi.org/10.1016/j.jss.2017.12.005	Abran, A., Khelifi, A., Suryn, W., Seffah, A.; Achimugu, P., Selamat, A., Ibrahim, R., Mahrin, M.N.; Albertao, F., Xiao, J., Tian, C., Lu, Y., Zhang, K.Q., Liu, C.; Alexander, I.; Ameller, D., Ayala, C., Cabot, J., Franch, X.; Assefa, G., Frostell, B.; Avgeriou, P., Stal, M., Hilliard, R.; Becker, C., Betz, S., Chitchyan, R., Duboc, L., Easterbrook, S.M., Penzenstadler, B., Seyff, N., (...), Venters, C.C.; Becker, C., Chitchyan, R., Duboc, L., Easterbrook, S., Penzenstadler, B., Seyff, N., Venters, C.C.; Betz, S., Becker, C., Chitchyan, R., Duboc, L., Easterbrook, S.M., Penzenstadler, B., Seyff, N., (...), Venters, C.C.Sustainability debt: a metaphor to support sustainability design decisions(2015)In: RE.Cited 18 times.; Brundtland, G., Khalid, M., Agnelli, S., Al-Athel, S., Chidzero, B., Fadika, L., Hauff, V., (...), Okita, S.Our Common Future (Brundtland report)(1987)Technical Report.Cited 426 times.World Commission on Environment and Development; Calero, C., Moraga, M.A., Bertoa, M.F.Towards a software product sustainability model(2013)CoRR, abs/1309.1640.Cited 4 times.; Cheng, B.H.C., Atlee, J.M.; Chitchyan, R., Becker, C., Betz, S., Duboc, L., Penzenstadler, B., Seyff, N., Venters, C.C.; Condori-Fernandez, N., Lago, P.; Gerostathopoulos, I., Keznikl, J., Bures, T., Kit, M., Plasil, F.; Gu, Q., Lago, P., Van Vliet, H.; Hankel, A., Oud, L., Saan, M., Lago, P.A maturity model for green ICT: The case of the SURF green ICT maturity model(2014)28th International Conference on Informatics for Environmental Protection (EnviroInfo), pp. 33-40.Cited 31 times.BIS Verlag; Holzl, M., Rauschmayer, A., Wirsing, M.; ISO/IECISO/IEC 25010 - Systems and Software engineering - Systems and Software Quality Requirements and Evaluation (SQuaRE) - System and Software Quality Models(2010)Technical Report.Cited 15 times.; Jirotka, M., Goguen, J.A.(1994)Requirements Engineering: Social and Technical Issues.Cited 120 times.Academic Press Professional, Inc. San Diego, CA, USA; Kazman, R., Cai, Y., Mo, R., Feng, Q., Xiao, L., Haziyev, S., Fedak, V., (...), Shapochka, A.; Khan, H.S.; Koziolek, H.; Kruchten, P., Nord, R.L., Ozkaya, I.; Lago, P.Software and Sustainability [inaugural lecture](2016) .Cited 4 times.http://dare.ubvu.vu.nl; Lago, P., Kocak, S.A., Crnkovic, I., Penzenstadler, B.; Lago, P., Meyer, N., Morisio, M., Muller, H.A.Leveraging energy efficiency to software users: summary of the second GREENS workshop, at ICSE 2013(2014)ACM SIGSOFT Software.Cited 11 times.; De Mello, R.M., Travassos, G.H.; Nayebi, F., Desharnais, J.-M., Abran, A.; Nuseibeh, B., Easterbrook, S.; Ormeno, Y.I., Panach, J.I., Condori-Fernandez, N., Pastor, O.; Panach, J.I., Condori-Fernandez, N., Valverde, F., Aquino, N., Pastor, O.; Pfleeger, S.L., Kitchenham, B.A.Principles of survey research: part 1: turning lemons into lemonade(2001)ACM SIGSOFT Softw. Eng. Notes, 26 (6), pp. 16-18.Cited 268 times.; Raturi, A., Penzenstadler, B., Tomlinson, B., Richardson, D.; Razavian, M., Procaccianti, G., Tamburri, D.A.Four-dimensional sustainable e-services(2014)BIS-Verlag, pp. 221-228.Cited 21 times.J.M. Gomez M. Sonnenschein U. Vogel A. Winter B. Rapp N. Giesen .; Venters, C., Jay, C., Lau, L., Griffiths, M., Holmes, V., Ward, R., Austin, J., (...), Xu, J.Software sustainability: the modern tower of babel(2014)RE4SuSy: Third International Workshop on Requirements Engineering for Sustainable Systems.Cited 19 times.; Venters, C., Lau, L., Griffiths, M., Holmes, V., Ward, R., Jay, C., Dibsdale, C., (...), Xu, J.The blind men and the elephant: towards an empirical evaluation framework for software sustainability(2014)J. Open Res. Softw., 2 (1).Cited 58 times.; Venters, C.C., Seyff, N., Becker, C., Betz, S., Chitchyan, R., Duboc, L., Mcintyre, D., (...), Penzenstadler, B.; Wixom, B.H., Todd, P.A.	289 - 305	"""@ARTICLE{Condori-Fernandez2018289,
    author = ""Condori-Fernandez, Nelly and Lago, Patricia"",
    title = ""Characterizing the contribution of quality requirements to software sustainability"",
    year = ""2018"",
    journal = ""Journal of Systems and Software"",
    volume = ""137"",
    pages = ""289 - 305"",
    doi = ""10.1016/j.jss.2017.12.005"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85038215582\&doi=10.1016\%2fj.jss.2017.12.005\&partnerID=40\&md5=25e186e653748cd719f94ef63920de98"",
    affiliations = ""Universidade da Coruna, Spain; Vrije Universiteit Amsterdam, Netherlands"",
    abstract = ""Most respondents considered modifiability as relevant for addressing both technical and environmental sustainability. Functional correctness, availability, modifiability, interoperability and recoverability favor positively the endurability of software systems. This study has also identified security, satisfaction, and freedom from risk as very good contributors to social sustainability. Satisfaction was also considered by the respondents as a good contributor to economic sustainability.; Background Since sustainability became a challenge in software engineering, researchers mainly from requirements engineering and software architecture communities have contributed to defining the basis of the notion of sustainability-aware software. Problem Despite these valuable efforts, the assessment and design based on the notion of sustainability as a software quality is still poorly understood. There is no consensus on which sustainability requirements should be considered. Aim and Method To fill this gap, a survey was designed with a double objective: i) determine to which extent quality requirements contribute to the sustainability of software-intensive systems; and ii) identify direct dependencies among the sustainability dimensions. The survey involved different target audiences (e.g. software architects, ICT practitioners with expertise in Sustainability). We evaluated the perceived importance/relevance of each sustainability dimension, and the perceived usefulness of exploiting a sustainability model in different software engineering activities. Results (c) 2017 Elsevier Inc."",
    author_keywords = ""Quality requirements; Software-intensive systems; Survey; Sustainability"",
    keywords = ""Computer software selection and evaluation; Interoperability; Software architecture; Software engineering; Surveying; Surveys; Architecture community; Economic sustainability; Engineering activities; Environmental sustainability; Functional correctness; Quality requirements; Software intensive systems; Sustainability dimensions; Sustainable development"",
    correspondence_address = ""N. Condori-Fernandez; Universidade da Coruna, Spain; email: n.condori.fernandez@udc.es"",
    publisher = ""Elsevier Inc."",
    issn = ""01641212"",
    coden = ""JSSOD"",
    language = ""English"",
    abbrev_source_title = ""J Syst Software"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 74; All Open Access, Green Open Access""
}
"""	Included	Included				2	Scopus Signed In		Characterizing the contribution of quality requirements to software sustainability	https://www.scopus.com/record/display.uri?eid=2-s2.0-85038215582&origin=resultslist&sort=r-f&src=s&sid=53b1390ba7e8cec5ff57effec72efc88&sot=b&sdt=b&s=TITLE%28characterizing+the+contribution+of+quality+requirements+to+software+sustainability%29&sl=89&sessionSearchId=53b1390ba7e8cec5ff57effec72efc88&relpos=0	Elsevier Inc	
543	TrustSE	Trustworthy data: A survey, taxonomy and future trends of secure provenance schemes	Data is a valuable asset for the success of business and organizations these days, as it is effectively utilized for decision making, risk assessment, prioritizing the goals and performance evaluation. Extreme reliance on data demands quality assurance and trust on processes. Data Provenance is information that can be used to reason about the current state of a data object. Provenance can be broadly described as the information that explains where a piece of data object came from, how it was derived or created, who was involved in said creation, manipulations involved, processes applied, etc. It consists of information that had an effect on the data, evolving to its present state. Provenance has been used widely for the authenticity of data and processes. Despite having such a wide range of uses and applications, provenance poses vexing privacy and integrity challenges. Provenance data itself is, therefore, critical and it must be secured. Over the years, a number of secure provenance schemes have been proposed. This paper aims to enhance the understanding of secure provenance schemes and its associated security issues. In this paper, we have discussed why secure provenance is needed, what are its essential characteristics, and what objectives it serves? We describe the lifecycle of secure provenance and highlighted how trust is achieved in different domains by its application. Firstly, a detailed taxonomy of existing secure provenance schemes is presented. Then, a comparative analysis of existing secure provenance schemes, which highlights their strengths and weaknesses is also provided. Furthermore; we highlight future trends, which should be focused upon by the research community.	Secure provenance; Trustworthy data; Forensics; Security and privacy; Cloud computing; Wireless sensor networks; Secure provenance;  Trustworthy data;  Forensics;  Security and privacy;  Cloud computing;  Wireless sensor networks	Zafar, Faheem; Khan, Abid; Suhail, Saba; Ahmed, Idrees; Hameed, Khizar; Khan, Hayat Mohammad; Jabeen, Farhana; Anjum, Adeel	JOURNAL OF NETWORK AND COMPUTER APPLICATIONS	https://doi.org/10.1016/j.jnca.2017.06.003		50-68	"""@article{WOS:000411537100003,
    Author = ""Zafar, Faheem and Khan, Abid and Suhail, Saba and Ahmed, Idrees and Hameed, Khizar and Khan, Hayat Mohammad and Jabeen, Farhana and Anjum, Adeel"",
    Title = ""Trustworthy data: A survey, taxonomy and future trends of secure provenance schemes"",
    Journal = ""JOURNAL OF NETWORK AND COMPUTER APPLICATIONS"",
    Year = ""2017"",
    Volume = ""94"",
    Pages = ""50-68"",
    Month = ""SEP 15"",
    Abstract = ""Data is a valuable asset for the success of business and organizations these days, as it is effectively utilized for decision making, risk assessment, prioritizing the goals and performance evaluation. Extreme reliance on data demands quality assurance and trust on processes. Data Provenance is information that can be used to reason about the current state of a data object. Provenance can be broadly described as the information that explains where a piece of data object came from, how it was derived or created, who was involved in said creation, manipulations involved, processes applied, etc. It consists of information that had an effect on the data, evolving to its present state. Provenance has been used widely for the authenticity of data and processes. Despite having such a wide range of uses and applications, provenance poses vexing privacy and integrity challenges. Provenance data itself is, therefore, critical and it must be secured. Over the years, a number of secure provenance schemes have been proposed. This paper aims to enhance the understanding of secure provenance schemes and its associated security issues. In this paper, we have discussed why secure provenance is needed, what are its essential characteristics, and what objectives it serves? We describe the lifecycle of secure provenance and highlighted how trust is achieved in different domains by its application. Firstly, a detailed taxonomy of existing secure provenance schemes is presented. Then, a comparative analysis of existing secure provenance schemes, which highlights their strengths and weaknesses is also provided. Furthermore; we highlight future trends, which should be focused upon by the research community."",
    Publisher = ""ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD"",
    Address = ""24-28 OVAL RD, LONDON NW1 7DX, ENGLAND"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Zafar, F (Corresponding Author), COMSATS Inst Informat Technol, Dept Comp Sci, Islamabad, Pakistan. Zafar, Faheem; Khan, Abid; Ahmed, Idrees; Khan, Hayat Mohammad; Jabeen, Farhana; Anjum, Adeel, COMSATS Inst Informat Technol, Dept Comp Sci, Islamabad, Pakistan. Suhail, Saba, Kyung Hee Univ, Yongin, South Korea. Hameed, Khizar, Univ Management \\& Technol, Dept Comp Sci \\& Elect Engn, Sialkot, Pakistan."",
    DOI = ""10.1016/j.jnca.2017.06.003"",
    ISSN = ""1084-8045"",
    Keywords = ""Secure provenance; Trustworthy data; Forensics; Security and privacy; Cloud computing; Wireless sensor networks"",
    Keywords-Plus = ""AUTOMATIC CAPTURE; COLLECTION; FRAMEWORK"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Hardware \\& Architecture; Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering"",
    Author-Email = ""faheemiiui@gmail.com abidkhan@comsats.edu.pk sabah@khu.ac.kr idrees.ciit@gmail.com khizer@skt.umt.edu.pk hayatkh@hotmail.com farhanakhan@comsats.edu.pk adeel.anjum@comsats.edu.pk"",
    Affiliations = ""COMSATS University Islamabad (CUI); Kyung Hee University; University of Management \\& Technology (UMT)"",
    ResearcherID-Numbers = ""Khizar, Khizar/ABG-5431-2020 Khan, Abid/V-1488-2019 Anjum, Adeel/L-4391-2013"",
    ORCID-Numbers = ""Ahmed, Idrees/0000-0003-0090-5478 jabeen, farhana/0000-0001-5420-4103 Khan, Abid/0000-0003-2712-1956 Khizar, Dr/0000-0003-1203-2010"",
    Number-of-Cited-References = ""115"",
    Times-Cited = ""57"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Netw. Comput. Appl."",
    Doc-Delivery-Number = ""FH9MV"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000411537100003"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		Trustworthy data: A survey, taxonomy and future trends of secure provenance schemes	https://www.webofscience.com/wos/woscc/full-record/WOS:000411537100003	ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD	nan; References
544	TrustSE	R<SUP>2</SUP>Trust, a reputation and risk based trust management framework for large-scale, fully decentralized overlay networks	Peer-to-peer (P2P) networking is widely used to exchange, contribute, or obtain files from any participating user. Building trust relationships between peers in a large-scale distributed P2P file-sharing system is a fundamental and challenging research topic. However, it is difficult to build a good trust relationship with the traditional mechanism. Recommendation based trust model from social relationship can be adopted to resolve the problem. But it faces the challenges of subjectivity, and experiential referral weighting. This paper presents R(2)Trust a robust Reputation and Risk evaluation based Trust management model. Our novel framework uses both reputation and risk to evaluate the trustworthiness of a peer and it is applicable for unstructured P2P networks. The model will evaluate peer trust values from direct interactions and peers referrals. R(2)Trust also distinguishes the credibility of peers. As a result, the aggregated trust value will filter out the noises and reflect more accurate trust values. The proposed R(2)Trust can also defense against several malicious attacks, such as simple malicious attacks, collusive attacks, and strategic attacks. Our experimental results show that, compared to the existing trust models, our model is cleanly a winner when security is the major concern of a system.	Peer-to-Peer; Trust; Reputation; Credibility; Peer-to-Peer;  Trust;  Reputation;  Credibility	Tian, Chunqi; Yang, Baijian	FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE	https://doi.org/10.1016/j.future.2011.03.006		1135-1141	"""@article{WOS:000294521200014,
    Author = ""Tian, Chunqi and Yang, Baijian"",
    Title = ""R<SUP>2</SUP>Trust, a reputation and risk based trust management framework for large-scale, fully decentralized overlay networks"",
    Journal = ""FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE"",
    Year = ""2011"",
    Volume = ""27"",
    Number = ""8"",
    Pages = ""1135-1141"",
    Month = ""OCT"",
    Abstract = ""Peer-to-peer (P2P) networking is widely used to exchange, contribute, or obtain files from any participating user. Building trust relationships between peers in a large-scale distributed P2P file-sharing system is a fundamental and challenging research topic. However, it is difficult to build a good trust relationship with the traditional mechanism. Recommendation based trust model from social relationship can be adopted to resolve the problem. But it faces the challenges of subjectivity, and experiential referral weighting. This paper presents R(2)Trust a robust Reputation and Risk evaluation based Trust management model. Our novel framework uses both reputation and risk to evaluate the trustworthiness of a peer and it is applicable for unstructured P2P networks. The model will evaluate peer trust values from direct interactions and peers referrals. R(2)Trust also distinguishes the credibility of peers. As a result, the aggregated trust value will filter out the noises and reflect more accurate trust values. The proposed R(2)Trust can also defense against several malicious attacks, such as simple malicious attacks, collusive attacks, and strategic attacks. Our experimental results show that, compared to the existing trust models, our model is cleanly a winner when security is the major concern of a system. (C) 2011 Elsevier By. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Tian, CQ (Corresponding Author), Tongji Univ, Minist Educ, Key Lab Embedded Syst \\& Serv Comp, Shanghai 200092, Peoples R China. Tian, Chunqi, Tongji Univ, Minist Educ, Key Lab Embedded Syst \\& Serv Comp, Shanghai 200092, Peoples R China. Tian, Chunqi, Beijing Univ Posts \\& Telecommun, State Key Lab Networking \\& Switching, Beijing 100876, Peoples R China. Yang, Baijian, Ball State Univ, Dept Technol, Muncie, IN 47306 USA."",
    DOI = ""10.1016/j.future.2011.03.006"",
    ISSN = ""0167-739X"",
    EISSN = ""1872-7115"",
    Keywords = ""Peer-to-Peer; Trust; Reputation; Credibility"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""tianchunqi@163.com"",
    Affiliations = ""Tongji University; Beijing University of Posts \\& Telecommunications; Ball State University"",
    ResearcherID-Numbers = ""Yang, Baijian/L-6058-2018"",
    ORCID-Numbers = ""Yang, Baijian/0000-0003-4440-3701"",
    Funding-Acknowledgement = ""NSFC {[}60903194]; National Research Foundation for the Doctoral Program of Ministry of Education of China {[}200802471060]; State Key Laboratory of Networking and Switching (Beijing University of Posts and Telecommunications); Key Laboratory of Communication and Information System (Beijing Jiaotong University)"",
    Funding-Text = ""This research is partially supported by the NSFC Grant 60903194, the National Research Foundation for the Doctoral Program of Ministry of Education of China under Grant 200802471060 and Open Project of State Key Laboratory of Networking and Switching (Beijing University of Posts and Telecommunications), Key Laboratory of Communication and Information System (Beijing Jiaotong University). The authors thank the anonymous reviewers for their suggestion on how to improve the articles. Their comments were of great help."",
    Number-of-Cited-References = ""24"",
    Times-Cited = ""40"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""16"",
    Journal-ISO = ""Futur. Gener. Comp. Syst."",
    Doc-Delivery-Number = ""815JF"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000294521200014"",
    DA = ""2024-10-11""
}
"""	Excluded	Excluded				2	Web of Science		R2Trust, a reputation and risk based trust management framework for large-scale, fully decentralized overlay networks	https://www.webofscience.com/wos/woscc/full-record/WOS:000294521200014	ELSEVIER	nan; References
545	TrustSE	A revised open source usability defect classification taxonomy	Context:: Reporting usability defects is a critical part of improving software. Accurately classifying these reported usability defects is critical for reporting, understanding, triaging, prioritizing and ultimately fixing such defects. However, existing usability defect classification taxonomies have several limitations when used for open source software (OSS) development. This includes incomplete coverage of usability defect problems, unclear criticality of defects, lack of formal usability training of most OSS defect reporters and developers, and inconsistent terminology and descriptions. Objective:: To address this gap, as part of our wider usability defect reporting research, we have developed a new usability defect taxonomy specifically designed for use on OSS projects. Method:: We used Usability Problem Taxonomy (UPT) to classify 377 usability defect reports from Mozilla Thunderbird, Firefox for Android, and the Eclipse Platform. At the same time, we also used the card-sorting technique to group defects that could not be classified using UPT. We looked for commonalities and similarities to further group the defects within each category as well as across categories. Results:: We constructed a new taxonomy for classifying OSS usability defects, called Open Source Usability Defect Classification (OSUDC). OSUDC was developed by incorporating software engineering and usability engineering needs to make it feasible to be used in open source software development. The use of the taxonomy has been validated on five real cases of usability defects. However, evaluation results using the OSUDC were only moderately successful. Conclusion:: The OSUDC serves as a common vocabulary to describe and classify usability defects with respect to graphical user interface issues. It may help software developers to better understand usability defects and prioritize them accordingly. For researchers, the OSUDC will be helpful when investigating both trends of usability defect types and understanding the root cause of usability defect problems.	Graphical user interfaces; Open source software; Open systems; Software design; Taxonomies; Usability engineering; Card-sorting; Defect classification; Defect reports; Defect type; Evaluation results; Open sources; Software developer; Usability problems; Defects; Graphical user interfaces;  Open source software;  Open systems;  Software design;  Taxonomies;  Usability engineering;  Card-sorting;  Defect classification;  Defect reports;  Defect type;  Evaluation results;  Open sources;  Software developer;  Usability problems;  Defects	Yusop, Nor Shahida Mohamad; Grundy, John; Schneider, Jean-Guy; Vasa, Rajesh	Information and Software Technology	https://doi.org/10.1016/j.infsof.2020.106396			"""@ARTICLE{Yusop2020,
    author = ""Yusop, Nor Shahida Mohamad and Grundy, John and Schneider, Jean-Guy and Vasa, Rajesh"",
    title = ""A revised open source usability defect classification taxonomy"",
    year = ""2020"",
    journal = ""Information and Software Technology"",
    volume = ""128"",
    doi = ""10.1016/j.infsof.2020.106396"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090404285\&doi=10.1016\%2fj.infsof.2020.106396\&partnerID=40\&md5=0372b8ef385934809d26362f9941cf3e"",
    affiliations = ""Faculty of Computer and Mathematical Sciences, Universiti Teknologi MARA, Selangor, Malaysia; Faculty of Information Technology, Monash University, Melbourne, Australia; Faculty of Science, Engineering and Built Environment, Deakin University, Geelong, Australia"",
    abstract = ""Context:: Reporting usability defects is a critical part of improving software. Accurately classifying these reported usability defects is critical for reporting, understanding, triaging, prioritizing and ultimately fixing such defects. However, existing usability defect classification taxonomies have several limitations when used for open source software (OSS) development. This includes incomplete coverage of usability defect problems, unclear criticality of defects, lack of formal usability training of most OSS defect reporters and developers, and inconsistent terminology and descriptions. Objective:: To address this gap, as part of our wider usability defect reporting research, we have developed a new usability defect taxonomy specifically designed for use on OSS projects. Method:: We used Usability Problem Taxonomy (UPT) to classify 377 usability defect reports from Mozilla Thunderbird, Firefox for Android, and the Eclipse Platform. At the same time, we also used the card-sorting technique to group defects that could not be classified using UPT. We looked for commonalities and similarities to further group the defects within each category as well as across categories. Results:: We constructed a new taxonomy for classifying OSS usability defects, called Open Source Usability Defect Classification (OSUDC). OSUDC was developed by incorporating software engineering and usability engineering needs to make it feasible to be used in open source software development. The use of the taxonomy has been validated on five real cases of usability defects. However, evaluation results using the OSUDC were only moderately successful. Conclusion:: The OSUDC serves as a common vocabulary to describe and classify usability defects with respect to graphical user interface issues. It may help software developers to better understand usability defects and prioritize them accordingly. For researchers, the OSUDC will be helpful when investigating both trends of usability defect types and understanding the root cause of usability defect problems. (c) 2020"",
    author_keywords = ""Empirical evaluation; Open source software development; Usability defect reporting; Usability defect taxonomy"",
    keywords = ""Graphical user interfaces; Open source software; Open systems; Software design; Taxonomies; Usability engineering; Card-sorting; Defect classification; Defect reports; Defect type; Evaluation results; Open sources; Software developer; Usability problems; Defects"",
    correspondence_address = ""N.S.M. Yusop; Faculty of Computer and Mathematical Sciences, Universiti Teknologi MARA, Malaysia; email: nor\_shahida@uitm.edu.my"",
    publisher = ""Elsevier B.V."",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Article"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 7""
}
"""	Excluded	Excluded				2	Scopus Signed In		A revised open source usability defect classification taxonomy	https://www.scopus.com/record/display.uri?eid=2-s2.0-85090404285&origin=resultslist&sort=r-f&src=s&sid=f54628f96fe9da92431ffc25f1c0daea&sot=b&sdt=b&s=TITLE%28a+revised+open+source+usability+defect+classification+taxonomy%29&sl=69&sessionSearchId=f54628f96fe9da92431ffc25f1c0daea&relpos=0	Elsevier B.V	nan; References; Pages
546	TrustSE	Trusted product lines	Context: The paper addresses the use of a Software Product Line approach in the context of developing software for a high-integrity, regulated domain such as civil aerospace. The success of a Software Product Line approach must be judged on whether useful products can be developed more effectively (lower cost, reduced schedule) than with traditional single-system approaches. When developing products for regulated domains, the usefulness of the product is critically dependent on the ability of the development process to provide approval evidence for scrutiny by the regulating authority. Objective: The objective of the work described is to propose a framework for arguing that a product instantiated using a Software Product Line approach can be approved and used within a regulated domain, such that the development cost of that product would be less than if it had been developed in isolation. Method: The paper identifies and surveys the issues relating the adoption of Software Product Lines as currently understood (including related technologies such as feature modelling, component-based development and model transformation) when applied to high-integrity software development. We develop an argument framework using Goal Structuring Notation to structure the claims made and the evidence required to support the approval of an instantiated product in such domains. Any unsubstantiated claims or missing/sub-standard evidence is identified, and we propose potential approaches or pose research questions to help address this. Results: The paper provides an argument framework supporting the use of a Software Product Line approach within a high-integrity regulated domain. It shows how lifecycle evidence can be collected, managed and used to credibly support a regulatory approval process, and provides a detailed example showing how claims regarding model transformation may be supported. Any attempt to use a Software Product Line approach in a regulated domain will need to provide evidence to support their approach in accordance with the argument outlined in the paper. Conclusion: Product Line practices may complicate the generation of convincing evidence for approval of instantiated products, but it is possible to define a credible Trusted Product Line approach.	Electric sparks; Mathematical models; Network architecture; Component-Based Development; Developing product; Development costs; Development process; DO-178B; Feature modelling; Goal structuring notation; GSN; Model transformation; Product-lines; Regulating authorities; Research questions; Software Product Line; Software design; Electric sparks;  Mathematical models;  Network architecture;  Component-Based Development;  Developing product;  Development costs;  Development process;  DO-178B;  Feature modelling;  Goal structuring notation;  GSN;  Model transformation;  Product-lines;  Regulating authorities;  Research questions;  Software Product Line;  Software design	Hutchesson, Stuart; McDermid, John	Information and Software Technology	https://doi.org/10.1016/j.infsof.2012.06.005	Bosch, J.(2000)Design and Use of Software Architectures: Adopting and Evolving A Product-Line Approach.Cited 1011 times.Addison-Wesley Professional; Pohl, K., Bockle, G., Van Der Linden, F.; Software Considerations in Airborne Systems and Equipment Certification(1992)Radio Technical Commission for Aeronautics/EUROCAE.Cited 41 times.DO-178B/ED-12B; SCADE Suite.Cited 57 times.Esterel (retrieved 27.02.11)http://www.esterel-technologies.com/products/scade-suite/; Leveson, N.G., Weiss, K.A.; (2004)AC20-148 Resuable Software Components.Cited 20 times.Federal Aviation Administration; Habli, I., Kelly, T., Hopkins, I.; Kelly, T., Weaver, R.The goal structuring notation-A safety argument notation(2004)Proc. DSN 2004 Workshop on Assurance Cases.Cited 406 times.; Clements, P.On the importance of product line scope(2002)Software Product-Family Engineering, 2290, pp. 102-113.Cited 14 times.F. van der Linden, Springer Berlin/Heidelberg; Kang, K.C., Cohen, S.G., Hess, J.A., Novak, W.E., Peterson, A.S.(1990)Feature-Oriented Domain Analysis (FODA) Feasibility Study (CMU/SEI-90-TR-21, ADA 235785).Cited 3390 times.Software Engineering Institute, Carnegie Mellon University Pittsburgh, PA; Czarnecki, K., Eisenecker, U.W.(2000)Generative Programming-Methods, Tools, and Applications.Cited 2068 times.Addison Wesley; Czarnecki, K., Helsen, S.; Gomaa, H.(2004)Designing Software Product Lines with UML: From Use Cases to Pattern-Based Software Architectures.Cited 544 times.Addison Wesley Longman Publishing Co., Inc. Redwood City, CA, USA; Beuche, D.Variants and Variability Management with pure: Variants(2004)3rd Software Product Line Conference (SPLC 2004).Cited 9 times.Workshop on Software Variability Management for Product Derivation, Boston, MA; Krueger, C.W.; UML 2.0 Superstructure Specification.Cited 592 times.http://www.omg.org/cgi-bin/doc?formal/05-07-04; Hutchesson, S., McDermid, J.; Clements, P., Northrop, L.(2001)Software Product Lines.Cited 3081 times.Addison-Wesley; McGregor, J.D.Testing a Software Product Line(2001)Software Engineering Institute CMU/SEI-2001-TR-022.Cited 134 times.; Hutchesson, S., McDermid, J.; Hutchesson, S.An Architecture-Centric Approach to FADEC Software Development(2006)SPARK User Group 2006, Praxis High-Integrity Systems.Cited 2 times.Bath, UK; Voelter, M., Groher, I.; Voelter, M.Using domain specific languages for product line engineering(2009)13th International Software Product Line Conference.Cited 5 times.San Francisco, California; Barnes, J.(2003)High Integrity Software, the SPARK Approach to Safety and Security.Cited 294 times.Addison-Wesley London, England; SPARK 95-The SPADE Ada 95 Kernel (Including RavenSPARK) V4.6.Cited 2 times.Praxis HIS2005; Amey, P.Correctness by construction: Better can also be cheaper(2002)CrossTalk: The Journal of Defense Software Engineering, pp. 24-28.Cited 43 times.MARCH; Croxford, M., Sutton, J.; Amey, P., White, N.; Xtext-Language Development Framework.Cited 13 times.(retrieved 27.02.11)http://www.eclipse.org/Xtext/	525 - 540	"""@ARTICLE{Hutchesson2013525,
    author = ""Hutchesson, Stuart and McDermid, John"",
    title = ""Trusted product lines"",
    year = ""2013"",
    journal = ""Information and Software Technology"",
    volume = ""55"",
    number = ""3"",
    pages = ""525 - 540"",
    doi = ""10.1016/j.infsof.2012.06.005"",
    url = ""https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872926635\&doi=10.1016\%2fj.infsof.2012.06.005\&partnerID=40\&md5=237a32abd016ee70761699f666c9b5cf"",
    affiliations = ""Aero Engine Controls, Derby DE24 8BJ, PO Box 31, United Kingdom; Department of Computer Science, University of York, Heslington, York, United Kingdom"",
    abstract = ""Context: The paper addresses the use of a Software Product Line approach in the context of developing software for a high-integrity, regulated domain such as civil aerospace. The success of a Software Product Line approach must be judged on whether useful products can be developed more effectively (lower cost, reduced schedule) than with traditional single-system approaches. When developing products for regulated domains, the usefulness of the product is critically dependent on the ability of the development process to provide approval evidence for scrutiny by the regulating authority. Objective: The objective of the work described is to propose a framework for arguing that a product instantiated using a Software Product Line approach can be approved and used within a regulated domain, such that the development cost of that product would be less than if it had been developed in isolation. Method: The paper identifies and surveys the issues relating the adoption of Software Product Lines as currently understood (including related technologies such as feature modelling, component-based development and model transformation) when applied to high-integrity software development. We develop an argument framework using Goal Structuring Notation to structure the claims made and the evidence required to support the approval of an instantiated product in such domains. Any unsubstantiated claims or missing/sub-standard evidence is identified, and we propose potential approaches or pose research questions to help address this. Results: The paper provides an argument framework supporting the use of a Software Product Line approach within a high-integrity regulated domain. It shows how lifecycle evidence can be collected, managed and used to credibly support a regulatory approval process, and provides a detailed example showing how claims regarding model transformation may be supported. Any attempt to use a Software Product Line approach in a regulated domain will need to provide evidence to support their approach in accordance with the argument outlined in the paper. Conclusion: Product Line practices may complicate the generation of convincing evidence for approval of instantiated products, but it is possible to define a credible Trusted Product Line approach. (c) 2012 Elsevier B.V. All rights reserved."",
    author_keywords = ""DO-178B/ED-12B; GSN; High-integrity software; Model transformation; Software Product Lines; SPARK"",
    keywords = ""Electric sparks; Mathematical models; Network architecture; Component-Based Development; Developing product; Development costs; Development process; DO-178B; Feature modelling; Goal structuring notation; GSN; Model transformation; Product-lines; Regulating authorities; Research questions; Software Product Line; Software design"",
    correspondence_address = ""S. Hutchesson; Aero Engine Controls, Derby DE24 8BJ, PO Box 31, United Kingdom; email: stuarth@cs.york.ac.uk"",
    issn = ""09505849"",
    coden = ""ISOTE"",
    language = ""English"",
    abbrev_source_title = ""Inf Software Technol"",
    type = ""Conference paper"",
    publication_stage = ""Final"",
    source = ""Scopus"",
    note = ""Cited by: 6""
}
"""	Excluded	Excluded				2	Scopus Signed In		Trusted Product Lines	https://www.scopus.com/record/display.uri?eid=2-s2.0-84872926635&origin=resultslist&sort=r-f&src=s&sid=8bfec4bcaa08a86d6e14f269799c64f1&sot=b&sdt=b&s=TITLE%28trusted+product+lines%29&sl=28&sessionSearchId=8bfec4bcaa08a86d6e14f269799c64f1&relpos=0		nan; Publisher
547	TrustSE	Trust in the information society	Trust is an important feature for all users of the Internet who rely on the safety and security of network technologies and systems for their daily lives. Trust, or the lack of it, has also been identified by the European Commission's Digital Agenda as a major barrier to further development of the information society in Europe. One of the areas in which concerns have been raised is in relation to children's safety online. As a result, substantial efforts have been made by policymakers and by the industry to build greater trust and confidence in online digital safety. This paper examines what trust means in the context of children's use of the Internet. Should policy on trust enhancement, for instance, include children's own trust in the technologies or services they use or is it sufficient to seek to reinforce parental and adult confidence that children can be adequately protected? What is required to build that trust from either perspective? Does it need, or should it include a relationship of trust between parents and children? To tease out these questions further, the paper examines current European Union policy frameworks on digital safety, particularly industry responses to the call for a more trusted Internet environment for children, and argues that technical solutions to be effective need to carefully balance a number of competing objectives and to be sufficiently grounded in evidence of parental and child experience of the Internet.	Trust; Online safety; Safer Internet policy; Protection of minors; EU Kids online; Trust;  Online safety;  Safer Internet policy;  Protection of minors;  EU Kids online	O'Neill, Brian	COMPUTER LAW \& SECURITY REVIEW	https://doi.org/10.1016/j.clsr.2012.07.005		551-559	"""@article{WOS:000209414300007,
    Author = ""O'Neill, Brian"",
    Title = ""Trust in the information society"",
    Journal = ""COMPUTER LAW \\& SECURITY REVIEW"",
    Year = ""2012"",
    Volume = ""28"",
    Number = ""5"",
    Pages = ""551-559"",
    Month = ""OCT"",
    Abstract = ""Trust is an important feature for all users of the Internet who rely on the safety and security of network technologies and systems for their daily lives. Trust, or the lack of it, has also been identified by the European Commission's Digital Agenda as a major barrier to further development of the information society in Europe. One of the areas in which concerns have been raised is in relation to children's safety online. As a result, substantial efforts have been made by policymakers and by the industry to build greater trust and confidence in online digital safety. This paper examines what trust means in the context of children's use of the Internet. Should policy on trust enhancement, for instance, include children's own trust in the technologies or services they use or is it sufficient to seek to reinforce parental and adult confidence that children can be adequately protected? What is required to build that trust from either perspective? Does it need, or should it include a relationship of trust between parents and children? To tease out these questions further, the paper examines current European Union policy frameworks on digital safety, particularly industry responses to the call for a more trusted Internet environment for children, and argues that technical solutions to be effective need to carefully balance a number of competing objectives and to be sufficiently grounded in evidence of parental and child experience of the Internet. (C) 2012 Brian O'Neill. Published by Elsevier Ltd. All rights reserved."",
    Publisher = ""ELSEVIER ADVANCED TECHNOLOGY"",
    Address = ""OXFORD FULFILLMENT CENTRE THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""O'Neill, B (Corresponding Author), Dublin Inst Technol, Coll Arts \\& Tourism, Dublin, Ireland. Dublin Inst Technol, Coll Arts \\& Tourism, Dublin, Ireland."",
    DOI = ""10.1016/j.clsr.2012.07.005"",
    ISSN = ""0267-3649"",
    Keywords = ""Trust; Online safety; Safer Internet policy; Protection of minors; EU Kids online"",
    Research-Areas = ""Government \\& Law"",
    Web-of-Science-Categories = ""Law"",
    Author-Email = ""brian.oneill@dit.ie"",
    Affiliations = ""Technological University Dublin"",
    ResearcherID-Numbers = ""O'Neill, Brian/B-8702-2015"",
    ORCID-Numbers = ""O'Neill, Brian/0000-0002-4503-3100"",
    Funding-Acknowledgement = ""Digital Childhoods project under Irish Research Council for Humanities and Social Sciences"",
    Funding-Text = ""Research for this paper was supported by the Digital Childhoods project funded under the Irish Research Council for Humanities and Social Sciences Senior Fellowship Scheme."",
    Number-of-Cited-References = ""40"",
    Times-Cited = ""9"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""17"",
    Journal-ISO = ""Comput. Law Secur. Rev."",
    Doc-Delivery-Number = ""V39ME"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000209414300007"",
    DA = ""2024-11-06""
}
"""	Excluded	Excluded			Studies that were not accessible in full-text	2	Web of Science		Trust in the information society	https://www.webofscience.com/wos/woscc/full-record/WOS:000209414300007	ELSEVIER ADVANCED TECHNOLOGY	nan; References
548	TrustSE	Understanding reuse of software examples: A case study of prejudice in a community of practice	Context: The context of this research is software developers' perceptions about the use of code examples in professional software development. Objective: The primary objective of this paper is to identify the human factors that dominate example usage among professional software developers, and to provide a theory that explains these factors. Method: To achieve this goal, we analyzed the perceptions of professional software developers as manifested on LinkedIn online community. We analyzed the data qualitatively using adapted grounded theory research procedures. Results: The research yields an initial framework of key factors that dominate professional developers' perception regarding example usage. We use the theoretical lens of prejudice theory to put these factors in a broader context, and outline initial recommendations to address these factors in professional organizational context. Conclusion: The results of this work, in particular the use of qualitative techniques - allowed us to obtain rich insight into key human factors that affect professional software developers, and enrich the body of literature on the issues of reuse. These factors need to be taken into account as part of an organizational reuse strategy.	LinkedIn; Qualitative research; Grounded theory; Virtual focus group; Human aspects; Open source development; LinkedIn;  Qualitative research;  Grounded theory;  Virtual focus group;  Human aspects;  Open source development	Barzilay, Ohad; Urquhart, Cathy	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2014.02.013		1613-1628	"""@article{WOS:000341903100006,
    Author = ""Barzilay, Ohad and Urquhart, Cathy"",
    Title = ""Understanding reuse of software examples: A case study of prejudice in a community of practice"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2014"",
    Volume = ""56"",
    Number = ""12, SI"",
    Pages = ""1613-1628"",
    Month = ""DEC"",
    Abstract = ""Context: The context of this research is software developers' perceptions about the use of code examples in professional software development. Objective: The primary objective of this paper is to identify the human factors that dominate example usage among professional software developers, and to provide a theory that explains these factors. Method: To achieve this goal, we analyzed the perceptions of professional software developers as manifested on LinkedIn online community. We analyzed the data qualitatively using adapted grounded theory research procedures. Results: The research yields an initial framework of key factors that dominate professional developers' perception regarding example usage. We use the theoretical lens of prejudice theory to put these factors in a broader context, and outline initial recommendations to address these factors in professional organizational context. Conclusion: The results of this work, in particular the use of qualitative techniques - allowed us to obtain rich insight into key human factors that affect professional software developers, and enrich the body of literature on the issues of reuse. These factors need to be taken into account as part of an organizational reuse strategy. (c) 2014 Published by Elsevier B.V."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Barzilay, O (Corresponding Author), Tel Aviv Univ, Recanati Bldg, IL-69978 Tel Aviv, Israel. Barzilay, Ohad, Tel Aviv Univ, IL-69978 Tel Aviv, Israel. Urquhart, Cathy, Manchester Metropolitan Univ, Manchester M15 6BH, Lancs, England."",
    DOI = ""10.1016/j.infsof.2014.02.013"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""LinkedIn; Qualitative research; Grounded theory; Virtual focus group; Human aspects; Open source development"",
    Keywords-Plus = ""KNOWLEDGE MANAGEMENT; GROUP VARIABILITY; EGO-DEPLETION; IN-GROUP; SELF; INGROUP; SYSTEMS; DEFINITION; SUCCESS; MODELS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""ohadbr@tau.ac.il c.urquhart@mmu.ac.uk"",
    Affiliations = ""Tel Aviv University; Manchester Metropolitan University"",
    ResearcherID-Numbers = ""Urquhart, Cathy/HLQ-1865-2023"",
    Number-of-Cited-References = ""114"",
    Times-Cited = ""11"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""42"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""AP2LG"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000341903100006"",
    DA = ""2024-10-11""
}
"""	Included	Included				2	Web of Science		Understanding reuse of software examples: A case study of prejudice in a community of practice	https://www.webofscience.com/wos/woscc/full-record/WOS:000341903100006	ELSEVIER	nan; References
549	TrustSE	Recommendations to the Adoption of New Software Practices: A Case Study of Team Intention and Behavior in Three Software Companies	It is believed that people consider the implications of their actions and act based on a reasonable assessment of those implications. In this context, belief can be defined as a state of mind that embodies trust and confidence in something. So, behavior is driven by what is believed, by what is culturally assumed to be true about the world. Our work aims to study and characterize a belief system of software project teams to understand the beliefs underlying an intention or practice, and seek answers about how people progress from intention to behavior in software engineering environments. We applied a behavioral theory in terms of organizational and team level factors associated to beliefs about the software development practices. A set of interviews on origins, sources and impacts of beliefs on software practices was conducted with professionals from different project teams and companies. The results point out a strong influence of past experiences and repeated behavior on software development practices of project teams. Also, we list a set of practical recommendations for software companies that are dealing with the challenges of adopting new practices on software projects.	Software; Companies; Context; Interviews; Software engineering; Certification; Adoption Of Practices; Software Companies; Team Behavior; Software Development; Project Team; State Of Mind; Software Engineering; Team Level; Software Projects; Team Members; Organizational Culture; Behavioral Intention; Project Management; Organizational Context; Industrial Practice; Subjective Norms; Theory Of Planned Behavior; Industrial Context; Practice Team; Production Team; Adoption Of New Practices; Project Context; Agile Development; Industrial Case Study; Software Industry; Software Teams; Strength Of Belief; Promising Practices; Agilent Model; Development Centre; belief system; attitude; behavior; planned behavior; perceived behavioral control; software development practice	Carol Passos; Daniela S. Cruzes; Arthur Hayne; Manoel Mendonca	2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement	https://doi.org/10.1109/ESEM.2013.31	"1.Aguirre, J., Speer, N. ""Examining the relationship between beliefs and goals in teacher practice"". Journal of Mathematical Behavior, 3 (18): 327-356, 2000. CrossRef  Google Scholar; 2.Ajzen, I. ""From intentions to actions: A theory of planned behavior"". In J. Kuhl  Beckman (Eds.), Action control: From cognition to behavior (pp. 11-39). Berlin: Springer-Verlag, 1985. CrossRef  Google Scholar; 3.Ajzen, I. ""The Theory of Planned Behavior"". Organizational Behavior and Human Decision Processes, 50(2):179-211, 1991. CrossRef  Google Scholar; 4.Ajzen, I, Fishbein, M. ""Understanding attitudes and predicting social behavior"", 1st ed. USA: Prentice Hall (Englewood Cliffs, N.J.), 1980. Google Scholar; 5.Ajzen, I., Fishbein, M. ""The influence of attitudes on behavior"". In D. Albarracin, B. T. Johnson,  P. Zanna (Eds.), The handbook of attitudes. pp. 173-221). Mahwah, NJ: Erlbaum, 2005. CrossRef  Google Scholar; 6.Ajzen, I., Gilbert Cote, N. ""Attitudes and the prediction of behavior"". In W. D. Crano  Prislin (Eds.), Attitudes and attitude change (pp. 289-311). New York: Psychology Press, 2008. Google Scholar; 7.Becker, T., Randall, D., Riegel, C. ""The multidimensional view of commitment and the theory of reasoned action: a comparative evaluation"". JOM, 21(4): 617-638, 1995. CrossRef  Google Scholar; 8.Blank, M., Hennessy, M. ""A reasoned action approach to hiv prevention for persons with serious mental illness"". The ANNALS of the American Academy of Political and Social Science, 640, March, 2012. CrossRef  Google Scholar; 9.Cohen, S. ""Designing effective self-managing work teams"". Proc. of Theory Symposium on Self-Managed Work Teams, Denton, Texas, USA, June, 1993. Google Scholar; 10.Douglas, N. And Wykowski, T. ""From Belief to Knowledge Achieving and Sustaining an Adaptive Culture in Organizations"", USA: CRC Press, 2010. CrossRef  Google Scholar; 11.Fishbein, M., Ajzen, I ""Belief, attitude, intention, and behavior: an introduction to theory and research"". MA: Addison-Wesley, 1975. Google Scholar; 12.Fishbein, M., Ajzen, I. ""Predicting and changing behavior: A reasoned action approach"" USA: Psychology Press, 2010. Google Scholar; 13.Funda SAVASCI-ACIKALIN. ""Teacher beliefs and practice in science education"". Asia-Pacific Forum on Science Learning and Teaching 10(1), article 12, June, 2009. Google Scholar; 14.Hennessy, M. ""Advancing Reasoned Action Theory (The ANNALS of the American Academy of Political and Social Science Series)"", USA: Sage, 2012. Google Scholar; 15.Kirkman, B., Rosen, B. ""Beyond self-management: antecedents and consequences of team empowerment"". The Academy of Management Journal, 42(1): 58-74, 1999 CrossRef  Google Scholar; 16.Kraft, P., Rise J., Sutton, S., Rosamb, E. ""Perceived difficulty in the theory of planned behaviour: perceived behavioural control or affective attitude?"". British Journal of Social Psychology, 44(3: 479-496, 2005. CrossRef  Google Scholar; 17.Kym, H., Park, W. ""The effect of cultural fit/misfit on the productivity and turnover of IS personnel"". Proc. of SIGCPR 92, New York, USA, 1992. CrossRef  Google Scholar; 18.Leseure, M., Bauer, J., Birdi, K., Neely, A., Denyer, D. ""Adoption of promising practices: a systematic review of the evidence"". International Journal of Management Reviews, 5/6(3/4), 169-190, 2004. CrossRef  Google Scholar; 19.Livari, J., Huisman, M. ""The relationship between organizational culture and the deployment of systems development methodologies"". MIS Quarterly, 31(1): 35-58, 2007. Google Scholar; 20.Livari, J., Livari, N. ""The relationship between organizational culture and the deployment of agile methods"". IST-5(53):509-520, 2011. Google Scholar; 21.Lutters, W.G., Seaman, C.B. ""Revealing actual documentation usage in software maintenance through war stories"". IST 1(49):576-587, 2007. CrossRef  Google Scholar; 22.Middlestadt, S. ""Beliefs underlying eating better and moving more: lessons learned from comparative salient belief elicitations with adults and youths"". The ANNALS of the American Academy of Political and Social Science, 640: 81, 2012 CrossRef  Google Scholar; 23.Montano, D.,Taplin, S. ""A Test of an expanded theory in reasoned action to predict mammography participation"". Social Science and Medicine, 32(6): 733-741, 1991. CrossRef  Google Scholar; 24.Omar, M., Syed-Abdullah, S., Yasin, A. ""The impact of agile approach on software engineering teams"". American Journal of Economics and Business Administration., 3(1): 12-17. 2011. CrossRef  Google Scholar; 25.Passos, C., Braun, P., Cruzes, D., Mendonca, M. ""Analyzing the impact of beliefs in software project practices"". Proc. of ESEM11, Banff-Alberta, Canada, September, 2011. View Article  Google Scholar; 26.Passos, C., Cruzes, D., Dyba, T., Mendonca, M. ""Challenges of applying ethnography to study software practices"". Proc. of ESEM12, Lund, Sweden, September, 2012. View Article  Google Scholar; 27.Passos, C., Cruzes, D., Mendonca M. ""Applying Theory of Reasoned Action in the Context of Software Development Practices: Insights into Team Intention and Behavior"". Proc. of EASE13, Porto de Galinhas, Brazil, 2013. CrossRef  Google Scholar; 28.Passos, C., Cruzes, D., Mendonca M. ""Beliefs Underlying Teams Intention and Practice: An Application of the Theory of Planned Behavior "". Proc. of ESELAW13, Montevideo, Uruguay, 2013. Google Scholar; 29.Peslak, A., Ceccucci, W., Sendall, P. ""An empirical study of social networking behavior using theory of reasoned action"". Proc. of CONISAR11, North Carolina, USA, November, 2011. Google Scholar; 30.Pfleeger, S. ""Understanding and improving technology transfer in software engineering"". Journal of Systems and Software, 47, 111-124, 1999. CrossRef  Google Scholar"			Excluded	Excluded				2	IEEE		Recommendations to the Adoption of New Software Practices: A Case Study of Team Intention and Behavior in Three Software Companies	https://ieeexplore.ieee.org/document/6681374	IEEE	nan; Pages; Year; Bibtex
550	TrustSE	Using reputation stable analysis patterns as model based software reuse	Reputation is the opinion (more technically, a social evaluation) of the public towards a person, a group of people, or an organization. In other words, reputation is the general estimation that the public has for a person or an institution. It is an important factor in many fields, like business, online communities or social status. It is also a subject of study in social, management and technological sciences. Its influence may range from competitive settings like markets to cooperative ones like firms, organizations, institutions and communities. Furthermore, reputation also acts on different levels of agency, individual and supra-individual. At the supra-individual level, it concerns groups, communities, collectives and abstract social entities (such as firms, corporations, organizations, countries, cultures and even civilizations). It affects phenomena of different scale, from everyday life to relationships between nations. Reputation is a fundamental instrument of social order, based upon distributed, spontaneous social control. As can be seen, there is nothing different in the way reputation is handled in any of those areas of application. In fact, reputation is the same in all of them. Therefore, the reason for the analysis of this concept, with the sole purpose of extracting its core knowledge, it is a worthwhile reason, especially if you are planning to reuse it in numerous applications, while still maintaining a cost effective nature.	Organizations; Stability analysis; Software; Portable media players; Context; Adaptation models; Stable Pattern; Software Reuse; Online Communities; Core Knowledge; Classification Model; Application Of Model; Challenging Task; General Pattern; Variety Of Domains; Good Reputation; Knowledge Map; Online Business; Personal Reputation; Industrial Objects; Apple Inc; Class Diagram; Reputation; Stable Analysis Patterns; Software Stability Model; Enduring Business Theme; Knowledge Map; Adaptability; Reuse	Mohamed E. Fayad; Charles A. Flood	2016 Future Technologies Conference (FTC)	https://doi.org/10.1109/FTC.2016.7821685	"1.M. E. Fayad, ""Stable Analysis Patterns for Software and Systems"" in , Boca Raton, FL:Auerbach Publications, July 2015. Google Scholar; 2.M.E. Fayad and A. Altman, ""Introduction to Software Stability"", Communications of the ACM 44, no. 9, September 2001. Google Scholar; 3.M.E. Fayad, ""Accomplishing Software Stability"", Communications of the ACM 45, no. 1, January 2002. CrossRef  Google Scholar; 4.M.E. Fayad, ""How to Deal with Software Stability"", Communications of ACM 45, no. 4, April 2002. CrossRef  Google Scholar; 5.M.E. Fayad, ""Software Stability: Timeless Architectures Systems of Patterns and Model-Based for Reuse"", IEEE Int. Conf. of Inform. Reuse and Integration Las Vegas, 2003. Google Scholar; 6.A. Mahdy and M.E. Fayad, ""A Software Stability Model Pattern"", in Pattern Language of Programs Monticello (PLoP2002), 2002. Google Scholar; 7.Cline. Marshall and Girou. Mike, ""Enduring Business Theme"", Communications of the ACM 43, no. 5, pp. 101-106, May 2000. Google Scholar; 8.M. E. Fayad, H. A. Sanchez, S. G. K. Hegde, A. Basia and A. Vakil, ""Software Patterns Knowledge Maps and Domain Analysis"" in , Boca Raton, FL:Auerbach Publications, December 2014. Google Scholar; 9.M.E. Fayad and M. Cline, ""Aspects of Software Adaptability"", Communications of the ACM, vol. 39, no. 10, pp. 58-59, October 1996. CrossRef  Google Scholar; 10.A. Mahdy, M.E. Fayad, H. Hamza and P. Tugnawat, ""Stable and Reusable Model-Based Architectures"", ECOOP 2002 Workshop on Model-based Software Reuse, June 2002. Google Scholar"			Excluded	Excluded				2	IEEE		Using reputation stable analysis patterns as model based software reuse	https://ieeexplore.ieee.org/document/7821685	IEEE	nan; Pages; Year; Bibtex
551	TrustSE	Improving the model development process: what use is model reuse: is there a crook at the end of the rainbow?	The emergence of new technologies in simulation modeling such as the World Wide Web has fostered debate on the reuse of models. In this paper we present a case for model reuse and the pot of gold that it promises. We then discuss model reuse from the viewpoint of simulation modelers who use COTS simulation packages and suggest that model reuse may in fact cost more than developing new models as candidates for reuse as trust must be established through thorough testing. An alternative to this is put forward that suggests that a Grab-and-Glue, Run, Reject, Reply (G<sup>2</sup> R<sup>3</sup>) approach is a more appropriate use of model reuse as it emphasizes the intellectual process of problem understanding rather than model correctness as an means to itself.		Paul, Ray J.; Taylor, Simon J. E.	WSC '02: Proceedings of the 34th conference on Winter simulation: exploring new frontiers	https://doi.org/10.5555/1030453.1030544		648-652	"""@inproceedings{10.5555/1030453.1030544,
    author = ""Paul, Ray J. and Taylor, Simon J. E."",
    title = ""Improving the model development process: what use is model reuse: is there a crook at the end of the rainbow?"",
    year = ""2002"",
    isbn = ""0780376153"",
    publisher = ""Winter Simulation Conference"",
    abstract = ""The emergence of new technologies in simulation modeling such as the World Wide Web has fostered debate on the reuse of models. In this paper we present a case for model reuse and the pot of gold that it promises. We then discuss model reuse from the viewpoint of simulation modelers who use COTS simulation packages and suggest that model reuse may in fact cost more than developing new models as candidates for reuse as trust must be established through thorough testing. An alternative to this is put forward that suggests that a Grab-and-Glue, Run, Reject, Reply (G<sup>2</sup> R<sup>3</sup>) approach is a more appropriate use of model reuse as it emphasizes the intellectual process of problem understanding rather than model correctness as an means to itself."",
    booktitle = ""Proceedings of the 34th Conference on Winter Simulation: Exploring New Frontiers"",
    pages = ""648-652"",
    numpages = ""5"",
    location = ""San Diego, California"",
    series = ""WSC '02""
}
"""	Excluded	Excluded				2	ACM		What use is model reuse: is there a crook at the end of the rainbow?	https://doi.org/10.5555/1030453.1030544	Winter Simulation Conference	nan; Keywords; References; Link
552	TrustSE	TRUSTIE: A Software Development Platform for Crowdsourcing	Software development is either creation activities that rely on developers creativity and talents, or manufacturing activities that follow the engineering processes. Engineering processesEngineering processesneed to include creation activities to address tasks such as requirement elicitation and bug findingBug finding. On the other hand, by exploiting the crowd wisdom, open-source development has been demonstrated to be a suitable environment for software creation. However, it also has several limitations, such as guaranteeing the progress and quality of production process. This paper introduces a software development platform and ecosystem that combines the strengths of the two models. First, we propose the Trustworthy Software Model as a basis to support such a hybrid development ecosystemHybrid development ecosystem. The core of this model contains a novel lifecycle model, an evidence model and an evolution model. Second, based on the model, we propose the Trustworthy Software DevelopmentSoftware developmentand Evolution Service Model. It integrates crowd collaborationCrowd collaboration, resource sharing, runtime monitoringRuntime monitoring, and trustworthiness analysisTrustworthiness analysisinto an unified framework. Based on this integrated model, we designed and implemented TRUSTIETRUSTIE, which distinguishes itself from other software crowdsourcingSoftware crowdsourcingplatforms by providing the software collaborative development service and the resource sharingResource sharingservice with the general support of trustworthiness-analysis tools. TRUSTIETRUSTIEenables crowd-oriented collaboration among internal development teams and the external crowds by combining the software creation and software manufacturing in one ecosystem.		Wang, Huaimin; Yin, Gang; Li, Xiang; Li, Xiao	Crowdsourcing	https://doi.org/10.1007/978-3-662-47011-4_10		165--190	"""@Inbook{Wang2015,
    author = ""Wang, Huaimin and Yin, Gang and Li, Xiang and Li, Xiao"",
    editor = ""Li, Wei and Huhns, Michael N. and Tsai, Wei-Tek and Wu, Wenjun"",
    title = ""TRUSTIE: A Software Development Platform for Crowdsourcing"",
    bookTitle = ""Crowdsourcing: Cloud-Based Software Development"",
    year = ""2015"",
    publisher = ""Springer Berlin Heidelberg"",
    address = ""Berlin, Heidelberg"",
    pages = ""165--190"",
    abstract = ""Software development is either creation activities that rely on developers creativity and talents, or manufacturing activities that follow the engineering processes. Engineering processesEngineering processesneed to include creation activities to address tasks such as requirement elicitation and bug findingBug finding. On the other hand, by exploiting the crowd wisdom, open-source development has been demonstrated to be a suitable environment for software creation. However, it also has several limitations, such as guaranteeing the progress and quality of production process. This paper introduces a software development platform and ecosystem that combines the strengths of the two models. First, we propose the Trustworthy Software Model as a basis to support such a hybrid development ecosystemHybrid development ecosystem. The core of this model contains a novel lifecycle model, an evidence model and an evolution model. Second, based on the model, we propose the Trustworthy Software DevelopmentSoftware developmentand Evolution Service Model. It integrates crowd collaborationCrowd collaboration, resource sharing, runtime monitoringRuntime monitoring, and trustworthiness analysisTrustworthiness analysisinto an unified framework. Based on this integrated model, we designed and implemented TRUSTIETRUSTIE, which distinguishes itself from other software crowdsourcingSoftware crowdsourcingplatforms by providing the software collaborative development service and the resource sharingResource sharingservice with the general support of trustworthiness-analysis tools. TRUSTIETRUSTIEenables crowd-oriented collaboration among internal development teams and the external crowds by combining the software creation and software manufacturing in one ecosystem."",
    isbn = ""978-3-662-47011-4"",
    doi = ""10.1007/978-3-662-47011-4\_10"",
    url = ""https://doi.org/10.1007/978-3-662-47011-4\_10""
}
"""	Included	Included				2	Springer Link		Trustie_a software development platform for Crowdsourcing	https://link.springer.com/chapter/10.1007/978-3-662-47011-4_10	Springer Berlin Heidelberg	nan; Keywords; References
553	TrustSE	Categorizing developer information needs in software ecosystems	We present the results of an investigation into the nature of the information needs of software developers who work in projects that are part of larger ecosystems. In an open-question survey we asked framework and library developers about their information needs with respect to both their upstream and downstream projects. We investigated what kind of information is required, why is it necessary, and how the developers obtain this information. The results show that the downstream needs are grouped into three categories roughly corresponding to the different stages in their relation with an upstream: selection, adoption, and co-evolution. The less numerous upstream needs are grouped into two categories: project statistics and code usage. The current practices part of the study shows that to satisfy many of these needs developers use non-specific tools and ad hoc methods. We believe that this is a largely unexplored area of research.	Software ecosystems;  frameworks and libraries;  grounded theory;  open source software;  program comprehension;  programmer needs; Software ecosystems, frameworks and libraries, grounded theory, open source software, program comprehension, programmer needs	Haenni, Nicole; Lungu, Mircea; Schwarz, Niko; Nierstrasz, Oscar	WEA 2013: Proceedings of the 2013 International Workshop on Ecosystem Architectures	https://doi.org/10.1145/2501585.2501586		1-5	"""@inproceedings{10.1145/2501585.2501586,
    author = ""Haenni, Nicole and Lungu, Mircea and Schwarz, Niko and Nierstrasz, Oscar"",
    title = ""Categorizing developer information needs in software ecosystems"",
    year = ""2013"",
    isbn = ""9781450323147"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2501585.2501586"",
    doi = ""10.1145/2501585.2501586"",
    abstract = ""We present the results of an investigation into the nature of the information needs of software developers who work in projects that are part of larger ecosystems. In an open-question survey we asked framework and library developers about their information needs with respect to both their upstream and downstream projects. We investigated what kind of information is required, why is it necessary, and how the developers obtain this information. The results show that the downstream needs are grouped into three categories roughly corresponding to the different stages in their relation with an upstream: selection, adoption, and co-evolution. The less numerous upstream needs are grouped into two categories: project statistics and code usage. The current practices part of the study shows that to satisfy many of these needs developers use non-specific tools and ad hoc methods. We believe that this is a largely unexplored area of research."",
    booktitle = ""Proceedings of the 2013 International Workshop on Ecosystem Architectures"",
    pages = ""1-5"",
    numpages = ""5"",
    keywords = ""Software ecosystems, frameworks and libraries, grounded theory, open source software, program comprehension, programmer needs"",
    location = ""Saint Petersburg, Russia"",
    series = ""WEA 2013""
}
"""	Included	Included				2	ACM		Categorizing developer information needs in software ecosystems	https://doi.org/10.1145/2501585.2501586	Association for Computing Machinery	nan; References; Link
554	TrustSE	The power of propagation: on the role of software operation knowledge within software ecosystems	Knowledge of in-the-field software operation is still unrecognized as an essential pulse in the veins of software ecosystems. Although software-producing organizations are aware of the ecosystems in which they operate and their relationships with other ecosystem participants, all too often, vendors are unsuccessful in recognizing the potential value and role of such knowledge in their software ecosystems. This paper presents a classification of successful operational software ecosystem practices that may help software-producing organizations to effectively utilize and propagate knowledge of the in-the-field operation of their software, and therewith address challenges that result from ecosystem participation. Analysis of these practices confirms that infrastructures for acquisition, utilization and propagation of such knowledge, allow ecosystem participants to use the 'power of many' in increasing the quality and robustness of their software, and provide them with competitive advantage in terms of software quality, end-user satisfaction, ecosystem stability and ecosystem attractiveness.	ecosystem orchestration;  knowledge propagation;  software ecosystems;  software operation knowledge; ecosystem orchestration, knowledge propagation, software ecosystems, software operation knowledge	van der Schuur, Henk; Jansen, Slinger; Brinkkemper, Sjaak	MEDES '11: Proceedings of the International Conference on Management of Emergent Digital EcoSystems	https://doi.org/10.1145/2077489.2077503		76-84	"""@inproceedings{10.1145/2077489.2077503,
    author = ""van der Schuur, Henk and Jansen, Slinger and Brinkkemper, Sjaak"",
    title = ""The power of propagation: on the role of software operation knowledge within software ecosystems"",
    year = ""2011"",
    isbn = ""9781450310475"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2077489.2077503"",
    doi = ""10.1145/2077489.2077503"",
    abstract = ""Knowledge of in-the-field software operation is still unrecognized as an essential pulse in the veins of software ecosystems. Although software-producing organizations are aware of the ecosystems in which they operate and their relationships with other ecosystem participants, all too often, vendors are unsuccessful in recognizing the potential value and role of such knowledge in their software ecosystems. This paper presents a classification of successful operational software ecosystem practices that may help software-producing organizations to effectively utilize and propagate knowledge of the in-the-field operation of their software, and therewith address challenges that result from ecosystem participation. Analysis of these practices confirms that infrastructures for acquisition, utilization and propagation of such knowledge, allow ecosystem participants to use the 'power of many' in increasing the quality and robustness of their software, and provide them with competitive advantage in terms of software quality, end-user satisfaction, ecosystem stability and ecosystem attractiveness."",
    booktitle = ""Proceedings of the International Conference on Management of Emergent Digital EcoSystems"",
    pages = ""76-84"",
    numpages = ""9"",
    keywords = ""ecosystem orchestration, knowledge propagation, software ecosystems, software operation knowledge"",
    location = ""San Francisco, California"",
    series = ""MEDES '11""
}
"""	Included	Included				2	ACM		The power of propagation: on the role of software operation knowledge within software ecosystems	https://doi.org/10.1145/2077489.2077503	Association for Computing Machinery	nan; References; Link
555	TrustSE	Software ecosystems - A systematic literature review	A software ecosystem is the interaction of a set of actors on top of a common technological platform that results in a number of software solutions or services. Arguably, software ecosystems are gaining importance with the advent of, e.g., the Google Android, Apache, and Salesforce.com ecosystems. However, there exists no systematic overview of the research done on software ecosystems from a software engineering perspective. We performed a systematic literature review of software ecosystem research, analyzing 90 papers on the subject taken from a gross collection of 420. Our main conclusions are that while research on software ecosystems is increasing (a) there is little consensus on what constitutes a software ecosystem, (b) few analytical models of software ecosystems exist, and	Software ecosystems; Software ecosystem; Systematic literature review; Software ecosystems;  Software ecosystem;  Systematic literature review	Manikas, Konstantinos; Hansen, Klaus Marius	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2012.12.026		1294-1306	"""@article{WOS:000317322400010,
    Author = ""Manikas, Konstantinos and Hansen, Klaus Marius"",
    Title = ""Software ecosystems - A systematic literature review"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2013"",
    Volume = ""86"",
    Number = ""5"",
    Pages = ""1294-1306"",
    Month = ""MAY"",
    Abstract = ""A software ecosystem is the interaction of a set of actors on top of a common technological platform that results in a number of software solutions or services. Arguably, software ecosystems are gaining importance with the advent of, e.g., the Google Android, Apache, and Salesforce.com ecosystems. However, there exists no systematic overview of the research done on software ecosystems from a software engineering perspective. We performed a systematic literature review of software ecosystem research, analyzing 90 papers on the subject taken from a gross collection of 420. Our main conclusions are that while research on software ecosystems is increasing (a) there is little consensus on what constitutes a software ecosystem, (b) few analytical models of software ecosystems exist, and (c) little research is done in the context of real-world ecosystems. This work provides an overview of the field, while identifying areas for future research. (C) 2012 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Manikas, K (Corresponding Author), Univ Copenhagen, Dept Comp Sci DIKU, DK-1168 Copenhagen, Denmark. Manikas, Konstantinos; Hansen, Klaus Marius, Univ Copenhagen, Dept Comp Sci DIKU, DK-1168 Copenhagen, Denmark."",
    DOI = ""10.1016/j.jss.2012.12.026"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software ecosystems; Software ecosystem; Systematic literature review"",
    Keywords-Plus = ""INNOVATION; INDUSTRY; MODEL"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""kmanikas@diku.dk klausmh@diku.dk"",
    Affiliations = ""University of Copenhagen"",
    ResearcherID-Numbers = ""Manikas, Konstantinos/C-2013-2015"",
    ORCID-Numbers = ""Manikas, Konstantinos/0000-0001-8531-898X"",
    Funding-Acknowledgement = ""Net4Care project within Caretech Innovation"",
    Funding-Text = ""This work has been partially funded by the Net4Care project within Caretech Innovation (http://www.caretechinnovation.dk/projekter/net4care/)."",
    Number-of-Cited-References = ""99"",
    Times-Cited = ""249"",
    Usage-Count-Last-180-days = ""4"",
    Usage-Count-Since-2013 = ""111"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""122MO"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000317322400010"",
    DA = ""2024-11-06""
}
"""	Included	Included				2	Web of Science		Software ecosystems--A systematic literature review	https://www.webofscience.com/wos/woscc/full-record/WOS:000317322400010	ELSEVIER SCIENCE INC	nan; References
