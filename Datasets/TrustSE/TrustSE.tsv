key	project	title	abstract	keywords	authors	venue	doi	references	pages	bibtex	screened_decision	final_decision	mode	inclusion_criteria	exclusion_criteria	reviewer_count	source	year	meta_title	link	publisher	metadata_missing
0	TrustSE	On the impact of security vulnerabilities in the npm package dependency network	Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues.	dependency network;  security vulnerability;  semantic versioning;  software ecosystem;  software repository mining; dependency network, security vulnerability, semantic versioning, software ecosystem, software repository mining	Decan, Alexandre; Mens, Tom; Constantinou, Eleni	MSR '18: Proceedings of the 15th International Conference on Mining Software Repositories	https://doi.org/10.1145/3196398.3196401		181-191	"""@inproceedings{10.1145/3196398.3196401,
    author = ""Decan, Alexandre and Mens, Tom and Constantinou, Eleni"",
    title = ""On the impact of security vulnerabilities in the npm package dependency network"",
    year = ""2018"",
    isbn = ""9781450357166"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3196398.3196401"",
    doi = ""10.1145/3196398.3196401"",
    abstract = ""Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues."",
    booktitle = ""Proceedings of the 15th International Conference on Mining Software Repositories"",
    pages = ""181-191"",
    numpages = ""11"",
    keywords = ""dependency network, security vulnerability, semantic versioning, software ecosystem, software repository mining"",
    location = ""Gothenburg, Sweden"",
    series = ""MSR '18""
}
"""						2	ACM		On the impact of security vulnerabilities in the npm package dependency network	https://doi.org/10.1145/3196398.3196401	Association for Computing Machinery	nan; References; Link
1	TrustSE	Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages	Package managers have become a vital part of the modern software development process. They allow developers to reuse third-party code, share their own code, minimize their codebase, and simplify the build process. However, recent reports showed that package managers have been abused by attackers to distribute malware, posing significant security risks to developers and end-users. For example, eslint-scope, a package with millions of weekly downloads in Npm, was compromised to steal credentials from developers. To understand the security gaps and the misplaced trust that make recent supply chain attacks possible, we propose a comparative framework to qualitatively assess the functional and security features of package managers for interpreted languages. Based on qualitative assessment, we apply well-known program analysis techniques such as metadata, static, and dynamic analysis to study registry abuse. Our initial efforts found 339 new malicious packages that we reported to the registries for removal. The package manager maintainers confirmed 278 (82\%) from the 339 reported packages where three of them had more than 100,000 downloads. For these packages we were issued official CVE numbers to help expedite the removal of these packages from infected victims. We outline the challenges of tailoring program analysis tools to interpreted languages and release our pipeline as a reference point for the community to build on and help in securing the software supply chain.		Duan, Ruian; Alrawi, Omar; Kasturi, Ranjita Pai; Elder, Ryan; Saltaformaggio, Brendan; Lee, Wenke	28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021)	https://doi.org/10.14722/ndss.2021.23055			"""@inproceedings{WOS:000680821200009,
    Author = ""Duan, Ruian and Alrawi, Omar and Kasturi, Ranjita Pai and Elder, Ryan and Saltaformaggio, Brendan and Lee, Wenke"",
    Book-Group-Author = ""Internet Soc"",
    Title = ""Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages"",
    Booktitle = ""28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021)"",
    Year = ""2021"",
    Note = ""28th Annual Network and Distributed System Security Symposium (NDSS), ELECTR NETWORK, FEB 21-25, 2021"",
    Abstract = ""Package managers have become a vital part of the modern software development process. They allow developers to reuse third-party code, share their own code, minimize their codebase, and simplify the build process. However, recent reports showed that package managers have been abused by attackers to distribute malware, posing significant security risks to developers and end-users. For example, eslint-scope, a package with millions of weekly downloads in Npm, was compromised to steal credentials from developers. To understand the security gaps and the misplaced trust that make recent supply chain attacks possible, we propose a comparative framework to qualitatively assess the functional and security features of package managers for interpreted languages. Based on qualitative assessment, we apply well-known program analysis techniques such as metadata, static, and dynamic analysis to study registry abuse. Our initial efforts found 339 new malicious packages that we reported to the registries for removal. The package manager maintainers confirmed 278 (82\\%) from the 339 reported packages where three of them had more than 100,000 downloads. For these packages we were issued official CVE numbers to help expedite the removal of these packages from infected victims. We outline the challenges of tailoring program analysis tools to interpreted languages and release our pipeline as a reference point for the community to build on and help in securing the software supply chain."",
    Publisher = ""INTERNET SOC"",
    Address = ""1775 WIEHLE AVE, STE 201, RESTON, VA, UNITED STATES"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Duan, R (Corresponding Author), Georgia Inst Technol, Atlanta, GA 30332 USA. Duan, Ruian; Alrawi, Omar; Kasturi, Ranjita Pai; Elder, Ryan; Saltaformaggio, Brendan; Lee, Wenke, Georgia Inst Technol, Atlanta, GA 30332 USA."",
    DOI = ""10.14722/ndss.2021.23055"",
    ISBN = ""1-891562-66-5"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Theory \\& Methods"",
    Affiliations = ""University System of Georgia; Georgia Institute of Technology"",
    ORCID-Numbers = ""Saltaformaggio, Brendan/0000-0001-5859-6925 Alrawi, Omar/0000-0002-4374-737X"",
    Funding-Acknowledgement = ""ONR {[}N00014-17-1-2895, N00014-15-1-2162, N00014-1-8-12662, N00014-19-1-2179]; NSF {[}1916550]; Cisco Systems; Division Of Computer and Network Systems; Direct For Computer \\& Info Scie \\& Enginr {[}1916550] Funding Source: National Science Foundation"",
    Funding-Text = ""The authors would like to thank the anonymous reviewers for their constructive comments and feedback. We also thank Professor William Enck for his guidance while shepherding this paper. This work was supported, in part, by ONR under grants N00014-17-1-2895, N00014-15-1-2162, N00014-1-8-12662 and N00014-19-1-2179, NSF under Award 1916550, and Cisco Systems under an unrestricted gift. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of our sponsors or collaborators."",
    Number-of-Cited-References = ""99"",
    Times-Cited = ""31"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""8"",
    Doc-Delivery-Number = ""BS0BG"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000680821200009"",
    OA = ""Bronze, Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages	https://www.webofscience.com/wos/woscc/full-record/WOS:000680821200009	INTERNET SOC	nan; Keywords; References; Pages
2	TrustSE	Toward an approach to measuring software trust	"The authors have been involved in the development of an approach to measuring the trust of software, at some state in the software development life cycle. The primary emphasis has been on the use of well-known and generally accepted security and software engineering principles as a means for establishing software trust. A description of the critical issues related to software trust is provided here. A set of criteria classes consisting of various trust principle combinations is shown to provide a scale for measuring and comparing trust. The System V/MLS secure operating system development approach is used to demonstrate the effect of trust principles in a practical setting.<
>"	Software measurement; Programming; Security; Software engineering; Software testing; Books; Aerospace engineering; Operating systems; Counting circuits; Multilevel systems	E. Amoroso; T. Nguyen; J. Weiss; J. Watson; T. Starr	Proceedings. 1991 IEEE Computer Society Symposium on Research in Security and Privacy	https://doi.org/10.1109/RISP.1991.130788									2	IEEE		Toward an approach to measuring software trust	https://ieeexplore.ieee.org/document/130788	IEEE	nan; References; Pages; Year; Bibtex
3	TrustSE	Selecting third-party libraries: the practitioners' perspective	The selection of third-party libraries is an essential element of virtually any software development project. However, deciding which libraries to choose is a challenging practical problem. Selecting the wrong library can severely impact a software project in terms of cost, time, and development effort, with the severity of the impact depending on the role of the library in the software architecture, among others. Despite the importance of following a careful library selection process, in practice, the selection of third-party libraries is still conducted in an ad-hoc manner, where dozens of factors play an influential role in the decision. In this paper, we study the factors that influence the selection process of libraries, as perceived by industry developers. To that aim, we perform a cross-sectional interview study with 16 developers from 11 different businesses and survey 115 developers that are involved in the selection of libraries. We systematically devised a comprehensive set of 26 technical, human, and economic factors that developers take into consideration when selecting a software library. Eight of these factors are new to the literature. We explain each of these factors and how they play a role in the decision. Finally, we discuss the implications of our work to library maintainers, potential library users, package manager developers, and empirical software engineering researchers.	software libraries;  library selection;  library adoption;  empirical software engineering;  APIs; software libraries, library selection, library adoption, empirical software engineering, APIs	Larios Vargas, Enrique; Aniche, Maur\'{\i}cio; Treude, Christoph; Bruntink, Magiel; Gousios, Georgios	ESEC/FSE 2020: Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering	https://doi.org/10.1145/3368089.3409711		245-256	"""@inproceedings{10.1145/3368089.3409711,
    author = ""Larios Vargas, Enrique and Aniche, Maur\'{\i}cio and Treude, Christoph and Bruntink, Magiel and Gousios, Georgios"",
    title = ""Selecting third-party libraries: the practitioners' perspective"",
    year = ""2020"",
    isbn = ""9781450370431"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3368089.3409711"",
    doi = ""10.1145/3368089.3409711"",
    abstract = ""The selection of third-party libraries is an essential element of virtually any software development project. However, deciding which libraries to choose is a challenging practical problem. Selecting the wrong library can severely impact a software project in terms of cost, time, and development effort, with the severity of the impact depending on the role of the library in the software architecture, among others. Despite the importance of following a careful library selection process, in practice, the selection of third-party libraries is still conducted in an ad-hoc manner, where dozens of factors play an influential role in the decision. In this paper, we study the factors that influence the selection process of libraries, as perceived by industry developers. To that aim, we perform a cross-sectional interview study with 16 developers from 11 different businesses and survey 115 developers that are involved in the selection of libraries. We systematically devised a comprehensive set of 26 technical, human, and economic factors that developers take into consideration when selecting a software library. Eight of these factors are new to the literature. We explain each of these factors and how they play a role in the decision. Finally, we discuss the implications of our work to library maintainers, potential library users, package manager developers, and empirical software engineering researchers."",
    booktitle = ""Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering"",
    pages = ""245-256"",
    numpages = ""12"",
    keywords = ""software libraries, library selection, library adoption, empirical software engineering, APIs"",
    location = ""Virtual Event, USA"",
    series = ""ESEC/FSE 2020""
}
"""						2	ACM		Selecting third-party libraries: The practitioners' perspective	https://dl.acm.org/doi/10.1145/3368089.3409711	Association for Computing Machinery	nan; References
4	TrustSE	Evaluating and selecting software packages: A review														2						
5	TrustSE	Framework for evaluation and selection of the software packages: A hybrid knowledge based system approach	Evaluation and selection of the software packages is complicated and time consuming decision making process. Selection of inappropriate software package can turn out to be costly and adversely affects business processes and functioning of the organization. In this paper we describe (i) generic methodology for software selection, (ii) software evaluation criteria, and (iii) hybrid knowledge based system (HKBS) approach to assist decision makers in evaluation and selection of the software packages. The proposed HKBS approach employs an integrated rule based and case based reasoning techniques. Rule based reasoning is used to capture user needs of the software package and formulate a problem case. Case based reasoning is used to retrieve and compare candidate software packages with the user needs of the package. This paper also evaluates and compares HKBS approach with the widely used existing software evaluation techniques such as analytic hierarchy process (AHP) and weighted scoring method (WSM).	Software evaluation; Software selection; Knowledge based system; Software evaluation;  Software selection;  Knowledge based system	Jadhav, Anil S.; Sonar, Rajendra M.	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2011.03.034		1394-1407	"""@article{WOS:000292227600011,
    Author = ""Jadhav, Anil S. and Sonar, Rajendra M."",
    Title = ""Framework for evaluation and selection of the software packages: A hybrid knowledge based system approach"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2011"",
    Volume = ""84"",
    Number = ""8"",
    Pages = ""1394-1407"",
    Month = ""AUG"",
    Abstract = ""Evaluation and selection of the software packages is complicated and time consuming decision making process. Selection of inappropriate software package can turn out to be costly and adversely affects business processes and functioning of the organization. In this paper we describe (i) generic methodology for software selection, (ii) software evaluation criteria, and (iii) hybrid knowledge based system (HKBS) approach to assist decision makers in evaluation and selection of the software packages. The proposed HKBS approach employs an integrated rule based and case based reasoning techniques. Rule based reasoning is used to capture user needs of the software package and formulate a problem case. Case based reasoning is used to retrieve and compare candidate software packages with the user needs of the package. This paper also evaluates and compares HKBS approach with the widely used existing software evaluation techniques such as analytic hierarchy process (AHP) and weighted scoring method (WSM). (C) 2011 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Jadhav, AS (Corresponding Author), Sinhgad Inst Management, Dept Comp, Pune 411041, Maharashtra, India. Jadhav, Anil S., Sinhgad Inst Management, Dept Comp, Pune 411041, Maharashtra, India. Sonar, Rajendra M., Indian Inst Technol, Shailesh J Mehta Sch Management, Bombay 400076, Maharashtra, India."",
    DOI = ""10.1016/j.jss.2011.03.034"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software evaluation; Software selection; Knowledge based system"",
    Keywords-Plus = ""SIMULATION SOFTWARE; EXPERT-SYSTEM; CRITERIA; QUALITY"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""a\\_s\\_jadhav74@yahoo.co.in rm\\_sonar@iitb.ac.in"",
    Affiliations = ""Indian Institute of Technology System (IIT System); Indian Institute of Technology (IIT) - Bombay"",
    ResearcherID-Numbers = ""Jadhav, Anil/D-6706-2018"",
    ORCID-Numbers = ""Jadhav, Anil/0000-0002-2684-1137"",
    Number-of-Cited-References = ""60"",
    Times-Cited = ""75"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""16"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""785KJ"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000292227600011"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Framework for evaluation and selection of the software packages: A hybrid knowledge based system approach	https://www.webofscience.com/wos/woscc/full-record/WOS:000292227600011	ELSEVIER SCIENCE INC	nan; References
6	TrustSE	Assessing Software Service Quality and Trustworthiness at Selection Time	The integration of external software in project development is challenging and risky, notably because the execution quality of the software and the trustworthiness of the software provider may be unknown at integration time. This is a timely problem and of increasing importance with the advent of the SaaS model of service delivery. Therefore, in choosing the SaaS service to utilize, project managers must identify and evaluate the level of risk associated with each candidate. Trust is commonly assessed through reputation systems; however, existing systems rely on ratings provided by consumers. This raises numerous issues involving the subjectivity and unfairness of the service ratings. This paper describes a framework for reputation-aware software service selection and rating. A selection algorithm is devised for service recommendation, providing SaaS consumers with the best possible choices based on quality, cost, and trust. An automated rating model, based on the expectancy-disconfirmation theory from market science, is also defined to overcome feedback subjectivity issues. The proposed rating and selection models are validated through simulations, demonstrating that the system can effectively capture service behavior and recommend the best possible choices.	Software quality; Risk management; Software maintenance; Costs; Software performance; Project management; Feedback; Monitoring; Business; Computer industry; Service Quality; Package Of Services; Selection Algorithm; Service Rate; Selection Framework; External Software; Service Recommendation; Reputation System; Service Behavior; Impact Of Variables; Decision Support; Quality Parameters; Future Behavior; Cost Of Services; Utility Value; User Satisfaction; Service Performance; Maximum Curvature; Provider Behavior; Utilization Variables; Forecasting Techniques; Quality Constraints; Service Offerings; Selection Of Metrics; Exponential Smoothing; Feedback Function; False Reports; Tangent Angle; Evaluation Rules; User Requirements; Software as a service (SaaS); software selection; service utility; review and rating; trust and reputation; risk management; SLA monitoring.	Noura Limam; Raouf Boutaba	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2010.2	"1.2008.; 2.2008.; 3.2007.; 4.2008.; 5.H. Ludwig, R.P. King and A. Keller, ""Web Service Level Agreements"", 2002. Google Scholar; 6.Y. Wang and J. Vassileva, ""A Review on Trust and Reputation for Web Service Selection"", Proc. 27th Intl Conf. Distributed Computing Systems Workshops, 2007. View Article  Google Scholar; 7.T. SaaS, ""Trust Saas: Putting the Trust in Software as a Service (SaaS)"", 2008. Google Scholar; 8.R.L. Oliver, ""A Cognitive Model of the Antecedents and Consequences of Satisfaction Decisions"", J. Marketing Research, vol. 17, pp. 460-469, Nov. 1980. CrossRef  Google Scholar; 9.J. Xiao and R. Boutaba, ""Assessing Network Service Profitability: Modeling from Market Science Perspective"", IEEE/ACM Trans. Networking, vol. 15, no. 6, pp. 1307-1320, Dec. 2007. View Article  Google Scholar; 10.V. Poladian, J.P. Sousa, D. Garlan and M. Shaw, ""Dynamic Configuration of Resource-Aware Services"", Proc. 26th Intl Conf. Software Eng., 2004. View Article  Google Scholar; 11.P. Brockwell and R. Davis, Introduction to Time Series and Forecasting., 2002. CrossRef  Google Scholar; 12.V. Tosic, K. Patel and B. Pagurek, ""WsolWeb Service Offerings Language"", Proc. Workshop Web Services e-Business and the Semantic Web, 2002. CrossRef  Google Scholar; 13.A. Keller and H. Ludwig, ""The WSLA Framework: Specifying and Monitoring Service Level Agreements for Web Services"", J. Network and System Management, vol. 11, no. 1, pp. 57-81, 2003. Google Scholar; 14.C. Zhou, L.-T. Chia and B.-S. Lee, ""DAML-QoS Ontology for Web Services"", Proc. IEEE Intl Conf. Web Services, 2004. View Article  Google Scholar; 15.M. Burstein, J. Hobbs, O. Lassila, D. Mcdermott, S. Mcilraith, S. Narayanan, et al., ""OWL-S: Semantic Markup for Web Services"", 2004. Google Scholar; 16.K. Kyriakos and P. Dimitris, ""A Semantic QoS-Based Web Service Discovery Algorithm for Over-Constrained Demands"", Proc. Third Intl Conf. Next Generation Web Services Practices, 2007. View Article  Google Scholar; 17.N. Limam and R. Boutaba, ""Assessing Service Quality and Trustworthiness at Selection Time"", Proc. 11th IEEE/IFIP Network Operations and Management Symp., 2008. View Article  Google Scholar; 18.T. Yu, Y. Zhang and K.-J. Lin, ""Efficient Algorithms for Web Services Selection with End-to-End QoS Constraints"", ACM Trans. Web, vol. 1, no. 1, 2007. CrossRef  Google Scholar; 19.G. Wu, J. Wei, X. Qiao and L. Li, ""A Bayesian Network Based QoS Assessment Model for Web Services"", Proc. IEEE Intl Conf. Services Computin, 2007. View Article  Google Scholar; 20.S.J.H. Yang, J.S.F. Hsieh, B.C.W. Lan and J.-Y. Chung, ""Composition and Evaluation of Trustworthy Web Services"", Proc. IEEE Intl Workshop Business Services Networks, 2005. CrossRef  Google Scholar; 21.A.S. Ali, S. Majithia, O.F. Rana and D.W. Walker, ""Reputation-Based Semantic Service Discovery"", Proc. 13th IEEE Intl Workshops Enabling Technologies: Infrastructure for Collaborative Enterprises, 2004. View Article  Google Scholar; 22.R. Wishart, R. Robinson, J. Indulska and A. Josang, ""Superstringrep: Reputation-Enhanced Service Discovery"", Proc. 28th Australasian Conf. Computer Science, 2005. Google Scholar; 23.F. Raimondi, J. Skene and W. Emmerich, ""Efficient Online Monitoring of Web-Service SLAs"", Proc. 16th ACM SIGSOFT Intl Symp. Foundations of Software Eng., pp. 170-180, 2008. CrossRef  Google Scholar; 24.J. Li, R. Conradi, O.P. Slyngstad, M. Torchiano, M. Morisio and C. Bunse, ""A State-of-the-Practice Survey of Risk Management in Development with Off-the-Shelf Software Components"", IEEE Trans. Software Eng., vol. 34, no. 2, pp. 271-286, Mar./Apr. 2008. View Article  Google Scholar; 25.J. Anselmi, D. Ardagna and P. Cremonesi, ""A QoS-Based Selection Approach of Autonomic Grid Services"", Proc. Workshop Service-Oriented Computing Performance: Aspects Issues and Approaches, 2007. CrossRef  Google Scholar; 26.L. Zeng, B. Benatallah, A.H. Ngu, M. Dumas, J. Kalagnanam and H. Chang, ""QoS-Aware Middleware for Web Services Composition"", IEEE Trans. Software Eng., vol. 30, no. 5, pp. 311-327, May 2004. View Article  Google Scholar; 27.L.-H. Vu, M. Hauswirth and K. Aberer, ""QoS-Based Service Selection and Ranking with Trust and Reputation Management"", Proc. 13th Conf. Cooperative Information Systems, 2005. CrossRef  Google Scholar; 28.J. Skene, F. Raimondi and W. Emmerich, ""Service-Level Agreements for Electronic Services"", IEEE Trans. Software Eng., vol. 36, no. 2, pp. 288-304, Mar./Apr. 2010. View Article  Google Scholar; 29.J.R. Douceur, ""The Sybil Attack"", Proc. First Intl Workshop Peer-to-Peer Systems, 2002. CrossRef  Google Scholar; 30.J. Skene, A. Skene, J. Crampton and W. Emmerich, ""The Monitorability of Service-Level Agreements for Application-Service Provision"", Proc. Sixth Intl Workshop Software and Performanc, pp. 3-14, 2007. CrossRef  Google Scholar"	559- 574							2	IEEE		Assessing software service quality and trustworthiness at selection time	https://ieeexplore.ieee.org/document/5383370	IEEE	nan; Year; Bibtex
7	TrustSE	The importance of trust in software engineers' assessment and choice of information sources														2						
8	TrustSE	Quality Process-Oriented Software Credibility Measurement and Assessment	This paper discusses the measurement methods of the software credibility in three dimensions-management, process and the final product for quality process. And the software credibility is classified into different levels. The each level degree of membership of the software is got through calculating the each level degree of membership of each metric according to the membership function, and combining them based on Dempster-Shafer theory. Ultimately the comprehensive assessment of the software credibility is completed.	Software quality; Software measurement; Software testing; Project management; Programming; Software safety; Particle measurements; Stability; Computer science; Software development management; Credibility Assessment; Membership Function; Fuzzy Set; Evidence Theory; Value Of Level; Cybersecurity; Project Management; Access Control; Weight Levels; Software Defect; Software Product; Matching Degree; Specific Formula; Pressure Test; Safety Indicators; Software Requirements; Test Plan; Software Level; Software Reliability; Mean Time To Failure; Credibility Measure; Design Documents	Hongbing Qian; Xiaojie Zhu; Juan Ma; XiZhen Cao	2009 International Conference on Computational Intelligence and Software Engineering	https://doi.org/10.1109/CISE.2009.5364824	"1.""A Discussion of Basic Concepts and Terminology ACM SIGSOFT Software Engineering Notes page"", Trustworthy Software Systems, vol. 31, no. 6, November 2006. Google Scholar; 2.Reith Mark, Niu Jianwei and William H. Winsborough, ""Engineering Trust Management into Software Models"", IEEE, 2007. Google Scholar; 3.Kassem Saleh and Maryam Habil, ""The Security Requirements Behavior Model for Trustworthy Software"", International MCETECH Conference on e-Technologies, 2008. View Article  Google Scholar; 4.Li Meng, ""Research on the Software Safety Assessment of Safety Critical Systems"", COMPUTER ENGINEERING & SCIENCE, vol. 1.24, no. 2, 2002. Google Scholar; 5.zhu lei, ""Reasearch on the selection of software reliability model based on BP neural network"", Master paper, vol. 10, 2006. Google Scholar; 6.Liang Shengjie and Zhang Zhihua, ""Influence Research on Operational Profile to Credibility of the Software Reliability estimated Result"", COMPUTER ENGINEERING & SCIENCE, vol. 14, 2006. Google Scholar; 7.Shi Zhu, Xincheng Yuan, Weihua Ma and You Yi, ""Reliability Metrics Suitable for Aerospace Software Development"", Aerospace Control, vol. 22, no. 3, Jun. 2004. Google Scholar; 8.Shiping Yang, Guangze Xiong, Sang Nan and Xinyong Wu, ""Research on safety evaluation of high dependable software"", vol. 25, no. 2, Feb. 2004. Google Scholar; 9.Norman F. Schneidewind, ""Reliability Modeling for Safety-Critical Software"", IEEE TRANSACTIONS ON RELIABILITY, vol. 46, no. 1, MARCH 1997. View Article  Google Scholar; 10.Shiping Yang, Guangze Xiong and Sang Nan, ""Research on Safety Technology of Safety Critical Systems"", Journal of UEST of China, vol. 32, no. 2, Apr. 2003. Google Scholar; 11.Qin Zhidong, ""Research on Testing and Evaluating Theory of Reliability and Safety for High Dependability Software"", Dr. Paper, vol. 9, 2005. Google Scholar; 12.Zheng Yan, ""Predicting Trustworthiness for Component Software"", IEEE, 2007. CrossRef  Google Scholar; 13.Zhengping Liang, Xiaoli Liu, Guoqing Wu, Yang Min and Zhang Fan, ""A formal Framework for Trust management of Service-oriented Systems"", IEEE, 2007. Google Scholar; 14.Liu Fei, MA Ping, YANG Ming and WANG Zicai, ""Research on credibility quantification of complex simulation systems"", JOURNAL OF HARB IN INSTITUTE OF TECHNOLOGY, vol. 39, no. 11, Jan. 2007. Google Scholar; 15.SMETS Philippe, what is D-S. Google Scholar; 16.Laboratory for Internet Technology Institute of Software. Google Scholar"								2	IEEE		Quality Process-Oriented Software Credibility Measurement and Assessment	https://ieeexplore.ieee.org/document/5364824	IEEE	nan; Pages; Year; Bibtex
9	TrustSE	A survey on open source software trustworthiness														2						
10	TrustSE	Software ecosystem call graph for dependency management	A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application.		Hejderup, Joseph; van Deursen, Arie; Gousios, Georgios	ICSE-NIER '18: Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results	https://doi.org/10.1145/3183399.3183417		101-104	"""@inproceedings{10.1145/3183399.3183417,
    author = ""Hejderup, Joseph and van Deursen, Arie and Gousios, Georgios"",
    title = ""Software ecosystem call graph for dependency management"",
    year = ""2018"",
    isbn = ""9781450356626"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3183399.3183417"",
    doi = ""10.1145/3183399.3183417"",
    abstract = ""A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application."",
    booktitle = ""Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results"",
    pages = ""101-104"",
    numpages = ""4"",
    location = ""Gothenburg, Sweden"",
    series = ""ICSE-NIER '18""
}
"""						2	ACM		Software ecosystem call graph for dependency management	https://doi.org/10.1145/3183399.3183417	Association for Computing Machinery	nan; Keywords; References; Link
11	TrustSE	Control, trust, power, and the dynamics of information system outsourcing relationships: A process study of contractual software development	This paper provides a longitudinal description and analysis of the evolving relationships between a university and vendors contracted to develop software systems. A contextualised social process model is developed and employed using data gathered over the decade-long process, focussing on the early years. The right levels of control and trust are conceptualised to lead to confidence that the development process is set on the right course. The study gives unique insights into the contractual software development process from a client's perspective together with pointers for more general applications of the findings related to control, trust, and bargaining power in customised information system development. The analysis of the data reveals how the client's actions oscillated between trust and control in three areas: performance, price level, and observed behaviour.	Information systems outsourcing; Relationship management; Power; Control; Trust; Reflective information system practitioner research; Information systems outsourcing;  Relationship management;  Power;  Control;  Trust;  Reflective information system practitioner research	Heiskanen, Ari; Newman, Mike; Eklin, Merja	JOURNAL OF STRATEGIC INFORMATION SYSTEMS	https://doi.org/10.1016/j.jsis.2008.10.001		268-286	"""@article{WOS:000261870900003,
    Author = ""Heiskanen, Ari and Newman, Mike and Eklin, Merja"",
    Title = ""Control, trust, power, and the dynamics of information system outsourcing relationships: A process study of contractual software development"",
    Journal = ""JOURNAL OF STRATEGIC INFORMATION SYSTEMS"",
    Year = ""2008"",
    Volume = ""17"",
    Number = ""4"",
    Pages = ""268-286"",
    Month = ""DEC"",
    Abstract = ""This paper provides a longitudinal description and analysis of the evolving relationships between a university and vendors contracted to develop software systems. A contextualised social process model is developed and employed using data gathered over the decade-long process, focussing on the early years. The right levels of control and trust are conceptualised to lead to confidence that the development process is set on the right course. The study gives unique insights into the contractual software development process from a client's perspective together with pointers for more general applications of the findings related to control, trust, and bargaining power in customised information system development. The analysis of the data reveals how the client's actions oscillated between trust and control in three areas: performance, price level, and observed behaviour. (C) 2008 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Heiskanen, A (Corresponding Author), Univ Oulu, Dept Informat Proc Sci, Kajaani Unit, POB 51, FIN-87101 Kajaani, Finland. Heiskanen, Ari, Univ Oulu, Dept Informat Proc Sci, Kajaani Unit, FIN-87101 Kajaani, Finland. Newman, Mike, Norwegian Sch Econ \\& Business Adm, N-5035 Bergen, Norway. Newman, Mike, Manchester Business Sch, Bergen, Norway. Eklin, Merja, Univ Helsinki, Informat Syst Serv, FIN-00014 Helsinki, Finland."",
    DOI = ""10.1016/j.jsis.2008.10.001"",
    ISSN = ""0963-8687"",
    EISSN = ""1873-1198"",
    Keywords = ""Information systems outsourcing; Relationship management; Power; Control; Trust; Reflective information system practitioner research"",
    Keywords-Plus = ""TRANSACTION COST THEORY; SOCIAL-PROCESS MODEL; DEVELOPMENT-PROJECTS; DESIGN SCIENCE; MIS RESEARCH; TECHNOLOGY; GOVERNANCE; LESSONS; PARTNERSHIPS; ORGANIZATION"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""Ari.Heiskanen@Oulu.Fi mike.newman@manchester.ac.uk merja.eklin@helsinki.fi"",
    Affiliations = ""University of Oulu; Norwegian School of Economics (NHH); University of Helsinki"",
    ORCID-Numbers = ""Newman, Michael/0000-0002-9305-5742"",
    Number-of-Cited-References = ""100"",
    Times-Cited = ""68"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""54"",
    Journal-ISO = ""J. Strateg. Inf. Syst."",
    Doc-Delivery-Number = ""386GS"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000261870900003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Control, trust, power, and the dynamics of information system outsourcing relationships: A process study of contractual software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000261870900003	ELSEVIER SCIENCE BV	nan; References
12	TrustSE	Trusting a library: A study of the latency to adopt the latest Maven release	With the popularity of open source library (re)use in both industrial and open source settings, `trust' plays vital role in third-party library adoption. Trust involves the assumption of both functional and non-functional correctness. Even with the aid of dependency management build tools such as Maven and Gradle, research have still found a latency to trust the latest release of a library. In this paper, we investigate the trust of OSS libraries. Our study of 6,374 systems in Maven Super Repository suggests that 82% of systems are more trusting of adopting the latest library release to existing systems. We uncover the impact of maven on latent and trusted library adoptions.	Libraries; Software systems; Market research; Java; Data mining; Classification algorithms; Popularity; Salbutamol; Latest Release; Third-party Libraries; System Software; Latest Version; Informant Interviews; Software Engineering; Software Libraries; Release Version; Incompatibility Issues; Successful Release; Types Of Trust	Raula Gaikovina Kula; Daniel M. German; Takashi Ishio; Katsuro Inoue	2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)	https://doi.org/10.1109/SANER.2015.7081869	"1.M. Jang, ""Linux annoyances for geeks"", 2009. Google Scholar; 2.S. Raemaekers, A. van Deursen and J. Visser, ""Measuring software library stability through historical version analysis"", Proc. of Intl. Comf. Soft. Main. (ICSM), pp. 378-387, Sept 2012. CrossRef  Google Scholar; 3.S. Raemaekers, G. Nane, A. van Deursen and J. Visser, ""Testing principles current practices and effects of change localization"", Mining Soft. Repo. (MSR), pp. 257-266, May 2013. View Article  Google Scholar; 4.R. G. Kula, C. D. Roover, D. M. German, T. Ishio and K. Inoue, ""Visualizing the evolution of systems and their library dependencies"", Proc. of IEEE Work. Conf. on Soft. Viz. (VISSOFT), 2014. View Article  Google Scholar; 5.N. Kawamitsu, T. Ishio, T. Kanda, R. G. Kula, C. D. Roover and K. Inoue, ""Identifying source code reuse across repositories using lcs-based source code similarity"", Proc. of SCAM, 2014. View Article  Google Scholar; 6.S. Raemaekers, A. van Deursen and J. Visser, ""Semantic versioning versus breaking changes: A study of the maven repository"", Proc. of SCAM, pp. 215-224, Sept 2014. View Article  Google Scholar; 7.Z. Yan and C. Prehofer, ""Autonomic trust management for a component-based software system"", IEEE Transactions on Dependable and Secure Computing, vol. 8, no. 6, pp. 810-823, 2011. View Article  Google Scholar; 8.W. Hasselbring and R. Reussner, ""Toward trustworthy software systems"", Computer, vol. 39, no. 4, pp. 91-92, April 2006. View Article  Google Scholar; 9.R. V. Guha, R. Kumar, P. Raghavan and A. Tomkins, ""Propagation of trust and distrust"", WWW'04, pp. 403-412. CrossRef  Google Scholar; 10.R. Holmes and R. J. Walker, ""Informing Eclipse API production and consumption"", OOPSLA2007, pp. 70-74, 2007. CrossRef  Google Scholar; 11.C. De Roover, R. Lammel and E. Pek, ""Multi-dimensional exploration of api usage"", Proc. of Int. Conf. on Prog. Comp.(ICPC), 2013. CrossRef  Google Scholar; 12.Y. M. Mileva, V. Dallmeier, M. Burger and A. Zeller, ""Mining trends of library usage"", ERCIM Workshops, pp. 57-62, 2009. CrossRef  Google Scholar; 13.C. Teyton, J.-R. Falleri, M. Palyart and X. Blanc, ""A study of library migrations in java"", Journal of Software: Evolution and Process, vol. 26, no. 11, 2014. CrossRef  Google Scholar; 14.B. E. Cossette and R. J. Walker, ""Seeking the ground truth: a retroactive study on the evolution and migration of software libraries"", Proceedings of ACM SIGSOFT Int. Symp. on the Found. of Soft. Eng. (FSE), 2012. CrossRef  Google Scholar"								2	IEEE		Trusting a library: A study of the latency to adopt the latest maven release	https://ieeexplore.ieee.org/document/7081869	IEEE	nan; Pages; Year; Bibtex
13	TrustSE	Requirements engineering for trust management: model, methodology, and reasoning														2						
14	TrustSE	FESR - Framework to evaluate Software Reliability based on software metrics	Evaluating reliability of software is hot concern for decision makers and software engineers seeing as if we assess, it cannot be mastered. It is common that reliability of system stratum could be employed for evaluating growth of testing of system with help of comparison of failure of currently implemented software with required system. It is also generic that reliability of system echelon assures improved utilization by the user consequently enhanced contentment of customers. In this paper, our goal is to put forward a meticulously analysis of reliability measurement process. As the existing approaches still lack software reliability, quality and its growth, successful generation of test cases, scalability with large software systems, cost and customer satisfaction. we have projected a new framework of software reliability measurement process based on software metrics. Our model is evaluated by comparing it with an existing model and a published case study. The control experiment is used to evaluate FESR Framework.	Mean Time to Failure;  Reliability Growth Metrics;  Service Level Objectives;  Software Quality; Mean Time to Failure, Reliability Growth Metrics, Service Level Objectives, Software Quality	Fahad, Hurriya; Ahmed, Irfan; Mahmood, Jabar; Saman, .; Batool, Khadija; Ali, Qasim	HP3C '24: Proceedings of the 2024 8th International Conference on High Performance Compilation, Computing and Communications	https://doi.org/10.1145/3675018.3675030		139-145	"""@inproceedings{10.1145/3675018.3675030,
    author = ""Fahad, Hurriya and Ahmed, Irfan and Mahmood, Jabar and Saman, . and Batool, Khadija and Ali, Qasim"",
    title = ""FESR - Framework to evaluate Software Reliability based on software metrics"",
    year = ""2024"",
    isbn = ""9798400716904"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3675018.3675030"",
    doi = ""10.1145/3675018.3675030"",
    abstract = ""Evaluating reliability of software is hot concern for decision makers and software engineers seeing as if we assess, it cannot be mastered. It is common that reliability of system stratum could be employed for evaluating growth of testing of system with help of comparison of failure of currently implemented software with required system. It is also generic that reliability of system echelon assures improved utilization by the user consequently enhanced contentment of customers. In this paper, our goal is to put forward a meticulously analysis of reliability measurement process. As the existing approaches still lack software reliability, quality and its growth, successful generation of test cases, scalability with large software systems, cost and customer satisfaction. we have projected a new framework of software reliability measurement process based on software metrics. Our model is evaluated by comparing it with an existing model and a published case study. The control experiment is used to evaluate FESR Framework."",
    booktitle = ""Proceedings of the 2024 8th International Conference on High Performance Compilation, Computing and Communications"",
    pages = ""139-145"",
    numpages = ""7"",
    keywords = ""Mean Time to Failure, Reliability Growth Metrics, Service Level Objectives, Software Quality"",
    location = ""Guangzhou, China"",
    series = ""HP3C '24""
}
"""						2	ACM		Software reliability	https://doi.org/10.1145/3675018.3675030	Association for Computing Machinery	nan; References; Link
15	TrustSE	On the topology of package dependency networks: a comparison of three programming language ecosystems	Package-based software ecosystems are composed of thousands of interdependent software packages. Many empirical studies have focused on software packages belonging to a single software ecosystem, and suggest to generalise the results to more ecosystems. We claim that such a generalisation is not always possible, because the technical structure of software ecosystems can be very different, even if these ecosystems belong to the same domain. We confirm this claim through a study of three big and popular package-based programming language ecosystems: R's CRAN archive network, Python's PyPI distribution, and JavaScript's NPM package manager. We study and compare the structure of their package dependency graphs and reveal some important differences that may make it difficult to generalise the findings of one ecosystem to another one.	JavaScript;  Python;  R;  component dependency graph;  software distribution;  software ecosystem; JavaScript, Python, R, component dependency graph, software distribution, software ecosystem	Decan, Alexandre; Mens, Tom; Claes, Maelick	ECSAW '16: Proccedings of the 10th European Conference on Software Architecture Workshops	https://doi.org/10.1145/2993412.3003382		1-4	"""@inproceedings{10.1145/2993412.3003382,
    author = ""Decan, Alexandre and Mens, Tom and Claes, Maelick"",
    title = ""On the topology of package dependency networks: a comparison of three programming language ecosystems"",
    year = ""2016"",
    isbn = ""9781450347815"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2993412.3003382"",
    doi = ""10.1145/2993412.3003382"",
    abstract = ""Package-based software ecosystems are composed of thousands of interdependent software packages. Many empirical studies have focused on software packages belonging to a single software ecosystem, and suggest to generalise the results to more ecosystems. We claim that such a generalisation is not always possible, because the technical structure of software ecosystems can be very different, even if these ecosystems belong to the same domain. We confirm this claim through a study of three big and popular package-based programming language ecosystems: R's CRAN archive network, Python's PyPI distribution, and JavaScript's NPM package manager. We study and compare the structure of their package dependency graphs and reveal some important differences that may make it difficult to generalise the findings of one ecosystem to another one."",
    booktitle = ""Proccedings of the 10th European Conference on Software Architecture Workshops"",
    articleno = ""21"",
    numpages = ""4"",
    keywords = ""JavaScript, Python, R, component dependency graph, software distribution, software ecosystem"",
    location = ""Copenhagen, Denmark"",
    series = ""ECSAW '16""
}
"""						2	ACM		On the topology of package dependency networks: A comparison of three programming language ecosystems	https://doi.org/10.1145/2993412.3003382	Association for Computing Machinery	nan; References; Link
16	TrustSE	When GitHub Meets CRAN: An Analysis of Inter-Repository Package Dependency Problems	When developing software packages in a software ecosystem, an important and well-known challenge is how to deal with dependencies to other packages. In presence of multiple package repositories, dependency management tends to become even more problematic. For the R ecosystem of statistical computing, dependency management is currently insufficient to deal with multiple package versions and inter-repository package dependencies. We explore how the use of GitHub influences the R ecosystem, both for the distribution of R packages and for inter-repository package dependency management. We also discuss how these problems could be addressed.	Ecosystems; Metadata; Electronic mail; Data mining; Writing; Software packages; Dependency Problem; R Package; Popularity; Null Hypothesis; Metadata; Bioconductor; Development Of Platforms; Constraint Satisfaction; Continuous Integration; Software Installation; Distribution Platforms; Package Manager; Stack Overflow; Neotoma; Email Interviews; Description File; GitHub Projects; GitHub Repository; software repository mining; software ecosystem; package dependency management; software evolution; software distribution; GitHub; CRAN	Alexandre Decan; Tom Mens; Maelick Claes; Philippe Grosjean	2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)	https://doi.org/10.1109/SANER.2016.12	"1.R. A. Muenchen, ""The popularity of data analysis software"", Tech. Rep. 2015, April 2015,  [online]  Available: http://r4stats.com/articles/popularity/. Google Scholar; 2.K. Hornik, ""Are there too many R packages?"", Austrian Journal of Statistics, vol. 41, no. 1, pp. 59-66, 2012. Google Scholar; 3.J. Ooms, ""Possible directions for improving dependency versioning in R"", R Journal, vol. 5, no. 1, pp. 197-206, Jun. 2013. CrossRef  Google Scholar; 4.J. Leek, ""How i decide when to trust an R package"", November 2015,  [online]  Available: http://simplystatistics.org/?p=4409. Google Scholar; 5.A. Decan, T. Mens, M. Claes, N. Tabout and P. Grosjean, ""On the development and distribution of R packages: An empirical analysis of the R ecosystem"", Intl Workshop on Software Ecosystems (IWSECO 2015). Co-located with ECSAW 15, 2015. CrossRef  Google Scholar; 6.M. Claes, T. Mens and P. Grosjean, ""On the maintainability of CRAN packages"", Intl Conf. on Software Maintenance Reengineering and Reverse Engineering, pp. 308-312, 2014. View Article  Google Scholar; 7.M. Claes, ""maintaineR: A web-based dashboard for maintainers of CRAN packages"", Intl Conf. Software Maintenance and Evolution, 2014. View Article  Google Scholar; 8.D. M. German, B. Adams and A. E. Hassan, ""The evolution of the R software ecosystem"", European Conf. Software Maintenance and Reengineering, pp. 243-252, 2013. View Article  Google Scholar; 9.L. A. Dabbish, H. C. Stuart, J. Tsay and J. D. Herbsleb, ""Social coding in GitHub: transparency and collaboration in an open software repository"", Intl Conf. Computer Supported Cooperative Work, pp. 1277-1286, 2012. CrossRef  Google Scholar; 10.K. Blincoe, F. Harrison and D. Damian, ""Ecosystems in GitHub and a method for ecosystem identification using reference coupling"", 12th Working Conference on Mining Software Repositories, pp. 202-211, 2015. View Article  Google Scholar; 11.B. Vasilescu, V. Filkov and A. Serebrenik, ""StackOverflow and GitHub: Associations between software development and crowdsourced knowledge"", SocialCom. IEEE, pp. 188-195, 2013. View Article  Google Scholar; 12.B. Vasilescu, S. Van Schuylenburg, J. Wulms, A. Serebrenik and M. van den Brand, ""Continuous integration in a social-coding world: Empirical evidence from GitHub"", Intl Conf. Software Maintenance and Evolution, pp. 401-405, Sept 2014. View Article  Google Scholar; 13.F. Thung, T. F. Bissyande, D. Lo and L. Jiang, Network structure of social coding in GitHub, CSMR, pp. 323-326, 2013. Google Scholar; 14.Y. Yu, G. Yin, H. Wang and T. Wang, ""Exploring the patterns of social behavior in GitHub"", Intl Workshop on Crowd-based Software Development Methods and Technologies, pp. 31-36, 2014. CrossRef  Google Scholar; 15.F. W. Santana and C. M. L. Werner, ""Towards the analysis of software projects dependencies: An exploratory visual study of software ecosystems"", Intl Workshop on Software Ecosystems (IWSECO), vol. 987, pp. 7-18, 2013. Google Scholar; 16.J. M. Gonzalez-Barahona, G. Robles, M. Michlmayr, J. J. Amor and D. M. German, ""Macro-level software evolution: a case study of a large software compilation"", Empirical Software Engineering, vol. 14, no. 3, pp. 262-285, Mar. 2009. CrossRef  Google Scholar; 17.D. M. German, J. M. Gonzalez-Barahona and G. Robles, ""A model to understand the building and running interdependencies of software"", Working Conf. Reverse Engineering, pp. 140-149, 2007. Google Scholar; 18.G. Bavota, G. Canfora, M. Di Penta, R. Oliveto and S. Panichella, ""The evolution of project inter-dependencies in a software ecosystem: the case of Apache"", Intl Conf. Software Maintenance, pp. 280-289, 2013. View Article  Google Scholar; 19.P. Abate, R. D. Cosmo, R. Treinen and S. Zacchiroli, ""Dependency solving: A separate concern in component evolution management"", Journal of Systems and Software, vol. 85, no. 10, pp. 2228-2240, 2012. CrossRef  Google Scholar; 20.P. Abate, ""A modular package manager architecture"", Information  Software Technology, vol. 55, no. 2, pp. 459-474, 2013. CrossRef  Google Scholar; 21.T. Mens, ""Anonymized e-mail interviews with R package maintainers active on CRAN and GitHub"", Tech. Rep., 2016. Google Scholar; 22.K. Broman, ""R package primer - a minimal tutorial"", 2015,  [online]  Available: http://kbroman.org/pkg_primer/. Google Scholar; 23.""R package dependency issues when namespace is not attached"", 2015,  [online]  Available: http://r.789695.n4.nabble.com/R-tt4629828.html. Google Scholar; 24.""ANTsR: towards CRAN  standardization of development"", 2015,  [online]  Available: https://github.com/stnava/ANTsRlissues/8. Google Scholar; 25.I. Samoladas, L. Angelis and I. Stamelos, ""Survival analysis on the duration of open source projects"", Information  Software Technology, vol. 52, no. 9, pp. 902-922, 2010. CrossRef  Google Scholar; 26.""Writing robust R code: namespaces masking and using the '::' operator"", 2015,  [online]  Available: http://stackoverfiow.com/questions/10947159/writing-robust-r-code-namespaces-masking-and-using-the-operator. Google Scholar; 27.C. Bird, P. C. Rigby, E. T. Barr, D. J. Hamilton, D. M. German and P. T. Devanbu, ""The promises and perils of mining Git"", Working Conf. Mining Software Repositories. IEEE Computer Society, pp. 1-10, 2009. View Article  Google Scholar; 28.E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer, D. M. German and D. Damian, ""The promises and perils of mining GitHub"", Working Conf. Mining Software Repositories, pp. 92-101, 2014. CrossRef  Google Scholar; 29.J. D. Hunter, ""Matplotlib: A 2D graphics environment"", Computing In Science  Engineering, vol. 9, no. 3, pp. 90-95, 2007. View Article  Google Scholar"								2	IEEE		When GitHub meets CRAN: An analysis of inter-repository package dependency problems	https://ieeexplore.ieee.org/document/7476669	IEEE	nan; Pages; Year; Bibtex
17	TrustSE	A comprehensive approach for software dependency resolution														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
18	TrustSE	Security and trust requirements engineering	Integrating security concerns throughout the whole software development process is one of today's challenges in software and requirements engineering research. A challenge that so far has proved difficult to meet. The major difficulty is that providing security does not only require to solve technical problems but also to reason on the organization as a whole. This makes the usage of traditional software engineering methologies difficult or unsatisfactory: most proposals focus on protection aspects of security and explicitly deal with low level protection mechanisms and only an handful of them show the ability of capturing the high-level organizational security requirements, without getting suddenly bogged down into security protocols or cryptography algorithms. In this paper we critically review the state of the art in security requirements engineering and discuss the motivations that led us to propose the Secure Tropos methodology, a formal framework for modelling and analyzing security, that enhances the agent-oriented software development methodology i{*}/Tropos. We illustrate the Secure Tropos approach, a comprehensive case study, and discuss some later refinements of the Secure Tropos methodology to address some of its shortcomings. Finally, we introduce the ST-Tool, a CASE tool that supports our methodology.		Giorgini, P; Massacci, F; Zannone, N	FOUNDATIONS OF SECURITY ANALYSIS AND DESIGN III	https://www.webofscience.com/wos/woscc/full-record/WOS:000233993600008		237-272	"""@incollection{WOS:000233993600008,
    Author = ""Giorgini, P and Massacci, F and Zannone, N"",
    Editor = ""Aldini, A and Gorrieri, R and Martinelli, F"",
    Title = ""Security and trust requirements engineering"",
    Booktitle = ""FOUNDATIONS OF SECURITY ANALYSIS AND DESIGN III"",
    Series = ""Lecture Notes in Computer Science"",
    Year = ""2005"",
    Volume = ""3655"",
    Pages = ""237-272"",
    Abstract = ""Integrating security concerns throughout the whole software development process is one of today's challenges in software and requirements engineering research. A challenge that so far has proved difficult to meet. The major difficulty is that providing security does not only require to solve technical problems but also to reason on the organization as a whole. This makes the usage of traditional software engineering methologies difficult or unsatisfactory: most proposals focus on protection aspects of security and explicitly deal with low level protection mechanisms and only an handful of them show the ability of capturing the high-level organizational security requirements, without getting suddenly bogged down into security protocols or cryptography algorithms. In this paper we critically review the state of the art in security requirements engineering and discuss the motivations that led us to propose the Secure Tropos methodology, a formal framework for modelling and analyzing security, that enhances the agent-oriented software development methodology i{*}/Tropos. We illustrate the Secure Tropos approach, a comprehensive case study, and discuss some later refinements of the Secure Tropos methodology to address some of its shortcomings. Finally, we introduce the ST-Tool, a CASE tool that supports our methodology."",
    Publisher = ""SPRINGER-VERLAG BERLIN"",
    Address = ""HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Univ Trent, Dept Informat \\& Commun Technol, Trento, Italy. Univ Trent, Dept Informat \\& Commun Technol, Trento, Italy."",
    ISSN = ""0302-9743"",
    EISSN = ""1611-3349"",
    ISBN = ""3-540-28955-0"",
    Keywords-Plus = ""MANAGEMENT; METHODOLOGY"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""giorgini@dit.unitn.it massacci@dit.unitn.it zannone@dit.unitn.it"",
    Affiliations = ""Fondazione Bruno Kessler; FBK-ICT - Center for Information \\& Communication Technology; University of Trento"",
    ResearcherID-Numbers = ""Massacci, Fabio/C-2662-2012 Giorgini, Paolo/G-7886-2012 Zannone, Nicola/H-1318-2012"",
    ORCID-Numbers = ""Zannone, Nicola/0000-0002-9081-5996 Massacci, Fabio/0000-0002-1091-8486 Giorgini, Paolo/0000-0003-4152-9683"",
    Number-of-Cited-References = ""61"",
    Times-Cited = ""35"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""6"",
    Doc-Delivery-Number = ""BDK55"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000233993600008"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Security and trust requirements engineering	https://www.webofscience.com/wos/woscc/full-record/WOS:000233993600008	SPRINGER-VERLAG BERLIN	nan; Keywords; References
19	TrustSE	A process-oriented methodology for assessing and improving software trustworthiness	A high-level, technical summary of the Trusted Software Methodology (TSM) is provided in this paper. The trust principles and trust classes that comprise the TSM are presented and several engineering investigations and case studies surrounding the TSM are outlined. Appendices are included that highlight important areas of the TSM.		Amoroso, Edward; Taylor, Carol; Watson, John; Weiss, Jonathan	CCS '94: Proceedings of the 2nd ACM Conference on Computer and communications security	https://doi.org/10.1145/191177.191188		39-50	"""@inproceedings{10.1145/191177.191188,
    author = ""Amoroso, Edward and Taylor, Carol and Watson, John and Weiss, Jonathan"",
    title = ""A process-oriented methodology for assessing and improving software trustworthiness"",
    year = ""1994"",
    isbn = ""0897917324"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/191177.191188"",
    doi = ""10.1145/191177.191188"",
    abstract = ""A high-level, technical summary of the Trusted Software Methodology (TSM) is provided in this paper. The trust principles and trust classes that comprise the TSM are presented and several engineering investigations and case studies surrounding the TSM are outlined. Appendices are included that highlight important areas of the TSM."",
    booktitle = ""Proceedings of the 2nd ACM Conference on Computer and Communications Security"",
    pages = ""39-50"",
    numpages = ""12"",
    location = ""Fairfax, Virginia, USA"",
    series = ""CCS '94""
}
"""						2	ACM		A process-oriented methodology for assessing and improving software trustworthiness	https://doi.org/10.1145/191177.191188	Association for Computing Machinery	nan; Keywords; References; Link
20	TrustSE	Enhancing functionality in an enterprise software package														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
21	TrustSE	Validation of ultra-high dependability for software-based systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
22	TrustSE	Competition and collaboration in requirements engineering: A case study of an emerging software ecosystem	Increasingly, small to medium software producing organisations are working together in collaboration networks to supply complex compositions of their products and services to customers. In this paper, we present a case study of two software companies that are evolving their partnership towards the creation of a software ecosystem. We investigate the impacts of their tightening partnership on software product management, with a focus on requirements engineering practices. We observe that the requirements definition and negotiation processes are directly affected by their fluid collaborative and competitive relationships. Power disputes, volatile roles and mismatches in release synchronisation are also aspects observed in the studied software ecosystem.We extract several observations from the case study that support small to medium software firms in making decisions within their software ecosystem.	Companies; Software; Ecosystems; Interviews; Collaboration; Planning; Requirements Engineering; Software Ecosystems; Software Product; Software Companies; Product Development; Main Product; Business Model; Product Characteristics; Project Management; Development Team; Literature In The Field; Product Release; New Product Development; Market Segmentation; Retail Market; Software Quality; Customer Requirements; Integration Project; Technical Team; Case Company; Integration Requirements; Partner Companies; Coopetition; Future Release; Alliance	George Valenca; Carina Alves; Virginia Heimann; Slinger Jansen; Sjaak Brinkkemper	2014 IEEE 22nd International Requirements Engineering Conference (RE)	https://doi.org/10.1109/RE.2014.6912289	"1.G. Hanssen and T. Dyba, ""Theoretical foundations of software ecosystems,"" in Proc. 3rd International Workshop on Software Ecosystems, 2012, pp. 6-17. Google Scholar; 2.S. Jansen, A. Finkelstein, and S. Brinkkemper, ""A sense of community: A research agenda for software ecosystems,"" presented at the ICSE Companion, 2009, pp. 187-190. View Article  Google Scholar; 3.G. Hanssen, ""A longitudinal case study of an emerging software ecosystem: Implications for practice and theory,"" Journal of Systems and Software, vol. 85, no. 7, pp. 1455-1466, 2012. CrossRef  Google Scholar; 4.L. Yu, ""The market-driven software ecosystem,"" IT Professional, vol. 15, no. 5, pp. 46-50, 2013. View Article  Google Scholar; 5.M. Khalil, P. Dominic, H. Kazemian, and U. Habib, ""A study to examine if integration of technology acceptance model's (tam) features help in building a hybrid digital business ecosystem framework for small and medium enterprises (smes),"" in Proc. of Frontiers of Information Technology. FIT'11, 2011, pp. 161-166. View Article  Google Scholar; 6.J. Bosch, ""From software product lines to software ecosystems,"" in Proc. 13th International Software Product Line Conference, 2009, pp. 111-119. Google Scholar; 7.O. Barbosa, R. Pereira, C. Alves, C. Werner, and S. Jansen, ""A systematic mapping study on software ecosystems from a three-dimensional perspective,"" in Software Ecosystems-Analyzing and Managing Business Networks in the Software Industry, S. Jansen, S. Brinkkemper, and M. Cusumano, Eds. Edward Elgar Pub. Ltd., 2013, ch. 3, pp. 59-83. CrossRef  Google Scholar; 8.F. Santana and C. Werner, ""Towards the analysis of software projects dependencies: An exploratory visual study of software ecosystems,"" in Proc. 5th International Workshop on Software Ecosystems, 2013, pp. 7-18. Google Scholar; 9.K. Manikas and G. Hansen, ""Software ecosystems-a systematic literature review,"" J. Syst. Softw., vol. 86, no. 5, pp. 1294-1306, 2013. CrossRef  Google Scholar; 10.T. Mens and M. Goeminne, ""Analysing the evolution of social aspects of open source software ecosystems,"" in Proc. Third International Workshop on Software Ecosystems, CEUR-WS, 2011, pp. 1-14. Google Scholar; 11.M. Anvaari and S. Jansen, ""Evaluating architectural openness in mobile software platforms,"" in Proc. Fourth European Conference on Software Architecture: Companion Volume, 2010, p. 8592. CrossRef  Google Scholar; 12.S. Draxler, A. Jung, and G. Stevens, ""Managing software portfolios: A comparative study,"" in End-User Development, M. Costabile, Y. Dittrich, G. Fischer, and A. Piccinno, Eds. Springer Berlin Heidelberg, 2011, pp. 337-342. Google Scholar; 13.P. Runeson and M. Host, ""Guidelines for conducting and reporting case study research in software engineering,"" Empirical Software Engineering, vol. 14, pp. 131-164, 2009. CrossRef  Google Scholar; 14.(2013) Weft qda. [Online]. Available: http://www.pressure.to/qda/ Google Scholar; 15.(2014) Mps.br. [Online]. Available: http://www.softex.br/mpsbr/ Google Scholar; 16.J. Moore, ""Predators and prey: a new ecology of competition,"" Harvard Business Review, vol. 3, no. 71, pp. 75-86, 1993. Google Scholar; 17.M. Iansiti and R. Levien, ""Strategy as ecology,"" Harvard Business Review, vol. 3, no. 82, pp. 68-78, 2004. Google Scholar; 18.J. van Angeren, V. Blijleven, and S. Jansen, ""Relationship intimacy in software ecosystems: A survey of the dutch software industry,"" in Proc. International Conference on Management of Emergent Digital EcoSystems, 2011, pp. 68-75. CrossRef  Google Scholar; 19.T. Isckia and D. Lescop, ""Open innovation within business ecosystems: A tale from amazon.com,"" Communications & Strategies, vol. 2, no. 74, pp. 37-54, 2009. Google Scholar; 20.M. Levy, C. Lobbecke, and P. Powell, ""Smes co-opetition and knowledge sharing: The is role,"" in Proc. 9th European Conference on Information Systems, 2001, pp. 640-652. Google Scholar; 21.A. Baars and S. Jansen, ""A framework for software ecosystem governance,"" in Proc. Third International Conference on Software Business, 2012, pp. 168-180. CrossRef  Google Scholar; 22.S. Jansen, S. Brinkkemper, J. Souer, and L. Luinenburg, ""Shades of gray: Opening up a software producing organization with the open software enterprise model,"" Journal of Systems and Software, vol. 85, no. 7, pp. 1495-1510, 2012. CrossRef  Google Scholar; 23.P. E. Harland and S. Wst, ""Strategic, brand and platform requirements for an interactive innovation process in business ecosystems,"" in Proc. 18th International Conference on Engineering, Technology and Innovation, 2012, pp. 1-9. View Article  Google Scholar; 24.A. Gawer and M. Cusumano, Platform Leadership: How Intel, Microsoft, and Cisco Drive Industry Innovation. Harvard Business School Press, 2002. Google Scholar; 25.P. Artz, I. van de Weerd, S. Brinkkemper, and J. Fieggen, ""Productization: Transforming from developing customer-specific software to product software,"" in Proc. First International Conference on Software Business, 2010, pp. 90-102. CrossRef  Google Scholar; 26.T. Suomalainen, O. Saloi, P. Abrahamsson, and J. Simil ""Software product roadmapping in a volatile business environment."" CrossRef  Google Scholar; 27.K. Vlaanderen, S. Jansen, S. Brinkkemper, and E. Jaspers, ""The agile requirements refinery: Applying scrum principles to software product management,"" Information & Software Technology, vol. 53, no. 1, pp. 58-70, 2011. CrossRef  Google Scholar; 28.A. Milne and N. A. M. Maiden, ""Power and politics in requirements engineering: Embracing the dark side?"" Requir. Eng., vol. 17, no. 2, pp. 83-98, 2012. CrossRef  Google Scholar; 29.S. Fricker and M. Glinz, ""Comparison of requirements hand-off, analysis, and negotiation: Case study,"" in Proc. 18th IEEE International Conference on Requirements Engineering, 2010, p. 167. View Article  Google Scholar"								2	IEEE		Competition and collaboration in requirements engineering: A case study of an emerging software ecosystem	https://ieeexplore.ieee.org/document/6912289	IEEE	nan; Pages; Year; Bibtex
23	TrustSE	Managing the unmanageable: integrating the supply chain with new developments in software														2						
24	TrustSE	Human factors in information security: The insider threat–Who can you trust these days?														2						
25	TrustSE	Software ecosystems: a software ecosystem strategy assessment model	Software companies and organizations increasingly open up their business to other software companies and as a consequence they find themselves in an ecosystem of software companies, developers and partners. These actors, and especially the software organization that is at the core of this ecosystem, are having difficulties in getting insight into this ecosystem and how their actions influence its performance. In this paper a model is presented that describes the key characteristics of a Software Ecosystem. The central hub of a Software Ecosystem can use data on these characteristics to its strategic advantage. This is demonstrated by the use of the model in a case study of a hub in a software ecosystem.	software ecosystems;  business ecosystems; software ecosystems, business ecosystems	van den Berk, Ivo; Jansen, Slinger; Luinenburg, L\'{u}tzen	ECSA '10: Proceedings of the Fourth European Conference on Software Architecture: Companion Volume	https://doi.org/10.1145/1842752.1842781		127-134	"""@inproceedings{10.1145/1842752.1842781,
    author = ""van den Berk, Ivo and Jansen, Slinger and Luinenburg, L\'{u}tzen"",
    title = ""Software ecosystems: a software ecosystem strategy assessment model"",
    year = ""2010"",
    isbn = ""9781450301794"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1842752.1842781"",
    doi = ""10.1145/1842752.1842781"",
    abstract = ""Software companies and organizations increasingly open up their business to other software companies and as a consequence they find themselves in an ecosystem of software companies, developers and partners. These actors, and especially the software organization that is at the core of this ecosystem, are having difficulties in getting insight into this ecosystem and how their actions influence its performance. In this paper a model is presented that describes the key characteristics of a Software Ecosystem. The central hub of a Software Ecosystem can use data on these characteristics to its strategic advantage. This is demonstrated by the use of the model in a case study of a hub in a software ecosystem."",
    booktitle = ""Proceedings of the Fourth European Conference on Software Architecture: Companion Volume"",
    pages = ""127-134"",
    numpages = ""8"",
    keywords = ""software ecosystems, business ecosystems"",
    location = ""Copenhagen, Denmark"",
    series = ""ECSA '10""
}
"""						2	ACM		Software ecosystems: a software ecosystem strategy assessment model	https://doi.org/10.1145/1842752.1842781	Association for Computing Machinery	nan; References; Link
26	TrustSE	Trust, partner selection and innovation outcome in collaborative new product development	A key feature of collaboration in general and collaboration for innovation in particular is the existence of trust. Trust is important because it reduces the costs and risks involved in collaboration, while also increasing the overall performance. This article explores the role that trust plays during the selection of suppliers in new product development (NPD), and the outcome that reliance on trust has on the innovation effort. The research involves a case study of two organisations following contrasting approaches to NPD sourcing, but both relying on collaborative, long-term relationships. In both cases, we find goodwill trust as the key variable explaining the reliance on collaboration. We also find that over-reliance on goodwill trust and geographical proximity in selecting NPD suppliers leads to an emphasis on incremental innovation which hampers the ability of both organisations to engage in radical NPD.	new product development; innovation; trust; collaboration; new product development;  innovation;  trust;  collaboration	Bunduchi, Raluca	PRODUCTION PLANNING \& CONTROL	https://doi.org/10.1080/09537287.2011.647868		145-157	"""@article{WOS:000322753700002,
    Author = ""Bunduchi, Raluca"",
    Title = ""Trust, partner selection and innovation outcome in collaborative new product development"",
    Journal = ""PRODUCTION PLANNING \\& CONTROL"",
    Year = ""2013"",
    Volume = ""24"",
    Number = ""2-3, SI"",
    Pages = ""145-157"",
    Month = ""MAR 1"",
    Abstract = ""A key feature of collaboration in general and collaboration for innovation in particular is the existence of trust. Trust is important because it reduces the costs and risks involved in collaboration, while also increasing the overall performance. This article explores the role that trust plays during the selection of suppliers in new product development (NPD), and the outcome that reliance on trust has on the innovation effort. The research involves a case study of two organisations following contrasting approaches to NPD sourcing, but both relying on collaborative, long-term relationships. In both cases, we find goodwill trust as the key variable explaining the reliance on collaboration. We also find that over-reliance on goodwill trust and geographical proximity in selecting NPD suppliers leads to an emphasis on incremental innovation which hampers the ability of both organisations to engage in radical NPD."",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Bunduchi, R (Corresponding Author), Univ Aberdeen, Sch Business, Edward Wright Bldg,Dunbar St, Aberdeen AB24 3QY, Scotland. Univ Aberdeen, Sch Business, Aberdeen AB24 3QY, Scotland."",
    DOI = ""10.1080/09537287.2011.647868"",
    ISSN = ""0953-7287"",
    EISSN = ""1366-5871"",
    Keywords = ""new product development; innovation; trust; collaboration"",
    Keywords-Plus = ""OPERATIONS MANAGEMENT; SUPPLIER INVOLVEMENT; TRANSACTION COSTS; SOCIAL-STRUCTURE; GOVERNANCE; NETWORKS; CUSTOMER; SUCCESS; MATTER; MODEL"",
    Research-Areas = ""Engineering; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Engineering, Industrial; Engineering, Manufacturing; Operations Research \\& Management Science"",
    Author-Email = ""r.bunduchi@abdn.ac.uk"",
    Affiliations = ""University of Aberdeen"",
    ResearcherID-Numbers = ""Bunduchi, Raluca/AFS-1240-2022"",
    ORCID-Numbers = ""Bunduchi, Raluca/0000-0001-8157-9197"",
    Funding-Acknowledgement = ""British Academy {[}SG-46759]; Carnegie Trust"",
    Funding-Text = ""This research was sponsored by British Academy grant no SG-46759 and funding provided by the Carnegie Trust."",
    Number-of-Cited-References = ""50"",
    Times-Cited = ""56"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""117"",
    Journal-ISO = ""Prod. Plan. Control"",
    Doc-Delivery-Number = ""196DN"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000322753700002"",
    OA = ""Green Accepted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Trust, partner selection and innovation outcome in collaborative new product development	https://www.webofscience.com/wos/woscc/full-record/WOS:000322753700002	TAYLOR \& FRANCIS LTD	nan; References
27	TrustSE	From ratings to trust: an empirical study of implicit trust in recommender systems	Trust has been extensively studied and its effectiveness demonstrated in recommender systems. Due to the lack of explicit trust information in most systems, many trust metric approaches have been proposed to infer implicit trust from user ratings. However, previous works have not compared these different approaches, and oftentimes focus only on the performance of predictive item ratings. In this paper, we first analyse five kinds of trust metrics in light of the properties of trust. We conduct an empirical study to explore the ability of trust metrics to distinguish explicit trust from implicit trust and to generate accurate predictions. Experimental results on two real-world data sets show that existing trust metrics cannot provide satisfying performance, and indicate that future metrics should be designed more carefully.	trust metrics;  similarity;  recommender systems;  ratings; trust metrics, similarity, recommender systems, ratings	Guo, Guibing; Zhang, Jie; Thalmann, Daniel; Basu, Anirban; Yorke-Smith, Neil	SAC '14: Proceedings of the 29th Annual ACM Symposium on Applied Computing	https://doi.org/10.1145/2554850.2554878		248-253	"""@inproceedings{10.1145/2554850.2554878,
    author = ""Guo, Guibing and Zhang, Jie and Thalmann, Daniel and Basu, Anirban and Yorke-Smith, Neil"",
    title = ""From ratings to trust: an empirical study of implicit trust in recommender systems"",
    year = ""2014"",
    isbn = ""9781450324694"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2554850.2554878"",
    doi = ""10.1145/2554850.2554878"",
    abstract = ""Trust has been extensively studied and its effectiveness demonstrated in recommender systems. Due to the lack of explicit trust information in most systems, many trust metric approaches have been proposed to infer implicit trust from user ratings. However, previous works have not compared these different approaches, and oftentimes focus only on the performance of predictive item ratings. In this paper, we first analyse five kinds of trust metrics in light of the properties of trust. We conduct an empirical study to explore the ability of trust metrics to distinguish explicit trust from implicit trust and to generate accurate predictions. Experimental results on two real-world data sets show that existing trust metrics cannot provide satisfying performance, and indicate that future metrics should be designed more carefully."",
    booktitle = ""Proceedings of the 29th Annual ACM Symposium on Applied Computing"",
    pages = ""248-253"",
    numpages = ""6"",
    keywords = ""trust metrics, similarity, recommender systems, ratings"",
    location = ""Gyeongju, Republic of Korea"",
    series = ""SAC '14""
}
"""						2	ACM		From ratings to trust: an empirical study of implicit trust in recommender systems	https://doi.org/10.1145/2554850.2554878	Association for Computing Machinery	nan; References; Link
28	TrustSE	A Survey on Trust Modeling	The concept of trust and/or trust management has received considerable attention in engineering research communities as trust is perceived as the basis for decision making in many contexts and the motivation for maintaining long-term relationships based on cooperation and collaboration. Even if substantial research effort has been dedicated to addressing trust-based mechanisms or trust metrics (or computation) in diverse contexts, prior work has not clearly solved the issue of how to model and quantify trust with sufficient detail and context-based adequateness. The issue of trust quantification has become more complicated as we have the need to derive trust from complex, composite networks that may involve four distinct layers of communication protocols, information exchange, social interactions, and cognitive motivations. In addition, the diverse application domains require different aspects of trust for decision making such as emotional, logical, and relational trust. This survey aims to outline the foundations of trust models for applications in these contexts in terms of the concept of trust, trust assessment, trust constructs, trust scales, trust properties, trust formulation, and applications of trust. We discuss how different components of trust can be mapped to different layers of a complex, composite network; applicability of trust metrics and models; research challenges; and future work directions.	trustor;  trustee;  trust;  decision making;  composite trust;  Trust modeling; trustor, trustee, trust, decision making, composite trust, Trust modeling	Cho, Jin-Hee; Chan, Kevin; Adali, Sibel	ACM Comput. Surv.	https://doi.org/10.1145/2815595			"""@article{10.1145/2815595,
    author = ""Cho, Jin-Hee and Chan, Kevin and Adali, Sibel"",
    title = ""A Survey on Trust Modeling"",
    year = ""2015"",
    issue_date = ""November 2015"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""48"",
    number = ""2"",
    issn = ""0360-0300"",
    url = ""https://doi.org/10.1145/2815595"",
    doi = ""10.1145/2815595"",
    abstract = ""The concept of trust and/or trust management has received considerable attention in engineering research communities as trust is perceived as the basis for decision making in many contexts and the motivation for maintaining long-term relationships based on cooperation and collaboration. Even if substantial research effort has been dedicated to addressing trust-based mechanisms or trust metrics (or computation) in diverse contexts, prior work has not clearly solved the issue of how to model and quantify trust with sufficient detail and context-based adequateness. The issue of trust quantification has become more complicated as we have the need to derive trust from complex, composite networks that may involve four distinct layers of communication protocols, information exchange, social interactions, and cognitive motivations. In addition, the diverse application domains require different aspects of trust for decision making such as emotional, logical, and relational trust. This survey aims to outline the foundations of trust models for applications in these contexts in terms of the concept of trust, trust assessment, trust constructs, trust scales, trust properties, trust formulation, and applications of trust. We discuss how different components of trust can be mapped to different layers of a complex, composite network; applicability of trust metrics and models; research challenges; and future work directions."",
    journal = ""ACM Comput. Surv."",
    month = ""October"",
    articleno = ""28"",
    numpages = ""40"",
    keywords = ""trustor, trustee, trust, decision making, composite trust, Trust modeling""
}
"""						2	ACM		A survey on trust modeling	https://doi.org/10.1145/2815595	Association for Computing Machinery	nan; References; Pages; Link
29	TrustSE	Enabling trusted software integrity	Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications.		Kirovski, Darko; Drini\'{c}, Milenko; Potkonjak, Miodrag	ASPLOS X: Proceedings of the 10th international conference on Architectural support for programming languages and operating systems	https://doi.org/10.1145/605397.605409		108-120	"""@inproceedings{10.1145/605397.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    isbn = ""1581135742"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/605397.605409"",
    doi = ""10.1145/605397.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    booktitle = ""Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems"",
    pages = ""108-120"",
    numpages = ""13"",
    location = ""San Jose, California"",
    series = ""ASPLOS X""
}

@article{10.1145/605432.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    issue_date = ""October 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""37"",
    number = ""10"",
    issn = ""0362-1340"",
    url = ""https://doi.org/10.1145/605432.605409"",
    doi = ""10.1145/605432.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    journal = ""SIGPLAN Not."",
    month = ""October"",
    pages = ""108-120"",
    numpages = ""13""
}

@article{10.1145/635508.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    issue_date = ""December 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""36"",
    number = ""5"",
    issn = ""0163-5980"",
    url = ""https://doi.org/10.1145/635508.605409"",
    doi = ""10.1145/635508.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    journal = ""SIGOPS Oper. Syst. Rev."",
    month = ""October"",
    pages = ""108-120"",
    numpages = ""13""
}

@article{10.1145/635506.605409,
    author = ""Kirovski, Darko and Drini\'{c}, Milenko and Potkonjak, Miodrag"",
    title = ""Enabling trusted software integrity"",
    year = ""2002"",
    issue_date = ""December 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""30"",
    number = ""5"",
    issn = ""0163-5964"",
    url = ""https://doi.org/10.1145/635506.605409"",
    doi = ""10.1145/635506.605409"",
    abstract = ""Preventing execution of unauthorized software on a given computer plays a pivotal role in system security. The key problem is that although a program at the beginning of its execution can be verified as authentic, while running, its execution flow can be redirected to externally injected malicious code using, for example, a buffer overflow exploit. Existing techniques address this problem by trying to detect the intrusion at run-time or by formally verifying that the software is not prone to a particular attack.We take a radically different approach to this problem. We aim at intrusion prevention as the core technology for enabling secure computing systems. Intrusion prevention systems force an adversary to solve a computationally hard task in order to create a binary that can be executed on a given machine. In this paper, we present an exemplary system--SPEF--a combination of architectural and compilation techniques that ensure software integrity at run-time. SPEF embeds encrypted, processor-specific constraints into each block of instructions at software installation time and then verifies their existence at run-time. Thus, the processor can execute only properly installed programs, which makes installation the only system gate that needs to be protected. We have designed a SPEF prototype based on the ARM instruction set and validated its impact on security and performance using the MediaBench suite of applications."",
    journal = ""SIGARCH Comput. Archit. News"",
    month = ""October"",
    pages = ""108-120"",
    numpages = ""13""
}
"""						2	ACM		Enabling trusted software integrity	https://doi.org/10.1145/605397.605409	Association for Computing Machinery	nan; Keywords; References; Link
30	TrustSE	A software-based Trusted Platform Module emulator	When developing and researching new trusted computing technologies, appropriate tools to investigate their behavior and to evaluate their performance are of paramount importance. In this paper, we present, an efficient and portable TPM emulator for Unix. Our emulator enables not only the implementation of flexible and low-cost test-beds and simulators but, in addition, provides programmers of trusted systems with a powerful testing and debugging tool that can also be used for educational purposes. Thanks to its portability and interoperability, the TPM emulator runs on a variety of platforms and is compatible with the most relevant software packages and interfaces.		Strasser, Mario; Stamer, Heiko	TRUSTED COMPUTING - CHALLENGES AND APPLICATIONS, PROCEEDINGS	https://www.webofscience.com/wos/woscc/full-record/WOS:000258852400003		33+	"""@inproceedings{WOS:000258852400003,
    Author = ""Strasser, Mario and Stamer, Heiko"",
    Editor = ""Lipp, P and Sadeghi, AR and Koch, KM"",
    Title = ""A software-based Trusted Platform Module emulator"",
    Booktitle = ""TRUSTED COMPUTING - CHALLENGES AND APPLICATIONS, PROCEEDINGS"",
    Series = ""Lecture Notes in Computer Science"",
    Year = ""2008"",
    Volume = ""4968"",
    Pages = ""33+"",
    Note = ""1st International Conference on Trusted Computing and Trust in Information Technologies (TRUST 2008), Villach, AUSTRIA, MAR 11-12, 2008"",
    Abstract = ""When developing and researching new trusted computing technologies, appropriate tools to investigate their behavior and to evaluate their performance are of paramount importance. In this paper, we present, an efficient and portable TPM emulator for Unix. Our emulator enables not only the implementation of flexible and low-cost test-beds and simulators but, in addition, provides programmers of trusted systems with a powerful testing and debugging tool that can also be used for educational purposes. Thanks to its portability and interoperability, the TPM emulator runs on a variety of platforms and is compatible with the most relevant software packages and interfaces."",
    Publisher = ""SPRINGER-VERLAG BERLIN"",
    Address = ""HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Strasser, M (Corresponding Author), ETH, Zurich, Switzerland. Strasser, Mario, ETH, Zurich, Switzerland. Stamer, Heiko, Univ Kassel, Fac Elektrotech Informat, D-34109 Kassel, Germany."",
    ISSN = ""0302-9743"",
    EISSN = ""1611-3349"",
    ISBN = ""978-3-540-68978-2"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Hardware \\& Architecture; Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""strasser@tik.ee.ethz.ch stamer@theory.informatik.uni-kassel.de"",
    Affiliations = ""Swiss Federal Institutes of Technology Domain; ETH Zurich; Universitat Kassel"",
    Number-of-Cited-References = ""15"",
    Times-Cited = ""24"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""5"",
    Doc-Delivery-Number = ""BID95"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000258852400003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		A software-based trusted platform module emulator	https://www.webofscience.com/wos/woscc/full-record/WOS:000258852400003	SPRINGER-VERLAG BERLIN	nan; Keywords; References
31	TrustSE	From trust to dependability through risk analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
32	TrustSE	Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers	Despite the conceptual importance of security perceptions in contributing to client satisfaction, no study has yet provided empirical evidence of the link. We argue that because security perceptions are highly subjective and depend on the client's experiences, it is necessary to identify the perceived value of security in order to explain its effect on security. We adapt a recent model of SaaS satisfaction to include security and perceived value, and test the model on a sample of 135 SaaS clients. We find a significant positive relationship between security and satisfaction when mediated by perceived value. We also present an unmediated model in which security is not significant.	Software-as-a-Service; Security; Satisfaction; Perceived Value; Software-as-a-Service;  Security;  Satisfaction;  Perceived Value	Goode, Sigi; Lin, Chinho; Tsai, Jacob C.; Jiang, James J.	DECISION SUPPORT SYSTEMS	https://doi.org/10.1016/j.dss.2014.12.005		73-85	"""@article{WOS:000349498900006,
    Author = ""Goode, Sigi and Lin, Chinho and Tsai, Jacob C. and Jiang, James J."",
    Title = ""Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers"",
    Journal = ""DECISION SUPPORT SYSTEMS"",
    Year = ""2015"",
    Volume = ""70"",
    Pages = ""73-85"",
    Month = ""FEB"",
    Abstract = ""Despite the conceptual importance of security perceptions in contributing to client satisfaction, no study has yet provided empirical evidence of the link. We argue that because security perceptions are highly subjective and depend on the client's experiences, it is necessary to identify the perceived value of security in order to explain its effect on security. We adapt a recent model of SaaS satisfaction to include security and perceived value, and test the model on a sample of 135 SaaS clients. We find a significant positive relationship between security and satisfaction when mediated by perceived value. We also present an unmediated model in which security is not significant. (C) 2014 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Jiang, JJ (Corresponding Author), Natl Taiwan Univ, Coll Management, Taipei 106, Taiwan. Goode, Sigi, Australian Natl Univ, ANU Coll Business \\& Econ, Canberra, ACT 0200, Australia. Lin, Chinho, Natl Cheng Kung Univ, Dept Ind \\& Informat Management, Tainan 70101, Taiwan. Lin, Chinho, Natl Cheng Kung Univ, Inst Informat Management, Coll Management, Tainan 70101, Taiwan. Tsai, Jacob C.; Jiang, James J., Natl Taiwan Univ, Coll Management, Taipei 106, Taiwan."",
    DOI = ""10.1016/j.dss.2014.12.005"",
    ISSN = ""0167-9236"",
    EISSN = ""1873-5797"",
    Keywords = ""Software-as-a-Service; Security; Satisfaction; Perceived Value"",
    Keywords-Plus = ""CUSTOMER PERCEIVED VALUE; LEVEL AGREEMENTS; QUALITY; LOYALTY; MODEL; DETERMINANTS; ADOPTION; PERCEPTIONS; PERSPECTIVE; SYSTEMS"",
    Research-Areas = ""Computer Science; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Computer Science, Artificial Intelligence; Computer Science, Information Systems; Operations Research \\& Management Science"",
    Author-Email = ""Sigi.Goode@anu.edu.au linn@mail.ncku.edu.tw Jacob.c.tsai@gmail.com jjjiang@ntu.edu.tw"",
    Affiliations = ""Australian National University; National Cheng Kung University; National Cheng Kung University; National Taiwan University"",
    ResearcherID-Numbers = ""Jiang, James/JPK-7730-2023"",
    ORCID-Numbers = ""Goode, Sigi/0000-0001-5260-746X"",
    Number-of-Cited-References = ""95"",
    Times-Cited = ""32"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""54"",
    Journal-ISO = ""Decis. Support Syst."",
    Doc-Delivery-Number = ""CB3AC"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000349498900006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers	https://www.webofscience.com/wos/woscc/full-record/WOS:000349498900006	ELSEVIER	nan; References
33	TrustSE	A cognitive theory of trust														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
34	TrustSE	Trust factors influencing the adoption of internet-based interorganizational systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
35	TrustSE	Trust based service optimization selection for cloud computing														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
36	TrustSE	Project governance: Balancing control and trust in dealing with risk														2						
37	TrustSE	Retention of IT professionals: Examining the influence of empowerment, social exchange, and trust	Given the importance of information technology professionals in today's high-technology-driven business environment, the issue of how to retain these professionals has received relatively little attention. Hence, using data from IT professionals employed in private companies in Turkey, this study explores the role of psychological empowerment, leader-member exchange, perceived organizational support and organizational trust in reducing turnover intentions of IT professionals. The results indicate that perceived organizational support fully mediates the relationship between psychological empowerment and turnover intentions, whereas leader-member exchange has a partial mediating effect on this relationship. In addition, results also yield that organizational trust moderates the mediated relationship between psychological empowerment and turnover intentions, in such a way that trust in organization moderates the mediating influence of perceived organizational support, whereas trust in supervisor moderates the mediating effect of leader-member exchange.	Psychological empowerment; Leader-member exchange; Perceived organizational support; Organizational trust; Turnover intentions; IT professionals; Psychological empowerment;  Leader-member exchange;  Perceived organizational support;  Organizational trust;  Turnover intentions;  IT professionals	Erturk, Alper; Vurgun, Levent	JOURNAL OF BUSINESS RESEARCH	https://doi.org/10.1016/j.jbusres.2014.05.010		34-46	"""@article{WOS:000346893000005,
    Author = ""Erturk, Alper and Vurgun, Levent"",
    Title = ""Retention of IT professionals: Examining the influence of empowerment, social exchange, and trust"",
    Journal = ""JOURNAL OF BUSINESS RESEARCH"",
    Year = ""2015"",
    Volume = ""68"",
    Number = ""1"",
    Pages = ""34-46"",
    Month = ""JAN"",
    Abstract = ""Given the importance of information technology professionals in today's high-technology-driven business environment, the issue of how to retain these professionals has received relatively little attention. Hence, using data from IT professionals employed in private companies in Turkey, this study explores the role of psychological empowerment, leader-member exchange, perceived organizational support and organizational trust in reducing turnover intentions of IT professionals. The results indicate that perceived organizational support fully mediates the relationship between psychological empowerment and turnover intentions, whereas leader-member exchange has a partial mediating effect on this relationship. In addition, results also yield that organizational trust moderates the mediated relationship between psychological empowerment and turnover intentions, in such a way that trust in organization moderates the mediating influence of perceived organizational support, whereas trust in supervisor moderates the mediating effect of leader-member exchange. (C) 2014 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Erturk, A (Corresponding Author), Gebze Inst Technol, Inst Social Sci, Kocaeli, Turkey. Erturk, Alper, Gebze Inst Technol, Inst Social Sci, Kocaeli, Turkey. Vurgun, Levent, Turgut Ozal Univ, Fac Business Adm, Ankara, Turkey."",
    DOI = ""10.1016/j.jbusres.2014.05.010"",
    ISSN = ""0148-2963"",
    EISSN = ""1873-7978"",
    Keywords = ""Psychological empowerment; Leader-member exchange; Perceived organizational support; Organizational trust; Turnover intentions; IT professionals"",
    Keywords-Plus = ""LEADER-MEMBER EXCHANGE; PERCEIVED ORGANIZATIONAL SUPPORT; FACTORS AFFECTING INTENTION; CITIZENSHIP BEHAVIOR; TURNOVER INTENTIONS; SUPERVISOR SUPPORT; EMPLOYEE OUTCOMES; STATE GOVERNMENT; MODERATING ROLE; COMMITMENT"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Business"",
    Author-Email = ""draerturk@gmail.com lvurgun@turgutozal.edu.tr"",
    Affiliations = ""Gebze Technical University; Turgut Ozal University"",
    ResearcherID-Numbers = ""Vurgun, Levent/ABB-8720-2020"",
    Number-of-Cited-References = ""102"",
    Times-Cited = ""69"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""75"",
    Journal-ISO = ""J. Bus. Res."",
    Doc-Delivery-Number = ""AX4HB"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000346893000005"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Retention of IT professionals: Examining the influence of empowerment, social exchange, and trust	https://www.webofscience.com/wos/woscc/full-record/WOS:000346893000005	ELSEVIER SCIENCE INC	nan; References
38	TrustSE	Establishing and maintaining trust in software outsourcing relationships: An empirical investigation	Our research objective is to understand software outsourcing practitioners' perceptions of the role of trust in managing client-vendor relationships and the factors that are critical to trust in off-shore software outsourcing relationships. Participants were 12 Vietnamese software development practitioners developing software for Far Eastern, European, and American clients. They identified that cultural understanding, creditability, capabilities, and personal visits are important factors in gaining the initial trust of a client, while cultural understanding, communication strategies, contract conformance, and timely delivery are vital factors in maintaining that trust. We contrast Vietnamese and Indian practitioners' views on factors affecting trust relationships.	software outsourcing; Global software development; trust in outsourcing relationship; Software development in Vietnam; empirical software engineering; software process improvement; software outsourcing;  Global software development;  trust in outsourcing relationship;  Software development in Vietnam;  empirical software engineering;  software process improvement	Babar, Muhammad Ali; Verner, June M.; Nguyen, Phong Thanh	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2006.12.038		1438-1449	"""@article{WOS:000249472200003,
    Author = ""Babar, Muhammad Ali and Verner, June M. and Nguyen, Phong Thanh"",
    Title = ""Establishing and maintaining trust in software outsourcing relationships: An empirical investigation"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2007"",
    Volume = ""80"",
    Number = ""9"",
    Pages = ""1438-1449"",
    Month = ""SEP"",
    Note = ""10th International Conference on Evaluation and Assessment in Software Engineering (EASE), Keele Univ, Keele, ENGLAND, 2006"",
    Abstract = ""Our research objective is to understand software outsourcing practitioners' perceptions of the role of trust in managing client-vendor relationships and the factors that are critical to trust in off-shore software outsourcing relationships. Participants were 12 Vietnamese software development practitioners developing software for Far Eastern, European, and American clients. They identified that cultural understanding, creditability, capabilities, and personal visits are important factors in gaining the initial trust of a client, while cultural understanding, communication strategies, contract conformance, and timely delivery are vital factors in maintaining that trust. We contrast Vietnamese and Indian practitioners' views on factors affecting trust relationships. (C) 2006 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Babar, MA (Corresponding Author), Natl ICT Australia, Locked Bag 9013, Alexandria, NSW 1435, Australia. Natl ICT Australia, Alexandria, NSW 1435, Australia. Univ New S Wales, Alexandria, NSW 1435, Australia."",
    DOI = ""10.1016/j.jss.2006.12.038"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""software outsourcing; Global software development; trust in outsourcing relationship; Software development in Vietnam; empirical software engineering; software process improvement"",
    Keywords-Plus = ""DEVELOPMENT-PROJECTS; MODEL; VIEW"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""malibaba@nicta.com.au phong.nguyeny@nicta.com.au"",
    Affiliations = ""NICTA; University of New South Wales Sydney"",
    ResearcherID-Numbers = ""BABAR, A/A-4187-2009"",
    Number-of-Cited-References = ""42"",
    Times-Cited = ""92"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""20"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""210RB"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000249472200003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Establishing and maintaining trust in software outsourcing relationships: An empirical investigation	https://www.webofscience.com/wos/woscc/full-record/WOS:000249472200003	ELSEVIER SCIENCE INC	nan; References
39	TrustSE	Trust in information technology														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
40	TrustSE	CAN I TRUST THIS SOFTWARE PACKAGE?														2						
41	TrustSE	Software reliability and dependability: a roadmap		reliability engineering;  diversity;  dependability modelling and assessment;  COTS reliability; reliability engineering, diversity, dependability modelling and assessment, COTS reliability	Littlewood, Bev; Strigini, Lorenzo	ICSE '00: Proceedings of the Conference on The Future of Software Engineering	https://doi.org/10.1145/336512.336551		175-188	"""@inproceedings{10.1145/336512.336551,
    author = ""Littlewood, Bev and Strigini, Lorenzo"",
    title = ""Software reliability and dependability: a roadmap"",
    year = ""2000"",
    isbn = ""1581132530"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/336512.336551"",
    doi = ""10.1145/336512.336551"",
    booktitle = ""Proceedings of the Conference on The Future of Software Engineering"",
    pages = ""175-188"",
    numpages = ""14"",
    keywords = ""reliability engineering, diversity, dependability modelling and assessment, COTS reliability"",
    location = ""Limerick, Ireland"",
    series = ""ICSE '00""
}
"""						2	ACM		Software reliability and dependability: a roadmap	https://doi.org/10.1145/336512.336551	Association for Computing Machinery	nan; Abstract; References; Link
42	TrustSE	Service-based software: the future for flexible software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
43	TrustSE	Analyzing package dependencies in open source software using a directed random graph														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
44	TrustSE	Structure and evolution of package dependency networks	Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the JavaScript, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for JavaScript has grown 60\% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools.		Kikas, Riivo; Gousios, Georgios; Dumas, Marlon; Pfahl, Dietmar	MSR '17: Proceedings of the 14th International Conference on Mining Software Repositories	https://doi.org/10.1109/MSR.2017.55		102-112	"""@inproceedings{10.1109/MSR.2017.55,
    author = ""Kikas, Riivo and Gousios, Georgios and Dumas, Marlon and Pfahl, Dietmar"",
    title = ""Structure and evolution of package dependency networks"",
    year = ""2017"",
    isbn = ""9781538615447"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/MSR.2017.55"",
    doi = ""10.1109/MSR.2017.55"",
    abstract = ""Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the JavaScript, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for JavaScript has grown 60\\% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools."",
    booktitle = ""Proceedings of the 14th International Conference on Mining Software Repositories"",
    pages = ""102-112"",
    numpages = ""11"",
    location = ""Buenos Aires, Argentina"",
    series = ""MSR '17""
}
"""						2	ACM		Structure and evolution of package dependency networks	https://doi.org/10.1109/MSR.2017.55	IEEE Press	nan; Keywords; References; Link
45	TrustSE	The development and evaluation of an online master's module using an open-source software package														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
46	TrustSE	Trust in a specific technology: An investigation of its components and measures	Trust plays an important role in many Information Systems (IS)-enabled situations. Most IS research employs trust as a measure of interpersonal or person-to-firm relations, such as trust in a Web vendor or a virtual team member. Although trust in other people is important, this article suggests that trust in the Information Technology (IT) itself also plays a role in shaping IT-related beliefs and behavior. To advance trust and technology research, this article presents a set of trust in technology construct definitions and measures. We also empirically examine these construct measures using tests of convergent, discriminant, and nomological validity. This study contributes to the literature by providing: (a) a framework that differentiates trust in technology from trust in people, (b) a theory-based set of definitions necessary for investigating different kinds of trust in technology, and	trust in technology;  construct development;  Trust; trust in technology, construct development, Trust	Mcknight, D. Harrison; Carter, Michelle; Thatcher, Jason Bennett; Clay, Paul F.	ACM Trans. Manage. Inf. Syst.	https://doi.org/10.1145/1985347.1985353			"""@article{10.1145/1985347.1985353,
    author = ""Mcknight, D. Harrison and Carter, Michelle and Thatcher, Jason Bennett and Clay, Paul F."",
    title = ""Trust in a specific technology: An investigation of its components and measures"",
    year = ""2011"",
    issue_date = ""June 2011"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""2"",
    number = ""2"",
    issn = ""2158-656X"",
    url = ""https://doi.org/10.1145/1985347.1985353"",
    doi = ""10.1145/1985347.1985353"",
    abstract = ""Trust plays an important role in many Information Systems (IS)-enabled situations. Most IS research employs trust as a measure of interpersonal or person-to-firm relations, such as trust in a Web vendor or a virtual team member. Although trust in other people is important, this article suggests that trust in the Information Technology (IT) itself also plays a role in shaping IT-related beliefs and behavior. To advance trust and technology research, this article presents a set of trust in technology construct definitions and measures. We also empirically examine these construct measures using tests of convergent, discriminant, and nomological validity. This study contributes to the literature by providing: (a) a framework that differentiates trust in technology from trust in people, (b) a theory-based set of definitions necessary for investigating different kinds of trust in technology, and (c) validated trust in technology measures useful to research and practice."",
    journal = ""ACM Trans. Manage. Inf. Syst."",
    month = ""July"",
    articleno = ""12"",
    numpages = ""25"",
    keywords = ""trust in technology, construct development, Trust""
}
"""						2	ACM		Trust in a specific technology: An investigation of its components and measures	https://doi.org/10.1145/1985347.1985353	Association for Computing Machinery	nan; References; Pages; Link
47	TrustSE	Estimating Security Risk in Open Source Package Repositories: An Empirical Analysis and Predictive Model of Software Vulnerabilities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
48	TrustSE	Small business preference for software package														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
49	TrustSE	Defining open source software project success														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
50	TrustSE	Toward Decentralized Package Management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
51	TrustSE	Toward a distributed package management system														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
52	TrustSE	Self-organization of teams for free/libre open source software development	This paper provides empirical evidence about how free/libre open source software development teams self-organize their work, specifically, how tasks are assigned to project team members. Following a case study methodology, we examined developer interaction data from three active and successful FLOSS projects using qualitative research methods, specifically inductive content analysis, to identify the task-assignment mechanisms used by the participants. We found that `self-assignment' was the most common mechanism across three FLOSS projects. This mechanism is consistent with expectations for distributed and largely volunteer teams. We conclude by discussing whether these emergent practices can be usefully transferred to mainstream practice and indicating directions for future research.	free/libre open source software development; task assignment; self-organizing teams; distributed teams; qualitative research methods; coordination; free/libre open source software development;  task assignment;  self-organizing teams;  distributed teams;  qualitative research methods;  coordination	Crowston, Kevin; Li, Qing; Wei, Kangning; Eseryel, U. Yeliz; Howison, James	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2007.02.004		564-575	"""@article{WOS:000246599700004,
    Author = ""Crowston, Kevin and Li, Qing and Wei, Kangning and Eseryel, U. Yeliz and Howison, James"",
    Title = ""Self-organization of teams for free/libre open source software development"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2007"",
    Volume = ""49"",
    Number = ""6"",
    Pages = ""564-575"",
    Month = ""JUN"",
    Abstract = ""This paper provides empirical evidence about how free/libre open source software development teams self-organize their work, specifically, how tasks are assigned to project team members. Following a case study methodology, we examined developer interaction data from three active and successful FLOSS projects using qualitative research methods, specifically inductive content analysis, to identify the task-assignment mechanisms used by the participants. We found that `self-assignment' was the most common mechanism across three FLOSS projects. This mechanism is consistent with expectations for distributed and largely volunteer teams. We conclude by discussing whether these emergent practices can be usefully transferred to mainstream practice and indicating directions for future research. (C) 2007 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Crowston, K (Corresponding Author), Syracuse Univ, Sch Informat Studies, 348 Hinds Hall, Syracuse, NY 13244 USA. Syracuse Univ, Sch Informat Studies, Syracuse, NY 13244 USA."",
    DOI = ""10.1016/j.infsof.2007.02.004"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""free/libre open source software development; task assignment; self-organizing teams; distributed teams; qualitative research methods; coordination"",
    Keywords-Plus = ""DESIGN; COORDINATION; INTERNET; SYSTEMS; WORK"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""crowston@syr.edu qli03@syr.edu kwei@syr.edu uyeserye@syr.edu jhowison@syr.edu"",
    Affiliations = ""Syracuse University"",
    ResearcherID-Numbers = ""Eseryel, Yeliz/AAE-3379-2021 Crowston, Kevin/C-6068-2008"",
    ORCID-Numbers = ""Crowston, Kevin/0000-0003-1996-3600"",
    Number-of-Cited-References = ""59"",
    Times-Cited = ""111"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""21"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""169NU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000246599700004"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Self-organization of teams for free/libre open source software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000246599700004	ELSEVIER SCIENCE BV	nan; References
53	TrustSE	Why Free-Libre/Open Source Software (FLOSS)? Look at the Numbers!														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
54	TrustSE	The role of trust management in distributed systems security														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
55	TrustSE	Open source software: perspectives for development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
56	TrustSE	A look in the mirror: attacks on package managers	This work studies the security of ten popular package managers. These package managers use different security mechanisms that provide varying levels of usability and resilience to attack. We find that, despite their existing security mechanisms, all of these package managers have vulnerabilities that can be exploited by a man-in-the-middle or a malicious mirror. While all current package managers suffer from vulnerabilities, their security is also positively or negatively impacted by the distribution's security practices. Weaknesses in package managers are more easily exploited when distributions use third-party mirrors as official mirrors. We were successful in using false credentials to obtain an official mirror on all five of the distributions we attempted. We also found that some security mechanisms that control where a client obtains metadata and packages from may actually decrease security. We analyze current package managers to show that by exploiting vulnerabilities, an attacker with a mirror can compromise or crash hundreds to thousands of clients weekly. The problems we disclose are now being corrected by many different package manager maintainers.	mirrors;  package management;  replay attack; mirrors, package management, replay attack	Cappos, Justin; Samuel, Justin; Baker, Scott; Hartman, John H.	CCS '08: Proceedings of the 15th ACM conference on Computer and communications security	https://doi.org/10.1145/1455770.1455841		565-574	"""@inproceedings{10.1145/1455770.1455841,
    author = ""Cappos, Justin and Samuel, Justin and Baker, Scott and Hartman, John H."",
    title = ""A look in the mirror: attacks on package managers"",
    year = ""2008"",
    isbn = ""9781595938107"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1455770.1455841"",
    doi = ""10.1145/1455770.1455841"",
    abstract = ""This work studies the security of ten popular package managers. These package managers use different security mechanisms that provide varying levels of usability and resilience to attack. We find that, despite their existing security mechanisms, all of these package managers have vulnerabilities that can be exploited by a man-in-the-middle or a malicious mirror. While all current package managers suffer from vulnerabilities, their security is also positively or negatively impacted by the distribution's security practices. Weaknesses in package managers are more easily exploited when distributions use third-party mirrors as official mirrors. We were successful in using false credentials to obtain an official mirror on all five of the distributions we attempted. We also found that some security mechanisms that control where a client obtains metadata and packages from may actually decrease security. We analyze current package managers to show that by exploiting vulnerabilities, an attacker with a mirror can compromise or crash hundreds to thousands of clients weekly. The problems we disclose are now being corrected by many different package manager maintainers."",
    booktitle = ""Proceedings of the 15th ACM Conference on Computer and Communications Security"",
    pages = ""565-574"",
    numpages = ""10"",
    keywords = ""mirrors, package management, replay attack"",
    location = ""Alexandria, Virginia, USA"",
    series = ""CCS '08""
}
"""						2	ACM		Attacks on Package Managers	https://doi.org/10.1145/1455770.1455841	Association for Computing Machinery	nan; References; Link
57	TrustSE	Entering the circle of trust: developer initiation as committers in open-source projects	The success of an open-source project depends to a large degree on the proactive and constructive participation by the developer community. An important role that developers play in a project is that of a code committer. However, code-commit privilege is typically restricted to the core group of a project. In this paper, we study the phenomenon of the induction of external developers as code committers. The trustworthiness of an external developer is one of the key factors that determines the granting of commit privileges. Therefore, we formulate different hypotheses to explain how the trust is established in practice. To investigate our hypotheses, we developed an automated approach based on mining code repositories and bug-tracking systems. We implemented the approach and performed an empirical study, using the Eclipse projects, to test the hypotheses. Our results indicate that, most frequently, developers establish trust and credibility in a project by contributing to the project in a non-committer role. Moreover, the employing organization of a developer is another factor--although a less significant one--that influences trust.	code committer;  developer roles;  mining bug repository;  mining code repository;  open-source software; code committer, developer roles, mining bug repository, mining code repository, open-source software	Sinha, Vibha Singhal; Mani, Senthil; Sinha, Saurabh	MSR '11: Proceedings of the 8th Working Conference on Mining Software Repositories	https://doi.org/10.1145/1985441.1985462		133-142	"""@inproceedings{10.1145/1985441.1985462,
    author = ""Sinha, Vibha Singhal and Mani, Senthil and Sinha, Saurabh"",
    title = ""Entering the circle of trust: developer initiation as committers in open-source projects"",
    year = ""2011"",
    isbn = ""9781450305747"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1985441.1985462"",
    doi = ""10.1145/1985441.1985462"",
    abstract = ""The success of an open-source project depends to a large degree on the proactive and constructive participation by the developer community. An important role that developers play in a project is that of a code committer. However, code-commit privilege is typically restricted to the core group of a project. In this paper, we study the phenomenon of the induction of external developers as code committers. The trustworthiness of an external developer is one of the key factors that determines the granting of commit privileges. Therefore, we formulate different hypotheses to explain how the trust is established in practice. To investigate our hypotheses, we developed an automated approach based on mining code repositories and bug-tracking systems. We implemented the approach and performed an empirical study, using the Eclipse projects, to test the hypotheses. Our results indicate that, most frequently, developers establish trust and credibility in a project by contributing to the project in a non-committer role. Moreover, the employing organization of a developer is another factor--although a less significant one--that influences trust."",
    booktitle = ""Proceedings of the 8th Working Conference on Mining Software Repositories"",
    pages = ""133-142"",
    numpages = ""10"",
    keywords = ""code committer, developer roles, mining bug repository, mining code repository, open-source software"",
    location = ""Waikiki, Honolulu, HI, USA"",
    series = ""MSR '11""
}
"""						2	ACM		Entering the circle of trust: developer initiation as committers in open-source projects	https://doi.org/10.1145/1985441.1985462	Association for Computing Machinery	nan; References; Link
58	TrustSE	Striking a balance between trust and control in a virtual organization: a content analysis of open source software case studies														2						
59	TrustSE	What do we know about developer motivation?														2						
60	TrustSE	A Quantitative Analysis of Developer Information Needs in Software Ecosystems	We present the results of an investigation into the nature of information needs of software developers who work in projects that are part of larger ecosystems. This work is based on a quantitative survey of 75 professional software developers. We corroborate the results identified in the survey with needs and motivations proposed in a previous survey and discover that tool support for developers working in an ecosystem context is even more meager than we thought: mailing lists and internet search are the most popular tools developers use to satisfy their ecosystem-related information needs.	Software ecosystems;  frameworks and libraries;  open source software;  program comprehension;  programmer needs; Software ecosystems, frameworks and libraries, open source software, program comprehension, programmer needs	Haenni, Nicole; Lungu, Mircea; Schwarz, Niko; Nierstrasz, Oscar	ECSAW '14: Proceedings of the 2014 European Conference on Software Architecture Workshops	https://doi.org/10.1145/2642803.2642815		1-6	"""@inproceedings{10.1145/2642803.2642815,
    author = ""Haenni, Nicole and Lungu, Mircea and Schwarz, Niko and Nierstrasz, Oscar"",
    title = ""A Quantitative Analysis of Developer Information Needs in Software Ecosystems"",
    year = ""2014"",
    isbn = ""9781450327787"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2642803.2642815"",
    doi = ""10.1145/2642803.2642815"",
    abstract = ""We present the results of an investigation into the nature of information needs of software developers who work in projects that are part of larger ecosystems. This work is based on a quantitative survey of 75 professional software developers. We corroborate the results identified in the survey with needs and motivations proposed in a previous survey and discover that tool support for developers working in an ecosystem context is even more meager than we thought: mailing lists and internet search are the most popular tools developers use to satisfy their ecosystem-related information needs."",
    booktitle = ""Proceedings of the 2014 European Conference on Software Architecture Workshops"",
    articleno = ""12"",
    numpages = ""6"",
    keywords = ""Software ecosystems, frameworks and libraries, open source software, program comprehension, programmer needs"",
    location = ""Vienna, Austria"",
    series = ""ECSAW '14""
}
"""						2	ACM		A quantitative analysis of developer information needs in software ecosystems	https://doi.org/10.1145/2642803.2642815	Association for Computing Machinery	nan; References; Link
61	TrustSE	Trust (and mistrust) in secure applications			Viega, John; Kohno, Tadayoshi; Potter, Bruce	Commun. ACM	https://doi.org/10.1145/359205.359223		31-36	"""@article{10.1145/359205.359223,
    author = ""Viega, John and Kohno, Tadayoshi and Potter, Bruce"",
    title = ""Trust (and mistrust) in secure applications"",
    year = ""2001"",
    issue_date = ""Feb. 2001"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""44"",
    number = ""2"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/359205.359223"",
    doi = ""10.1145/359205.359223"",
    journal = ""Commun. ACM"",
    month = ""February"",
    pages = ""31-36"",
    numpages = ""6""
}
"""						2	ACM		Trust (and mistrust) in secure applications	https://doi.org/10.1145/359205.359223	Association for Computing Machinery	nan; Abstract; Keywords; References; Link
62	TrustSE	The moderating role of development stage in free/open source software project performance														2						
63	TrustSE	The open source software development phenomenon: An analysis based on social network theory														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
64	TrustSE	Determinants of open source software project success: A longitudinal study														2						
65	TrustSE	From software product lines to software ecosystems	Software product line companies increasingly expand their platform outside their organizational boundaries, in effect transitioning to a software ecosystem approach. In this paper, we discuss the emerging trend of software ecosystems and provide a overview of the key concepts and implications of adopting a software ecosystem approach. We define the notion of software ecosystems and introduce a taxonomy. Finally, we explore the implications of software ecosystems to the way companies build software.		Bosch, Jan	SPLC '09: Proceedings of the 13th International Software Product Line Conference	https://doi.org/10.5555/1753235.1753251		111-119	"""@inproceedings{10.5555/1753235.1753251,
    author = ""Bosch, Jan"",
    title = ""From software product lines to software ecosystems"",
    year = ""2009"",
    publisher = ""Carnegie Mellon University"",
    address = ""USA"",
    abstract = ""Software product line companies increasingly expand their platform outside their organizational boundaries, in effect transitioning to a software ecosystem approach. In this paper, we discuss the emerging trend of software ecosystems and provide a overview of the key concepts and implications of adopting a software ecosystem approach. We define the notion of software ecosystems and introduce a taxonomy. Finally, we explore the implications of software ecosystems to the way companies build software."",
    booktitle = ""Proceedings of the 13th International Software Product Line Conference"",
    pages = ""111-119"",
    numpages = ""9"",
    location = ""San Francisco, California, USA"",
    series = ""SPLC '09""
}
"""						2	ACM		From software product lines to software ecosystems.	https://doi.org/10.5555/1753235.1753251	Carnegie Mellon University	nan; Keywords; References; Link
66	TrustSE	Open source interface politics: identity, acceptance, trust, and lobbying	A study of the Drupal open source project shows the problematic status of usability designers with respect to the larger developer community. Issues of power, trust, and identity arise and affect the way that usability recommendations are acted on or ignored. Making a straightforward case for a particular interface design can be insufficient to convince developers. Instead various additional lobbying strategies may be employed to build up support for the design.	lobbying;  open source;  politics;  usability; lobbying, open source, politics, usability	Zilouchian Moghaddam, Roshanak; Twidale, Michael; Bongen, Kora	CHI EA '11: CHI '11 Extended Abstracts on Human Factors in Computing Systems	https://doi.org/10.1145/1979742.1979835		1723-1728	"""@inproceedings{10.1145/1979742.1979835,
    author = ""Zilouchian Moghaddam, Roshanak and Twidale, Michael and Bongen, Kora"",
    title = ""Open source interface politics: identity, acceptance, trust, and lobbying"",
    year = ""2011"",
    isbn = ""9781450302685"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1979742.1979835"",
    doi = ""10.1145/1979742.1979835"",
    abstract = ""A study of the Drupal open source project shows the problematic status of usability designers with respect to the larger developer community. Issues of power, trust, and identity arise and affect the way that usability recommendations are acted on or ignored. Making a straightforward case for a particular interface design can be insufficient to convince developers. Instead various additional lobbying strategies may be employed to build up support for the design."",
    booktitle = ""CHI '11 Extended Abstracts on Human Factors in Computing Systems"",
    pages = ""1723-1728"",
    numpages = ""6"",
    keywords = ""lobbying, open source, politics, usability"",
    location = ""Vancouver, BC, Canada"",
    series = ""CHI EA '11""
}
"""						2	ACM		Open source interface politics: identity, acceptance, trust, and lobbying	https://doi.org/10.1145/1979742.1979835	Association for Computing Machinery	nan; References; Link
67	TrustSE	Multi-dimensions of Developer Trustworthiness Assessment in OSS Community	With the prosperity of the Open Source Software, various software communities are formed and they attract huge amounts of developers to participate in distributed software development. For such software development paradigm, how to evaluate the skills of the developers comprehensively and automatically is critical. However, most of the existing researches assess the developers based on the Implementation aspects, such as the artifacts they created or edited. They ignore the developers' contributions in Social collaboration aspects, such as answering questions, giving advices, making comments or creating social connections. In this paper, we propose a novel model which evaluate the individuals' skills from both Implementation and Social collaboration aspects. Our model defines four metrics from muti-dimensions, including collaboration index, technical skill, community influence and development contribution. We carry out experiments on a real-world online software community. The results show that our approach can make more comprehensive measurement than the previous work.	Communities; Software; Collaboration; Equations; Mathematical model; Educational institutions; Indexes; Developer assessment; trustworthiness; OSS community; multi-Dimensions contribution	Yu Bai; Gang Yin; Huaimin Wang	2014 IEEE 13th International Conference on Trust, Security and Privacy in Computing and Communications	https://doi.org/10.1109/TrustCom.2014.14	"1.J. D. Herbsleb, ""Global software engineering: The future of sociotechnical coordination,"" in 2007 Future of Software Engineering. IEEE Computer Society, 2007, pp. 188-198. Google Scholar; 2.N. Ducheneaut, ""Socialization in an open source software community: A socio-technical analysis,"" Computer Supported Cooperative Work (CSCW), vol. 14, no. 4, pp. 323-368, 2005. CrossRef  Google Scholar; 3.J. R. Nurse, I. Agrafiotis, S. Creese, M. Goldsmith, and K. Lamberts, ""Building confidence in information-trustworthiness metrics for decision support,"" in Trust, Security and Privacy in Computing and Communications (TrustCom), 2013 12th IEEE International Conference on. IEEE, 2013, pp. 535-543. View Article  Google Scholar; 4.R. Cheng and J. Vassileva, ""User motivation and persuasion strategy for peer-to-peer communities,"" in System Sciences, 2005. HICSS05. Proceedings of the 38th Annual Hawaii International Conference on. IEEE, 2005, pp. 193a-193a. View Article  Google Scholar; 5.Cheng R. Vassileva J. Adaptive reward mechanism for sustainable online learning community AIED 2005 152-159 Google Scholar; 6.F. M. Harper, S. X. Li, Y. Chen, and J. A. Konstan, ""Social comparisons to motivate contributions to an online community,"" in Persuasive Technology. Springer, 2007, pp. 148-159. CrossRef  Google Scholar; 7.R. Klamma, M. A. Chatti, E. Duval, H. Hummel, E. T. Hvannberg, M. Kravcik, E. Law, A. Naeve, and P. Scott, ""Social software for lifelong learning."" Journal of Educational Technology , vol. 10, no. 3, 2007. Google Scholar; 8.A. M. Rashid, K. Ling, R. D. Tassone, P. Resnick, R. Kraut, and J. Riedl, ""Motivating participation by displaying the value of contribution,"" in Proceedings of the SIGCHI conference on Human Factors in computing systems. ACM, 2006, pp. 955-958. CrossRef  Google Scholar; 9.A. J. Albrecht, ""Measuring application development productivity,"" in Proceedings of the Joint SHARE/GUIDE/IBM Application Development Symposium, vol. 10, 1979, pp. 83-92. Google Scholar; 10.S. Chulani, ""Results of delphi for the defect introduction model, submodel of the cost/quality model extension to cocomo ii,"" Technical Report, USC-CSE-97-504, 1997, Computer Science Department, University of Southern California, Center for Software Engineering, Los Angeles, CA 90089-0781, Tech. Rep., 1997. Google Scholar; 11.B. W. Boehm, ""Software engineering economics,"" 1981. Google Scholar; 12.A. Minkiewicz, ""Measuring object oriented software with predictive object points,"" PRICE Systems, LLC, 1997. Google Scholar; 13.S. A. Whitmire, ""3d function points: Scientific and real-time extensions to function points,"" in Pacific Northwest Software Quality Conference, 1992. Google Scholar; 14.T. DeMarco, Controlling software projects: Management, measurement, and estimates. Prentice Hall PTR Upper Saddle River, NJ, USA, 1986. Google Scholar; 15.A. Gray and S. Macdonell, ""Applications of fuzzy logic to software metric models for development effort estimation,"" in Fuzzy Information Processing Society, 1997. NAFIPS97., 1997 Annual Meeting of the North American. IEEE, 1997, pp. 394-399. View Article  Google Scholar; 16.L. H. Putnam and A. Fitzsimmons, ""Estimating software costs,"" Datamation, vol. 25, no. 10, p. 189, 1979. View Article  Google Scholar; 17.G. Gousios, E. Kalliamvakou, and D. Spinellis, ""Measuring developer contribution from software repository data,"" in Proceedings of the 2008 international working conference on Mining software repositories. ACM, 2008, pp. 129-132 CrossRef  Google Scholar"								2	IEEE		Multi-dimensions of Developer Trustworthiness Assessment in OSS Community	https://ieeexplore.ieee.org/document/7011236	IEEE	nan; Pages; Year; Bibtex
68	TrustSE	Theory of software reliability based on components	We present a foundational theory of software system reliability based on components. The theory describes how component developers can design and test their components to produce measurements that are later used by system designers to calculate composite system reliability -- without implementation and test of the system being designed. The theory describes how to make component measurements that are independent of operational profiles, and how to incorporate the overall system-level operational profile into the system reliability calculations. In principle, the theory resolves the central problem of assessing a component, which is: a component developer cannot know how the component will be used and so cannot certify it for an arbitrary use; but if the component buyer must certify each component before using it, component-based development loses much of its appeal. This dilemma is resolved if the component developer does the certification and provides the results in such a way that the component buyer can factor in the usage information later, without repeating the certification. Our theory addresses the basic technical problems inherent in certifying components to be released for later use in an arbitrary system.Most component research has been directed at functional specification of software components; our theory addresses the other, equally important, side of the coin: component quality.	CBSE;  COTS;  foundational theory;  reliability composition;  software components; CBSE, COTS, foundational theory, reliability composition, software components	Hamlet, Dick; Mason, Dave; Woit, Denise	ICSE '01: Proceedings of the 23rd International Conference on Software Engineering	https://doi.org/10.5555/381473.381511		361-370	"""@inproceedings{10.5555/381473.381511,
    author = ""Hamlet, Dick and Mason, Dave and Woit, Denise"",
    title = ""Theory of software reliability based on components"",
    year = ""2001"",
    isbn = ""0769510507"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    abstract = ""We present a foundational theory of software system reliability based on components. The theory describes how component developers can design and test their components to produce measurements that are later used by system designers to calculate composite system reliability -- without implementation and test of the system being designed. The theory describes how to make component measurements that are independent of operational profiles, and how to incorporate the overall system-level operational profile into the system reliability calculations. In principle, the theory resolves the central problem of assessing a component, which is: a component developer cannot know how the component will be used and so cannot certify it for an arbitrary use; but if the component buyer must certify each component before using it, component-based development loses much of its appeal. This dilemma is resolved if the component developer does the certification and provides the results in such a way that the component buyer can factor in the usage information later, without repeating the certification. Our theory addresses the basic technical problems inherent in certifying components to be released for later use in an arbitrary system.Most component research has been directed at functional specification of software components; our theory addresses the other, equally important, side of the coin: component quality."",
    booktitle = ""Proceedings of the 23rd International Conference on Software Engineering"",
    pages = ""361-370"",
    numpages = ""10"",
    keywords = ""CBSE, COTS, foundational theory, reliability composition, software components"",
    location = ""Toronto, Ontario, Canada"",
    series = ""ICSE '01""
}
"""						2	ACM		Theory of software reliability based on components	https://doi.org/10.5555/381473.381511	IEEE Computer Society	nan; References; Link
69	TrustSE	An empirical study of developer quality														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
70	TrustSE	Sustainability of Open Source software communities beyond a fork: How and why has the LibreOffice project evolved?	Many organisations are dependent upon long-term sustainable software systems and associated communities. In this paper we consider long-term sustainability of Open Source software communities in Open Source software projects involving a fork. There is currently a lack of studies in the literature that address how specific Open Source software communities are affected by a fork. We report from a study aiming to investigate the developer community around the LibreOffice project, which is a fork from the OpenOffice.org project. In so doing, our analysis also covers the OpenOffice.org project and the related Apache OpenOffice project. The results strongly suggest a long-term sustainable LibreOffice community and that there are no signs of stagnation in the LibreOffice project 33 months after the fork. Our analysis provides details on developer communities for the LibreOffice and Apache OpenOffice projects and specifically concerning how they have evolved from the OpenOffice.org community with respect to project activity, developer commitment, and retention of committers over time. Further, we present results from an analysis of first hand experiences from contributors in the LibreOffice community. Findings from our analysis show that Open Source software communities can outlive Open Source software projects and that LibreOffice is perceived by its community as supportive, diversified, and independent. The study contributes new insights concerning challenges related to long-term sustainability of Open Source software communities.	Open Source software; Fork; Community evolution; Open Source software;  Fork;  Community evolution	Gamalielsson, Jonas; Lundell, Bjorn	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2013.11.1077		128-145	"""@article{WOS:000331432600011,
    Author = ""Gamalielsson, Jonas and Lundell, Bjorn"",
    Title = ""Sustainability of Open Source software communities beyond a fork: How and why has the LibreOffice project evolved?"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2014"",
    Volume = ""89"",
    Number = ""SI"",
    Pages = ""128-145"",
    Month = ""MAR"",
    Abstract = ""Many organisations are dependent upon long-term sustainable software systems and associated communities. In this paper we consider long-term sustainability of Open Source software communities in Open Source software projects involving a fork. There is currently a lack of studies in the literature that address how specific Open Source software communities are affected by a fork. We report from a study aiming to investigate the developer community around the LibreOffice project, which is a fork from the OpenOffice.org project. In so doing, our analysis also covers the OpenOffice.org project and the related Apache OpenOffice project. The results strongly suggest a long-term sustainable LibreOffice community and that there are no signs of stagnation in the LibreOffice project 33 months after the fork. Our analysis provides details on developer communities for the LibreOffice and Apache OpenOffice projects and specifically concerning how they have evolved from the OpenOffice.org community with respect to project activity, developer commitment, and retention of committers over time. Further, we present results from an analysis of first hand experiences from contributors in the LibreOffice community. Findings from our analysis show that Open Source software communities can outlive Open Source software projects and that LibreOffice is perceived by its community as supportive, diversified, and independent. The study contributes new insights concerning challenges related to long-term sustainability of Open Source software communities. (C) 2013 The Authors. Published by Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Gamalielsson, J (Corresponding Author), Univ Skovde, POB 408, SE-54128 Skovde, Sweden. Gamalielsson, Jonas; Lundell, Bjorn, Univ Skovde, SE-54128 Skovde, Sweden."",
    DOI = ""10.1016/j.jss.2013.11.1077"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Open Source software; Fork; Community evolution"",
    Keywords-Plus = ""NETWORK ANALYSIS TECHNIQUES; LINUX KERNEL; SUCCESS; MOTIVATIONS; MODEL"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""jonas.gamalielsson@his.se bjorn.lundell@his.se"",
    Affiliations = ""University of Skovde"",
    Number-of-Cited-References = ""82"",
    Times-Cited = ""76"",
    Usage-Count-Last-180-days = ""4"",
    Usage-Count-Since-2013 = ""28"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""AA9SG"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000331432600011"",
    OA = ""hybrid"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Sustainability of Open Source software communities beyond a fork: How and why has the LibreOffice project evolved?	https://www.webofscience.com/wos/woscc/full-record/WOS:000331432600011	ELSEVIER SCIENCE INC	nan; References
71	TrustSE	Understanding sustained participation in open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
72	TrustSE	Mission-critical development with open source software: lessons learned	Using open source software components in a mission-critical project not only can keep the project within budget but can also result in a more robust and flexible tool. When considering an open source component, prospective users should evaluate the project for several characteristics: maturity, longevity, and flexibility. For greatest benefit, the users should also build and maintain a strong working relationship with the component's developers. We compiled our experiences developing SAP into a developer's guide for those considering using open source in their mission-critical application. In addition to discussing how to evaluate open source components suitability for inclusion in a mission-critical application, the guide suggests strategies for working with open source development teams.	Mission critical systems; Open source software; Instruments; Mars; Propulsion; Laboratories; Data analysis; Downlink; Data visualization; Planets; Open-source; Open-source Software; Development Team; Software Components; Jet Propulsion Laboratory; Suitability For Inclusion; Mission-critical Applications; Source Code; Mailing Lists; Interesting Way; Technology Program; Open-source Projects; Data Synchronization; Unit Tests; Piece Of Software; Test Plan; Open-source Community; Bug Reports; Commercial Components	J.S. Norris	IEEE Software	https://doi.org/10.1109/MS.2004.1259211	"1.P.G. Backes, ""The Science Activity Planner for the Mars Exploration Rover Mission: FIDO Field Test Results"", Proc. 2003 IEEE Aerospace Conf., vol. 8, pp. 3525-3540, 2003. View Article  Google Scholar; 2.M. Morisio, ""Investigating and Improving a COTS-Based Software Development Process"", Proc. 22nd Int'l Conf. Software Eng., 2000. View Article  Google Scholar; 3.P. Moran, Developing an Open Source Option for Nasa Software, Apr. 2003. Google Scholar; 4.""Nearly Two Million Active Sites Running FreeBSD"", Netcraft ews, July 2003. Google Scholar; 5.S. Reier, ""Five Years Later Greenspan's 'Irrational Exuberance' Alert Rings True"", Int'l Herald Tribune, Dec. 2001. Google Scholar"	42- 49							2	IEEE		Mission-critical development with open source software: Lessons learned	https://ieeexplore.ieee.org/document/1259211	IEEE	nan; Year; Bibtex
73	TrustSE	Developer Motivations, Social Aspects and Challenges of Open Source Software.														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
74	TrustSE	Social coding in GitHub: transparency and collaboration in an open software repository	Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral GitHub users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in GitHub, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation.	awareness;  collaboration;  coordination;  open source software development;  social computing;  transparency; awareness, collaboration, coordination, open source software development, social computing, transparency	Dabbish, Laura; Stuart, Colleen; Tsay, Jason; Herbsleb, Jim	CSCW '12: Proceedings of the ACM 2012 conference on Computer Supported Cooperative Work	https://doi.org/10.1145/2145204.2145396		1277-1286	"""@inproceedings{10.1145/2145204.2145396,
    author = ""Dabbish, Laura and Stuart, Colleen and Tsay, Jason and Herbsleb, Jim"",
    title = ""Social coding in GitHub: transparency and collaboration in an open software repository"",
    year = ""2012"",
    isbn = ""9781450310864"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2145204.2145396"",
    doi = ""10.1145/2145204.2145396"",
    abstract = ""Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral GitHub users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in GitHub, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation."",
    booktitle = ""Proceedings of the ACM 2012 Conference on Computer Supported Cooperative Work"",
    pages = ""1277-1286"",
    numpages = ""10"",
    keywords = ""awareness, collaboration, coordination, open source software development, social computing, transparency"",
    location = ""Seattle, Washington, USA"",
    series = ""CSCW '12""
}
"""						2	ACM		Social coding in GitHub: transparency and collaboration in an open software repository	https://doi.org/10.1145/2145204.2145396	Association for Computing Machinery	nan; References; Link
75	TrustSE	Techniques for trusted software engineering			Devanbu, Premkumar T.; Fong, Philip W-L; Stubblebine, Stuart G.	ICSE '98: Proceedings of the 20th international conference on Software engineering	https://doi.org/10.5555/302163.302176		126-135	"""@inproceedings{10.5555/302163.302176,
    author = ""Devanbu, Premkumar T. and Fong, Philip W-L and Stubblebine, Stuart G."",
    title = ""Techniques for trusted software engineering"",
    year = ""1998"",
    isbn = ""0818683686"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    booktitle = ""Proceedings of the 20th International Conference on Software Engineering"",
    pages = ""126-135"",
    numpages = ""10"",
    location = ""Kyoto, Japan"",
    series = ""ICSE '98""
}
"""						2	ACM		Techniques for trusted software engineering	https://doi.org/10.5555/302163.302176	IEEE Computer Society	nan; Abstract; Keywords; References; Link
76	TrustSE	Understanding the requirements for developing open source software systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
77	TrustSE	Trust case: Justifying trust in an IT solution														2						
78	TrustSE	Factors affecting the success of Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
79	TrustSE	The promise of research on open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
80	TrustSE	Information Needs in Collocated Software Development Teams	Previous research has documented the fragmented nature of software development work. To explain this in more detail, we analyzed software developers' day-to-day information needs. We observed seventeen developers at a large software company and transcribed their activities in 90-minute sessions. We analyzed these logs for the information that developers sought, the sources that they used, and the situations that prevented information from being acquired. We identified twenty-one information types and cataloged the outcome and source when each type of information was sought. The most frequently sought information included awareness about artifacts and coworkers. The most often deferred searches included knowledge about design and program behavior, such as why code was written a particular way, what a program was supposed to do, and the cause of a program state. Developers often had to defer tasks because the only source of knowledge was unavailable coworkers.		Ko, Andrew J.; DeLine, Robert; Venolia, Gina	ICSE '07: Proceedings of the 29th international conference on Software Engineering	https://doi.org/10.1109/ICSE.2007.45		344-353	"""@inproceedings{10.1109/ICSE.2007.45,
    author = ""Ko, Andrew J. and DeLine, Robert and Venolia, Gina"",
    title = ""Information Needs in Collocated Software Development Teams"",
    year = ""2007"",
    isbn = ""0769528287"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    url = ""https://doi.org/10.1109/ICSE.2007.45"",
    doi = ""10.1109/ICSE.2007.45"",
    abstract = ""Previous research has documented the fragmented nature of software development work. To explain this in more detail, we analyzed software developers' day-to-day information needs. We observed seventeen developers at a large software company and transcribed their activities in 90-minute sessions. We analyzed these logs for the information that developers sought, the sources that they used, and the situations that prevented information from being acquired. We identified twenty-one information types and cataloged the outcome and source when each type of information was sought. The most frequently sought information included awareness about artifacts and coworkers. The most often deferred searches included knowledge about design and program behavior, such as why code was written a particular way, what a program was supposed to do, and the cause of a program state. Developers often had to defer tasks because the only source of knowledge was unavailable coworkers."",
    booktitle = ""Proceedings of the 29th International Conference on Software Engineering"",
    pages = ""344-353"",
    numpages = ""10"",
    series = ""ICSE '07""
}
"""						2	ACM		Information needs in collocated software development teams	https://doi.org/10.1109/ICSE.2007.45	IEEE Computer Society	nan; Keywords; References; Link
81	TrustSE	Governance of open source software: state of the art														2						
82	TrustSE	The Effect of License Type and Status Hierarchy on Developer Motivation in Open Source Communities.														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
83	TrustSE	Open-source versus proprietary software: Is one more reliable and secure than the other?														2						
84	TrustSE	The secret life of bugs: Going past the errors and omissions in software repositories	Every bug has a story behind it. The people that discover and resolve it need to coordinate, to get information from documents, tools, or other people, and to navigate through issues of accountability, ownership, and organizational structure. This paper reports on a field study of coordination activities around bug fixing that used a combination of case study research and a survey of software professionals. Results show that the histories of even simple bugs are strongly dependent on social, organizational, and technical knowledge that cannot be solely extracted through automation of electronic repositories, and that such automation provides incomplete and often erroneous accounts of coordination. The paper uses rich bug histories and survey results to identify common bug fixing coordination patterns and to provide implications for tool designers and researchers of coordination in software development.		Aranda, Jorge; Venolia, Gina	ICSE '09: Proceedings of the 31st International Conference on Software Engineering	https://doi.org/10.1109/ICSE.2009.5070530		298-308	"""@inproceedings{10.1109/ICSE.2009.5070530,
    author = ""Aranda, Jorge and Venolia, Gina"",
    title = ""The secret life of bugs: Going past the errors and omissions in software repositories"",
    year = ""2009"",
    isbn = ""9781424434534"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    url = ""https://doi.org/10.1109/ICSE.2009.5070530"",
    doi = ""10.1109/ICSE.2009.5070530"",
    abstract = ""Every bug has a story behind it. The people that discover and resolve it need to coordinate, to get information from documents, tools, or other people, and to navigate through issues of accountability, ownership, and organizational structure. This paper reports on a field study of coordination activities around bug fixing that used a combination of case study research and a survey of software professionals. Results show that the histories of even simple bugs are strongly dependent on social, organizational, and technical knowledge that cannot be solely extracted through automation of electronic repositories, and that such automation provides incomplete and often erroneous accounts of coordination. The paper uses rich bug histories and survey results to identify common bug fixing coordination patterns and to provide implications for tool designers and researchers of coordination in software development."",
    booktitle = ""Proceedings of the 31st International Conference on Software Engineering"",
    pages = ""298-308"",
    numpages = ""11"",
    series = ""ICSE '09""
}
"""						2	ACM		The secret life of bugs: Going past the errors and omissions in software repositories	https://doi.org/10.1109/ICSE.2009.5070530	IEEE Computer Society	nan; Keywords; References; Link
85	TrustSE	Scalable architectural support for trusted software	We present Bastion, a new hardware-software architecture for protecting security-critical software modules in an untrusted software stack. Our architecture is composed of enhanced microprocessor hardware and enhanced hypervisor software. Each trusted software module is provided with a secure, fine-grained memory compartment and its own secure persistent storage area. Bastion is the first architecture to provide direct hardware protection of the hypervisor from both software and physical attacks, before employing the hypervisor to provide the same protection to security-critical OS and application modules. Our implementation demonstrates the feasibility of bypassing an untrusted commodity OS to provide application security and shows better security with higher performance when compared to the Trusted Platform Module (TPM), the current industry state-of-the-art security chip. We provide a proof-of-concept implementation on the OpenSPARC platform.	Hardware; Protection; Application software; Virtual machine monitors; Computer architecture; Virtual machining; Information security; Operating systems; Scalability; Microprocessors; Scalable; Storage Area; Software Module; Physical Attacks; Memory Compartment; Software Stack; Operating System; Data Privacy; Virtual Machines; Denial Of Service; Memory Space; Threat Model; Critical Modulator; Replay Attacks; Flash Memory; Secure Storage; Physical Memory; Execution Environment; Cryptographic Hash; L2 Cache; Passive Attacks; Merkle Tree; On-chip Memory; Code Space; Processing Hardware; Storage Capability; Side-channel; Root Of The Tree; Encryption Key	David Champagne; Ruby B. Lee	HPCA - 16 2010 The Sixteenth International Symposium on High-Performance Computer Architecture	https://doi.org/10.1109/HPCA.2010.5416657	"1.K. Adams et al., ""A comparison of software and hardware techniques for x 86 virtualization"", Proc. of ASPLOS06, Oct. 2006. Google Scholar; 2.""Industry Leading Virtualization Platform Efficiency"", 2008. Google Scholar; 3.""AMD-V Nested Paging"", AMD Whitepaper Revision 1.0, July 2008. Google Scholar; 4.M.J. Anderson et al., ""Towards Trustworthy Virtualisation Environments"", Technical Report HPL-2007-69 Hewlett Packard Development Company L.P., April 2007. Google Scholar; 5.T. Alves et al., ""Trustzone: Integrated hardware and software security"", ARM white paper, July 2004. Google Scholar; 6.P. Barham et al., ""Xen and the Art of Virtualization"", Proc. of Symposium on OS Principles (SOSP), Oct 2003. CrossRef  Google Scholar; 7.S. Bratus et al., ""TOCTOU Traps and Trusted Computing"", Proc. of the TRUST 2008 Conference, March 2008. CrossRef  Google Scholar; 8.D. Champagne et al., ""The Reduced Address Space (RAS) for Application Memory Authentication"", Proc. of the 11th ISC08, Sept. 2008. CrossRef  Google Scholar; 9.X. Chen et al., ""Overshadow: A Virtualization-Based Approach to Retrofitting Protection in Commodity Operating Systems"", Proc. of ASPLOS08, March 2008. CrossRef  Google Scholar; 10.Y. Chen and R.B. Lee, ""Hardware-Assisted Application Level Access Control"", Proc. of Information Security Conference, Sep. 2009. CrossRef  Google Scholar; 11.P. Dewan et al., ""A Hypervisor-Based System for Protecting Software Runtime Memory and Persistent Storage"", SSSS08, April 2008. Google Scholar; 12.J. Dwoskin and R.B. Lee, ""Hardware-rooted Trust for Secure Key Management and Transient Trust"", Proc. of ACM CCS07, Oct. 2007. Google Scholar; 13.J.G. Dyer et al., ""Building the IBM 4758 Secure Coprocessor Computer"", vol. 34n, no. 10, pp. 57-66, October 2001. Google Scholar; 14.P. England et al., ""A Trusted Open Platform Computer"", vol. 36n, no. 7, pp. 55-62, July 2003. Google Scholar; 15.T. Garfinkel et al., ""Terra: A virtual machine-based platform for trusted computing"", Proc. of SOSP, Oct. 2003. CrossRef  Google Scholar; 16.B. Gassend et al., ""Caches and Merkle Trees for Efficient Memory Authentication"", Proc. of HPCA 2003, Feb. 2003. Google Scholar; 17.J. A. Halderman et al., ""Lest We Remember: Cold Boot Attacks on Encryption Keys"", Proc. of USENIX Security, July/August 2008. Google Scholar; 18.""Intel Virtualization Technology: Hardware Support for Efficient Virtualization"", Intel Technology Journal, Aug. 2006. Google Scholar; 19.B. Kauer, ""OSLO: Improving the Security of Trusted Computing"", Proc. of USENIX Security, Aug. 2007. Google Scholar; 20.P. Kwan et al., ""Vault: Practical Uses of Virtual Machines for Protection of Sensitive User Data"", Proc. of ISPEC 2007, May 2007. CrossRef  Google Scholar; 21.J. Laudon, ""UltraSPARC Tl: Architecture and Physical Design of a 32-threaded General Purpose CPU"", Proc. of IEEE ISSCC, Feb. 2006. Google Scholar; 22.R. B. Lee et al., ""Architecture for Protecting Critical Secrets in Microprocessors"", Proc. of ISCA 2005, June 2005. View Article  Google Scholar; 23.D. Lie et al., ""Architectural Support for Copy and Tamper Resistant Software"", Proc. of ASPLOS IX, 2000. CrossRef  Google Scholar; 24.P. Loscocco et al., ""Integrating Flexible Support for Security Policies into the Linux Operating System"", Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference, June 2001. Google Scholar; 25.J. Marchesini et al., ""Open-Source Applications of TCPA Hardware"", Proc. of ACSAC04, December 2004. View Article  Google Scholar; 26.J.M. McCune et al., ""Flicker: An Execution Infrastructure for TCB Minimization"", Proc. of EuroSys2008, March 2008. CrossRef  Google Scholar; 27.A. Menon et al., ""Diagnosing performance overheads in the Xen virtual machine environment"", Proc. of the 1st ACM/USENIX international conference on Virtual execution environments, June 11-12 2005. CrossRef  Google Scholar; 28.R.C. Merkle, ""Protocols for Public Key Cryptosystems"", IEEE Symposium on Security and Privacy, 1980. View Article  Google Scholar; 29.2008.; 30.B. Rogers et al., ""Using Address Independent Seed Encryption and Bonsai Merkle Trees to Make Secure Processors OS- and Performance-Friendly"", Proc. of Intl Symp. on Microarchitecture (MICR0 2007), Dec. 2007. View Article  Google Scholar"								2	IEEE		Scalable architectural support for trusted software	https://ieeexplore.ieee.org/document/5416657	IEEE	nan; Pages; Year; Bibtex
86	TrustSE	Software development governance and its concerns	In this paper, we start with a discussion of Software Development Governance (SDG), and clarify its relationships to management and process. We discuss how these organizational components are related and present our view on SDG and its concerns. Throughout the paper, we use the Linux open source development project where we show how SDG is used to achieve productive development in an environment which is often considered to have anarchic characteristics.	management;  software development governance;  software development organizations;  software processes; management, software development governance, software development organizations, software processes	Chulani, Sunita; Williams, Clay; Yaeli, Avi	SDG '08: Proceedings of the 1st international workshop on Software development governance	https://doi.org/10.1145/1370720.1370723		3-6	"""@inproceedings{10.1145/1370720.1370723,
    author = ""Chulani, Sunita and Williams, Clay and Yaeli, Avi"",
    title = ""Software development governance and its concerns"",
    year = ""2008"",
    isbn = ""9781605580357"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1370720.1370723"",
    doi = ""10.1145/1370720.1370723"",
    abstract = ""In this paper, we start with a discussion of Software Development Governance (SDG), and clarify its relationships to management and process. We discuss how these organizational components are related and present our view on SDG and its concerns. Throughout the paper, we use the Linux open source development project where we show how SDG is used to achieve productive development in an environment which is often considered to have anarchic characteristics."",
    booktitle = ""Proceedings of the 1st International Workshop on Software Development Governance"",
    pages = ""3-6"",
    numpages = ""4"",
    keywords = ""management, software development governance, software development organizations, software processes"",
    location = ""Leipzig, Germany"",
    series = ""SDG '08""
}
"""						2	ACM		Software development governance and its concerns	https://doi.org/10.1145/1370720.1370723	Association for Computing Machinery	nan; References; Link
87	TrustSE	Technology, humanness, and trust: Rethinking trust in technology														2						
88	TrustSE	A direct path to dependable software	Who could fault an approach that offers greater credibility at reduced cost?		Jackson, Daniel	Commun. ACM	https://doi.org/10.1145/1498765.1498787		78-88	"""@article{10.1145/1498765.1498787,
    author = ""Jackson, Daniel"",
    title = ""A direct path to dependable software"",
    year = ""2009"",
    issue_date = ""April 2009"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""52"",
    number = ""4"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1498765.1498787"",
    doi = ""10.1145/1498765.1498787"",
    abstract = ""Who could fault an approach that offers greater credibility at reduced cost?"",
    journal = ""Commun. ACM"",
    month = ""April"",
    pages = ""78-88"",
    numpages = ""11""
}
"""						2	ACM		A direct path to dependable software	https://doi.org/10.1145/1498765.1498787	Association for Computing Machinery	nan; Keywords; References; Link
89	TrustSE	An exploratory study of factors influencing the level of vitality and popularity of open source projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
90	TrustSE	The institutions of open source software: Examining the Debian community	Free and open source software activities involve and, perhaps, evolve institutions (rules, norms and standards) that influence the formation, growth, and demise of communities. Community institutions are attractors for some individuals while discouraging other individuals from entering or continuing to participate. Their suitability may change as a community grows. This paper examines the institutions of the Debian community where issues of community identity, distribution of authority, and decentralisation have facilitated growth and development. These same institutions have also resulted in conflicts regarding community purposes and the quality and delivery of the community's output. We examine the institutional redesign undertaken to address these problems and derive implications for F/LOS communities and companies.	Open source software; Debian; Institutions; Open source software;  Debian;  Institutions	Mateos-Garcia, Juan; Steinmueller, W. Edward	INFORMATION ECONOMICS AND POLICY	https://doi.org/10.1016/j.infoecopol.2008.06.001		333-344	"""@article{WOS:000261859400005,
    Author = ""Mateos-Garcia, Juan and Steinmueller, W. Edward"",
    Title = ""The institutions of open source software: Examining the Debian community"",
    Journal = ""INFORMATION ECONOMICS AND POLICY"",
    Year = ""2008"",
    Volume = ""20"",
    Number = ""4, SI"",
    Pages = ""333-344"",
    Month = ""DEC"",
    Abstract = ""Free and open source software activities involve and, perhaps, evolve institutions (rules, norms and standards) that influence the formation, growth, and demise of communities. Community institutions are attractors for some individuals while discouraging other individuals from entering or continuing to participate. Their suitability may change as a community grows. This paper examines the institutions of the Debian community where issues of community identity, distribution of authority, and decentralisation have facilitated growth and development. These same institutions have also resulted in conflicts regarding community purposes and the quality and delivery of the community's output. We examine the institutional redesign undertaken to address these problems and derive implications for F/LOS communities and companies. (C) 2008 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Mateos-Garcia, J (Corresponding Author), Univ Sussex, Brighton Univ Freeman Ctr, CENTRIM, Falmer Brighton BN1 9QE, E Sussex, England. Mateos-Garcia, Juan, Univ Sussex, Brighton Univ Freeman Ctr, CENTRIM, Falmer Brighton BN1 9QE, E Sussex, England. Steinmueller, W. Edward, Univ Sussex, Freeman Ctr, SPRU Sci \\& Technol Policy Res, Falmer Brighton BN1 9QE, E Sussex, England."",
    DOI = ""10.1016/j.infoecopol.2008.06.001"",
    ISSN = ""0167-6245"",
    EISSN = ""1873-5975"",
    Keywords = ""Open source software; Debian; Institutions"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Economics"",
    Author-Email = ""J.Mateos-Garcia@brighton.ac.uk w.e.steinmueller@sussex.ac.uk"",
    Affiliations = ""University of Sussex; University of Sussex"",
    Number-of-Cited-References = ""35"",
    Times-Cited = ""36"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""18"",
    Journal-ISO = ""Inf. Econ. Policy"",
    Doc-Delivery-Number = ""386CH"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000261859400005"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		The institutions of open source software: Examining the Debian community	https://www.webofscience.com/wos/woscc/full-record/WOS:000261859400005	ELSEVIER SCIENCE BV	nan; References
91	TrustSE	Technology choice and its performance: Towards a sociology of software package procurement														2						
92	TrustSE	Global software and its provenance: Generification work in the production of organizational software packages	This paper addresses the seemingly implausible project of establishing a `generic' organizational information system. This is an apparent contradiction: on the one hand, we are told of the diversity of specific organizational contexts and on the other, we often find the same standardized software solutions being applied across those settings. How do generic software packages work in so many different contexts? Science and Technology Studies provides contrasting accounts of how this contradiction is resolved: either stressing the unwanted organizational change that standardized systems may bring; or, alternatively, insisting these technologies can only be made to work through processes of `localization'. We argue that the focus on specificity versus localization of application contexts draws attention away from enquiring into the origins and characteristics of generic solutions. Through comparing the design and evolution of two software packages we shift the debate from understanding how technologies are made to work within particular settings to how they are built to work across a diverse range of organizational contexts. Our question is `How do software packages achieve the mobility that allows them to bridge the heterogeneity within organizations and between organizations in different sectors and cultures?' We describe a set of revealed strategies through which suppliers produce software that embodies characteristics common across many users; what we term generification work. One aspect of this process of generification is the configuring of users within `managed communities', but it also includes `smoothing' the contents of the package and, at times, reverting to `social authority'. Our argument is that generic systems do exist but that they are brought into being through an intricately managed process, involving the broader extension of a particularized software application and, at the same time, the management of the user community attached to that solution.	generification; localization; particularity; sameness; software packages; generification;  localization;  particularity;  sameness;  software packages	Pollock, Neil; Williams, Robin; D'Adderio, Luciana	SOCIAL STUDIES OF SCIENCE	https://doi.org/10.1177/0306312706066022		254-280	"""@article{WOS:000245922800004,
    Author = ""Pollock, Neil and Williams, Robin and D'Adderio, Luciana"",
    Title = ""Global software and its provenance: Generification work in the production of organizational software packages"",
    Journal = ""SOCIAL STUDIES OF SCIENCE"",
    Year = ""2007"",
    Volume = ""37"",
    Number = ""2"",
    Pages = ""254-280"",
    Month = ""APR"",
    Abstract = ""This paper addresses the seemingly implausible project of establishing a `generic' organizational information system. This is an apparent contradiction: on the one hand, we are told of the diversity of specific organizational contexts and on the other, we often find the same standardized software solutions being applied across those settings. How do generic software packages work in so many different contexts? Science and Technology Studies provides contrasting accounts of how this contradiction is resolved: either stressing the unwanted organizational change that standardized systems may bring; or, alternatively, insisting these technologies can only be made to work through processes of `localization'. We argue that the focus on specificity versus localization of application contexts draws attention away from enquiring into the origins and characteristics of generic solutions. Through comparing the design and evolution of two software packages we shift the debate from understanding how technologies are made to work within particular settings to how they are built to work across a diverse range of organizational contexts. Our question is `How do software packages achieve the mobility that allows them to bridge the heterogeneity within organizations and between organizations in different sectors and cultures?' We describe a set of revealed strategies through which suppliers produce software that embodies characteristics common across many users; what we term generification work. One aspect of this process of generification is the configuring of users within `managed communities', but it also includes `smoothing' the contents of the package and, at times, reverting to `social authority'. Our argument is that generic systems do exist but that they are brought into being through an intricately managed process, involving the broader extension of a particularized software application and, at the same time, the management of the user community attached to that solution."",
    Publisher = ""SAGE PUBLICATIONS LTD"",
    Address = ""1 OLIVERS YARD, 55 CITY ROAD, LONDON EC1Y 1SP, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Pollock, N (Corresponding Author), Univ Edinburgh, Sch Management, George Sq, Edinburgh EH8 9JY, Midlothian, Scotland. Univ Edinburgh, Sch Management, Edinburgh EH8 9JY, Midlothian, Scotland. Univ Edinburgh, ESRC Innogen Ctr, Edinburgh EH1 1LZ, Midlothian, Scotland. Univ Edinburgh, Res Ctr Social Sci, Edinburgh EH1 1L2, Midlothian, Scotland."",
    DOI = ""10.1177/0306312706066022"",
    ISSN = ""0306-3127"",
    Keywords = ""generification; localization; particularity; sameness; software packages"",
    Keywords-Plus = ""SYSTEMS; UNIVERSALITY; TECHNOLOGY"",
    Research-Areas = ""History \\& Philosophy of Science"",
    Web-of-Science-Categories = ""History \\& Philosophy Of Science"",
    Author-Email = ""neil.pollock@ed.ac.uk r.williams@ed.ac.uk luciana@inf.ed.ac.uk"",
    Affiliations = ""University of Edinburgh; University of Edinburgh; UK Research \\& Innovation (UKRI); Economic \\& Social Research Council (ESRC); University of Edinburgh"",
    Number-of-Cited-References = ""52"",
    Times-Cited = ""81"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""6"",
    Journal-ISO = ""Soc. Stud. Sci."",
    Doc-Delivery-Number = ""160ED"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Arts \&amp; Humanities Citation Index (A\&amp;HCI)"",
    Unique-ID = ""WOS:000245922800004"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Global software and its provenance: generification work in the production of organizational software packages	https://www.webofscience.com/wos/woscc/full-record/WOS:000245922800004	SAGE PUBLICATIONS LTD	nan; References
93	TrustSE	Software preannouncements and their impact on customers' perceptions and vendor reputation	Software preannouncements are often called ``vaporware{''} (systems or features announced long before a ship date). The challenge confronting software vendors and consumers is understanding the balance between the need to inform the market and the negative consequences of unfulfilled promises. Based on signaling theory from marketing science and research, this study looks at the perceived importance of software preannouncement factors on customers, of unfulfilled promises and unreliable software on a company's reputation, and whether vendor dependence changes these perceptions. Database administrators were surveyed on the perceptions of their database software vendor. Fulfilling commitments to software functionality was more strongly correlated with vendor reputation than on-time delivery of the software. Customer dependence on the vendor was not correlated with perceptions of vendor reputation and credibility. Thus, unlike other industries, it seems that vendors can use software delivery time preannouncements for competitive purposes with minimal concern for the impact on customers, provided the software ultimately delivers the features and functionality promised and is largely free of errors.	corporate reputation; signaling; software preannouncements; vaporware; corporate reputation;  signaling;  software preannouncements;  vaporware	Hoxmeier, JA	JOURNAL OF MANAGEMENT INFORMATION SYSTEMS	https://www.webofscience.com/wos/woscc/full-record/WOS:000088450900006		115-139	"""@article{WOS:000088450900006,
    Author = ""Hoxmeier, JA"",
    Title = ""Software preannouncements and their impact on customers' perceptions and vendor reputation"",
    Journal = ""JOURNAL OF MANAGEMENT INFORMATION SYSTEMS"",
    Year = ""2000"",
    Volume = ""17"",
    Number = ""1"",
    Pages = ""115-139"",
    Month = ""SUM"",
    Abstract = ""Software preannouncements are often called ``vaporware{''} (systems or features announced long before a ship date). The challenge confronting software vendors and consumers is understanding the balance between the need to inform the market and the negative consequences of unfulfilled promises. Based on signaling theory from marketing science and research, this study looks at the perceived importance of software preannouncement factors on customers, of unfulfilled promises and unreliable software on a company's reputation, and whether vendor dependence changes these perceptions. Database administrators were surveyed on the perceptions of their database software vendor. Fulfilling commitments to software functionality was more strongly correlated with vendor reputation than on-time delivery of the software. Customer dependence on the vendor was not correlated with perceptions of vendor reputation and credibility. Thus, unlike other industries, it seems that vendors can use software delivery time preannouncements for competitive purposes with minimal concern for the impact on customers, provided the software ultimately delivers the features and functionality promised and is largely free of errors."",
    Publisher = ""ROUTLEDGE JOURNALS, TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OX14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Colorado State Univ, Ft Collins, CO 80523 USA. Colorado State Univ, Ft Collins, CO 80523 USA."",
    ISSN = ""0742-1222"",
    EISSN = ""1557-928X"",
    Keywords = ""corporate reputation; signaling; software preannouncements; vaporware"",
    Keywords-Plus = ""PRODUCT QUALITY; CORPORATE-STRATEGY; SIGNALING GAMES; EQUILIBRIUM; SELECTION"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Affiliations = ""Colorado State University"",
    Number-of-Cited-References = ""69"",
    Times-Cited = ""26"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""22"",
    Journal-ISO = ""J. Manage. Inform. Syst."",
    Doc-Delivery-Number = ""338YM"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000088450900006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Software preannouncements and their impact on customers' perceptions and vendor reputation	https://www.webofscience.com/wos/woscc/full-record/WOS:000088450900006	ROUTLEDGE JOURNALS, TAYLOR \& FRANCIS LTD	nan; References
94	TrustSE	Packaged software: implications of the differences from custom approaches to software development	This paper contributes to the literature on software development in two ways. First, by discussing the packaged software domain relative to the more commonly studied custom information systems (IS) domain. Second, this paper presents our speculations on the implications of these differences between packaged and custom IS development. Regarding the first issue, while the two domains share many commonalities, the differences are also important to understand. To make this clear we discuss the differences at four levels: industry forces, approaches to software development, work culture and development team efforts. At each level, data from three case studies are used to illustrate the differences between the two domains. To develop our speculations, we contend that the differences between packaged software and the traditional, custom, approach to information systems development will be profound for five stakeholder groups: software development organizations, software development teams, software developers, software consumers and for researchers interested in software development.		Sawyer, S	EUROPEAN JOURNAL OF INFORMATION SYSTEMS	https://doi.org/10.1057/palgrave.ejis.3000345		47-58	"""@article{WOS:000086525900006,
    Author = ""Sawyer, S"",
    Title = ""Packaged software: implications of the differences from custom approaches to software development"",
    Journal = ""EUROPEAN JOURNAL OF INFORMATION SYSTEMS"",
    Year = ""2000"",
    Volume = ""9"",
    Number = ""1"",
    Pages = ""47-58"",
    Month = ""MAR"",
    Abstract = ""This paper contributes to the literature on software development in two ways. First, by discussing the packaged software domain relative to the more commonly studied custom information systems (IS) domain. Second, this paper presents our speculations on the implications of these differences between packaged and custom IS development. Regarding the first issue, while the two domains share many commonalities, the differences are also important to understand. To make this clear we discuss the differences at four levels: industry forces, approaches to software development, work culture and development team efforts. At each level, data from three case studies are used to illustrate the differences between the two domains. To develop our speculations, we contend that the differences between packaged software and the traditional, custom, approach to information systems development will be profound for five stakeholder groups: software development organizations, software development teams, software developers, software consumers and for researchers interested in software development."",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Penn State Univ, Sch Informat Sci \\& Technol, 513 Rider 1 Bldg, University Pk, PA 16801 USA. Penn State Univ, Sch Informat Sci \\& Technol, University Pk, PA 16801 USA."",
    DOI = ""10.1057/palgrave.ejis.3000345"",
    ISSN = ""0960-085X"",
    EISSN = ""1476-9344"",
    Keywords-Plus = ""COTS SOFTWARE; IMPLEMENTATION; SYSTEMS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Affiliations = ""Pennsylvania Commonwealth System of Higher Education (PCSHE); Pennsylvania State University; Pennsylvania State University - University Park"",
    ORCID-Numbers = ""Sawyer, Steve/0000-0001-5277-5148"",
    Number-of-Cited-References = ""63"",
    Times-Cited = ""67"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""Eur. J. Inform. Syst."",
    Doc-Delivery-Number = ""305EF"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000086525900006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Packaged software: implications of the differences from custom approaches to software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000086525900006	TAYLOR \& FRANCIS LTD	nan; Keywords; References
95	TrustSE	Certified software	Only if the programmer can prove (through formal machine-checkable proofs) it is free of bugs with respect to a claim of dependability.		Shao, Zhong	Commun. ACM	https://doi.org/10.1145/1859204.1859226		56-66	"""@article{10.1145/1859204.1859226,
    author = ""Shao, Zhong"",
    title = ""Certified software"",
    year = ""2010"",
    issue_date = ""December 2010"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""53"",
    number = ""12"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1859204.1859226"",
    doi = ""10.1145/1859204.1859226"",
    abstract = ""Only if the programmer can prove (through formal machine-checkable proofs) it is free of bugs with respect to a claim of dependability."",
    journal = ""Commun. ACM"",
    month = ""December"",
    pages = ""56-66"",
    numpages = ""11""
}
"""						2	ACM		Certified software	https://doi.org/10.1145/1859204.1859226	Association for Computing Machinery	nan; Keywords; References; Link
96	TrustSE	Free/open source software development: Recent research results and methods														2						
97	TrustSE	Analysis of the impact of open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
98	TrustSE	A review of capacity planning techniques within standard software packages														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
99	TrustSE	Uncertainty management in software engineering: Past, present, and future	Software development has significantly matured in the last decade. However, one of the critical challenges today is uncertainty inherent to every aspect of software development including requirement specifications, design, coding, and testing. In this paper, we propose a framework for uncertainty management in software engineering. The framework is used to model uncertainty inherent to software development activities and manage their consequences. The framework consists of four main phases: identification and prioritization, modeling and analysis, management and planning, and monitoring and evaluation. Commercial Off-The-Shelf (COTS)-based development is selected as an example to illustrate how the proposed framework is used in a simple but intuitive case study to represent uncertainty and manage its consequences.	Uncertainty; Engineering management; Software engineering; Programming; Software development management; Software design; Monitoring; Decision making; Bayesian methods; Software systems; Software Engineering; Uncertainty Management; Software Development; Commercial Off-the-shelf; Evaluation Criteria; Levels Of Satisfaction; System Software; Management Plan; Model Uncertainty; Processing Software; Digital Library; Design Software; Planning Phase; Evaluation Phase; Selection Phase; Use Of Planning; Requirements Engineering; Software Product; Imperfect Information; Forms Of Uncertainty; Software Reliability; Representation Of Uncertainty; Uncertainty management; Software Engineering; COTS-Based Development	Hamdy Ibrahim; Behrouz H. Far; Armin Eberlein; Yousef Daradkeh	2009 Canadian Conference on Electrical and Computer Engineering	https://doi.org/10.1109/CCECE.2009.5090081	"1.Roger S. Pressman, Software Engineering: A Practitioner's Approach, USA:McGraw-Hill, 2005. Google Scholar; 2.D. Greer and G. Ruhe, ""Software Release Planning: An Evolutionary and Iterative Approach"", Information and Software Technology, vol. 46, no. 4, pp. 243-253, 2004. CrossRef  Google Scholar; 3.M. Svahnberg, C. Wohlin, L. Lundberg and M. Mattsson, ""Quality Attribute Driven Selection of Software Architecture Structures"", Proc. of the First Workshop on Software Engineering Decision Support, pp. 819-826, 2002. Google Scholar; 4.H. Ziv, D. J. Richardson and R. Klosch, ""The uncertainty Principle in Software Engineering"", Technical Report UCITR-96-33, 1996. Google Scholar; 5.P. A. Laplante and C. J. Neill, ""Uncertainty: A Meta-Property of Software"", Proc. of the 29th annual IEE/NASA software engineering workshop (SEW'05), pp. 228-233, 2005. View Article  Google Scholar; 6.F. Xavier and N. Medinilla, ""How a Human-Centered Approach Impacts Software Development"", Human Computer Interaction Part I HCII 2007, pp. 68-77, 2007. Google Scholar; 7.R. V. Giddings, ""Accommodating Uncertainty in Software Design"", Commun. of the ACM, vol. 27, no. 5, pp. 428-434, 1984. CrossRef  Google Scholar; 8.Luqi and D. Cooke, ""The management of uncertainty in software development"", Proc. Of 16th annual international computer software and applications conf., pp. 381-386, 1992. Google Scholar; 9.N. Srinivas, ""Uncertainty in software engineering life cycle: The Very Idea"", IOS Press Knowledge-Based Intelligent Information Engineering systems Allied Technologies (KES'01), vol. 69, pp. 42-46, 2001. Google Scholar; 10.G. Canfora and L. Troiano, ""The importance of dealing with Uncertainty in the Evaluation of Software Engineering Methods and Tools"", Proc. of the 14th int. conf. on Software engineering and knowledge engineering (SEKE'02), pp. 691-698, 2002. CrossRef  Google Scholar; 11.P. A. Laplante and C. J. Neill, ""Modeling uncertainty in software engineering using rough sets"", Innovations in Systems and Software Engineering, vol. 1, no. 1, pp. 71-78, 2005. CrossRef  Google Scholar; 12.Y. S. Dai, M. X. Quan Long and S. H. Ng, ""Uncertainty Analysis in Software Reliability Modeling by Bayesian Analysis with Maximum-Entropy Principle"", IEEE Transactions on Software Engineering, vol. 33, no. 11, pp. 781-795, 2007. CrossRef  Google Scholar; 13.N. Medinilla and I. Gutierrez, ""Uncertainty as a Tool in Software Engineering"", IEEE Latin America Transactions, vol. 5, no. 4, pp. 265-270, 2007. View Article  Google Scholar; 14.J. Noppen, P. V. Broek and M. Aksit, ""Software development with imperfect information"", Soft Computing, vol. 12, no. 1, pp. 3-28, 2008. CrossRef  Google Scholar; 15.F. Xavier and M. Torchiano, ""Towards a Reference Framework for COTS-based development: a proposal"", Proc. of the second int. workshop on models and processes for the evaluation of off-the-shelf components Int. Conf. on Software Engineering, 1-4, 2005. Google Scholar; 16.S. B. Sassi, L. L. Jilani and H. H. B. Ghezala, ""Towards a COTS-Based Development Environment"", Proc. of the 5th Int. Conf. on Commercial-off-the shelf (COTS)-Based Software Systems (ICCBSS 2006), pp. 167-176, 2006. CrossRef  Google Scholar; 17.P. Oberndorf, ""Facilitating Component-Based Software Engineering: COTS and Open Systems"", Proc. of the 5th Int.l Symposium on Assessment of Software Tools - SAST'97, pp. 143-148, 1997. CrossRef  Google Scholar; 18.H. Ibrahim, B. H. Far and A. Eberlein, ""Towards Uncertainty Management in COTS-Based Development"", Proc. Of the 9th IASTED Int. Conf. On Software Engineering and Applications SEA 2008, pp. 133-140, 2008. Google Scholar; 19.H. Ibrahim, B. H. Far and A. Eberlein, ""Weighted Criteria Hybrid Model for Ranking commercial Off-The-Shelf Products"", Proc. Of the IASTED Int. Conf. On Software Engineering SE, pp. 49-56, 2009, 2009. Google Scholar; 20.H. Ibrahim, B. H. Far and A. Eberlein, ""Tradeoff and Sensitivity Analysis of a Hybrid Model for Ranking Commercial Off-The-Shelf Products"", the 16th Annual IEEE Int. Conf. and Workshop on the Engineering of Computer Based Systems (ECBS) Conference and Workshops, 2009. CrossRef  Google Scholar"								2	IEEE		Uncertainty management in software engineering: Past, present, and future	https://ieeexplore.ieee.org/document/5090081	IEEE	nan; Pages; Year; Bibtex
100	TrustSE	A bibliography on uncertainty management in information systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
101	TrustSE	The management of uncertainty in software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
102	TrustSE	Software engineering in an uncertain world	In this paper, we argue that the reality of today's software systems requires us to consider uncertainty as a first-class concern in the design, implementation, and deployment of those systems. We further argue that this induces a paradigm shift, and a number of research challenges that must be addressed.	software architecture;  software design;  software engineering;  uncertainty; software architecture, software design, software engineering, uncertainty	Garlan, David	FoSER '10: Proceedings of the FSE/SDP workshop on Future of software engineering research	https://doi.org/10.1145/1882362.1882389		125-128	"""@inproceedings{10.1145/1882362.1882389,
    author = ""Garlan, David"",
    title = ""Software engineering in an uncertain world"",
    year = ""2010"",
    isbn = ""9781450304276"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1882362.1882389"",
    doi = ""10.1145/1882362.1882389"",
    abstract = ""In this paper, we argue that the reality of today's software systems requires us to consider uncertainty as a first-class concern in the design, implementation, and deployment of those systems. We further argue that this induces a paradigm shift, and a number of research challenges that must be addressed."",
    booktitle = ""Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research"",
    pages = ""125-128"",
    numpages = ""4"",
    keywords = ""software architecture, software design, software engineering, uncertainty"",
    location = ""Santa Fe, New Mexico, USA"",
    series = ""FoSER '10""
}
"""						2	ACM		Software engineering in an uncertain world	https://doi.org/10.1145/1882362.1882389	Association for Computing Machinery	nan; References; Link
103	TrustSE	Software risk management: principles and practices														2						
104	TrustSE	Uncertainty: A meta-property of software														2						
105	TrustSE	Understanding software project risk: a cluster analysis	Understanding software project risk can help in reducing the incidence of failure. Building on prior work, software project risk was conceptualized along six dimensions. A questionnaire was built and 507 software project managers were surveyed. A cluster analysis was then performed to identify aspects of low, medium, and high risk projects. An examination of risk dimensions across the levels revealed that even low risk projects have a high level of complexity risk. For high risk projects, the risks associated with requirements, planning and control, and the organization become more obvious. The influence of project scope, sourcing practices, and strategic orientation on project risk dimensions was also examined. Results suggested that project scope affects all dimensions of risk, whereas sourcing practices and strategic orientation had a more limited impact. A conceptual model of project risk and performance was presented.	software project risk; cluster analysis; project management; outsourcing; scope; software project risk;  cluster analysis;  project management;  outsourcing;  scope	Wallace, L; Keil, M; Rai, A	INFORMATION \& MANAGEMENT	https://doi.org/10.1016/j.im.2003.12.007		115-125	"""@article{WOS:000224489700009,
    Author = ""Wallace, L and Keil, M and Rai, A"",
    Title = ""Understanding software project risk: a cluster analysis"",
    Journal = ""INFORMATION \\& MANAGEMENT"",
    Year = ""2004"",
    Volume = ""42"",
    Number = ""1"",
    Pages = ""115-125"",
    Month = ""DEC"",
    Abstract = ""Understanding software project risk can help in reducing the incidence of failure. Building on prior work, software project risk was conceptualized along six dimensions. A questionnaire was built and 507 software project managers were surveyed. A cluster analysis was then performed to identify aspects of low, medium, and high risk projects. An examination of risk dimensions across the levels revealed that even low risk projects have a high level of complexity risk. For high risk projects, the risks associated with requirements, planning and control, and the organization become more obvious. The influence of project scope, sourcing practices, and strategic orientation on project risk dimensions was also examined. Results suggested that project scope affects all dimensions of risk, whereas sourcing practices and strategic orientation had a more limited impact. A conceptual model of project risk and performance was presented. (C) 2004 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Virginia Polytech Inst \\& State Univ, Dept Accounting \\& Informat Syst, Blacksburg, VA 24061 USA. Virginia Polytech Inst \\& State Univ, Dept Accounting \\& Informat Syst, Blacksburg, VA 24061 USA. Georgia State Univ, J Mack Robinson Coll Business, Dept Comp Informat Syst, Atlanta, GA 30303 USA. Georgia State Univ, J Mack Robinson Coll Business, Elect Commerce Inst, Atlanta, GA 30303 USA."",
    DOI = ""10.1016/j.im.2003.12.007"",
    ISSN = ""0378-7206"",
    EISSN = ""1872-7530"",
    Keywords = ""software project risk; cluster analysis; project management; outsourcing; scope"",
    Keywords-Plus = ""SYSTEM-DEVELOPMENT; USER INVOLVEMENT; INFORMATION; MANAGEMENT; UNCERTAINTY; SUCCESS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""wallace1@vt.edu arunrai@gsu.edu"",
    Affiliations = ""Virginia Polytechnic Institute \\& State University; University System of Georgia; Georgia State University; University System of Georgia; Georgia State University"",
    ORCID-Numbers = ""Rai, Arun/0000-0002-3655-7543"",
    Number-of-Cited-References = ""62"",
    Times-Cited = ""257"",
    Usage-Count-Last-180-days = ""4"",
    Usage-Count-Since-2013 = ""76"",
    Journal-ISO = ""Inf. Manage."",
    Doc-Delivery-Number = ""862KO"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000224489700009"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Understanding software project risk: a cluster analysis	https://www.webofscience.com/wos/woscc/full-record/WOS:000224489700009	ELSEVIER	nan; References
106	TrustSE	Selecting the optimal software solution under conditions of uncertainty														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
107	TrustSE	Learning to Live with Uncertainty in our Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
108	TrustSE	Software Size Uncertainty: The Effects of Growth and Estimation Variability														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
109	TrustSE	Optimizing the incremental delivery of software features under uncertainty														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
110	TrustSE	Reliability of composite software by different forms of uncertainty	In this paper we focus on the reliability of the software \& hardware system by different forms of uncertainty: in the probability, possibility, and probability-possibility contexts. A program as a component of the system executes an infinite loop and consists of independent subprograms. The efficient technique based on the integral and functional equations is used for reliability analysing with regard for both hardware failures and software faults. The obtained expressions for computing the system reliability and software performances are simple from computational point of view.		Utkin, LV; Gurov, SV	MICROELECTRONICS AND RELIABILITY	https://doi.org/10.1016/0026-2714(95)00189-1		1459-1473	"""@article{WOS:A1996VD93400014,
    Author = ""Utkin, LV and Gurov, SV"",
    Title = ""Reliability of composite software by different forms of uncertainty"",
    Journal = ""MICROELECTRONICS AND RELIABILITY"",
    Year = ""1996"",
    Volume = ""36"",
    Number = ""10"",
    Pages = ""1459-1473"",
    Month = ""OCT"",
    Abstract = ""In this paper we focus on the reliability of the software \\& hardware system by different forms of uncertainty: in the probability, possibility, and probability-possibility contexts. A program as a component of the system executes an infinite loop and consists of independent subprograms. The efficient technique based on the integral and functional equations is used for reliability analysing with regard for both hardware failures and software faults. The obtained expressions for computing the system reliability and software performances are simple from computational point of view. Copyright (C) 1996 Elsevier Science Ltd"",
    Publisher = ""PERGAMON-ELSEVIER SCIENCE LTD"",
    Address = ""THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD, ENGLAND OX5 1GB"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Utkin, LV (Corresponding Author), FOREST TECH ACAD,DEPT COMP SCI,INST PER 5,ST PETERSBURG 194018,RUSSIA."",
    DOI = ""10.1016/0026-2714(95)00189-1"",
    ISSN = ""0026-2714"",
    Keywords-Plus = ""FAULT-TREE ANALYSIS; POSSIBILITY CONTEXT; FUZZY RELIABILITY; SYSTEMS; PROBABILITY"",
    Research-Areas = ""Engineering; Science \\& Technology - Other Topics; Physics"",
    Web-of-Science-Categories = ""Engineering, Electrical \\& Electronic; Nanoscience \\& Nanotechnology; Physics, Applied"",
    ResearcherID-Numbers = ""Isaevich, Gurov/J-6504-2013 Utkin, Lev/F-6480-2013"",
    ORCID-Numbers = ""Gurov, Sergey/0000-0001-5486-1357 Utkin, Lev/0000-0002-5637-1420"",
    Number-of-Cited-References = ""16"",
    Times-Cited = ""2"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""0"",
    Journal-ISO = ""Microelectron. Reliab."",
    Doc-Delivery-Number = ""VD934"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:A1996VD93400014"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Reliability of composite software by different forms of uncertainty	https://www.webofscience.com/wos/woscc/full-record/WOS:A1996VD93400014	PERGAMON-ELSEVIER SCIENCE LTD	nan; Keywords; References
111	TrustSE	Uncertainty Explicit Assessment of Off-the-Shelf Software: Selection of an Optimal Diverse Pair	Assessment of software COTS components is an essential part of component-based software development. Sub-optimal selection of components may lead to solutions with low quality. The assessment is based on incomplete knowledge about the COTS components themselves and other aspects, which may affect the choice such as the vendor's credentials, etc. We argue in favor of assessment methods in which uncertainty is explicitly represented (`uncertainty explicit' methods) using probability distributions. We have adapted a model (developed elsewhere by Littlewood, B. et al. (2000)) for assessment of a pair of COTS components to take account of the fault (bug) logs that might be available for the COTS components being assessed. We also provide empirical data from a study we have conducted with off-the-shelf database servers, which illustrate the use of the method	Uncertainty; Programming; Probability distribution; Databases; Costs; Software reliability; Testing; Fault tolerance; Software design; Job production systems; Optimal Pair; Component Of Assessment; Database Server; Pair Of Components; Posterior Probability; Conditional Distribution; Values Of Components; Multivariate Distribution; Dependability; Probability Of Failure; Inference Procedure; Divide-and-conquer; Requirements Engineering; Mathematical Details; Attribute Values; Single Server; SQL Server; Prior Definition; Bug Reports	Ilir Gashi; Peter Popov	2007 Sixth International IEEE Conference on Commercial-off-the-Shelf (COTS)-Based Software Systems (ICCBSS'07)	https://doi.org/10.1109/ICCBSS.2007.44	1.Ncube, C. and N. Maiden. PORE Procurement Oriented Requirements Engineering Method for the Component-Based Systems Engineering Development Paradigm, in International Workshop on Component-Based Software Engineering. 1999. Google Scholar; 2.Kontio, J., et al. A COTS Selection Method and Experiences of Its Use. in Twentieth Annual Software Engineering Workshop,NASA Goddard Space Flight Center. 1995. Greenbelt, Maryland. Google Scholar; 3.Jeanrenaud, J. and P. Romanazzi. Software Product Evaluation: A Methodological Approach, in Software Quality Management II: Building Software into Quality. 1994 p. 55-69. Google Scholar; 4.Tran, V. and D.-B. Liu. A Risk Mitigating Model for the Development of Reliable and Maintainable Large-Scale Commercial-Off-The-Shelf Integrated Software Systems. in Proceedings of the 1997 Annual Reliability and Maintainability Symposium (RAMS). 1997 p. 361-367. View Article  Google Scholar; 5.Ochs, M., et al. A Method for Efficient Measurement-based COTS Assessment and Selection -Method Description and Evaluation Results, in Proceedings of the 7th International Symposium on Software Metrics. 2001. London, England: IEEE Computer Society p. 285-294. View Article  Google Scholar; 6.Alves, C. and J. Castro. CRE: A Systematic Method for COTS Components Selection, in XV Brazilian Symposium on Software Engineering (SBES). 2001. Rio de Janeiro, Brazil. CrossRef  Google Scholar; 7.Phillips, B.C. and S.M. Polen, Add Decision Analysis to Your COTS Selection Process. 2002, http://www.stsc.hill.af.mil/crosstalk/2002/04/ phillips.html Google Scholar; 8.Boehm, B., et al. Composable Process Elements for Developing COTS-Based Applications, in Proceedings 2003 International Symposium on Empirical Software Engineering. ISESE2003. 2003: ACM-IEEE p. 8-17. View Article  Google Scholar; 9.Dean, J., An Evaluation Method for COTS Software Products. 2000, http://www.stc-online.org/cdrom/cdrom2000/webpages/johndean/paper.pdf.; 10.Kunda, D. and L. Brooks. Applying Social-Technical Approach for COTS Selection, in Proceedings of the 4th UKAIS Conference. 1999. University of York, England. Google Scholar; 11.Gregor, S., J. Hutson, and C. Oresky. Storyboard Process to Assist in Requirements Verification and Adaptation to Capabilities Inherent in COTS, in ICCBSS 2002. 2002. Florida, USA: Springer-Verlag p. 132-141. CrossRef  Google Scholar; 12.Burgues, X., et al. Combined Selection of COTS Components, in ICCBSS 2002. 2002. Florida, USA: Springer-Verlag p. 54-64. CrossRef  Google Scholar; 13.Comella-Dorda, S., et al. A Process for COTS Software Product Evaluation, in ICCBSS 2002. 2002. Florida, USA: Springer-Verlag p. 86-92. CrossRef  Google Scholar; 14.Ruhe, G. Intelligent Support for Selection of COTS Products, in Web, Web-Services, and Database Systems. 2003: Springer p. 34-45. Google Scholar; 15.Littlewood, B. and L. Strigini, Validation of Ultra-High Dependability for Software-based Systems. Communications of the ACM, 1993. 36(11): p. 69-80. CrossRef  Google Scholar; 16.Littlewood, B., Popov, P. and Strigini, L., Modelling software design diversity - a review. ACM Computing Surveys, 2001. 33(2): p. 177-208. CrossRef  Google Scholar; 17.Littlewood, B., P. Popov, and L. Strigini. Assessment of the Reliability of Fault-Tolerant Software: a Bayesian Approach, in Proc. 19th International Conference on Computer Safety, Reliability and Security, SAFECOMP2000. 2000. Rotterdam, the Netherlands: Springer p. 294-308. CrossRef  Google Scholar; 18.Lewis, P., et al., Lessons Learned in Developing Commercial Off-The-Shelf (COTS) Intensive Software Systems. 2000, Software Engineering Resource Center. Google Scholar; 19.Dean, J. and M. Vidger. COTS Software Evaluation Techniques, in Proceedings of The NATO Information Systems Technology. Symposium on Commercial Off-theshelf Products in Defence Applications. 2000. Brussels, Belgium. Google Scholar; 20.Wright, D. and K.-Y. Cai, Representing Uncertainty for Safety Critical Systems, PDCS2 Tech. Rep. 135. Center for Software Reliability, City University, London,. 1994. Google Scholar; 21.Littlewood, B. and D. Wright, Some conservative stopping rules for the operational testing of safetycritical software. IEEE Transactions on Software Engineering, 1997. 23(11): p. 673-683. View Article  Google Scholar; 22.Jeng, B. and E.J. Weyuker, Analyzing partition testing strategies. IEEE Transactions on Software Engineering, 1991. 17(7): p. 703-711. View Article  Google Scholar; 23.Hamlet, D. and R. Taylor, Partition testing does not inspire confidence. IEEE Transactions on Software Engineering, 1990. 16(12): p. 1402-1411. View Article  Google Scholar; 24.Musa, J.D., Operational Profiles in Software-Reliability Engineering. IEEE Software, 1993. March: p. 14-32. View Article  Google Scholar; 25.Gashi, I., Popov, P., Stankovic, V., Uncertainty Concious Assessment of Off-The-Shelf Software. 2006, http://www.csr.city.ac.uk/people/ilir. gashi/COTS/. Google Scholar; 26.Gashi, I., Popov, P., Strigini, L. Fault diversity among off-the-shelf SQL database servers, in DSN04 International Conference on Dependable Systems and Networks. 2004. Florence, Italy: IEEE Computer Society Press p. 389-398. View Article  Google Scholar; 27.ObjectWeb, C-JDBC. 2006 http://c-jdbc.objectweb.org/. Google Scholar; 28.Gray, J. Why do computers stop and what can be done about it? in 6th International Conference on Reliability and Distributed Databases. 1987. Google Scholar; 29.Chandra, S. and P.M. Chen. Whither Generic Recovery from Application Faults? A Fault Study using Open-Source Software, in DSN 2000, International Conference on Dependable Systems and Networks. 2000. NY, USA: IEEE Computer Society Press p. 97-106. View Article  Google Scholar; 30.Littlewood, B. and D.R. Miller, Conceptual Modelling of Coincident Failures in Multi-Version Software. IEEE Transactions on Software Engineering, 1989. SE-15(12): p. 1596-1614. View Article  Google Scholar								2	IEEE		Uncertainty explicit assessment of off-the-shelf software: Selection of an optimal diverse pair	https://ieeexplore.ieee.org/document/4127304	IEEE	nan; Pages; Year; Bibtex
112	TrustSE	Certain trends in uncertainty and sensitivity analysis: An overview of software tools and techniques	Uncertainty and sensitivity analysis (UA/SA) aid in assessing whether model complexity is warranted and under what conditions. To support these analyses a variety of software tools have been developed to provide UA/SA methods and approaches in a more accessible manner. This paper applies a hybrid bibliometric approach using 11 625 publications sourced from the Web of Science database to identify software packages for UA/SA used within the environmental sciences and to synthesize evidence of general research trends and directions. Use of local sensitivity approaches was determined to be prevalent, although adoption of global sensitivity analysis approaches is increasing. We find that interest in uncertainty management is also increasing, particularly in improving the reliability and effectiveness of UA/SA. Although available software is typically open-source and freely available, uptake of software tools is apparently slow or their use is otherwise under-reported. Longevity is also an issue, with many of the identified software appearing to be unmaintained. Improving the general usability and accessibility of UA/SA tools may help to increase software longevity and the awareness and adoption of purpose-appropriate methods. Usability should be improved so as to lower the ``cost of adoption{''} of incorporating the software in the modelling workflow. An overview of available software is provided to aid modelers in choosing an appropriate software tool for their purposes. Code and representative data used for this analysis can be found at https://github.com/frog7/uasa-trends (10.5281/zenodo.3406946).	Uncertainty analysis; Sensitivity analysis; Analysis software packages; Bibliometric trends; Environmental modeling; Uncertainty analysis;  Sensitivity analysis;  Analysis software packages;  Bibliometric trends;  Environmental modeling	Douglas-Smith, Dominique; Iwanaga, Takuya; Croke, Barry F. W.; Jakeman, Anthony J.	ENVIRONMENTAL MODELLING \& SOFTWARE	https://doi.org/10.1016/j.envsoft.2019.104588			"""@article{WOS:000510853300004,
    Author = ""Douglas-Smith, Dominique and Iwanaga, Takuya and Croke, Barry F. W. and Jakeman, Anthony J."",
    Title = ""Certain trends in uncertainty and sensitivity analysis: An overview of software tools and techniques"",
    Journal = ""ENVIRONMENTAL MODELLING \\& SOFTWARE"",
    Year = ""2020"",
    Volume = ""124"",
    Month = ""FEB"",
    Abstract = ""Uncertainty and sensitivity analysis (UA/SA) aid in assessing whether model complexity is warranted and under what conditions. To support these analyses a variety of software tools have been developed to provide UA/SA methods and approaches in a more accessible manner. This paper applies a hybrid bibliometric approach using 11 625 publications sourced from the Web of Science database to identify software packages for UA/SA used within the environmental sciences and to synthesize evidence of general research trends and directions. Use of local sensitivity approaches was determined to be prevalent, although adoption of global sensitivity analysis approaches is increasing. We find that interest in uncertainty management is also increasing, particularly in improving the reliability and effectiveness of UA/SA. Although available software is typically open-source and freely available, uptake of software tools is apparently slow or their use is otherwise under-reported. Longevity is also an issue, with many of the identified software appearing to be unmaintained. Improving the general usability and accessibility of UA/SA tools may help to increase software longevity and the awareness and adoption of purpose-appropriate methods. Usability should be improved so as to lower the ``cost of adoption{''} of incorporating the software in the modelling workflow. An overview of available software is provided to aid modelers in choosing an appropriate software tool for their purposes. Code and representative data used for this analysis can be found at https://github.com/frog7/uasa-trends (10.5281/zenodo.3406946)."",
    Publisher = ""ELSEVIER SCI LTD"",
    Address = ""THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Iwanaga, T (Corresponding Author), Australian Natl Univ, Fenner Sch Environm \\& Soc, Integrated Catchment Assessment \\& Management Ctr, Canberra, ACT, Australia. Douglas-Smith, Dominique; Iwanaga, Takuya; Croke, Barry F. W.; Jakeman, Anthony J., Australian Natl Univ, Fenner Sch Environm \\& Soc, Integrated Catchment Assessment \\& Management Ctr, Canberra, ACT, Australia. Croke, Barry F. W., Australian Natl Univ, Math Sci Inst, Canberra, ACT, Australia."",
    DOI = ""10.1016/j.envsoft.2019.104588"",
    Article-Number = ""104588"",
    ISSN = ""1364-8152"",
    EISSN = ""1873-6726"",
    Keywords = ""Uncertainty analysis; Sensitivity analysis; Analysis software packages; Bibliometric trends; Environmental modeling"",
    Keywords-Plus = ""RAINFALL-RUNOFF MODELS; GLOBAL SENSITIVITY; ENVIRONMENTAL-MODELS; FRAMEWORK; EFFICIENT; SYSTEMS; ROBUST; QUANTIFICATION; IDENTIFICATION; OUTPUT"",
    Research-Areas = ""Computer Science; Engineering; Environmental Sciences \\& Ecology; Water Resources"",
    Web-of-Science-Categories = ""Computer Science, Interdisciplinary Applications; Engineering, Environmental; Environmental Sciences; Water Resources"",
    Author-Email = ""iwanaga.takuya@anu.edu.au"",
    Affiliations = ""Australian National University; Australian National University"",
    ResearcherID-Numbers = ""Iwanaga, Takuya/AAV-8984-2020 Croke, Barry/A-2275-2008 Jakeman, Anthony/P-6786-2014"",
    ORCID-Numbers = ""Jakeman, Anthony/0000-0001-5282-2215 Iwanaga, Takuya/0000-0001-8173-0870 Croke, Barry/0000-0001-9216-1554"",
    Funding-Acknowledgement = ""Australian Government Research Training Program (AGRTP) Scholarship; Hilda-John Endowment Fund"",
    Funding-Text = ""The corresponding author (second in the author list) is supported through an Australian Government Research Training Program (AGRTP) Scholarship, and a top-up scholarship from the Hilda-John Endowment Fund."",
    Number-of-Cited-References = ""95"",
    Times-Cited = ""60"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""37"",
    Journal-ISO = ""Environ. Modell. Softw."",
    Doc-Delivery-Number = ""KH7TU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000510853300004"",
    OA = ""hybrid"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Certain trends in uncertainty and sensitivity analysis: An overview of software tools and techniques	https://www.webofscience.com/wos/woscc/full-record/WOS:000510853300004	ELSEVIER SCI LTD	nan; References; Pages
113	TrustSE	Structural reliability software and calculation tools: a review	Structural reliability is now the leading method in the field of design optimization and assessment of civil engineering structures since it offers a rational treatment of the uncertainties in this kind of studies. However, structural reliability problems become more complex with time due to the high number of random variables leading to very complex numerical problems; moreover, they have to deal with complex finite element structural models. So, many reliability calculation tools and software packages have been developed for this purpose. This paper is an important reference for researchers and engineers to help them select the most suitable reliability calculation tool or software package; they will also know their most common area of use through the application examples mentioned for each tool. Several criteria are taken into account in the investigation such as the type of the structure, the probabilistic computational methods, and the budget assigned to the calculation tool.	Assessment; Design optimization; Structural reliability; Software; Tools; Assessment;  Design optimization;  Structural reliability;  Software;  Tools	Chehade, Fatima El Hajj; Younes, Rafic	INNOVATIVE INFRASTRUCTURE SOLUTIONS	https://doi.org/10.1007/s41062-020-0282-4			"""@article{WOS:000519632200003,
    Author = ""Chehade, Fatima El Hajj and Younes, Rafic"",
    Title = ""Structural reliability software and calculation tools: a review"",
    Journal = ""INNOVATIVE INFRASTRUCTURE SOLUTIONS"",
    Year = ""2020"",
    Volume = ""5"",
    Number = ""1"",
    Month = ""MAR 3"",
    Abstract = ""Structural reliability is now the leading method in the field of design optimization and assessment of civil engineering structures since it offers a rational treatment of the uncertainties in this kind of studies. However, structural reliability problems become more complex with time due to the high number of random variables leading to very complex numerical problems; moreover, they have to deal with complex finite element structural models. So, many reliability calculation tools and software packages have been developed for this purpose. This paper is an important reference for researchers and engineers to help them select the most suitable reliability calculation tool or software package; they will also know their most common area of use through the application examples mentioned for each tool. Several criteria are taken into account in the investigation such as the type of the structure, the probabilistic computational methods, and the budget assigned to the calculation tool."",
    Publisher = ""SPRINGER INT PUBL AG"",
    Address = ""GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Chehade, FE (Corresponding Author), Lebanese Univ, Fac Engn, Branch 3, Raf Hariri Campus, Beirut, Lebanon. Chehade, Fatima El Hajj; Younes, Rafic, Lebanese Univ, Fac Engn, Branch 3, Raf Hariri Campus, Beirut, Lebanon."",
    DOI = ""10.1007/s41062-020-0282-4"",
    Article-Number = ""29"",
    ISSN = ""2364-4176"",
    EISSN = ""2364-4184"",
    Keywords = ""Assessment; Design optimization; Structural reliability; Software; Tools"",
    Keywords-Plus = ""COMPUTER-PROGRAM; REINFORCEMENT CORROSION; FATIGUE RELIABILITY; CONCRETE BEAMS; STRIP FOOTINGS; SYSTEM; DESIGN; LIFETIME; BRIDGES; DEGRADATION"",
    Research-Areas = ""Engineering"",
    Web-of-Science-Categories = ""Engineering, Civil"",
    Author-Email = ""fatima.hage.chehadeh@gmail.com"",
    Affiliations = ""Lebanese University"",
    ResearcherID-Numbers = ""Younes, Rafic/O-6769-2017"",
    ORCID-Numbers = ""Hajj Chehade, Fatima/0000-0001-5979-6419 Younes, Rafic/0000-0002-7957-2057"",
    Number-of-Cited-References = ""127"",
    Times-Cited = ""9"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""34"",
    Journal-ISO = ""Innov. Infrastruct. Solut."",
    Doc-Delivery-Number = ""KU3ST"",
    Web-of-Science-Index = ""Emerging Sources Citation Index (ESCI)"",
    Unique-ID = ""WOS:000519632200003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Structural reliability software and calculation tools: a review	https://www.webofscience.com/wos/woscc/full-record/WOS:000519632200003	SPRINGER INT PUBL AG	nan; References; Pages
114	TrustSE	Deriving a usage-independent software quality metric	Context The extent of post-release use of software affects the number of faults, thus biasing quality metrics and adversely affecting associated decisions. The proprietary nature of usage data limited deeper exploration of this subject in the past. Objective To determine how software faults and software use are related and how, based on that, an accurate quality measure can be designed. Method Via Google Analytics we measure new users, usage intensity, usage frequency, exceptions, and release date and duration for complex proprietary mobile applications for Android and iOS. We utilize Bayesian Network and Random Forest models to explain the interrelationships and to derive the usage independent release quality measure. To increase external validity, we also investigate the interrelationship among various code complexity measures, usage (downloads), and number of issues for 520 NPM packages. We derived a usage-independent quality measure from these analyses, and applied it on 4430 popular NPM packages to construct timelines for comparing the perceived quality (number of issues) and our derived measure of quality during the lifetime of these packages. Results We found the number of new users to be the primary factor determining the number of exceptions, and found no direct link between the intensity and frequency of software usage and software faults. Crashes increased with the power of 1.02-1.04 of new user for the Android app and power of 1.6 for the iOS app. Release quality expressed as crashes per user was independent of other usage-related predictors, thus serving as a usage independent measure of software quality. Usage also affected quality in NPM, where downloads were strongly associated with numbers of issues, even after taking the other code complexity measures into consideration. Unlike in mobile case where exceptions per user decrease over time, for 45.8\% of the NPM packages the number of issues per download increase. Conclusions We expect our result and our proposed quality measure will help gauge release quality of a software more accurately and inspire further research in this area.	Software quality; Software usage; Software faults; Bayesian networks; NPM packages; Software quality;  Software usage;  Software faults;  Bayesian networks;  NPM packages	Dey, Tapajit; Mockus, Audris	EMPIRICAL SOFTWARE ENGINEERING	https://doi.org/10.1007/s10664-019-09791-w		1596-1641	"""@article{WOS:000516329100002,
    Author = ""Dey, Tapajit and Mockus, Audris"",
    Title = ""Deriving a usage-independent software quality metric"",
    Journal = ""EMPIRICAL SOFTWARE ENGINEERING"",
    Year = ""2020"",
    Volume = ""25"",
    Number = ""2, SI"",
    Pages = ""1596-1641"",
    Month = ""MAR"",
    Abstract = ""Context The extent of post-release use of software affects the number of faults, thus biasing quality metrics and adversely affecting associated decisions. The proprietary nature of usage data limited deeper exploration of this subject in the past. Objective To determine how software faults and software use are related and how, based on that, an accurate quality measure can be designed. Method Via Google Analytics we measure new users, usage intensity, usage frequency, exceptions, and release date and duration for complex proprietary mobile applications for Android and iOS. We utilize Bayesian Network and Random Forest models to explain the interrelationships and to derive the usage independent release quality measure. To increase external validity, we also investigate the interrelationship among various code complexity measures, usage (downloads), and number of issues for 520 NPM packages. We derived a usage-independent quality measure from these analyses, and applied it on 4430 popular NPM packages to construct timelines for comparing the perceived quality (number of issues) and our derived measure of quality during the lifetime of these packages. Results We found the number of new users to be the primary factor determining the number of exceptions, and found no direct link between the intensity and frequency of software usage and software faults. Crashes increased with the power of 1.02-1.04 of new user for the Android app and power of 1.6 for the iOS app. Release quality expressed as crashes per user was independent of other usage-related predictors, thus serving as a usage independent measure of software quality. Usage also affected quality in NPM, where downloads were strongly associated with numbers of issues, even after taking the other code complexity measures into consideration. Unlike in mobile case where exceptions per user decrease over time, for 45.8\\% of the NPM packages the number of issues per download increase. Conclusions We expect our result and our proposed quality measure will help gauge release quality of a software more accurately and inspire further research in this area."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Dey, T (Corresponding Author), Univ Tennessee, Dept Elect Engn \\& Comp Sci, Knoxville, TN 37996 USA. Dey, Tapajit, Univ Tennessee, Dept Elect Engn \\& Comp Sci, Knoxville, TN 37996 USA. Mockus, Audris, Univ Tennessee, Dept Elect Engn \\& Comp Sci, Digital Archeol \\& Evidence Engn, Knoxville, TN USA."",
    DOI = ""10.1007/s10664-019-09791-w"",
    EarlyAccessDate = ""FEB 2020"",
    ISSN = ""1382-3256"",
    EISSN = ""1573-7616"",
    Keywords = ""Software quality; Software usage; Software faults; Bayesian networks; NPM packages"",
    Keywords-Plus = ""EMPIRICAL-ANALYSIS; PREDICTION; NETWORKS; COMPLEXITY; DEFECTS; IMPACT; MODEL"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering"",
    Author-Email = ""tdey2@vols.utk.edu audris@utk.edu"",
    Affiliations = ""University of Tennessee System; University of Tennessee Knoxville; University of Tennessee System; University of Tennessee Knoxville"",
    ResearcherID-Numbers = ""Dey, Tapajit/AAY-9483-2020 Mockus, Audris/AEY-3361-2022"",
    ORCID-Numbers = ""Dey, Tapajit/0000-0002-1379-8539 Mockus, Audris/0000-0002-7987-7598"",
    Funding-Acknowledgement = ""National Science Foundation (U.S.) {[}1633437, 1901102]; Direct For Computer \\& Info Scie \\& Enginr; Div Of Information \\& Intelligent Systems {[}1901102, 1633437] Funding Source: National Science Foundation"",
    Funding-Text = ""This work was supported by the National Science Foundation (U.S.) under Grant No. 1633437 and Grant No. 1901102."",
    Number-of-Cited-References = ""73"",
    Times-Cited = ""14"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""4"",
    Journal-ISO = ""Empir. Softw. Eng."",
    Doc-Delivery-Number = ""KT0VU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000516329100002"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Deriving a usage-independent software quality metric	https://www.webofscience.com/wos/woscc/full-record/WOS:000516329100002	SPRINGER	nan; References
115	TrustSE	How successfully is open-source research software adopted? Results and implications of surveying the users of a sensitivity analysis toolbox	Open-source research software is an important element of open science. While the number of software packages made available by researchers is increasing, there has been little analysis about their subsequent uptake. We collect basic information about prospective users when sharing our open-source sensitivity analysis toolbox. This enabled us to carry out a user survey to assess adoption success - beyond simply counting download numbers. Survey results confirm the key role of extensive documentation to ensure adoption, to enhance learning and to enable research implementation. We found that workflows are an effective tool to guide users to tailor methods to their problems. However, workflows also need to include guidance for interpretation of results, otherwise sophisticated functionalities are overlooked as their value is unclear. Developing effective documentation requires significant time investment but is essential if the ultimate aim of open research software is to promote the adoption of scientific methodologies and best practices.	Research software; Open-source software; Reproducibility; Workflows; Software documentation; Research software;  Open-source software;  Reproducibility;  Workflows;  Software documentation	Pianosi, Francesca; Sarrazin, Fanny; Wagener, Thorsten	ENVIRONMENTAL MODELLING \& SOFTWARE	https://doi.org/10.1016/j.envsoft.2019.104579			"""@article{WOS:000510853300008,
    Author = ""Pianosi, Francesca and Sarrazin, Fanny and Wagener, Thorsten"",
    Title = ""How successfully is open-source research software adopted? Results and implications of surveying the users of a sensitivity analysis toolbox"",
    Journal = ""ENVIRONMENTAL MODELLING \\& SOFTWARE"",
    Year = ""2020"",
    Volume = ""124"",
    Month = ""FEB"",
    Abstract = ""Open-source research software is an important element of open science. While the number of software packages made available by researchers is increasing, there has been little analysis about their subsequent uptake. We collect basic information about prospective users when sharing our open-source sensitivity analysis toolbox. This enabled us to carry out a user survey to assess adoption success - beyond simply counting download numbers. Survey results confirm the key role of extensive documentation to ensure adoption, to enhance learning and to enable research implementation. We found that workflows are an effective tool to guide users to tailor methods to their problems. However, workflows also need to include guidance for interpretation of results, otherwise sophisticated functionalities are overlooked as their value is unclear. Developing effective documentation requires significant time investment but is essential if the ultimate aim of open research software is to promote the adoption of scientific methodologies and best practices."",
    Publisher = ""ELSEVIER SCI LTD"",
    Address = ""THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Pianosi, F (Corresponding Author), Univ Bristol, Dept Civil Engn, Bristol, Avon, England. Pianosi, Francesca; Sarrazin, Fanny; Wagener, Thorsten, Univ Bristol, Dept Civil Engn, Bristol, Avon, England. Pianosi, Francesca; Wagener, Thorsten, Univ Bristol, Cabot Inst, Bristol, Avon, England. Sarrazin, Fanny, UFZ Helmholtz Zentrum Umweltforsch, Dept Computat Hydrosyst, Leipzig, Germany."",
    DOI = ""10.1016/j.envsoft.2019.104579"",
    Article-Number = ""104579"",
    ISSN = ""1364-8152"",
    EISSN = ""1873-6726"",
    Keywords = ""Research software; Open-source software; Reproducibility; Workflows; Software documentation"",
    Keywords-Plus = ""ENVIRONMENTAL-MODELS"",
    Research-Areas = ""Computer Science; Engineering; Environmental Sciences \\& Ecology; Water Resources"",
    Web-of-Science-Categories = ""Computer Science, Interdisciplinary Applications; Engineering, Environmental; Environmental Sciences; Water Resources"",
    Author-Email = ""francesca.pianosi@bristol.ac.uk"",
    Affiliations = ""University of Bristol; University of Bristol; Helmholtz Association; Helmholtz Center for Environmental Research (UFZ)"",
    ResearcherID-Numbers = ""Sarrazin, Fanny J./Q-7739-2018 Wagener, Thorsten/C-2062-2008 Pianosi, Francesca/L-3154-2018"",
    ORCID-Numbers = ""Sarrazin, Fanny J./0000-0002-9928-9566 Wagener, Thorsten/0000-0003-3881-5849 Pianosi, Francesca/0000-0002-1516-2163"",
    Funding-Acknowledgement = ""UK Natural Environment Research Council (NERC) through the Consortium on Risk in the Environment: Diagnostics, Integration, Benchmarking, Learning and Elicitation (CREDIBLE) {[}NE/J017450/1]; UK Engineering and Physical Sciences Research Council (EPSRC) through a ``Living with Environmental Uncertainty{''} fellowship {[}EP/R007330/1]; EPSRC {[}EP/R007330/1] Funding Source: UKRI; NERC {[}NE/J017450/1] Funding Source: UKRI"",
    Funding-Text = ""The SAFE toolbox was initially supported by the UK Natural Environment Research Council (NERC) through the Consortium on Risk in the Environment: Diagnostics, Integration, Benchmarking, Learning and Elicitation (CREDIBLE) {[}NE/J017450/1]. F. Pianosi is currently supported by the UK Engineering and Physical Sciences Research Council (EPSRC) through a ``Living with Environmental Uncertainty{''} fellowship {[}EP/R007330/1]. The authors wish to thank three anonymous reviewers for their comments that helped improving the discussion of the survey results. The authors are also grateful to the many users of the SAFE toolbox who over the years provided their feedbacks and comments through individual contacts and by taking part in the survey presented in this paper."",
    Number-of-Cited-References = ""24"",
    Times-Cited = ""17"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""7"",
    Journal-ISO = ""Environ. Modell. Softw."",
    Doc-Delivery-Number = ""KH7TU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000510853300008"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		How successfully is open-source research software adopted? Results and implications of surveying the users of a sensitivity analysis toolbox	https://www.webofscience.com/wos/woscc/full-record/WOS:000510853300008	ELSEVIER SCI LTD	nan; References; Pages
116	TrustSE	Software Development Kits for Cloud Computing														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
117	TrustSE	Development Problems of Trusted Software in Critical Information Infrastructure Systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
118	TrustSE	Fuzzy model estimation of the risk factors impact on the target of promotion of the software product	This article studies the application of fuzzy logic to the risk analysis of a new software product development and marketing in specific case of a small size IT company. Identification and analysis of external and internal risk factors show that this type of business activity could be evaluated as high-risk enterprise. So, the purpose of the paper is to develop robust method to evaluate probability of occurrence of major risk events and their impact on the company financial health. The fuzzy logic is used to estimate degrees of threat of each relevant risk factor due to lack of reliable statistical data. The novelty of proposed approach is the inclusion into the model the risk event time.	Fuzzy models; risk factors; software promotion; decision making; marketing analytics and product management; project management; Fuzzy models;  risk factors;  software promotion;  decision making;  marketing analytics and product management;  project management	Kataev, Michael; Bulysheva, Larisa; Xu, Lida; Ekhlakov, Yuri; Permyakova, Natalia; Jovanovic, Vukica	ENTERPRISE INFORMATION SYSTEMS	https://doi.org/10.1080/17517575.2020.1713407		797-811	"""@article{WOS:000509022500001,
    Author = ""Kataev, Michael and Bulysheva, Larisa and Xu, Lida and Ekhlakov, Yuri and Permyakova, Natalia and Jovanovic, Vukica"",
    Title = ""Fuzzy model estimation of the risk factors impact on the target of promotion of the software product"",
    Journal = ""ENTERPRISE INFORMATION SYSTEMS"",
    Year = ""2020"",
    Volume = ""14"",
    Number = ""6"",
    Pages = ""797-811"",
    Month = ""JUL 2"",
    Abstract = ""This article studies the application of fuzzy logic to the risk analysis of a new software product development and marketing in specific case of a small size IT company. Identification and analysis of external and internal risk factors show that this type of business activity could be evaluated as high-risk enterprise. So, the purpose of the paper is to develop robust method to evaluate probability of occurrence of major risk events and their impact on the company financial health. The fuzzy logic is used to estimate degrees of threat of each relevant risk factor due to lack of reliable statistical data. The novelty of proposed approach is the inclusion into the model the risk event time."",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Bulysheva, L (Corresponding Author), Old Dominion Univ, Dept Informat Technol \\& Decis Sci, Norfolk, VA 23529 USA. Kataev, Michael; Ekhlakov, Yuri; Permyakova, Natalia, Tomsk State Univ Control Syst \\& Radioelect, Dept Control Syst, Tomsk, Russia. Bulysheva, Larisa; Xu, Lida, Old Dominion Univ, Dept Informat Technol \\& Decis Sci, Norfolk, VA 23529 USA. Jovanovic, Vukica, Old Dominion Univ, Dept Engn Technol, Norfolk, VA USA."",
    DOI = ""10.1080/17517575.2020.1713407"",
    EarlyAccessDate = ""JAN 2020"",
    ISSN = ""1751-7575"",
    EISSN = ""1751-7583"",
    Keywords = ""Fuzzy models; risk factors; software promotion; decision making; marketing analytics and product management; project management"",
    Keywords-Plus = ""AGGREGATIVE RISK; DECISION-MAKING; SET THEORY; MANAGEMENT; LOGIC; EVALUATE; PROJECTS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems"",
    Author-Email = ""lbulyshe@odu.edu"",
    Affiliations = ""Tomsk State University of Control Systems \\& Radioelectronics; Old Dominion University; Old Dominion University"",
    ResearcherID-Numbers = ""xu, li/GNH-3667-2022 Jovanovic, Vukica/D-2644-2013"",
    ORCID-Numbers = ""Permakova, Natal'a/0000-0001-6222-4737 LAPA, ANTONIO/0000-0002-5954-5115 Jovanovic, Vukica/0000-0002-8626-903X"",
    Number-of-Cited-References = ""34"",
    Times-Cited = ""8"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""17"",
    Journal-ISO = ""Enterp. Inf. Syst."",
    Doc-Delivery-Number = ""MI4ZE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000509022500001"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Fuzzy model estimation of the risk factors impact on the target of promotion of the software product	https://www.webofscience.com/wos/woscc/full-record/WOS:000509022500001	TAYLOR \& FRANCIS LTD	nan; References
119	TrustSE	SIGNALS BY SOFTWARE														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
120	TrustSE	Peacebuilding Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
121	TrustSE	Success of software packages in small businesses: an exploratory study														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
122	TrustSE	Software to support expert elicitation: An exploratory study of existing software packages														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
123	TrustSE	Open source software development: an overview														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
124	TrustSE	Selection of packaged software in small businesses														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
125	TrustSE	FACTORS USED IN THE SELECTION OF PACKAGED SOFTWARE IN SMALL BUSINESSES - VIEWS OF OWNERS AND MANAGERS	Due to their limited human, technical, and financial resources, small firms usually purchase packaged software to meet their organizational needs for IS. The selection is usually made either by the owner or a manager. A key question is whether they use the same set of criteria. This study examines the question, and finds that owners and managers of small businesses have different views of the importance of the factors in their selection decision. Owners tend to take a more strategic view of software package selection, weigh technical factors more heavily, take more factors into consideration, and consider those factors in a more serious manner than managers. Therefore, different frameworks may be needed in the software package selection process by owners and managers of small businesses.	PACKAGED SOFTWARE; SELECTION CRITERIA; SMALL BUSINESSES; PACKAGED SOFTWARE;  SELECTION CRITERIA;  SMALL BUSINESSES	CHAU, PYK	INFORMATION \& MANAGEMENT	https://doi.org/10.1016/0378-7206(95)00016-P		71-78	"""@article{WOS:A1995RU46400002,
    Author = ""CHAU, PYK"",
    Title = ""FACTORS USED IN THE SELECTION OF PACKAGED SOFTWARE IN SMALL BUSINESSES - VIEWS OF OWNERS AND MANAGERS"",
    Journal = ""INFORMATION \\& MANAGEMENT"",
    Year = ""1995"",
    Volume = ""29"",
    Number = ""2"",
    Pages = ""71-78"",
    Month = ""AUG"",
    Abstract = ""Due to their limited human, technical, and financial resources, small firms usually purchase packaged software to meet their organizational needs for IS. The selection is usually made either by the owner or a manager. A key question is whether they use the same set of criteria. This study examines the question, and finds that owners and managers of small businesses have different views of the importance of the factors in their selection decision. Owners tend to take a more strategic view of software package selection, weigh technical factors more heavily, take more factors into consideration, and consider those factors in a more serious manner than managers. Therefore, different frameworks may be needed in the software package selection process by owners and managers of small businesses."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""CHAU, PYK (Corresponding Author), HONG KONG UNIV SCI \\& TECHNOL,SCH BUSINESS \\& MANAGEMENT,DEPT INFORMAT \\& SYST MANAGEMENT,KOWLOON,HONG KONG."",
    DOI = ""10.1016/0378-7206(95)00016-P"",
    ISSN = ""0378-7206"",
    Keywords = ""PACKAGED SOFTWARE; SELECTION CRITERIA; SMALL BUSINESSES"",
    Keywords-Plus = ""INFORMATION MANAGEMENT; SUCCESS; STRATEGY; SYSTEMS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    ResearcherID-Numbers = ""Chau, Patrick/A-4422-2010"",
    Number-of-Cited-References = ""28"",
    Times-Cited = ""44"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""11"",
    Journal-ISO = ""Inf. Manage."",
    Doc-Delivery-Number = ""RU464"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:A1995RU46400002"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Factors used in the selection of packaged software in small businesses: views of owners and managers	https://www.webofscience.com/wos/woscc/full-record/WOS:A1995RU46400002	ELSEVIER SCIENCE BV	nan; References
126	TrustSE	Enterprise resource planning: componentizing the enterprise application packages			Sprott, David	Commun. ACM	https://doi.org/10.1145/332051.332074		63-69	"""@article{10.1145/332051.332074,
    author = ""Sprott, David"",
    title = ""Enterprise resource planning: componentizing the enterprise application packages"",
    year = ""2000"",
    issue_date = ""April 2000"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""43"",
    number = ""4"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/332051.332074"",
    doi = ""10.1145/332051.332074"",
    journal = ""Commun. ACM"",
    month = ""April"",
    pages = ""63-69"",
    numpages = ""7""
}
"""						2	ACM		Enterprise resource planning: componentizing the enterprise application packages	https://doi.org/10.1145/332051.332074	Association for Computing Machinery	nan; Abstract; Keywords; References; Link
127	TrustSE	Reputation management of an Open Source Software system based on the trustworthiness of its contributions														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
128	TrustSE	Packaged software: selection and implementation policies														2						
129	TrustSE	How open source software works:“free” user-to-user assistance														2						
130	TrustSE	Transition of governance in a mature open software source community: Evidence from the Debian case	As open source software (OSS) communities mature, they have to introduce a variety of governance mechanisms to manage the participation of their members and to coordinate the launch of new releases. The Debian community introduced new mechanisms of informal administrative control based on a constitution, elected leaders, and used interactive communication channels. We show that these control mechanisms were introduced as a response to emerging innovative opportunities due to the usage of source packages and to the need to build a responsive organization within the Debian OSS community.	Open source software community; Governance; Debian; Open source software community;  Governance;  Debian	Sadowski, Bert M.; Sadowski-Rasters, Gaby; Duysters, Geert	INFORMATION ECONOMICS AND POLICY	https://doi.org/10.1016/j.infoecopol.2008.05.001		323-332	"""@article{WOS:000261859400004,
    Author = ""Sadowski, Bert M. and Sadowski-Rasters, Gaby and Duysters, Geert"",
    Title = ""Transition of governance in a mature open software source community: Evidence from the Debian case"",
    Journal = ""INFORMATION ECONOMICS AND POLICY"",
    Year = ""2008"",
    Volume = ""20"",
    Number = ""4, SI"",
    Pages = ""323-332"",
    Month = ""DEC"",
    Abstract = ""As open source software (OSS) communities mature, they have to introduce a variety of governance mechanisms to manage the participation of their members and to coordinate the launch of new releases. The Debian community introduced new mechanisms of informal administrative control based on a constitution, elected leaders, and used interactive communication channels. We show that these control mechanisms were introduced as a response to emerging innovative opportunities due to the usage of source packages and to the need to build a responsive organization within the Debian OSS community. (C) 2008 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Sadowski, BM (Corresponding Author), Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands. Sadowski, Bert M., Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands. Sadowski-Rasters, Gaby, Municipal Eindhoven, NL-5600 MB Eindhoven, Netherlands. Duysters, Geert, UNU MERIT, NL-6211 TC Maastricht, Netherlands."",
    DOI = ""10.1016/j.infoecopol.2008.05.001"",
    ISSN = ""0167-6245"",
    EISSN = ""1873-5975"",
    Keywords = ""Open source software community; Governance; Debian"",
    Keywords-Plus = ""EXPLOITATION; EXPLORATION; KNOWLEDGE; INTERNET"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Economics"",
    Author-Email = ""b.m.sadowski@tm.tue.nl g.sadowski@eindhoven.nl duysters@merit.unu.edu"",
    Affiliations = ""Eindhoven University of Technology; Maastricht University"",
    ORCID-Numbers = ""Sadowski, Bert/0000-0003-1340-2319"",
    Number-of-Cited-References = ""38"",
    Times-Cited = ""20"",
    Usage-Count-Last-180-days = ""6"",
    Usage-Count-Since-2013 = ""22"",
    Journal-ISO = ""Inf. Econ. Policy"",
    Doc-Delivery-Number = ""386CH"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000261859400004"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Transition of governance in a mature open software source community: Evidence from the Debian case	https://www.webofscience.com/wos/woscc/full-record/WOS:000261859400004	ELSEVIER	nan; References
131	TrustSE	Understanding free software developers: Findings from the FLOSS study														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
132	TrustSE	A framework analysis of the open source software development paradigm			Feller, Joseph; Fitzgerald, Brian	ICIS '00: Proceedings of the twenty first international conference on Information systems	https://doi.org/10.5555/359640.359723		58-69	"""@inproceedings{10.5555/359640.359723,
    author = ""Feller, Joseph and Fitzgerald, Brian"",
    title = ""A framework analysis of the open source software development paradigm"",
    year = ""2000"",
    publisher = ""Association for Information Systems"",
    address = ""USA"",
    booktitle = ""Proceedings of the Twenty First International Conference on Information Systems"",
    pages = ""58-69"",
    numpages = ""12"",
    location = ""Brisbane, Queensland, Australia"",
    series = ""ICIS '00""
}
"""						2	ACM		A framework analysis of the open source software development paradigm	https://doi.org/10.5555/359640.359723	Association for Information Systems	nan; Abstract; Keywords; References; Link
133	TrustSE	Information systems success in free and open source software development: Theory and measures														2						
134	TrustSE	The penguin has entered the building: The commercialization of open source software products	Previous literature on open source software ( OSS) mostly analyzes organizational issues within communities of developers and users. This paper focuses on for-profit torganizations that release software products under OSS licenses, and argues that variations in their endowments of intellectual property rights, namely patents and trademarks, help to determine which firms will tend to incorporate OSS into commercial products. We explain whether and under what conditions preexisting stocks of intellectual property rights can be useful complementary assets that allow firms to benefit directly or indirectly from commercializing OSS products, and test our hypotheses on a novel data set built on firms' announcements of OSS product releases in the specialized press between 1995 and 2003. We find three robust results: ( a) firms with large stocks of software patents are more likely to release OSS products; ( b) firms with large stocks of software trademarks are less likely to release OSS products; ( c) firms with large stocks of hardware trademarks are more likely to release OSS products.	open source software; product introductions; patents and trademarks; complementary assets; open source software;  product introductions;  patents and trademarks;  complementary assets	Fosfuri, Andrea; Giarratana, Marco S.; Luzzi, Alessandra	ORGANIZATION SCIENCE	https://doi.org/10.1287/orsc.1070.0321		292-305	"""@article{WOS:000254921800007,
    Author = ""Fosfuri, Andrea and Giarratana, Marco S. and Luzzi, Alessandra"",
    Title = ""The penguin has entered the building: The commercialization of open source software products"",
    Journal = ""ORGANIZATION SCIENCE"",
    Year = ""2008"",
    Volume = ""19"",
    Number = ""2"",
    Pages = ""292-305"",
    Month = ""MAR-APR"",
    Abstract = ""Previous literature on open source software ( OSS) mostly analyzes organizational issues within communities of developers and users. This paper focuses on for-profit torganizations that release software products under OSS licenses, and argues that variations in their endowments of intellectual property rights, namely patents and trademarks, help to determine which firms will tend to incorporate OSS into commercial products. We explain whether and under what conditions preexisting stocks of intellectual property rights can be useful complementary assets that allow firms to benefit directly or indirectly from commercializing OSS products, and test our hypotheses on a novel data set built on firms' announcements of OSS product releases in the specialized press between 1995 and 2003. We find three robust results: ( a) firms with large stocks of software patents are more likely to release OSS products; ( b) firms with large stocks of software trademarks are less likely to release OSS products; ( c) firms with large stocks of hardware trademarks are more likely to release OSS products."",
    Publisher = ""INFORMS"",
    Address = ""5521 RESEARCH PARK DR, SUITE 200, CATONSVILLE, MD 21228 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Fosfuri, A (Corresponding Author), Univ Carlos III Madrid, Dept Business Adm, Madrid 28903, Spain. Fosfuri, Andrea; Giarratana, Marco S.; Luzzi, Alessandra, Univ Carlos III Madrid, Dept Business Adm, Madrid 28903, Spain."",
    DOI = ""10.1287/orsc.1070.0321"",
    ISSN = ""1047-7039"",
    Keywords = ""open source software; product introductions; patents and trademarks; complementary assets"",
    Keywords-Plus = ""INNOVATION; PERFORMANCE; STRATEGIES; BUSINESS; ENTRY"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Management"",
    Author-Email = ""fosfuri@emp.uc3m.es marco.giarratana@uc3m.es alessandra.uzzi@uc3m.es"",
    Affiliations = ""Universidad Carlos III de Madrid"",
    ResearcherID-Numbers = ""Fosfuri, Andrea/O-6521-2014 Giarratana, Marco/N-1056-2016"",
    ORCID-Numbers = ""Giarratana, Marco/0000-0002-0015-6529 FOSFURI, ANDREA/0000-0001-6584-240X"",
    Number-of-Cited-References = ""48"",
    Times-Cited = ""102"",
    Usage-Count-Last-180-days = ""5"",
    Usage-Count-Since-2013 = ""73"",
    Journal-ISO = ""Organ Sci."",
    Doc-Delivery-Number = ""287MS"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000254921800007"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		The penguin has entered the building: The commercialization of open source software products	https://www.webofscience.com/wos/woscc/full-record/WOS:000254921800007	INFORMS	nan; References
135	TrustSE	Open source software: Free provision of complex public goods														2						
136	TrustSE	The social structure of free and open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
137	TrustSE	Allocation of Software Development Resources in Open Source Production Mode	This chapter contains sections titled: A New/Old Direction for Economic Research on the Phenomenon of FLOSS, A Simulation Model of OS/FS C-Mode Production, Emergent Properties, Conclusion and To-Do List, Notes				https://ieeexplore.ieee.org/document/6277083									2	IEEE		The allocation of software development resources in 'open source'production mode	https://ieeexplore.ieee.org/document/6277083	MIT Press	nan; Venue; Authors; Keywords; References; Pages; Year; Bibtex
138	TrustSE	Entry strategies under competing standards: Hybrid business models in the open source software industry	The paper analyzes the strategies of software firms that have entered the open source (OS) field. The notion of the OS business model is discussed in the light of a substantial body of theoretical literature concerning strategic management and the economics of innovation, as well as specialized literature on OS. Empirical evidence based on a survey of 146 Italian software firms shows that firms have adapted to an environment dominated by incumbent standards by combining the offering of proprietary and OS software under different licensing schemes, thus choosing a hybrid business model. The paper examines the determinants of the degree of openness toward OS and discusses the stability of hybrid models in the evolution of the industry.	open source; software industry; hybrid business models; switching costs; network externalities; open source;  software industry;  hybrid business models;  switching costs;  network externalities	Bonaccorsi, Andrea; Giannangeli, Silvia; Rossi, Cristina	MANAGEMENT SCIENCE	https://doi.org/10.1287/mnsc.1060.0547		1085-1098	"""@article{WOS:000238691100009,
    Author = ""Bonaccorsi, Andrea and Giannangeli, Silvia and Rossi, Cristina"",
    Title = ""Entry strategies under competing standards: Hybrid business models in the open source software industry"",
    Journal = ""MANAGEMENT SCIENCE"",
    Year = ""2006"",
    Volume = ""52"",
    Number = ""7"",
    Pages = ""1085-1098"",
    Month = ""JUL"",
    Note = ""3rd Annual International Industrial Organization Conference, Georgia Inst Technol, Conf Ctr, Atlanta, GA, APR 08-09, 2005"",
    Abstract = ""The paper analyzes the strategies of software firms that have entered the open source (OS) field. The notion of the OS business model is discussed in the light of a substantial body of theoretical literature concerning strategic management and the economics of innovation, as well as specialized literature on OS. Empirical evidence based on a survey of 146 Italian software firms shows that firms have adapted to an environment dominated by incumbent standards by combining the offering of proprietary and OS software under different licensing schemes, thus choosing a hybrid business model. The paper examines the determinants of the degree of openness toward OS and discusses the stability of hybrid models in the evolution of the industry."",
    Publisher = ""INFORMS"",
    Address = ""5521 RESEARCH PARK DR, SUITE 200, CATONSVILLE, MD 21228 USA"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Bonaccorsi, A (Corresponding Author), Univ Pisa, Dept Elect Syst \\& Automat, Via Diotisalvi 2, I-56126 Pisa, Italy. Univ Pisa, Dept Elect Syst \\& Automat, I-56126 Pisa, Italy. St Anna Sch Adv Studies, I-56127 Pisa, Italy. Politecn Milan, I-20133 Milan, Italy."",
    DOI = ""10.1287/mnsc.1060.0547"",
    ISSN = ""0025-1909"",
    EISSN = ""1526-5501"",
    Keywords = ""open source; software industry; hybrid business models; switching costs; network externalities"",
    Research-Areas = ""Business \\& Economics; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Management; Operations Research \\& Management Science"",
    Author-Email = ""a.bonaccorsi@gmail.com s.giannangeli@sssup.it cristina1.rossi@polimi.it"",
    Affiliations = ""University of Pisa; Scuola Superiore Sant'Anna; Polytechnic University of Milan"",
    Number-of-Cited-References = ""49"",
    Times-Cited = ""209"",
    Usage-Count-Last-180-days = ""6"",
    Usage-Count-Since-2013 = ""164"",
    Journal-ISO = ""Manage. Sci."",
    Doc-Delivery-Number = ""058UW"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Social Science \&amp; Humanities (CPCI-SSH); Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000238691100009"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Entry strategies under competing standards: Hybrid business models in the open source software industry	https://www.webofscience.com/wos/woscc/full-record/WOS:000238691100009	INFORMS	nan; References
139	TrustSE	The open source software phenomenon: Characteristics that promote research														2						
140	TrustSE	Socialization in an open source software community: A socio-technical analysis														2						
141	TrustSE	How copyleft uses license rights to succeed in the open source software revolution and the implications for article 2B														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
142	TrustSE	Decoding the free/open source software puzzle: A survey of theoretical and empirical contributions														2						
143	TrustSE	Open source software: A survey from 10,000 feet														2						
144	TrustSE	Categorizing bugs with social networks: a case study on four open source software communities	Efficient bug triaging procedures are an important precondition for successful collaborative software engineering projects. Triaging bugs can become a laborious task particularly in open source software (OSS) projects with a large base of comparably inexperienced part-time contributors. In this paper, we propose an efficient and practical method to identify valid bug reports which a) refer to an actual software bug, b) are not duplicates and c) contain enough information to be processed right away. Our classification is based on nine measures to quantify the social embeddedness of bug reporters in the collaboration network. We demonstrate its applicability in a case study, using a comprehensive data set of more than 700,000 bug reports obtained from the Bugzilla installation of four major OSS communities, for a period of more than ten years. For those projects that exhibit the lowest fraction of valid bug reports, we find that the bug reporters' position in the collaboration network is a strong indicator for the quality of bug reports. Based on this finding, we develop an automated classification scheme that can easily be integrated into bug tracking platforms and analyze its performance in the considered OSS communities. A support vector machine (SVM) to identify valid bug reports based on the nine measures yields a precision of up to 90.3\% with an associated recall of 38.9\%. With this, we significantly improve the results obtained in previous case studies for an automated early identification of bugs that are eventually fixed. Furthermore, our study highlights the potential of using quantitative measures of social organization in collaborative software engineering. It also opens a broad perspective for the integration of social awareness in the design of support infrastructures.		Zanetti, Marcelo Serrano; Scholtes, Ingo; Tessone, Claudio Juan; Schweitzer, Frank	ICSE '13: Proceedings of the 2013 International Conference on Software Engineering	https://doi.org/10.5555/2486788.2486930		1032-1041	"""@inproceedings{10.5555/2486788.2486930,
    author = ""Zanetti, Marcelo Serrano and Scholtes, Ingo and Tessone, Claudio Juan and Schweitzer, Frank"",
    title = ""Categorizing bugs with social networks: a case study on four open source software communities"",
    year = ""2013"",
    isbn = ""9781467330763"",
    publisher = ""IEEE Press"",
    abstract = ""Efficient bug triaging procedures are an important precondition for successful collaborative software engineering projects. Triaging bugs can become a laborious task particularly in open source software (OSS) projects with a large base of comparably inexperienced part-time contributors. In this paper, we propose an efficient and practical method to identify valid bug reports which a) refer to an actual software bug, b) are not duplicates and c) contain enough information to be processed right away. Our classification is based on nine measures to quantify the social embeddedness of bug reporters in the collaboration network. We demonstrate its applicability in a case study, using a comprehensive data set of more than 700,000 bug reports obtained from the Bugzilla installation of four major OSS communities, for a period of more than ten years. For those projects that exhibit the lowest fraction of valid bug reports, we find that the bug reporters' position in the collaboration network is a strong indicator for the quality of bug reports. Based on this finding, we develop an automated classification scheme that can easily be integrated into bug tracking platforms and analyze its performance in the considered OSS communities. A support vector machine (SVM) to identify valid bug reports based on the nine measures yields a precision of up to 90.3\\% with an associated recall of 38.9\\%. With this, we significantly improve the results obtained in previous case studies for an automated early identification of bugs that are eventually fixed. Furthermore, our study highlights the potential of using quantitative measures of social organization in collaborative software engineering. It also opens a broad perspective for the integration of social awareness in the design of support infrastructures."",
    booktitle = ""Proceedings of the 2013 International Conference on Software Engineering"",
    pages = ""1032-1041"",
    numpages = ""10"",
    location = ""San Francisco, CA, USA"",
    series = ""ICSE '13""
}
"""						2	ACM		Categorizing bugs with social networks: a case study on four open source software communities	https://doi.org/10.5555/2486788.2486930	IEEE Press	nan; Keywords; References; Link
145	TrustSE	Open source software as consumer integration into production														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
146	TrustSE	Core and Periphery in Free/Libre and Open Source Software Team Communications	"The concept of the core group of developers is important and often discussed in empirical studies of FLOSS projects. This paper examines the question, ""how does one empirically distinguish the core?"" Being able to identify the core members of a FLOSS development project is important because many of the processes necessary for successful projects likely involve core members differently than peripheral members, so analyses that mix the two groups will likely yield invalid results. We compare 3 analysis approaches to identify the core: the named list of developers, a Bradford's law analysis that takes as the core the most frequent contributors and a social network analysis of the interaction pattern that identifies the core in a core-and-periphery structure. We apply these measures to the interactions around bug fixing for 116 SourceForge projects. The 3 techniques identify different individuals as core members; examination of which individuals are identified leads to suggestions for refining the measures. All 3 measures though suggest that the core of FLOSS projects is a small fraction of the total number of contributors."	Open source software; Pattern analysis; Linux; Testing; Social network services; Moon; Social Network Analysis; Group Concept; Project Members; Bug Fixes; Team Members; Role In Formation; Hierarchical Structure; Level Of Agreement; Paper Analyses; Active Users; Development Core; Mailing Lists; Level Of Contribution; Project Samples; Role In Projects; Project Selection; Bug Reports	K. Crowston; Kangning Wei; Qing Li; J. Howison	Proceedings of the 39th Annual Hawaii International Conference on System Sciences (HICSS'06)	https://doi.org/10.1109/HICSS.2006.101	"1.S. Borgatti and M. Everett, ""Models of core/periphery structures,"" Social Networks, vol. 21, pp. 375-395, 1999. CrossRef  Google Scholar; 2.S. C. Bradford, Documentation. Washington, DC: Public Affairs Press, 1950. Google Scholar; 3.B. C. Brookes, ""Theory of the Bradford Law,"" Journal of Documentation, vol. 33, pp. 189-209, 1977. CrossRef  Google Scholar; 4.A. Cox, ""Cathedrals, Bazaars and the Town Council,"" 1998. Google Scholar; 5.K. Crowston, ""A coordination theory approach to organizational process design,"" Organization Science, vol. 8, pp. 157-175, 1997. CrossRef  Google Scholar; 6.K. Crowston and J. Howison, ""Hierarchy and Centralization in Free and Open Source Software team communications,"" Knowledge, Technology  Policy, In press. CrossRef  Google Scholar; 7.C. Gacek and B. Arief, ""The many meanings of Open Source,"" IEEE Software, vol. 21, pp. 34-40, 2004. View Article  Google Scholar; 8.J. Howison, M. S. Conklin, and K. Crowston, ""OSSmole: A collaborative repository for FLOSS research data and analyses,"" presented at 1st International Conference on Open Source Software, Genova, Italy, 2005. Google Scholar; 9.J. James, ""A preliminary study of the size determinant in small group interaction,"" American Sociological Review, vol. 16, pp. 474-477, 1952. CrossRef  Google Scholar; 10.S. Krishnamurthy, ""Cave or Community? An Empirical Examination of 100 Mature Open Source Projects,"" University of Washington, Bothell, Bothell, WA May 2002. Google Scholar; 11.A. Mockus, R. T. Fielding, and J. D. Herbsleb, ""A case study of Open Source Software development: The Apache server,"" m Proceedings of ICSE2000, 2000, pp. 11 pages. View Article  Google Scholar; 12.A. Mockus, R. T. Fielding, and J. D. Herbsleb, ""Two Case Studies Of Open Source Software Development: Apache And Mozilla,"" ACM Transactions on Software Engineering and Methodology, vol. 11, pp. 309-346, 2002. CrossRef  Google Scholar; 13.J. Y. Moon and L. Sproull, ""Essence of distributed work: The case of Linux kernel,"" First Monday, vol. 5, 2000. CrossRef  Google Scholar; 14.E. S. Raymond, ""The cathedral and the bazaar,"" First Monday,vol.3, 1998. CrossRef  Google Scholar; 15.S. Wasserman and K. Frost, Social Network Analysis: Methods and Applications. New York: Cambridge, 1994. CrossRef  Google Scholar"								2	IEEE		Core and periphery in free/libre and open source software team communications	https://ieeexplore.ieee.org/document/1579526	IEEE	nan; Pages; Year; Bibtex
147	TrustSE	The economics of open source software: A survey of the early literature														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
148	TrustSE	Open source software: the new intellectual property paradigm														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
149	TrustSE	The attraction of contributors in free and open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
150	TrustSE	Open source movements as a model for organising														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
151	TrustSE	Networking beyond the software code? an explorative examination of the development of an open source car project	At present several initiatives have emerged that claim to be innovative while acting according to the mechanisms of open source software (OSS) a field frequently deemed to be a role model for open innovation Against this background this study focuses on a case study of the development of an automobile Based on a commons-based peer production-Informed perspective we show that this project displays a variety of characteristics that are usually associated with OSS projects In particular parallels can be drawn between the intrinsic and extrinsic motivations the ability to broadcast ideas due to the virtual nature of the tasks and the self-selection of tasks due to their modular nature The drawing of such parallels however must be done cautiously because diverse factors such as opportunity costs regulations and feasibility studies limit the applicability of OSS principles to this non-software related network of dispersed voluntary contributors within a commons-based peer production framework Herein we attempt to clarify how OSS projects can and cannot work as role models for open innovation in the automotive as well as other product-oriented industries	Open innovation; Open source software; Project networks; Modularity; Motivation; Automotive industry; Open innovation;  Open source software;  Project networks;  Modularity;  Motivation;  Automotive industry	Muller-Seitz, Gordon; Reger, Guido	TECHNOVATION	https://doi.org/10.1016/j.technovation.2010.07.006		627-634	"""@article{WOS:000283980600012,
    Author = ""Muller-Seitz, Gordon and Reger, Guido"",
    Title = ""Networking beyond the software code? an explorative examination of the development of an open source car project"",
    Journal = ""TECHNOVATION"",
    Year = ""2010"",
    Volume = ""30"",
    Number = ""11-12"",
    Pages = ""627-634"",
    Month = ""NOV-DEC"",
    Abstract = ""At present several initiatives have emerged that claim to be innovative while acting according to the mechanisms of open source software (OSS) a field frequently deemed to be a role model for open innovation Against this background this study focuses on a case study of the development of an automobile Based on a commons-based peer production-Informed perspective we show that this project displays a variety of characteristics that are usually associated with OSS projects In particular parallels can be drawn between the intrinsic and extrinsic motivations the ability to broadcast ideas due to the virtual nature of the tasks and the self-selection of tasks due to their modular nature The drawing of such parallels however must be done cautiously because diverse factors such as opportunity costs regulations and feasibility studies limit the applicability of OSS principles to this non-software related network of dispersed voluntary contributors within a commons-based peer production framework Herein we attempt to clarify how OSS projects can and cannot work as role models for open innovation in the automotive as well as other product-oriented industries (C) 2010 Elsevier Ltd All rights reserved"",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Muller-Seitz, G (Corresponding Author), Free Univ Berlin, Dept Management, Boltzmannstr 20, D-14195 Berlin, Germany. Muller-Seitz, Gordon, Free Univ Berlin, Dept Management, D-14195 Berlin, Germany. Reger, Guido, Univ Potsdam, Ctr Entrepreneurship \\& Innovat, D-14482 Potsdam, Germany."",
    DOI = ""10.1016/j.technovation.2010.07.006"",
    ISSN = ""0166-4972"",
    EISSN = ""1879-2383"",
    Keywords = ""Open innovation; Open source software; Project networks; Modularity; Motivation; Automotive industry"",
    Keywords-Plus = ""INNOVATION; COMMUNITY; LINUX; ORGANIZATION; CREATION; MODEL"",
    Research-Areas = ""Engineering; Business \\& Economics; Operations Research \\& Management Science"",
    Web-of-Science-Categories = ""Engineering, Industrial; Management; Operations Research \\& Management Science"",
    Affiliations = ""Free University of Berlin; University of Potsdam"",
    ORCID-Numbers = ""Muller-Seitz, Gordon/0000-0003-2232-2644"",
    Number-of-Cited-References = ""53"",
    Times-Cited = ""28"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""37"",
    Journal-ISO = ""Technovation"",
    Doc-Delivery-Number = ""677HV"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000283980600012"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Networking beyond the software code? an explorative examination of the development of an open source car project	https://www.webofscience.com/wos/woscc/full-record/WOS:000283980600012	ELSEVIER	nan; References
152	TrustSE	Infectious open source software: Spreading incentives or promoting resistance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
153	TrustSE	Analysis of license inconsistency in large collections of open source projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
154	TrustSE	Coordinating interdependencies in online communities: A study of an open source software project														2						
155	TrustSE	Vertical interaction in open software engineering communities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
156	TrustSE	The Mysteries of Open Source Software: Black and White and Red All Over?	Open Source Software (OSS) has attracted enormous media and research attention since the term was coined in February 1998. The concept itself is founded on the paradoxical premise that software source code-the 'crown jewels' for many proprietary software companies-should be provided freely to anyone who wishes to see it. Given this fundamental initial paradox, it is perhaps hardly surprising that the OSS concept is characterised by contradictions, paradoxes and tensions throughout. In this paper we focus specifically on the following issues in relation to OSS: the cathedral v. bazaar development approach; collectivism v. individualism, the bitter strife within the OSS community itself (OSS v. OSS), and between OSS and the Free Software Foundation (OSS v. FSF); whether OSS represents a paradigm shift in the software industry; whether the software is truly open-the Berkeley Conundrum, as we have termed it here; whether OSS truly is high quality software; and whether OSS is a 'one size fits all,' representing the future model for all software development.	Open source software; Software quality; Linux; Computer industry; Operating systems; State feedback; Industrial relations; Programming; Explosions; Resonance; Open-source; Open-source Software; Title Of The Paper; English-speaking Regions; Paradigm Shift; Source Code; Individualism; Software Development; Proprietary Software; Software Industry; Free Software Foundation; Crown Jewels; Development Process; Operating System; Modularity; Processing Software; Software Engineering; Binary Format; Ms Window; Software Product; Open Source Software Projects; Silver Bullet; Open-source Community; Self-deprecating; Software Vendors; Open-source Projects; Rapid Timescale; Voluntary Contributions; Availability Of Source Code; Software Quality	B. Fitzgerald; P.J. Agerfalk	Proceedings of the 38th Annual Hawaii International Conference on System Sciences	https://doi.org/10.1109/HICSS.2005.609	"1.M. Bergquist and J. Ljungberg, ""The Power of Gifts: Organising Social Relationships in Open Source Communities"" in , Sweden:Gothenberg University, 2001. CrossRef  Google Scholar; 2.F. Brooks, ""The Mythical Man-Month"" in , USA:Addison-Wesley, 1975. CrossRef  Google Scholar; 3.F. Brooks, ""No silver bullet: essence and accidents of software engineering"", IEEE Computer Magazine, April 1987. View Article  Google Scholar; 4.M. Campbell-Kelly, ""A History of the Software Industry"" in , Cambridge, MA:MIT Press, 2003. Google Scholar; 5.A. Cox, Cathedrals bazaars and the town council, 1998. Google Scholar; 6.B.J. Dempsey, D. Weiss, P. Jones and J. Greenberg, ""A quantitative profile of a community of open source Linux developers"", Technical Report TR-1999-05, 1999. Google Scholar; 7.C. Di Bona, S. Ockman and M. Stone, ""Introduction to Open Sources: Voices from the Open Source Revolution"" in , USA:OReilly  Associates, 1999. Google Scholar; 8.J. Feller and B. Fitzgerald, ""A Framework Analysis of the Open Source Development Paradigm"", Proceedings of the 21st International Conference in Information Systems, December 2000. Google Scholar; 9.P. Flaatten, D. McCubbrey, P. ORiordan and K. Burgess, ""Foundations of Business Systems"" in , Chicago:Dryden Press, 1989. Google Scholar; 10.K. Fogel, ""Open Source Development with CVS"" in , USA:Coriolis Open Press, 1999. Google Scholar; 11.R. Ghosh and V.V. Prakash, ""The Orbiten Free Software Survey"", First Monday, vol. 5, pp. 7, 2000. CrossRef  Google Scholar; 12.""The Halloween Documents"", 1998. Google Scholar; 13.R. Irwin, ""What is FUD?"", 1998. Google Scholar; 14.N. Jorgensen, ""Putting It All in the Trunk: Incremental Software Development in the FreeBSD Open Source Project"" in , Denmark:Roskilde University, 2001. CrossRef  Google Scholar; 15.K. Kuwabara, ""Linux: A Bazaar at the Edge of Chaos"", First Monday, vol. 5, pp. 3, 2000. CrossRef  Google Scholar; 16.E. Leibovitch, ""The Business Case for Linux"", IEEE Software, Jan/Feb 1999. View Article  Google Scholar; 17.T. Lewis, ""The Open Source Acid Test"", IEEE Computer, Feb 1999. View Article  Google Scholar; 18.J. Lerner and J. Tirole, ""The simple economics of open source"", Harvard Business School Working Paper #00-059, 2000. CrossRef  Google Scholar; 19.A Leonard, Salon Free Software Project: Chapter 1 Boot Time, 2000. Google Scholar; 20.J. Ljungberg, ""Open source movements as a model of organising"", Proceedings of 8th European Conference on Information Systems, 2000. CrossRef  Google Scholar; 21.S. McConnell, ""Open Source Methodology: Ready for Prime Time?"", IEEE Software, Jul/Aug 1999. Google Scholar; 22.M. McKusick, ""Twenty Years of Berkeley UNIX: From AT to Freely Redistributable"" in Open Sources: Voices from the Open Source Revolution, USA:OReilly  Associates, 1999. Google Scholar; 23.B. Metcalfe, From the ether, June 1999. Google Scholar; 24.R. Mitchell, ""New Numbers Historic Ramifications"", Wide Open News, February 2000. Google Scholar; 25.R. Mitchell, ""Linux Widens Lead in Web Market Share"", Wide Open News, April 2000. Google Scholar; 26.A. Mockus, R. Fielding and J. Herbsleb, ""A case study of open source software development: the Apache server"", Proceedings of 22nd International Conference on Software Engineering, pp. 263-272, 2000. View Article  Google Scholar; 27.T. Nadeau, Learning from Linux, 1999. Google Scholar; 28.L. Nakakoji and K. Yakamoto, ""A taxonomy of open source software development"", Proceedings of First Workshop on Open Source Software, 2001. Google Scholar; 29.The Netcraft Web Server Survey, 2001. Google Scholar; 30.S OMahony, ""Non-Profit Foundations and their Role in Community-Firm Software Collaboration"" in Perspectives on Free and Open Source Software, Cambridge:MIT Press, 2004. CrossRef  Google Scholar"								2	IEEE		The mysteries of open source software: Black and white and red all over?	https://ieeexplore.ieee.org/document/1385636	IEEE	nan; Pages; Year; Bibtex
157	TrustSE	Trust engineering:rejecting the tyranny of the weakest link	In 2002 [1], the National Security Agency's Information Assurance Research Group coined the term,trust engineering, to describe a methodology for making use of software of uncertain provenance in mission-critical systems. Today, the loss of control that made software so hard to trust then applies to the rest of the supply chain as well. The discipline we described in the internal paper, <u>Trust-engineering: An Assurance Strategy for Software-based Systems</u>, no longer seems heretical today, even at NSA. Ten years later, we revisit the principles of trust engineering, compare the mechanisms available to us today with the practices of the past, and explore the construction of systems that are stronger than their weakest link.	assurance; composition; containment; defense in depth; isolation; layered; monitoring; moving target defense; provenance; supply chain; trust; trust engineering; virtualization	Susan D. Alexander	ACSAC '12: Proceedings of the 28th Annual Computer Security Applications Conference	https://doi.org/10.1145/2420950.2420973		145-148							2	ACM		Trust engineering: rejecting the tyranny of the weakest link	https://doi.org/10.1145/2420950.2420973	Association for Computing Machinery	nan; References; Year; Bibtex; Link
158	TrustSE	Learning from open source software projects to improve scientific review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
159	TrustSE	Managing the Bazaar: Commercialization and peripheral participation in mature, community-led Free/Open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
160	TrustSE	A survey of trust in computer science and the Semantic Web	Trust is an integral component in many kinds of human interaction, allowing people to act under uncertainty and with the risk of negative consequences. For example, exchanging money for a service, giving access to your property, and choosing between conflicting sources of information all may utilize some form of trust. In computer science, trust is a widely used term whose definition differs among researchers and application areas. Trust is an essential component of the vision for the SemanticWeb, where both new problems and new applications of trust are being studied. This paper gives an overview of existing trust research in computer science and the Semantic Web.	trust; web of trust; policies; reputation; trust;  web of trust;  policies;  reputation	Artz, Donovan; Gil, Yolanda	JOURNAL OF WEB SEMANTICS	https://doi.org/10.1016/j.websem.2007.03.002		58-71	"""@article{WOS:000247054400003,
    Author = ""Artz, Donovan and Gil, Yolanda"",
    Title = ""A survey of trust in computer science and the Semantic Web"",
    Journal = ""JOURNAL OF WEB SEMANTICS"",
    Year = ""2007"",
    Volume = ""5"",
    Number = ""2"",
    Pages = ""58-71"",
    Month = ""JUN"",
    Abstract = ""Trust is an integral component in many kinds of human interaction, allowing people to act under uncertainty and with the risk of negative consequences. For example, exchanging money for a service, giving access to your property, and choosing between conflicting sources of information all may utilize some form of trust. In computer science, trust is a widely used term whose definition differs among researchers and application areas. Trust is an essential component of the vision for the SemanticWeb, where both new problems and new applications of trust are being studied. This paper gives an overview of existing trust research in computer science and the Semantic Web. (C) 2007 Published by Elsevier B. V."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Gil, Y (Corresponding Author), Univ So Calif, Inst Informat Sci, 4677 Admiralty Way, Marina Del Rey, CA 90292 USA. Univ So Calif, Inst Informat Sci, Marina Del Rey, CA 90292 USA."",
    DOI = ""10.1016/j.websem.2007.03.002"",
    ISSN = ""1570-8268"",
    EISSN = ""1873-7749"",
    Keywords = ""trust; web of trust; policies; reputation"",
    Keywords-Plus = ""PROVENANCE"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Artificial Intelligence; Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""dono@isi.edu gil@isi.edu"",
    Affiliations = ""University of Southern California"",
    ORCID-Numbers = ""Gil, Yolanda/0000-0001-8465-8341"",
    Number-of-Cited-References = ""109"",
    Times-Cited = ""318"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""67"",
    Journal-ISO = ""J. Web Semant."",
    Doc-Delivery-Number = ""176AF"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000247054400003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		A survey of trust in computer science and the semantic web	https://www.webofscience.com/wos/woscc/full-record/WOS:000247054400003	ELSEVIER	nan; References
161	TrustSE	The mechanics of trust: A framework for research and design														2						
162	TrustSE	Open source software user communities: A study of participation in Linux user groups														2						
163	TrustSE	The transformation of open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
164	TrustSE	Antecedents of commitment and trust in customer–supplier relationships in high technology markets														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
165	TrustSE	Free/Libre open-source software development: What we know and what we do not know	We review the empirical research on Free/Libre and Open-Source Software (FLOSS) development and assess the state of the literature. We develop a framework for organizing the literature based on the input-mediator-output-input (IMOI) model from the small groups literature. We present a quantitative summary of articles selected for the review and then discuss findings of this literature categorized into issues pertaining to inputs (e.g., member characteristics, technology use, and project characteristics), processes (software development practices, social processes, and firm involvement practices), emergent states (e.g., social states and task-related states), and outputs (e.g. team performance, FLOSS implementation, and project evolution). Based on this review, we suggest topics for future research, as well as identify methodological and theoretical issues for future inquiry in this area, including issues relating to sampling and the need for more longitudinal studies.	distributed work;  development;  computer-mediated communication;  Free/Libre open-source software; distributed work, development, computer-mediated communication, Free/Libre open-source software	Crowston, Kevin; Wei, Kangning; Howison, James; Wiggins, Andrea	ACM Comput. Surv.	https://doi.org/10.1145/2089125.2089127			"""@article{10.1145/2089125.2089127,
    author = ""Crowston, Kevin and Wei, Kangning and Howison, James and Wiggins, Andrea"",
    title = ""Free/Libre open-source software development: What we know and what we do not know"",
    year = ""2008"",
    issue_date = ""February 2012"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""44"",
    number = ""2"",
    issn = ""0360-0300"",
    url = ""https://doi.org/10.1145/2089125.2089127"",
    doi = ""10.1145/2089125.2089127"",
    abstract = ""We review the empirical research on Free/Libre and Open-Source Software (FLOSS) development and assess the state of the literature. We develop a framework for organizing the literature based on the input-mediator-output-input (IMOI) model from the small groups literature. We present a quantitative summary of articles selected for the review and then discuss findings of this literature categorized into issues pertaining to inputs (e.g., member characteristics, technology use, and project characteristics), processes (software development practices, social processes, and firm involvement practices), emergent states (e.g., social states and task-related states), and outputs (e.g. team performance, FLOSS implementation, and project evolution). Based on this review, we suggest topics for future research, as well as identify methodological and theoretical issues for future inquiry in this area, including issues relating to sampling and the need for more longitudinal studies."",
    journal = ""ACM Comput. Surv."",
    month = ""March"",
    articleno = ""7"",
    numpages = ""35"",
    keywords = ""distributed work, development, computer-mediated communication, Free/Libre open-source software""
}
"""						2	ACM		Free/Libre open-source software development: What we know and what we do not know	https://doi.org/10.1145/2089125.2089127	Association for Computing Machinery	nan; References; Pages; Link
166	TrustSE	The ALPS project release 2.0: open source software for strongly correlated systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
167	TrustSE	Tragedy of the FOSS commons? Investigating the institutional designs of free/libre and open source software projects														2						
168	TrustSE	On the Impact of Software Ecosystems in Requirements Communication and Management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
169	TrustSE	An empirical analysis of software vendors' patch release behavior: impact of vulnerability disclosure														2						
170	TrustSE	Progressive open source	The success of several Open Source(tm) software systems, e.g., Apache, Bind, Emacs, and Linux, has recently sparked interest in studying and emulating the software engineering principles underlying this innovative development and use model. Certain aspects of the Open Source development method, e.g., community building, open discussions for requirements and features, and evolvable and modular designs are having fundamental and far reaching consequences on general software engineering practices.To leverage such Open Source methods and tools, we have defined an innovative software engineering paradigm for large corporations: Progressive Open Source (POS). POS leverages the power of Open Source methods and tools for large corporations in a progressive manner: starting from completely within the corporation, to include partner businesses, and eventually complete Open Source. In this paper we present the design goals and principles for POS. We illustrate POS with two programs in HP: Corporate Source and the Collaborative Development Program (CDP). We present early results from both these programs suggesting the power and necessity of POS for all modern large corporations.		Dinkelacker, Jamie; Garg, Pankaj K.; Miller, Rob; Nelson, Dean	ICSE '02: Proceedings of the 24th International Conference on Software Engineering	https://doi.org/10.1145/581339.581363		177-184	"""@inproceedings{10.1145/581339.581363,
    author = ""Dinkelacker, Jamie and Garg, Pankaj K. and Miller, Rob and Nelson, Dean"",
    title = ""Progressive open source"",
    year = ""2002"",
    isbn = ""158113472X"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/581339.581363"",
    doi = ""10.1145/581339.581363"",
    abstract = ""The success of several Open Source(tm) software systems, e.g., Apache, Bind, Emacs, and Linux, has recently sparked interest in studying and emulating the software engineering principles underlying this innovative development and use model. Certain aspects of the Open Source development method, e.g., community building, open discussions for requirements and features, and evolvable and modular designs are having fundamental and far reaching consequences on general software engineering practices.To leverage such Open Source methods and tools, we have defined an innovative software engineering paradigm for large corporations: Progressive Open Source (POS). POS leverages the power of Open Source methods and tools for large corporations in a progressive manner: starting from completely within the corporation, to include partner businesses, and eventually complete Open Source. In this paper we present the design goals and principles for POS. We illustrate POS with two programs in HP: Corporate Source and the Collaborative Development Program (CDP). We present early results from both these programs suggesting the power and necessity of POS for all modern large corporations."",
    booktitle = ""Proceedings of the 24th International Conference on Software Engineering"",
    pages = ""177-184"",
    numpages = ""8"",
    location = ""Orlando, Florida"",
    series = ""ICSE '02""
}
"""						2	ACM		Progressive open source	https://doi.org/10.1145/581339.581363	Association for Computing Machinery	nan; Keywords; References; Link
171	TrustSE	Predicting fault incidence using software change history	This paper is an attempt to understand the processes by which software ages. We define code to be aged or decayed if its structure makes it unnecessarily difficult to understand or change and we measure the extent of decay by counting the number of faults in code in a period of time. Using change management data from a very large, long-lived software system, we explore the extent to which measurements from the change history are successful in predicting the distribution over modules of these incidences of faults. In general, process measures based on the change history are more useful in predicting fault rates than product metrics of the code: For instance, the number of times code has been changed is a better indication of how many faults it will contain than is its length. We also compare the fault rates of code of various ages, finding that if a module is, on the average, a year older than an otherwise similar module, the older module will have roughly a third fewer faults. Our most successful model measures the fault potential of a module as the sum of contributions from all of the times the module has been changed, with large, recent changes receiving the most weight.	History; Predictive models; Software systems; Aging; Time measurement; Software measurement; Length measurement; Software development management; Statistical analysis; Degradation	T.L. Graves; A.F. Karr; J.S. Marron; H. Siy	IEEE Transactions on Software Engineering	https://doi.org/10.1109/32.859533	"1.M.M. Lehman and L.A. Belady, Program Evolution: Processes of Software Change., 1985. Google Scholar; 2.J.D. Musa, A. Iannino and K. Okumoto, Software Reliability., 1990. Google Scholar; 3.J. Jelinski and P.B. Moranda, ""Software Reliability Research"", in Probabilistic Models for Software, pp. 485-502, 1972. CrossRef  Google Scholar; 4.G.J. Schick and R.W. Wolverton, ""An Analysis of Competing Software Reliability Models"", IEEE Trans. Software Eng., vol. 4, no. 2, pp. 104-120, Mar. 1978. View Article  Google Scholar; 5.S.N. Mohanty, ""Models and Measurements for Quality Assessment of Software"", ACM Computing Surveys, vol. 11, no. 3, pp. 251-275, Sept. 1979. CrossRef  Google Scholar; 6.S.G. Eick, C.R. Loader, M.D. Long, L.G. Votta and S. VanderWiel, ""Estimating Software Fault Content Before Coding"", Proc. 14th Int'l Conf. Software Eng., pp. 59-65, 1992-May. View Article  Google Scholar; 7.D.A. Christenson and S.T. Huang, ""Estimating the Fault Content of Software Using the Fix-on-Fix Model"", Bell Labs Technical J., vol. 1, no. 1, pp. 130-137, Summer 1996. CrossRef  Google Scholar; 8.K.H. An, D.A. Gustafson and A.C. Melton, ""A Model for Software Maintenance"", Proc. Conf. Software Maintenance, pp. 57-62, 1987-Sept. CrossRef  Google Scholar; 9.V.R. Basili and B.T. Perricone, ""Software Errors and Complexity: An Empirical Investigation"", Comm. ACM, vol. 27, no. 1, pp. 42-52, Jan. 1984. CrossRef  Google Scholar; 10.L. Hatton, ""Reexamining the Fault DensityComponent Size Connection"", IEEE Software, pp. 89-97, Mar./Apr. 1997. View Article  Google Scholar; 11.T.J. McCabe, ""A Complexity Measure"", IEEE Trans. Software Eng., vol. 2, no. 4, pp. 308-320, Dec. 1976. View Article  Google Scholar; 12.M.H. Halstead, Elements of Software Science., 1979. Google Scholar; 13.N.F. Schneidewind and H.-M. Hoffman, ""An Experiment in Software Error Data Collection and Analysis"", IEEE Trans. Software Eng., vol. 5, no. 3, pp. 276-286, May 1979. View Article  Google Scholar; 14.V.Y. Shen, T.-J. Yu, S.M. Thebaut and L.R. Paulsen, ""Identifying Error-Prone SoftwareAn Empirical Study"", IEEE Trans. Software Eng., vol. 11, no. 4, pp. 317-324, Apr. 1985. View Article  Google Scholar; 15.J.C. Munson and T.M. Khoshgoftaar, ""Regression Modelling of Software Quality: Empirical Investigation"", Information and Software Technology, pp. 106-114, 1990. CrossRef  Google Scholar; 16.P. McCullagh and J.A. Nelder, Generalized Linear Models, 1989. CrossRef  Google Scholar; 17.H. Zuse, Software Complexity: Measures and Methods., 1991. Google Scholar; 18.T.J. Yu, V.Y. Shen and H.E. Dunsmore, ""An Analysis of Several Software Defect Models"", IEEE Trans. Software Eng., vol. 14, no. 9, pp. 1,261-1,270, Sept. 1988. View Article  Google Scholar; 19.N. Ohlsson and H. Alberg, ""Predicting Fault-Prone Software Modules in Telephone Switches"", IEEE Trans. Software Eng., vol. 22, no. 12, pp. 886-894, Dec. 1996. View Article  Google Scholar; 20.M.J. Rochkind, ""The Source Code Control System"", IEEE Trans. Software Eng., vol. 1, no. 4, pp. 364-370, Dec. 1975. View Article  Google Scholar; 21.B. Efron and R.J. Tibshirani, An Introduction to the Bootstrap., 1993. CrossRef  Google Scholar"	653- 661							2	IEEE		Predicting fault incidence using software change history	https://ieeexplore.ieee.org/document/859533	IEEE	nan; Year; Bibtex
172	TrustSE	Convicting exploitable software vulnerabilities: An efficient input provenance based approach	Software vulnerabilities are the root cause of a wide range of attacks. Existing vulnerability scanning tools are able to produce a set of suspects. However, they often suffer from a high false positive rate. Convicting a suspect and vindicating false positives are mostly a highly demanding manual process, requiring a certain level of understanding of the software. This limitation significantly thwarts the application of these tools by system administrators or regular users who are concerned about security but lack of understanding of, or even access to, the source code. It is often the case that even developers are reluctant to inspect/fix these numerous suspects unless they are convicted by evidence. In this paper, we propose a lightweight dynamic approach which generates evidence for various security vulnerabilities in software, with the goal of relieving the manual procedure. It is based on data lineage tracing, a technique that associates each execution point precisely with a set of relevant input values. These input values can be mutated by an offline analysis to generate exploits. We overcome the efficiency challenge by using Binary Decision Diagrams (BDD). Our tool successfully generates exploits for all the known vulnerabilities we studied. We also use it to uncover a number of new vulnerabilities, proved by evidence.	Software; Data structures; Boolean functions; Runtime; Conferences; Equations; Detectors; Security Vulnerabilities; Source Code; Input Values; Dynamic Approach; High False Positive Rate; Lineage Tracing; Regular Users; Heuristic; Scope Of This Paper; Random Generation; Search Method; Flow Control; Static Analysis; Binary Code; Benchmark Test; Program Execution; Input Generation; Lineage Information; Constraint Satisfaction Problem; Buffer Overflow; Execution Steps; Input Program; System Calls; Runtime Overhead; Vulnerable Locations	Zhiqiang Lin; Xiangyu Zhang; Dongyan Xu	2008 IEEE International Conference on Dependable Systems and Networks With FTCS and DCC (DSN)	https://doi.org/10.1109/DSN.2008.4630093	1.http://www.dwheeler.com/flawfinder/; 2.http://www.fortifysoftware.com/security-resources/rats.jsp; 3.http://diablo.elis.ugent.be; 4.Buddy, a binary decision diagram package. Department of Information Technology, Technical Univ. of Denmark.; 5.C. Meinel and T. Theobald. Algorithms and data structures in vlsi design, 1998. Springer. CrossRef  Google Scholar; 6.Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. N. Nethercote and J. Seward. In Proc. of ACMPLDI, June 2007.; 7.B.P. Miller, L. Fredriksen, and B. So. An Empirical Study of the Reliability of UNIX Utilities. Communications of the ACM 33, 12, Dec. 1990.; 8.J. E. Forrester and B. P. Miller. An Empirical Study of the Robustness of Windows NT Applications Using Random Testing. In Proc. of the 4th USENIX Windows System Symposium, 2000. Google Scholar; 9.C. Cadar, V. Ganesh, P. Pawlowski, D. Dill, and D. Engler. Exe: automatically generating inputs of death. In Proc. of ACM CCS, Nov. 2006. CrossRef  Google Scholar; 10.K. Sen, D. Marinov, and G. Agha. Cute: A concolic unit testing engine for c. In Proc. of ACM ESEC/FSE-13, 2005. CrossRef  Google Scholar; 11.P. Godefroid, N. Klarlund, and K. Sen. Dart: Directed automated random testing. In Proc. of ACM PLDI, 2005.; 12.A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proc. of 2007 IEEE Symposium on Security and Privacy, May 2007. View Article  Google Scholar; 13.P. Godefroid, M. Levin, and D. Moinar. Automated whitebox fuzz testing. In Proc. of NDSS, San Deigo, CA, Feb. 2008. View Article  Google Scholar; 14.M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic Spyware Analysis. In Proc. of the 2007 USENIX Annual Technical Conference, Santa Clara, CA, June 2007. Google Scholar; 15.J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software.. In Proc. of NDSS, Feb. 2005. Google Scholar; 16.M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity: Principles, Implementations, and Applications. In Proc of ACM CCS, Nov. 2005. CrossRef  Google Scholar; 17.M. Castro, M. Costa, and T. Harris. Securing Software by Enforcing Data-flow Integrity. In Proc. of OSDI, Nov. 2006. Google Scholar; 18.D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In Proc. of NDSS, Feb. 2000. Google Scholar; 19.D. Larochelle and D. Evans. Statically Detecting Likely Buffer Overflow Vulnerabilities. In Proc. of USENIX Security, 2001. Google Scholar; 20.M. Zitser, D. Shaw, T. Leek and R. Lippman. Testing Static Analysis Tools Using Exploitable Buffer Overflows From Open Source Code. In Proc. of ACM ESEC/FSE-11, 2004. CrossRef  Google Scholar; 21.Y. Xie, A. Chou, and D. Engler. Archer: using symbolic, path-sensitive analysis to detect memory access errors. In Proc. of ACM ESEC/FSE-10, 2003. CrossRef  Google Scholar; 22.J. Ferrante, K. Ottenstein, J. Warren. The program dependence graph and its use in optimization. ACM Trans. on Programming Languages and Systems, 9(3),1987. CrossRef  Google Scholar; 23.M. Weiser. Program slicing. In Proc. of ICSE, 1981. View Article  Google Scholar; 24.X. Zhang, R. Gupta, and Y. Zhang. Efficient forward computation of dynamic slices using reduced ordered binary decision diagrams. In Proc. of ICSE, 2004. View Article  Google Scholar								2	IEEE		Convicting exploitable software vulnerabilities: An efficient input provenance based approach	https://ieeexplore.ieee.org/document/4630093	IEEE	nan; Pages; Year; Bibtex
173	TrustSE	Robust open-source software	No abstract available.		Neumann, Peter G.	Intellectual property in the age of universal access	https://doi.org/10.1145/318536.318542		22	"""@inbook{10.1145/318536.318542,
    author = ""Neumann, Peter G."",
    title = ""Robust open-source software"",
    year = ""1999"",
    isbn = ""1581131690"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/318536.318542"",
    booktitle = ""Intellectual Property in the Age of Universal Access"",
    pages = ""22""
}
"""						2	ACM		Robust open-source software	https://doi.org/10.1145/318536.318542	Association for Computing Machinery	nan; Keywords; References; Link
174	TrustSE	The social shaping of packaged software selection														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
175	TrustSE	Organizational adoption of open source software: barriers and remedies	"IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail."		Nagy, Del; Yassin, Areej M.; Bhattacherjee, Anol	Commun. ACM	https://doi.org/10.1145/1666420.1666457		148-151	"""@article{10.1145/1666420.1666457,
    author = ""Nagy, Del and Yassin, Areej M. and Bhattacherjee, Anol"",
    title = ""Organizational adoption of open source software: barriers and remedies"",
    year = ""2010"",
    issue_date = ""March 2010"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""53"",
    number = ""3"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1666420.1666457"",
    doi = ""10.1145/1666420.1666457"",
    abstract = {IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail.},
    journal = ""Commun. ACM"",
    month = ""March"",
    pages = ""148-151"",
    numpages = ""4""
}
"""						2	ACM		Organizational adoption of open source software	https://doi.org/10.1145/1666420.1666457	Association for Computing Machinery	nan; Keywords; References; Link
176	TrustSE	Comparison of open-source cloud management platforms: OpenStack and OpenNebula														2						
177	TrustSE	Do developers update their library dependencies?														2						
178	TrustSE	Component-based systems: A classification of issues														2						
179	TrustSE	Trust Perceptions of Metadata in Open-Source Software: The Role of Performance and Reputation														2						
180	TrustSE	Online trust and reputation systems	As online commerce, social networks, and user-generated content become common, need for trust and reputation models become prime. This tutorial will give an overview of trust and reputation systems as studied by social network researchers. Other topics include: Reputation and its relationship to security and fraud; Feedback and other Manifestations and Implementations of trust and reputations; Models of reputation; platforms: P2P systems, Centralized systems; Auctions, Incentive systems; Collaborative filtering; Social Networking and Social reputation; Portability and Universality of Identity, trust, and reputation.	trust;  reputation;  fraud detection;  feedback;  electronic commerce; trust, reputation, fraud detection, feedback, electronic commerce	Sundaresan, Neel	EC '07: Proceedings of the 8th ACM conference on Electronic commerce	https://doi.org/10.1145/1250910.1250969		366-367	"""@inproceedings{10.1145/1250910.1250969,
    author = ""Sundaresan, Neel"",
    title = ""Online trust and reputation systems"",
    year = ""2007"",
    isbn = ""9781595936530"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1250910.1250969"",
    doi = ""10.1145/1250910.1250969"",
    abstract = ""As online commerce, social networks, and user-generated content become common, need for trust and reputation models become prime. This tutorial will give an overview of trust and reputation systems as studied by social network researchers. Other topics include: Reputation and its relationship to security and fraud; Feedback and other Manifestations and Implementations of trust and reputations; Models of reputation; platforms: P2P systems, Centralized systems; Auctions, Incentive systems; Collaborative filtering; Social Networking and Social reputation; Portability and Universality of Identity, trust, and reputation."",
    booktitle = ""Proceedings of the 8th ACM Conference on Electronic Commerce"",
    pages = ""366-367"",
    numpages = ""2"",
    keywords = ""trust, reputation, fraud detection, feedback, electronic commerce"",
    location = ""San Diego, California, USA"",
    series = ""EC '07""
}
"""						2	ACM		Trust and reputation systems	https://doi.org/10.1145/1250910.1250969	Association for Computing Machinery	nan; References; Link
181	TrustSE	The extent of orphan vulnerabilities from code reuse in open source software	Motivation: A key premise of open source software is the ability to copy code to other open source projects (white-box reuse). Such copying accelerates development of new projects, but the code flaws in the original projects, such as vulnerabilities, may also spread even if fixed in the projects from where the code was appropriated. The extent of the spread of vulnerabilities through code reuse, the potential impact of such spread, or avenues for mitigating risk of these secondary vulnerabilities has not been studied in the context of a nearly complete collection of open source code.Aim: We aim to find ways to detect the white-box reuse induced vulnerabilities, determine how prevalent they are, and explore how they may be addressed.Method: We rely on World of Code infrastructure that provides a curated and cross-referenced collection of nearly all open source software to conduct a case study of a few known vulnerabilities. To conduct our case study we develop a tool, VDiOS, to help identify and fix white-box-reuse-induced vulnerabilities that have been already patched in the original projects (orphan vulnerabilities).Results: We find numerous instances of orphan vulnerabilities even in currently active and in highly popular projects (over 1K stars). Even apparently inactive projects are still publicly available for others to use and spread the vulnerability further. The often long delay in fixing orphan vulnerabilities even in highly popular projects increases the chances of it spreading to new projects. We provided patches to a number of project maintainers and found that only a small percentage accepted and applied the patch. We hope that VDiOS will lead to further study and mitigation of risks from orphan vulnerabilities and other orphan code flaws.	CVE;  code reuse;  git;  security vulnerabilities; CVE, code reuse, git, security vulnerabilities	Reid, David; Jahanshahi, Mahmoud; Mockus, Audris	ICSE '22: Proceedings of the 44th International Conference on Software Engineering	https://doi.org/10.1145/3510003.3510216		2104-2115	"""@inproceedings{10.1145/3510003.3510216,
    author = ""Reid, David and Jahanshahi, Mahmoud and Mockus, Audris"",
    title = ""The extent of orphan vulnerabilities from code reuse in open source software"",
    year = ""2022"",
    isbn = ""9781450392211"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3510003.3510216"",
    doi = ""10.1145/3510003.3510216"",
    abstract = ""Motivation: A key premise of open source software is the ability to copy code to other open source projects (white-box reuse). Such copying accelerates development of new projects, but the code flaws in the original projects, such as vulnerabilities, may also spread even if fixed in the projects from where the code was appropriated. The extent of the spread of vulnerabilities through code reuse, the potential impact of such spread, or avenues for mitigating risk of these secondary vulnerabilities has not been studied in the context of a nearly complete collection of open source code.Aim: We aim to find ways to detect the white-box reuse induced vulnerabilities, determine how prevalent they are, and explore how they may be addressed.Method: We rely on World of Code infrastructure that provides a curated and cross-referenced collection of nearly all open source software to conduct a case study of a few known vulnerabilities. To conduct our case study we develop a tool, VDiOS, to help identify and fix white-box-reuse-induced vulnerabilities that have been already patched in the original projects (orphan vulnerabilities).Results: We find numerous instances of orphan vulnerabilities even in currently active and in highly popular projects (over 1K stars). Even apparently inactive projects are still publicly available for others to use and spread the vulnerability further. The often long delay in fixing orphan vulnerabilities even in highly popular projects increases the chances of it spreading to new projects. We provided patches to a number of project maintainers and found that only a small percentage accepted and applied the patch. We hope that VDiOS will lead to further study and mitigation of risks from orphan vulnerabilities and other orphan code flaws."",
    booktitle = ""Proceedings of the 44th International Conference on Software Engineering"",
    pages = ""2104-2115"",
    numpages = ""12"",
    keywords = ""CVE, code reuse, git, security vulnerabilities"",
    location = ""Pittsburgh, Pennsylvania"",
    series = ""ICSE '22""
}
"""						2	ACM		Code reuse in open source software	https://doi.org/10.1145/3510003.3510216	Association for Computing Machinery	nan; References; Link
182	TrustSE	The grand challenge of Trusted Components	"Reusable components equipped with strict guarantees of quality can help reestablish software development on a stronger footing, by taking advantage of the scaling effect of reuse to justify the extra effort of ensuring impeccable quality. This discussion examines work intended to help the concept of Trusted Component brings its full potential to the software industry, along two complementary directions: a ""low road"" leading to qualification of existing components, and a ""high road"" aimed at the production of components with fully proved correctness properties."		Meyer, Bertrand	ICSE '03: Proceedings of the 25th International Conference on Software Engineering	https://doi.org/10.5555/776816.776911		660-667	"""@inproceedings{10.5555/776816.776911,
    author = ""Meyer, Bertrand"",
    title = ""The grand challenge of Trusted Components"",
    year = ""2003"",
    isbn = ""076951877X"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    abstract = {Reusable components equipped with strict guarantees of quality can help reestablish software development on a stronger footing, by taking advantage of the scaling effect of reuse to justify the extra effort of ensuring impeccable quality. This discussion examines work intended to help the concept of Trusted Component brings its full potential to the software industry, along two complementary directions: a ""low road"" leading to qualification of existing components, and a ""high road"" aimed at the production of components with fully proved correctness properties.},
    booktitle = ""Proceedings of the 25th International Conference on Software Engineering"",
    pages = ""660-667"",
    numpages = ""8"",
    location = ""Portland, Oregon"",
    series = ""ICSE '03""
}
"""						2	ACM		The grand challenge of trusted components	https://doi.org/10.5555/776816.776911	IEEE Computer Society	nan; Keywords; References; Link
183	TrustSE	The impact of ideology on effectiveness in open source software development teams														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
184	TrustSE	A framework for creating hybrid‐open source software communities														2						
185	TrustSE	Comparative assessment of software quality classification techniques: An empirical case study														2						
186	TrustSE	Has open source software a future														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
187	TrustSE	Adoption of open source software in software-intensive organizations–A systematic literature review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
188	TrustSE	Understanding the motivations, participation, and performance of open source software developers: A longitudinal study of the Apache projects														2						
189	TrustSE	The Economic Motivation of Open Source Software: Stakeholder Perspectives	Open source software has enabled large system integrators to increase their profits through cost savings and reach more customers due to flexible pricing. This has upset existing ecosystems and shuffled structural relationships, resulting in the emergence of firms providing consulting services to open source projects. This new breed of service firm in turn lives or dies by its ability to recruit and retain appropriate talent. For such talent, in particular for software developers, life has become more difficult and exciting at once. Developers face new career prospects and paths, since their formal position in an open source project, in addition to their experience and capabilities, determines their value to an employer. Economically rational developers strive to become commiters to high-profile open source projects to further their careers, which in turn generates more recognition, independence, and job security	Open source software; Costs; Environmental economics; Ecosystems; Companies; Licenses; Hardware; Boosting; Business; Web server; Open-source; Open-source Software; Labour Market; Source Code; Software Development; Commercial Sources; Open-source Projects; Marketing; Support Services; Rate Of Return; Business Model; Cost Savings; Economic Interests; Proprietary Software; Dominant Strategy; Current Employment; Software Components; Service Companies; Software Product; Demand Curve; Software Vendors; software development; open source software	Dirk Riehle	Computer	https://doi.org/10.1109/MC.2007.147	"1.R. Goldman and R. Gabriel, Innovation Happens Elsewhere, 2005. Google Scholar; 2.E. Raymond, The Cathedral and the Bazaar, 2001. Google Scholar; 3.E. Haruvy, F. Wu and S. Chakravarty, ""Incentives for Developers Contributions and Product Performance Metric in Open Source Development: An Empirical Exploration"". Google Scholar; 4.J. Lerner and J. Tirole, ""Some Simple Economics of Open Source"", J. Industrial Economics, vol. 50, no. 2, pp. 197-234, 2000. CrossRef  Google Scholar; 5.K.R. Lakhani and R.G. Wolf, ""Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects"", Perspectives on Free and Open Source Software, pp. 3-22, 2005. CrossRef  Google Scholar; 6.I-H. Hann, ""Economic Returns to Open Source Participation: A Panel Data Analysis"". Google Scholar; 7.G. Moore, Inside the Tornado: Marketing Strategies from Silicon Valleys Cutting Edge, 1999. Google Scholar; 8.C. Christensen, The Innovators Dilemma: When New Technologies Cause Great Firms to Fail, 2000. Google Scholar; 9.S. Krishnamurthy, ""An Analysis of Open Source Business Models"", Perspectives on Free and Open Source Software, pp. 279-296, 2005. CrossRef  Google Scholar"	25- 32							2	IEEE		The economic motivation of open source software: Stakeholder perspectives	https://ieeexplore.ieee.org/document/4160218	IEEE	nan; Year; Bibtex
190	TrustSE	Open source software development—Just another case of collective invention?														2						
191	TrustSE	Open source software: Private provision of a public good														2						
192	TrustSE	Process improvement and risk management in Off-the-Shelf Component-based development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
193	TrustSE	Code reuse in open source software development: Quantitative evidence, drivers, and impediments														2						
194	TrustSE	Opportunities and risks of software-as-a-service: Findings from a survey of IT executives														2						
195	TrustSE	Operational profiles in software-reliability engineering														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
196	TrustSE	The ecology of open-source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
197	TrustSE	Usability and open-source software development	Open-source is becoming an increasingly popular software development method. This paper reports a usability study of the open-source Greenstone Digital Library collection-building software. The problems highlighted by the study are analysed to identify their likely source within the social context of Greenstone's development environment. We discuss how characteristics of open-source software development influence the usability of resulting software products.		Nichols, David M.; Thomson, Kirsten; Yeates, Stuart A.	CHINZ '01: Proceedings of the Symposium on Computer Human Interaction	https://doi.org/10.1145/2331812.2331822		49-54	"""@inproceedings{10.1145/2331812.2331822,
    author = ""Nichols, David M. and Thomson, Kirsten and Yeates, Stuart A."",
    title = ""Usability and open-source software development"",
    year = ""2001"",
    isbn = ""0473075598"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2331812.2331822"",
    doi = ""10.1145/2331812.2331822"",
    abstract = ""Open-source is becoming an increasingly popular software development method. This paper reports a usability study of the open-source Greenstone Digital Library collection-building software. The problems highlighted by the study are analysed to identify their likely source within the social context of Greenstone's development environment. We discuss how characteristics of open-source software development influence the usability of resulting software products."",
    booktitle = ""Proceedings of the Symposium on Computer Human Interaction"",
    pages = ""49-54"",
    numpages = ""6"",
    location = ""Palmerston North, New Zealand"",
    series = ""CHINZ '01""
}
"""						2	ACM		Usability and open source software.	https://doi.org/10.1145/2331812.2331822	Association for Computing Machinery	nan; Keywords; References; Link
198	TrustSE	Effects of empowerment on performance in open-source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
199	TrustSE	A brief overview of trust and reputation over various domains														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
200	TrustSE	Legal implications of open-source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
201	TrustSE	Optimal policy for software vulnerability disclosure														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
202	TrustSE	Socio-technical interaction networks in free/open source software development processes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
203	TrustSE	Combining static source code analysis and threat assessment modeling for testing open source software security														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
204	TrustSE	Social status in an open-source community														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
205	TrustSE	The many meanings of open source														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
206	TrustSE	A comprehensive trust model for component software	The growing importance of component software introduces special requirements on trust due to the nature of applications they provide, in particular when the system supports dynamic component deployment. This paper presents a comprehensive trust model in order to specify, evaluate and manage various trust relationships that exist among entities in a component software system. It contains a sub-model to present trust relationships among system entities, a sub-model to specify the information related to trust management for a software component, a sub-model for trust evaluation and a sub-model for trust management. This trust model supports trust management based on trust evaluation both at component download time and runtime.	component software;  security;  trust;  trust management;  trust model; component software, security, trust, trust management, trust model	Yan, Zheng	SecPerU '08: Proceedings of the 4th international workshop on Security, privacy and trust in pervasive and ubiquitous computing	https://doi.org/10.1145/1387329.1387330		1-6	"""@inproceedings{10.1145/1387329.1387330,
    author = ""Yan, Zheng"",
    title = ""A comprehensive trust model for component software"",
    year = ""2008"",
    isbn = ""9781605582078"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1387329.1387330"",
    doi = ""10.1145/1387329.1387330"",
    abstract = ""The growing importance of component software introduces special requirements on trust due to the nature of applications they provide, in particular when the system supports dynamic component deployment. This paper presents a comprehensive trust model in order to specify, evaluate and manage various trust relationships that exist among entities in a component software system. It contains a sub-model to present trust relationships among system entities, a sub-model to specify the information related to trust management for a software component, a sub-model for trust evaluation and a sub-model for trust management. This trust model supports trust management based on trust evaluation both at component download time and runtime."",
    booktitle = ""Proceedings of the 4th International Workshop on Security, Privacy and Trust in Pervasive and Ubiquitous Computing"",
    pages = ""1-6"",
    numpages = ""6"",
    keywords = ""component software, security, trust, trust management, trust model"",
    location = ""Sorrento, Italy"",
    series = ""SecPerU '08""
}
"""						2	ACM		A comprehensive trust model for component software	https://doi.org/10.1145/1387329.1387330	Association for Computing Machinery	nan; References; Link
207	TrustSE	Trust Management Mechanism in IoV based on Bayesian classification	The Internet of Vehicles (IoV) significantly enhances the perception of the traffic environment and facilitates information exchange among vehicles, thereby bolstering transportation safety. Nevertheless, the intricate nature of traffic scenes, the swift movement of vehicles and the dynamic nature of the vehicle network's topology present challenges in guaranteeing the reliability of shared messages among vehicles. The intricacy of the situation additionally poses challenges for vehicles in evaluating the reliability of received messages, creating substantial potential for traffic accidents. Therefore, this article proposes an IoV trust management mechanism based on Bayesian classification, which designs a complete vehicle trust value calculation scheme. The verification of messages received from neighboring vehicles is carried out using the Bayesian inference model, which can effectively detect vehicles sending malicious information. After the verification results, rating parameters are produced for every source vehicle of the messages. Ultimately, the trust value of the vehicle is calibrated and penalized based on these rating parameters. The vehicle uploads rating parameters to the RSU, which calculates the trust value of the relevant vehicles. By excluding vehicles with low trust values, the cooperation success rate among vehicles within the network has risen from 65\% to approximately 70\%.	Bayesian Classification;  Internet of Vehicles;  Trust Management; Bayesian Classification, Internet of Vehicles, Trust Management	Fan, Xiumei; Wang, Yuchen	CNIOT '24: Proceedings of the 2024 5th International Conference on Computing, Networks and Internet of Things	https://doi.org/10.1145/3670105.3670213		620-625	"""@inproceedings{10.1145/3670105.3670213,
    author = ""Fan, Xiumei and Wang, Yuchen"",
    title = ""Trust Management Mechanism in IoV based on Bayesian classification"",
    year = ""2024"",
    isbn = ""9798400716751"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3670105.3670213"",
    doi = ""10.1145/3670105.3670213"",
    abstract = ""The Internet of Vehicles (IoV) significantly enhances the perception of the traffic environment and facilitates information exchange among vehicles, thereby bolstering transportation safety. Nevertheless, the intricate nature of traffic scenes, the swift movement of vehicles and the dynamic nature of the vehicle network's topology present challenges in guaranteeing the reliability of shared messages among vehicles. The intricacy of the situation additionally poses challenges for vehicles in evaluating the reliability of received messages, creating substantial potential for traffic accidents. Therefore, this article proposes an IoV trust management mechanism based on Bayesian classification, which designs a complete vehicle trust value calculation scheme. The verification of messages received from neighboring vehicles is carried out using the Bayesian inference model, which can effectively detect vehicles sending malicious information. After the verification results, rating parameters are produced for every source vehicle of the messages. Ultimately, the trust value of the vehicle is calibrated and penalized based on these rating parameters. The vehicle uploads rating parameters to the RSU, which calculates the trust value of the relevant vehicles. By excluding vehicles with low trust values, the cooperation success rate among vehicles within the network has risen from 65\\% to approximately 70\\%."",
    booktitle = ""Proceedings of the 2024 5th International Conference on Computing, Networks and Internet of Things"",
    pages = ""620-625"",
    numpages = ""6"",
    keywords = ""Bayesian Classification, Internet of Vehicles, Trust Management"",
    location = ""Tokyo, Japan"",
    series = ""CNIOT '24""
}
"""						2	ACM		Trust Management	https://doi.org/10.1145/3670105.3670213	Association for Computing Machinery	nan; References; Link
208	TrustSE	A Survey on Trust Management [J]														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
209	TrustSE	Predicting Trustworthiness for Component Software	Trust has been recognized as an important factor for component software. In this paper, we propose a methodology to predict trustworthiness of a software component for downloading and execution. The methodology is based on a trust model of software component, which indicates the component's asserted performance and requirements for achieving the performance. Through evaluating the related trust models, the proposed methodology can predict the trustworthiness of the software components.	Software systems; Security; Runtime; Predictive models; Availability; Application software; Pervasive computing; Concrete; Software engineering; Computer industry; Software Components; Trust Model; Mobile Devices; Resource Consumption; Concrete Examples; System Resources; Network Resources; Resource Requirements; Service Components; Composition Rules; Trust Management; Aspects Of Trust; Components C4; Non-functional Requirements; Download Time	Zheng Yan	Third International Workshop on Security, Privacy and Trust in Pervasive and Ubiquitous Computing (SecPerU 2007)	https://doi.org/10.1109/SECPERU.2007.8	"1.P. Herrmann, ""Trust-Based Protection of Software Component Users and Designers"", Proceedings of iTrust03, May 2003. CrossRef  Google Scholar; 2.MIDP 2.0 specification. Google Scholar; 3.Security and Trust Services API (SATSA) for J2ME. Google Scholar; 4.DE Denning, ""A New Paradigm for Trusted Systems"", Proceedings of the IEEE New Paradigms Workshop, 1993. CrossRef  Google Scholar; 5.T. Grandison and M. Sloman, ""A Survey of Trust in Internet Applications"", IEEE Communications and Survey Forth Quarter, vol. 3, no. 4, pp. 2-16, 2000. View Article  Google Scholar; 6.G. Theodorakopoulos and J. S. Baras, ""On Trust Models and Trust Evaluation Metrics for Ad Hoc Networks"", IEEE Journal on Selected Areas in Communications, vol. 24, no. 2, pp. 318-328, Feb. 2006. View Article  Google Scholar; 7.Y. Sun, W. Yu, Z. Han and K. J. R. Liu, ""Information Theoretic Framework of Trust Modeling and Evaluation for Ad Hoc Networks"", IEEE Journal on Selected Area in Communications, vol. 24, no. 2, pp. 305-317, Feb. 2006. View Article  Google Scholar; 8.M. Zhou, H. Mei and L. Zhang, ""A Multi-Property Trust Model for Reconfiguring Component Software"", QAIC2005, pp. 142-149, 19-20 Sept. 2005. Google Scholar; 9.M. Zhou, W. Jiao and H. Mei, ""Customizable Framework for Managing Trusted Components Deployed on Middleware"", Proceedings of 10th IEEE International Conference Engineering of Complex Computer Systems, pp. 283-291, 16-20 June 2005. View Article  Google Scholar; 10.W. Hasselbring and R Reussner, ""Toward Trustworthy Software Systems"", IEEE Computer, vol. 39, no. 4, pp. 91-92, April 2006. View Article  Google Scholar; 11.Z. Yan and R. MacLaverty, ""Autonomic Trust Management in a Component Based Software System"", ATC06 LNCS, vol. 4158/2006, pp. 279-292, Sept. 2006. CrossRef  Google Scholar"								2	IEEE		Predicting trustworthiness for component software	https://ieeexplore.ieee.org/document/4279762	IEEE	nan; Pages; Year; Bibtex
210	TrustSE	Can you trust software capability evaluations?														2						
211	TrustSE	Automated dependency resolution for open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
212	TrustSE	Extracting Acyclic Dependency Models from Quality Standards for COTS Software Evaluation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
213	TrustSE	Software release planning under soft resource and dependency constraints														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
214	TrustSE	The role of dependency propagation in the accumulation of technical debt for software implementations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
215	TrustSE	Analysis of issue and dependency management in open-source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
216	TrustSE	Quantitative studies in software release planning under risk and resource constraints	Delivering software in an incremental fashion implicitly reduces many of the risks associated with delivering large software projects. However, adopting a process, where requirements are delivered in releases means decisions have to be made on which requirements should be delivered in which release. This paper describes a method called EVOLVE+, based on a genetic algorithm and aimed at the evolutionary planning of incremental software development. The method is initially evaluated using a sample project. The evaluation involves an investigation of the tradeoff relationship between risk and the overall benefit. The link to empirical research is two-fold: firstly, our model is based on interaction with industry and randomly generated data for effort and risk of requirements. The results achieved this way are the first step for a more comprehensive evaluation using real-world data. Secondly, we try to approach uncertainty of data by additional computational effort providing more insight into the problem solutions: (i) effort estimates are considered to be stochastic variables following a given probability function; (ii) instead of offering just one solution, the L-best (L > 1) solutions are determined. This provides support in finding the most appropriate solution, reflecting implicit preferences and constraints of the actual decision-maker. Stability intervals are given to indicate the validity of solutions and to allow the problem parameters to be changed without adversely affecting the optimality of the solution.	Programming; Uncertainty; Genetic algorithms; Software engineering; Industrial relations; Stochastic processes; Stability; Risk analysis; Algorithm design and analysis; Risk management; Resource Constraints; Software Release; Release Planning; Comprehensive Evaluation; Real-world Data; Software Projects; Stable Interval; Objective Function; Evaluation Method; Mutation Rate; Development Of Approaches; Risk Level; Decision Support; Software Engineering; Solution Approach; Crossover Operator; Set Of Requirements; Technical Constraints; Random Changes; Fitness Score; Precedence Constraints; Incremental Model; Crossover Rate	G. Ruhe; D. Greer	2003 International Symposium on Empirical Software Engineering, 2003. ISESE 2003. Proceedings.	https://doi.org/10.1109/ISESE.2003.1237987	"1.L.C. Briand, J. Feng and Y. Labiche, ""Experimenting with Genetic Algorithm to Devise Optimal Integration Test Orders"" in TR Department of Systems and Computer Engineering, Software Quality Engineering Laboratory Carleton University, 2002. Google Scholar; 2.J. Carnahan and R. Simha, ""Natures's Algorithms"", IEEE Potentials, pp. 21-24, April/May 2001. View Article  Google Scholar; 3.R. Charette, ""Software Engineering Risk Analysis and Management"" in , New York:McGraw-Hill, 1989. Google Scholar; 4.M.A. Cusamano and D.B. Yoffie, ""Competing on Internet Time: Lessons From Netscape and Its Battle with Microsoft"" in , New York:The Free Press, 1998. Google Scholar; 5.L. Davis, ""Handbook of Genetic Algorithms"" in , New York:Van Nostrand Reinhold, 1991. Google Scholar; 6.G. De Gregorio, ""Enterprise-wide Requirements and Decision Management"",             Proc. 9            th            International Symposium of the International Council on System Engineering          , 1999. Google Scholar; 7.J. Fitzgerald and A.F. Fitzgerald, ""A Methodology for Conducting A Risk Assessment"" in Designing Controls into Computerized System, Redwood, California:Jerry Fitzgerald & Associates, 1990. Google Scholar; 8.T. Gilb, ""Principles of Software Engineering Management"" in , Addison-Wesley, 1988. Google Scholar; 9.D. Greer, D. Bustard and T. Sunazuka, ""Prioritisation of System Changes using Cost-Benefit and Risk Assessments"", Fourth IEEE International Symposium on Requirements Engineering, pp. 180-187, June, 1999. CrossRef  Google Scholar; 10.D. Greer, D. Bustard and T. Sunazuka, ""Effecting and Measuring Risk Reduction in Software Development"", NEC Journal of Research and Development, vol. 40, no. 3, pp. 378-38, 1999. Google Scholar; 11.D. Greer and G. Ruhe, ""Software Release Planning: An Evolutionary and Iterative Approach"", Journal for Information and Software Technology, 2003. Google Scholar; 12.H.W. Hamacher and G. Ruhe, ""On Spanning Tree Problems with Multiple Objectives"", Annals of Operations Research, vol. 52, pp. 209-230, 1994. CrossRef  Google Scholar; 13.J.H. Holland, ""Adaptation in Natural and Artificial Systems"" in , Ann Arbor:University of Michigan Press, 1975. Google Scholar; 14.R. Jeffrey and L. Scott, ""Has twenty five years of empirical software engineering made a difference"", Proceedings Asia-Pacific Software Engineering Conference, pp. 539-546, 4-6 Dec. 2002. CrossRef  Google Scholar; 15.J. Karlsson, C. Wohlin and B. Regnell, ""An evaluation of methods for prioritizing Software Requirements"", Information and Software Technology, vol. 39, pp. 939-947, 1998. CrossRef  Google Scholar; 16.B.A. Kitchenham, S.L. Pfleeger, L.M. Pickard, P.W. Jones, D.C. Hoaglin, K. El-Emam, et al., ""Preliminary guidelines for empirical research in software engineering"", IEEE Transactions on Software Engineering, vol. 28, pp. 721-734, 2002. View Article  Google Scholar; 17.Palisade Corporation Palisade Corporation 31 Decker Road Newfield NY 14867, September 2002,  [online]  Available: www.palisade.com. Google Scholar; 18.Guide to RISKOptimizer: Simulation Optimization for Microsoft Excel Windows Version Release 1.0, 2001. Google Scholar; 19.V. Rajlich and P. Gosavi, ""A case study of unanticipated incremental change"", Proc. Software Maintenance, pp. 442-451, 2002. CrossRef  Google Scholar; 20.D.J. Reifer, ""How good are agile methods?"", IEEE Software, vol. 19, no. 4, pp. 16-18, 2002. View Article  Google Scholar; 21.G. Ruhe, ""Software Engineering Decision Support: Methodology and Applications"" in Innovations in Decision Support Systems, vol. 3, pp. 143-174, 2003. Google Scholar; 22.T.L. Saaty, ""The Analytic Hierarchy Process"" in , New York:McGraw Hill, 1980. Google Scholar"								2	IEEE		Quantitative studies in software release planning under risk and resource constraints	https://ieeexplore.ieee.org/document/1237987	IEEE	nan; Pages; Year; Bibtex
217	TrustSE	Software dependencies, work dependencies, and their impact on failures														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
218	TrustSE	IusWare: A methodology for the evaluation and selection of software products														2						
219	TrustSE	Theoretical and empirical validation of software product measures														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
220	TrustSE	An investigation of 'build vs. buy'decision for software acquisition by small to medium enterprises														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
221	TrustSE	A systematic literature review on the barriers faced by newcomers to open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
222	TrustSE	Scalable trust establishment with software reputation	Users and administrators are often faced with the choice between different software solutions, sometimes even have to assess the security of complete software systems. With sufficient time and resources, such decisions can be based on extensive testing and review. However, in practice this is often too expensive and time consuming.In this paper, we present a pragmatic, but scalable approach for the trustworthiness assessment of software programs based on their security history. The approach can be used to, e.g. automatically sort programs in an App store by their security record or to assess the trustworthiness of complex software systems in remote attestation schemes. Our prototype implementation for the popular Debian GNU/Linux system achieves good prediction accuracy for individual programs as well as entire systems.	reputation;  software security; reputation, software security	Bugiel, Sven; Davi, Lucas Vincenzo; Schulz, Steffen	STC '11: Proceedings of the sixth ACM workshop on Scalable trusted computing	https://doi.org/10.1145/2046582.2046587		15-24	"""@inproceedings{10.1145/2046582.2046587,
    author = ""Bugiel, Sven and Davi, Lucas Vincenzo and Schulz, Steffen"",
    title = ""Scalable trust establishment with software reputation"",
    year = ""2011"",
    isbn = ""9781450310017"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2046582.2046587"",
    doi = ""10.1145/2046582.2046587"",
    abstract = ""Users and administrators are often faced with the choice between different software solutions, sometimes even have to assess the security of complete software systems. With sufficient time and resources, such decisions can be based on extensive testing and review. However, in practice this is often too expensive and time consuming.In this paper, we present a pragmatic, but scalable approach for the trustworthiness assessment of software programs based on their security history. The approach can be used to, e.g. automatically sort programs in an App store by their security record or to assess the trustworthiness of complex software systems in remote attestation schemes. Our prototype implementation for the popular Debian GNU/Linux system achieves good prediction accuracy for individual programs as well as entire systems."",
    booktitle = ""Proceedings of the Sixth ACM Workshop on Scalable Trusted Computing"",
    pages = ""15-24"",
    numpages = ""10"",
    keywords = ""reputation, software security"",
    location = ""Chicago, Illinois, USA"",
    series = ""STC '11""
}
"""						2	ACM		Scalable trust establishment with software reputation	https://doi.org/10.1145/2046582.2046587	Association for Computing Machinery	nan; References; Link
223	TrustSE	Free/open source software development	The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development.	empirical studies;  free software;  open source software;  socio-technical relationships;  software development practices; empirical studies, free software, open source software, socio-technical relationships, software development practices	Scacchi, Walt	ESEC-FSE '07: Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering	https://doi.org/10.1145/1287624.1287689		459-468	"""@inproceedings{10.1145/1287624.1287689,
    author = ""Scacchi, Walt"",
    title = ""Free/open source software development"",
    year = ""2007"",
    isbn = ""9781595938114"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1287624.1287689"",
    doi = ""10.1145/1287624.1287689"",
    abstract = ""The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development."",
    booktitle = ""Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering"",
    pages = ""459-468"",
    numpages = ""10"",
    keywords = ""empirical studies, free software, open source software, socio-technical relationships, software development practices"",
    location = ""Dubrovnik, Croatia"",
    series = ""ESEC-FSE '07""
}
"""						2	ACM		Clustering and dependencies in free/open source software development: Methodology and tools	https://doi.org/10.1145/1287624.1287689	Association for Computing Machinery	nan; References; Link
224	TrustSE	The open source movement: a revolution in software development														2						
225	TrustSE	Effective work practices for software engineering: free/libre open source software development	We review the literature on Free/Libre Open Source Software (FLOSS) development and on software development, distributed work and teams more generally to develop a theoretical model to explain the performance of FLOSS teams. The proposed model is based on Hackman's [34] model of effectiveness of work teams, with coordination theory [52] and collective mind [79] to extend Hackman's model by elaborating team practices relevant to effectiveness in software development. We propose a set of propositions to guide further research.	team effectiveness;  free and open source software;  coordination theory;  collective mind theory; team effectiveness, free and open source software, coordination theory, collective mind theory	Crowston, Kevin; Annabi, Hala; Howison, James; Masango, Chengetai	WISER '04: Proceedings of the 2004 ACM workshop on Interdisciplinary software engineering research	https://doi.org/10.1145/1029997.1030003		18-26	"""@inproceedings{10.1145/1029997.1030003,
    author = ""Crowston, Kevin and Annabi, Hala and Howison, James and Masango, Chengetai"",
    title = ""Effective work practices for software engineering: free/libre open source software development"",
    year = ""2004"",
    isbn = ""1581139888"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1029997.1030003"",
    doi = ""10.1145/1029997.1030003"",
    abstract = ""We review the literature on Free/Libre Open Source Software (FLOSS) development and on software development, distributed work and teams more generally to develop a theoretical model to explain the performance of FLOSS teams. The proposed model is based on Hackman's [34] model of effectiveness of work teams, with coordination theory [52] and collective mind [79] to extend Hackman's model by elaborating team practices relevant to effectiveness in software development. We propose a set of propositions to guide further research."",
    booktitle = ""Proceedings of the 2004 ACM Workshop on Interdisciplinary Software Engineering Research"",
    pages = ""18-26"",
    numpages = ""9"",
    keywords = ""team effectiveness, free and open source software, coordination theory, collective mind theory"",
    location = ""Newport Beach, CA, USA"",
    series = ""WISER '04""
}
"""						2	ACM		Effective work practices for software engineering: free/libre open source software development	https://doi.org/10.1145/1029997.1030003	Association for Computing Machinery	nan; References; Link
226	TrustSE	A market-based approach to software evolution	"Software correctness has bedeviled the field of computer science since its inception. Software complexity has increased far more quickly than our ability to control it, reaching sizes that are many orders of magnitude beyond the reach of formal or automated verification techniques.We propose a new paradigm for evaluating ""correctness"" based on a rich market ecosystem in which coalitions of users bid for features and fixes. Developers, testers, bug reporters, and analysts share in the rewards for responding to those bids. In fact, we suggest that the entire software development process can be driven by a disintermediated market-based mechanism driven by the desires of users and the capabilities of developers.The abstract, unspecifiable, and unknowable notion of absolute correctness is then replaced by quantifiable notions of correctness demand (the sum of bids for bugs) and correctness potential (the sum of the available profit for fixing those bugs). We then sketch the components of a market design intended to identify bugs, elicit demand for fixing bugs, and source workers for fixing bugs. The ultimate goal is to achieve a more appropriate notion of correctness, in which market forces drive software towards a correctness equilibrium in which all bugs for which there is enough value, and with low enough cost to fix, are fixed."	markets;  mechanism design;  software correctness; markets, mechanism design, software correctness	Bacon, David F.; Chen, Yiling; Parkes, David; Rao, Malvika	OOPSLA '09: Proceedings of the 24th ACM SIGPLAN conference companion on Object oriented programming systems languages and applications	https://doi.org/10.1145/1639950.1640066		973-980	"""@inproceedings{10.1145/1639950.1640066,
    author = ""Bacon, David F. and Chen, Yiling and Parkes, David and Rao, Malvika"",
    title = ""A market-based approach to software evolution"",
    year = ""2009"",
    isbn = ""9781605587684"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1639950.1640066"",
    doi = ""10.1145/1639950.1640066"",
    abstract = {Software correctness has bedeviled the field of computer science since its inception. Software complexity has increased far more quickly than our ability to control it, reaching sizes that are many orders of magnitude beyond the reach of formal or automated verification techniques.We propose a new paradigm for evaluating ""correctness"" based on a rich market ecosystem in which coalitions of users bid for features and fixes. Developers, testers, bug reporters, and analysts share in the rewards for responding to those bids. In fact, we suggest that the entire software development process can be driven by a disintermediated market-based mechanism driven by the desires of users and the capabilities of developers.The abstract, unspecifiable, and unknowable notion of absolute correctness is then replaced by quantifiable notions of correctness demand (the sum of bids for bugs) and correctness potential (the sum of the available profit for fixing those bugs). We then sketch the components of a market design intended to identify bugs, elicit demand for fixing bugs, and source workers for fixing bugs. The ultimate goal is to achieve a more appropriate notion of correctness, in which market forces drive software towards a correctness equilibrium in which all bugs for which there is enough value, and with low enough cost to fix, are fixed.},
    booktitle = ""Proceedings of the 24th ACM SIGPLAN Conference Companion on Object Oriented Programming Systems Languages and Applications"",
    pages = ""973-980"",
    numpages = ""8"",
    keywords = ""markets, mechanism design, software correctness"",
    location = ""Orlando, Florida, USA"",
    series = ""OOPSLA '09""
}
"""						2	ACM		A market-based approach to software evolution	https://doi.org/10.1145/1639950.1640066	Association for Computing Machinery	nan; References; Link
227	TrustSE	Open source software from commercial firms–tools, complements, and collective invention														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
228	TrustSE	Towards a metric for Open Source Software Quality														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
229	TrustSE	Appropriation and appropriability in open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
230	TrustSE	Vulnerability Scrying Method for Software Vulnerability Discovery Prediction Without a Vulnerability Database	Predicting software vulnerability discovery trends can help improve secure deployment of software applications and facilitate backup provisioning, disaster recovery, diversity planning, and maintenance scheduling. Vulnerability discovery models (VDMs) have been studied in the literature as a means to capture the underlying stochastic process. Based on the VDMs, a few vulnerability prediction schemes have been proposed. Unfortunately, all these schemes suffer from the same weaknesses: they require a large amount of historical vulnerability data from a database (hence they are not applicable to a newly released software application), their precision depends on the amount of training data, and they have significant amount of error in their estimates. In this work, we propose vulnerability scrying, a new paradigm for vulnerability discovery prediction based on code properties. Using compiler-based static analysis of a codebase, we extract code properties such as code complexity (cyclomatic complexity), and more importantly code quality (compliance with secure coding rules), from the source code of a software application. Then we propose a stochastic model which uses code properties as its parameters to predict vulnerability discovery. We have studied the impact of code properties on the vulnerability discovery trends by performing static analysis on the source code of four real-world software applications. We have used our scheme to predict vulnerability discovery in three other software applications. The results show that even though we use no historical data in our prediction, vulnerability scrying can predict vulnerability discovery with better precision and less divergence over time.	Software; Predictive models; Mathematical model; Security; Data models; History; Databases; Security Vulnerabilities; Source Code; Real-world Applications; Coded Based; Software Applications; Static Analysis; Prediction Scheme; Impact Of Properties; Software Quality; Coding Properties; Amount Of Historical Data; Vulnerability Prediction; Discovery Rate; Prediction Accuracy; Statistical Models; Compassion; Gross Domestic Product; Rate Of Return; Random Walk; Case Of Model; Control Flow Graph; Vulnerability Assessment; Sequence Of Random Variables; Abstract Syntax Tree; Effect Hypothesis; Half Of The Data; Popular Application; Software Vendors; Constant Model; Dependency Graph; Code security; static analysis; vulnerability discovery model; vulnerability prediction	Sanaz Rahimi; Mehdi Zargham	IEEE Transactions on Reliability	https://doi.org/10.1109/TR.2013.2257052	"1.National Vulnerability Database, 2011. Google Scholar; 2.National Institute of Standards and Technology, 2011. Google Scholar; 3.D. Mellado, E. Fernndez-Medina and M. Piattini, ""A comparison of software designsecurity metrics"", Proc. 4th Eur. Conf. Software Architecture: Companion Volume, pp. 236-242, 2010,  [online]  Available: http://doi.acm.org/10.1145/1842752.1842797. CrossRef  Google Scholar; 4.E. Rescorla, ""Is finding security holes agood idea?"", IEEE Security Privacy, vol. 3, no. 1, pp. 14-19, Jan./Feb. 2005. View Article  Google Scholar; 5.O. Alhazmi and Y. Malaiya, ""Prediction capabilities ofvulnerability discovery models"", Proc. RAMS '06. Annu. Rel. Maintainability Symp., pp. 86-91, 2006. View Article  Google Scholar; 6.The Open Source Vulnerability Database, 2011. Google Scholar; 7.O. Alhazmi and Y. Malaiya, ""Application of vulnerabilitydiscovery models to major operating systems"", IEEE Trans. Rel., vol. 57, no. 1, pp. 14-22, Mar. 2008. View Article  Google Scholar; 8.J. D. Musa and K. Okumoto, ""A logarithmic poisson executiontime model for software reliability measurement"", Proc. 7th Int. Conf. Software Eng., pp. 230-238, 1984. Google Scholar; 9.R. J. Anderson, ""Security in open versus closedsystems--The dance of Boltzmann Coase and Moore"", Proc. Conf. Open Source Software Econ.omics, pp. 5, 2002. Google Scholar; 10.M. Widenius and D. Axmark, Mysql Reference Manual, USA, CA, Sebastopol:O'Reilly Associates, Inc., 2002. Google Scholar; 11.I. Chowdhury and M. Zulkernine, ""Can complexity coupling andcohesion metrics be used as early indicators of vulnerabilities?"", Proc. 2010 ACM Symp. Appl. Comput., pp. 1963-1969, 2010,  [online]  Available: http://doi.acm.org/10.1145/1774088.1774504. CrossRef  Google Scholar; 12.T. J. McCabe, ""A complexity measure"", Proc. 2nd Int. Conf. Software Eng., pp. 407, 1976,  [online]  Available: http://portal.acm.org/citation.cfm?id=800253.807712. View Article  Google Scholar; 13.M. Schordan and D. Quinlan, ""A source-to-source architecturefor user-defined optimizations"", Proc. Joint Modular Lang. Conf. (JMLC'03), pp. 214-223, 2003. CrossRef  Google Scholar; 14.Compass Manual, 2009,  [online]  Available: http://www.rosecompiler.org/compass.pdf. Google Scholar; 15.A. Mockus and L. G. Votta, ""Identifying reasons for softwarechanges using historic databases"", Proc. Int. Conf. Software Maintenance (ICSM'00), pp. 120, 2000. View Article  Google Scholar; 16.M. M. Lehman, D. E. Perry and J. F. Ramil, ""Implications of evolution metricson software maintenance"", Proc. Int. Conf. Software Maintenance, pp. 208, 1998. View Article  Google Scholar; 17.R. Purushothaman and D. E. Perry, ""Toward understanding the rhetoricof small source code changes"", IEEE Trans. Software Eng., vol. 31, no. 6, pp. 511-526, Jun. 2005. View Article  Google Scholar; 18.G. Vache, ""Vulnerability analysis fora quantitative security evaluation"", Proc. 2009 3rd Int. Symp. Empirical Software Eng. Measur., pp. 526-534, 2009,  [online]  Available: http://dx.doi.org/10.1109/ESEM.2009.5315969. View Article  Google Scholar; 19.F. Massacci and V. H. Nguyen, ""Which is the right source forvulnerability studies?: An empirical analysis on mozilla firefox"", Proc. 6th Int. Workshop Security Measur. Metrics, pp. 4:1-4:8, 2010,  [online]  Available: http://doi.acm.org/10.1145/1853919.1853925. CrossRef  Google Scholar; 20.S. Clark, S. Frei, M. Blaze and J. Smith, ""Familiarity breeds contempt: The honeymoon effect and therole of legacy code in zero-day vulnerabilities"", Proc. 26th Annu. Comput. Security Appl. Conf., pp. 251-260, 2010,  [online]  Available: http://doi.acm.org/10.1145/1920261.1920299. CrossRef  Google Scholar; 21.S. Frei, M. May, U. Fiedler and B. Plattner, ""Large-scale vulnerability analysis"", Proc. 2006 SIGCOMM Workshop Large-Scale Attack Defense, pp. 131-138, 2006,  [online]  Available: http://doi.acm.org/10.1145/1162666.1162671. CrossRef  Google Scholar; 22.S. Rehman and K. Mustafa, ""Research on software designlevel security vulnerabilities"", SIGSOFT Softw. Eng. Notes, vol. 34, pp. 1-5, December 2009,  [online]  Available: http://doi.acm.org/10.1145/1640162.1640171. CrossRef  Google Scholar; 23.Y.-C. Zhang, Q. Wei, Z.-L. Liu and Y. Zhou, ""Research on the architecture of vulnerability discoverytechnology"", Proc. Int. Conf. Mach. Learn. Cybern. (ICMLC), vol. 6, pp. 2854-2859, 2010. View Article  Google Scholar; 24.V. Ganapathy, S. Seshia, S. Jha, T. Reps and R. Bryant, ""Automatic discovery of api-level exploits"", Proc. 27th Int. Conf. Software Eng. (ICSE 2005), pp. 312-321, 2005-May. CrossRef  Google Scholar; 25.F. Massacci and V. H. Nguyen, ""Which is the right source forvulnerability studies?: An empirical analysis on mozilla firefox"", Proc. 6th Int. Workshop Security Measur. Metrics, pp. 4:1-4:8, 2010,  [online]  Available: http://doi.acm.org/10.1145/1853919.1853925. CrossRef  Google Scholar; 26.G. Schryen and R. Kadura, ""Open source vs. closed sourcesoftware: Towards measuring security"", Proc. 2009 ACM Symp. Appl. Comput., pp. 2016-2023, 2009,  [online]  Available: http://doi.acm.org/10.1145/1529282.1529731. CrossRef  Google Scholar; 27.M. Bozorgi, L. K. Saul, S. Savage and G. M. Voelker, ""Beyond heuristics: Learningto classify vulnerabilities and predict exploits"", Proc. 16th ACM SIGKDD Int. Conf. Knowledge Discovery Data Mining, pp. 105-114, 2010,  [online]  Available: http://doi.acm.org/10.1145/1835804.1835821. CrossRef  Google Scholar; 28.J. A. Wang and M. Guo, ""Vulnerability categorization using bayesiannetworks"", Proc. 6th Annu. Workshop Cyber Security Inf. Intell. Res., pp. 29:1-29:4, 2010,  [online]  Available: http://doi.acm.org/10.1145/1852666.1852699. CrossRef  Google Scholar; 29.J.-E. J. Tevis and J. A. Hamilton, ""Methods for the preventiondetection and removal of software security vulnerabilities"", Proc. 42nd Annu. Southeast Regional Conf., pp. 197-202, 2004,  [online]  Available: http://doi.acm.org/10.1145/986537.986583. CrossRef  Google Scholar; 30.V. H. Nguyen and L. M. S. Tran, ""Predicting vulnerable softwarecomponents with dependency graphs"", Proc. 6th Int. Workshop Security Measur. Metrics, pp. 3:1-3:8, 2010,  [online]  Available: http://doi.acm.org/10.1145/1853919.1853923. CrossRef  Google Scholar"	395- 407							2	IEEE		Vulnerability scrying method for software vulnerability discovery prediction without a vulnerability database	https://ieeexplore.ieee.org/document/6502762	IEEE	nan; Year; Bibtex
231	TrustSE	Multi-criteria evaluation of design and manufacturing software packages considering the interdependencies among criteria: the analytic network process approach														2						
232	TrustSE	An open source software evaluation model														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
233	TrustSE	Survival factors for Free Open Source Software projects: A multi-stage perspective														2						
234	TrustSE	Impact of organisational maturity on software quality														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
235	TrustSE	Software measurement: Uncertainty and causal modeling														2						
236	TrustSE	The uncertainty principle in software engineering														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
237	TrustSE	Organizational adoption of open source software: barriers and remedies	"IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail."		Nagy, Del; Yassin, Areej M.; Bhattacherjee, Anol	Commun. ACM	https://doi.org/10.1145/1666420.1666457		148-151	"""@article{10.1145/1666420.1666457,
    author = ""Nagy, Del and Yassin, Areej M. and Bhattacherjee, Anol"",
    title = ""Organizational adoption of open source software: barriers and remedies"",
    year = ""2010"",
    issue_date = ""March 2010"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""53"",
    number = ""3"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1666420.1666457"",
    doi = ""10.1145/1666420.1666457"",
    abstract = {IntroductionPerhaps the business case for adopting open source software is an easy sell. After all, the software is free, and can be simply downloaded from the Internet and installed or customized as needed. Organizations interested in reducing the licensing fees of proprietary software, while also avoiding the penalties and legal liabilities associated with their illegal use, can definitely consider open source software a plausible alternative. However, less obvious than the cost savings but equally important are the barriers (""hidden costs"") of adopting open source software.Open source software has created considerable excitement in the business world over the last decade. These applications, designed by groups of volunteer software developers, have the potential to break the current dominance of proprietary software and restrictive licenses for many business applications, reduce software development time and improve software quality, and most importantly, bring much needed software applications within the reach of individuals and small businesses, who cannot otherwise afford such software. Further, unlike proprietary software, open source software applications make their source code available for free, which can be customized to fit the unique needs of specific organizations.Many organizations have caught on to open source software and realized significant cost savings in technology expenditure as a result. For instance, Cendant Travel Distribution Services replaced a $100 million mainframe system with a $2.5 million system running on 144 Linux servers. Amazon.com cut its technology expenditure from $71 million to $54 million by switching to open source applications. Sabre Holdings saved tens of millions of dollars by adopting MySQL, an open source database product. Though the basic open source software is free, the prospect of paid ancillary products and services such as hardware and consulting has motivated many erstwhile proprietary technology vendors such as Hewlett-Packard, IBM, and Sun Microsystems to embrace open source software and offer value-added services based on such software.Table 1 shows an estimated range of the current global market share of several of today's open source software applications. This table shows that though the open source market is large and growing for some application domains such as Web server (such as Apache), server operating systems (such as Linux Server), database server (such as MySQL), electronic mail client (such as Sendmail), and Internet browser (such as Firefox), it is lagging behind its proprietary counterparts in other domains such as client operating systems (such as Linux Workstation), office productivity software (such as OpenOffice), and enterprise resource planning (ERP) systems. This pattern suggests that there may be significant barriers to open source software adoption among some sectors of the user populations.It is widely believed that proprietary software vendors often use fear, uncertainty and doubt to undermine and cut the market potential of their open source competitors. The objective of this paper is to reduce that uncertainty via a candid discussion of the barriers confronting open source software adoption and potential remedies to those barriers. These barriers and their remedies, summarized in Table 2, are discussed in detail.},
    journal = ""Commun. ACM"",
    month = ""March"",
    pages = ""148-151"",
    numpages = ""4""
}
"""						2	ACM		Organizational adoption of open source software: barriers and remedies	https://doi.org/10.1145/1666420.1666457	Association for Computing Machinery	nan; Keywords; References; Link
238	TrustSE	Software estimation perspectives														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
239	TrustSE	Coordination of free/libre open source software development														2						
240	TrustSE	Software quality evaluation based on expert judgement														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
241	TrustSE	Software metrics and reliability														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
242	TrustSE	Free/libre and open source software: Survey and study														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
243	TrustSE	Why develop open-source software? The role of non-pecuniary benefits, monetary rewards, and open-source licence type														2						
244	TrustSE	Managerial and technical barriers to the adoption of open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
245	TrustSE	Teams in packaged software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
246	TrustSE	Collaboration with Lean Media: how open-source software succeeds	Open-source software, usually created by volunteer programmers dispersed worldwide, now competes with that developed by software firms. This achievement is particularly impressive as open-source programmers rarely meet. They rely heavily on electronic media, which preclude the benefits of face-to-face contact that programmers enjoy within firms. In this paper, we describe findings that address this paradox based on observation, interviews and quantitative analyses of two open-source projects. The findings suggest that spontaneous work coordinated afterward is effective, rational organizational culture helps achieve agreement among members and communications media moderately support spontaneous work. These findings can imply a new model of dispersed collaboration.	software engineering;  open-source;  innovation;  electronic media;  distributed work;  cooperative work;  CVS; software engineering, open-source, innovation, electronic media, distributed work, cooperative work, CVS	Yamauchi, Yutaka; Yokozawa, Makoto; Shinohara, Takeshi; Ishida, Toru	CSCW '00: Proceedings of the 2000 ACM conference on Computer supported cooperative work	https://doi.org/10.1145/358916.359004		329-338	"""@inproceedings{10.1145/358916.359004,
    author = ""Yamauchi, Yutaka and Yokozawa, Makoto and Shinohara, Takeshi and Ishida, Toru"",
    title = ""Collaboration with Lean Media: how open-source software succeeds"",
    year = ""2000"",
    isbn = ""1581132220"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/358916.359004"",
    doi = ""10.1145/358916.359004"",
    abstract = ""Open-source software, usually created by volunteer programmers dispersed worldwide, now competes with that developed by software firms. This achievement is particularly impressive as open-source programmers rarely meet. They rely heavily on electronic media, which preclude the benefits of face-to-face contact that programmers enjoy within firms. In this paper, we describe findings that address this paradox based on observation, interviews and quantitative analyses of two open-source projects. The findings suggest that spontaneous work coordinated afterward is effective, rational organizational culture helps achieve agreement among members and communications media moderately support spontaneous work. These findings can imply a new model of dispersed collaboration."",
    booktitle = ""Proceedings of the 2000 ACM Conference on Computer Supported Cooperative Work"",
    pages = ""329-338"",
    numpages = ""10"",
    keywords = ""software engineering, open-source, innovation, electronic media, distributed work, cooperative work, CVS"",
    location = ""Philadelphia, Pennsylvania, USA"",
    series = ""CSCW '00""
}
"""						2	ACM		Collaboration with Lean Media: how open-source software succeeds	https://doi.org/10.1145/358916.359004	Association for Computing Machinery	nan; References; Link
247	TrustSE	How perceptions of open source software influence adoption: An exploratory study														2						
248	TrustSE	Integrated software quality evaluation: a fuzzy multi-criteria approach														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
249	TrustSE	Knowledge reuse in open source software: An exploratory study of 15 open source projects														2						
250	TrustSE	A process model for packaged software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
251	TrustSE	Determinants of the choice of open source software license														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
252	TrustSE	Linux vs. Windows: A comparison of application and platform innovation incentives for open source and proprietary software platforms														2						
253	TrustSE	Adoption and utilization of commercial software packages: Exploring utilization equilibria, transitions, triggers, and tracks														2						
254	TrustSE	American Hegemony in Packaged Software Trade and the''Culture of Software''														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
255	TrustSE	A New Method of Model Combination Based on the NHPP Software Reliability Models	For fitting the failure data with non-steady growth trend better, a new method is proposed to establish combinational models by combining two NHPP models, which have better fitting effects in four candidate models including G-O model, S-Shaped model, M-O model and Duane model for the same data. A real-valued genetic algorithm is used to calculate the maximum likelihood estimates of the parameters in combinational models for solving the problem that the traditional maximum likelihood estimation algorithms cannot give parameter estimates when fitting some data sets. Then, five published failure data sets, most of which have non-steady growth trend, are selected to verify the effectiveness of our models. The results show that the MSE of our models are always lower. It reduces at least 3.12\%, and at most 69.31\% compared with the single optimal model. These indicate that our method is feasible and effective.	Software reliability;  NHPP model;  Maximum likelihood estimation;  Genetic algorithm;  Combinational model; Software reliability, NHPP model, Maximum likelihood estimation, Genetic algorithm, Combinational model	Sun, Haiyan; Zhang, Lu; Wu, Jing; Wu, Ji; Yang, Haiyan	ICMSS 2018: Proceedings of the 2018 2nd International Conference on Management Engineering, Software Engineering and Service Sciences	https://doi.org/10.1145/3180374.3181344		153-158	"""@inproceedings{10.1145/3180374.3181344,
    author = ""Sun, Haiyan and Zhang, Lu and Wu, Jing and Wu, Ji and Yang, Haiyan"",
    title = ""A New Method of Model Combination Based on the NHPP Software Reliability Models"",
    year = ""2018"",
    isbn = ""9781450354318"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3180374.3181344"",
    doi = ""10.1145/3180374.3181344"",
    abstract = ""For fitting the failure data with non-steady growth trend better, a new method is proposed to establish combinational models by combining two NHPP models, which have better fitting effects in four candidate models including G-O model, S-Shaped model, M-O model and Duane model for the same data. A real-valued genetic algorithm is used to calculate the maximum likelihood estimates of the parameters in combinational models for solving the problem that the traditional maximum likelihood estimation algorithms cannot give parameter estimates when fitting some data sets. Then, five published failure data sets, most of which have non-steady growth trend, are selected to verify the effectiveness of our models. The results show that the MSE of our models are always lower. It reduces at least 3.12\\%, and at most 69.31\\% compared with the single optimal model. These indicate that our method is feasible and effective."",
    booktitle = ""Proceedings of the 2018 2nd International Conference on Management Engineering, Software Engineering and Service Sciences"",
    pages = ""153-158"",
    numpages = ""6"",
    keywords = ""Software reliability, NHPP model, Maximum likelihood estimation, Genetic algorithm, Combinational model"",
    location = ""Wuhan, China"",
    series = ""ICMSS 2018""
}
"""						2	ACM		Software reliability models	https://doi.org/10.1145/3180374.3181344	Association for Computing Machinery	nan; References; Link
256	TrustSE	Resources contributing to gaining competitive advantage for open source software projects: An application of resource-based theory														2						
257	TrustSE	Open source software production: Climbing on the shoulders of giants														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
258	TrustSE	Governance in open source software development projects: A comparative multi-level analysis														2						
259	TrustSE	Software quality factors and software quality metrics to enhance software quality assurance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
260	TrustSE	Reputation management in an open source developer social network: An empirical study on determinants of positive evaluations														2						
261	TrustSE	Dynamic service selection with reputation management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
262	TrustSE	Reputation in open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
263	TrustSE	Something for nothing: management rejection of open source software in Australia's top firms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
264	TrustSE	Trust and reputation for successful software self-organisation														2						
265	TrustSE	Do the allocation and quality of intellectual assets affect the reputation of open source software projects?														2						
266	TrustSE	An approach for selecting software-as-a-service (SaaS) product														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
267	TrustSE	Motivation, governance, and the viability of hybrid forms in open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
268	TrustSE	Why hackers do what they do: Understanding motivation and effort in free/open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
269	TrustSE	How social Q&A sites are changing knowledge sharing in open source software communities	Historically, mailing lists have been the preferred means for coordinating development and user support activities. With the emergence and popularity growth of social Q&A sites such as the StackExchange network (e.g., StackOverflow), this is beginning to change. Such sites offer different socio-technical incentives to their participants than mailing lists do, e.g., rich web environments to store and manage content collaboratively, or a place to showcase their knowledge and expertise more vividly to peers or potential recruiters. A key difference between StackExchange and mailing lists is gamification, i.e., StackExchange participants compete to obtain reputation points and badges. In this paper, we use a case study of R (a widely-used tool for data analysis) to investigate how mailing list participation has evolved since the launch of StackExchange. Our main contribution is the assembly of a joint data set from the two sources, in which participants in both the texttt{r-help} mailing list and StackExchange are identifiable. This permits their activities to be linked across the two resources and also over time. With this data set we found that user support activities show a strong shift away from texttt{r-help}. In particular, mailing list experts are migrating to StackExchange, where their behaviour is different. First, participants active both on texttt{r-help} and on StackExchange are more active than those who focus exclusively on only one of the two. Second, they provide faster answers on StackExchange than on texttt{r-help}, suggesting they are motivated by the emph{gamified} environment. To our knowledge, our study is the first to directly chart the changes in behaviour of specific contributors as they migrate into gamified environments, and has important implications for knowledge management in software engineering.	crowdsourced knowledge;  gamification.;  mailing lists;  open source;  social q&a; crowdsourced knowledge, gamification., mailing lists, open source, social q&a	Vasilescu, Bogdan; Serebrenik, Alexander; Devanbu, Prem; Filkov, Vladimir	CSCW '14: Proceedings of the 17th ACM conference on Computer supported cooperative work & social computing	https://doi.org/10.1145/2531602.2531659		342-354	"""@inproceedings{10.1145/2531602.2531659,
    author = ""Vasilescu, Bogdan and Serebrenik, Alexander and Devanbu, Prem and Filkov, Vladimir"",
    title = ""How social Q\&A sites are changing knowledge sharing in open source software communities"",
    year = ""2014"",
    isbn = ""9781450325400"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2531602.2531659"",
    doi = ""10.1145/2531602.2531659"",
    abstract = ""Historically, mailing lists have been the preferred means for coordinating development and user support activities. With the emergence and popularity growth of social Q\&A sites such as the StackExchange network (e.g., StackOverflow), this is beginning to change. Such sites offer different socio-technical incentives to their participants than mailing lists do, e.g., rich web environments to store and manage content collaboratively, or a place to showcase their knowledge and expertise more vividly to peers or potential recruiters. A key difference between StackExchange and mailing lists is gamification, i.e., StackExchange participants compete to obtain reputation points and badges. In this paper, we use a case study of R (a widely-used tool for data analysis) to investigate how mailing list participation has evolved since the launch of StackExchange. Our main contribution is the assembly of a joint data set from the two sources, in which participants in both the texttt{r-help} mailing list and StackExchange are identifiable. This permits their activities to be linked across the two resources and also over time. With this data set we found that user support activities show a strong shift away from texttt{r-help}. In particular, mailing list experts are migrating to StackExchange, where their behaviour is different. First, participants active both on texttt{r-help} and on StackExchange are more active than those who focus exclusively on only one of the two. Second, they provide faster answers on StackExchange than on texttt{r-help}, suggesting they are motivated by the emph{gamified} environment. To our knowledge, our study is the first to directly chart the changes in behaviour of specific contributors as they migrate into gamified environments, and has important implications for knowledge management in software engineering."",
    booktitle = ""Proceedings of the 17th ACM Conference on Computer Supported Cooperative Work \\& Social Computing"",
    pages = ""342-354"",
    numpages = ""13"",
    keywords = ""crowdsourced knowledge, gamification., mailing lists, open source, social q\&a"",
    location = ""Baltimore, Maryland, USA"",
    series = ""CSCW '14""
}
"""						2	ACM		How social Q&A sites are changing knowledge sharing in open source software communities	https://doi.org/10.1145/2531602.2531659	Association for Computing Machinery	nan; References; Link
270	TrustSE	Towards reputation-as-a-service														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
271	TrustSE	Motivation of software developers in Open Source projects: an Internet-based survey of contributors to the Linux kernel														2						
272	TrustSE	Reputation in Open Source Software Virtual Communities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
273	TrustSE	Reputation in an open source software community: Antecedents and impacts														2						
274	TrustSE	Relationships between open source software companies and communities: Observations from Nordic firms														2						
275	TrustSE	A Reputation-Based Mechanism for Software Vulnerability Disclosure														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
276	TrustSE	Analyzing and Identifying SaaS for Development of a Project by calculating its Reputation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
277	TrustSE	Assessing the Impact of Project Founder Reputation and Project Structure on Motivation to Participate in Open Source Software Projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
278	TrustSE	Location, location, location: How network embeddedness affects project success in open source systems														2						
279	TrustSE	Collaborative SLA and reputation-based trust management in cloud federations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
280	TrustSE	The governance of free/open source software projects: monolithic, multidimensional, or configurational?														2						
281	TrustSE	Impacts of license choice and organizational sponsorship on user interest and development activity in open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
282	TrustSE	Why open source software can succeed														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
283	TrustSE	Intrinsic motivation in open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
284	TrustSE	Emergence of new project teams from open source software developer networks: Impact of prior collaboration ties														2						
285	TrustSE	SLA-Based Resource Allocation for Software as a Service Provider (SaaS) in Cloud Computing Environments	Cloud computing has been considered as a solution for solving enterprise application distribution and configuration challenges in the traditional software sales model. Migrating from traditional software to Cloud enables on-going revenue for software providers. However, in order to deliver hosted services to customers, SaaS companies have to either maintain their own hardware or rent it from infrastructure providers. This requirement means that SaaS providers will incur extra costs. In order to minimize the cost of resources, it is also important to satisfy a minimum service level to customers. Therefore, this paper proposes resource allocation algorithms for SaaS providers who want to minimize infrastructure cost and SLA violations. Our proposed algorithms are designed in a way to ensure that Saas providers are able to manage the dynamic change of customers, mapping customer requests to infrastructure level parameters and handling heterogeneity of Virtual Machines. We take into account the customers' Quality of Service parameters such as response time, and infrastructure level parameters such as service initiation time. This paper also presents an extensive evaluation study to analyze and demonstrate that our proposed algorithms minimize the SaaS provider's cost and the number of SLA violations in a dynamic resource sharing Cloud environment.	Software as a Service;  Service Level Agreement (SLA);  Scheduling;  Resource Allocation;  Cloud computing; Software as a Service, Service Level Agreement (SLA), Scheduling, Resource Allocation, Cloud computing	Wu, Linlin; Garg, Saurabh Kumar; Buyya, Rajkumar	CCGRID '11: Proceedings of the 2011 11th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing	https://doi.org/10.1109/CCGrid.2011.51		195-204	"""@inproceedings{10.1109/CCGrid.2011.51,
    author = ""Wu, Linlin and Garg, Saurabh Kumar and Buyya, Rajkumar"",
    title = ""SLA-Based Resource Allocation for Software as a Service Provider (SaaS) in Cloud Computing Environments"",
    year = ""2011"",
    isbn = ""9780769543956"",
    publisher = ""IEEE Computer Society"",
    address = ""USA"",
    url = ""https://doi.org/10.1109/CCGrid.2011.51"",
    doi = ""10.1109/CCGrid.2011.51"",
    abstract = ""Cloud computing has been considered as a solution for solving enterprise application distribution and configuration challenges in the traditional software sales model. Migrating from traditional software to Cloud enables on-going revenue for software providers. However, in order to deliver hosted services to customers, SaaS companies have to either maintain their own hardware or rent it from infrastructure providers. This requirement means that SaaS providers will incur extra costs. In order to minimize the cost of resources, it is also important to satisfy a minimum service level to customers. Therefore, this paper proposes resource allocation algorithms for SaaS providers who want to minimize infrastructure cost and SLA violations. Our proposed algorithms are designed in a way to ensure that Saas providers are able to manage the dynamic change of customers, mapping customer requests to infrastructure level parameters and handling heterogeneity of Virtual Machines. We take into account the customers' Quality of Service parameters such as response time, and infrastructure level parameters such as service initiation time. This paper also presents an extensive evaluation study to analyze and demonstrate that our proposed algorithms minimize the SaaS provider's cost and the number of SLA violations in a dynamic resource sharing Cloud environment."",
    booktitle = ""Proceedings of the 2011 11th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing"",
    pages = ""195-204"",
    numpages = ""10"",
    keywords = ""Software as a Service, Service Level Agreement (SLA), Scheduling, Resource Allocation, Cloud computing"",
    series = ""CCGRID '11""
}
"""						2	ACM		SLA-based resource allocation for software as a service provider (SaaS) in cloud computing environments	https://doi.org/10.1109/CCGrid.2011.51	IEEE Computer Society	nan; References; Link
286	TrustSE	Carrots and rainbows: Motivation and social practice in open source software development														2						
287	TrustSE	Software reuse: From library to factory	Systematic software reuse is a key business strategy that software managers can employ to dramatically improve their software development processes, to decrease time-to-market and costs, and to improve product quality. Effective reuse requires much more than just code and library technology. We have learned that careful consideration must be given to people, process, and technology. One approach to the systematic integration of these three elements is the concept of the software factory. At Hewlett-Packard Co., we have initiated a multifaceted corporate reuse program to help introduce the best practices of systematic reuse into the company, complemented by multidisciplinary research to investigate and develop better methods for domain-specific, reuse-based software engineering. This essay discusses our experiences. Key aspects include domain-specific kits, business modeling, organization design, and technology infrastructure for a flexible software factory.		M. L. Griss	IBM Systems Journal	https://doi.org/10.1147/sj.324.0548		548- 566							2	IEEE		Software reuse: From library to factory	https://ieeexplore.ieee.org/document/5387334	IBM	nan; Keywords; References; Year; Bibtex
288	TrustSE	An Empirical Analysis of the Impact of Software Vulnerability Announcements on Firm Stock Price	Security defects in software cost millions of dollars to firms in terms of downtime, disruptions, and confidentiality breaches. However, the economic implications of these defects for software vendors are not well understood. Lack of legal liability and the presence of switching costs and network externalities may protect software vendors from incurring significant costs in the event of a vulnerability announcement, unlike such industries as auto and pharmaceuticals, which have been known to suffer significant loss in market value in the event of a defect announcement. Although research in software economics has studied firms' incentives to improve overall quality, there have not been any studies which show that software vendors have an incentive to invest in building more secure software. The objectives of this paper are twofold. 1) We examine how a software vendor's market value changes when a vulnerability is announced. 2) We examine how firm and vulnerability characteristics mediate the change in the market value of a vendor. We collect data from leading national newspapers and industry sources, such as the Computer Emergency Response Team (CERT), by searching for reports on published software vulnerabilities. We show that vulnerability announcements lead to a negative and significant change in a software vendor's market value. In our sample, on average, a vendor loses around 0.6 percent value in stock price when a vulnerability is reported. We find that a software vendor loses more market share if the market is competitive or if the vendor is small. To provide further insight, we use the information content of the disclosure announcement to classify vulnerabilities into various types. We find that the change in stock price is more negative if the vendor fails to provide a patch at the time of disclosure. Also, more severe flaws have a significantly greater impact. Our analysis provides many interesting implications for software vendors as well as policy makers.	IEEE news; Software quality; Costs; Security; Computer industry; Internet; Law; Legal factors; Protection; Pharmaceuticals; Stock Price; Security Vulnerabilities; Stock Prices Of Firms; Market Share; Cybersecurity; Market Value; Loss Value; Millions Of Dollars; Industrial Sources; Switching Costs; Legal Liability; Vulnerability Characteristics; Stock Price Changes; Security Flaws; Software Vendors; Coefficients Of Variables; Alpha Coefficient; Market Competition; Stock Market; Defective Production; Cumulative Abnormal Returns; Event Window; Software Product; Denial Of Service; Market Model; Negative Returns; Wall Street Journal; Types Of Vulnerabilities; Custom Loss; Actual Return; Information security; software vulnerability; quality; event-study; patching; software vendors.	Rahul Telang; Sunil Wattal	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2007.70712		544- 557							2	IEEE		An empirical analysis of the impact of software vulnerability announcements on firm stock price	https://ieeexplore.ieee.org/document/4267025	IEEE	nan; References; Year; Bibtex
289	TrustSE	Secured trust and reputation system: analysis of malicious behaviors and optimization														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
290	TrustSE	Open source software projects as virtual organisations: competency rallying for software development														2						
291	TrustSE	Measuring the health of open source software ecosystems: Beyond the scope of project health														2						
292	TrustSE	The paradoxes of free software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
293	TrustSE	The infeasibility of quantifying the reliability of life-critical real-time software	"This work affirms that the quantification of life-critical software reliability is infeasible using statistical methods, whether these methods are applied to standard software or fault-tolerant software. The classical methods of estimating reliability are shown to lead to exorbitant amounts of testing when applied to life-critical software. Reliability growth models are examined and also shown to be incapable of overcoming the need for excessive amounts of testing. The key assumption of software fault tolerance-separately programmed versions fail independently-is shown to be problematic. This assumption cannot be justified by experimentation in the ultrareliability region, and subjective arguments in its favor are not sufficiently strong to justify it as an axiom. Also, the implications of the recent multiversion software experiments support this affirmation.<
>"	Software reliability; Application software; Hardware; Software systems; Control systems; Software testing; Fault tolerance; Software design; Computer errors; Costs	R.W. Butler; G.B. Finelli	IEEE Transactions on Software Engineering	https://doi.org/10.1109/32.210303	"1.N. G. Leveson, ""Software safety: What why and how"", Computing Surveys, vol. 18, pp. 126-163, June 1986. CrossRef  Google Scholar; 2.I. Peterson, ""A digital matter of life and death"", Science News, Mar. 1988. CrossRef  Google Scholar; 3.E. Joyce, ""Software bugs: A matter of life and liability"", Datamation, May 1987. Google Scholar; 4.N. R. Mann, R. E. Schafer and N. D. Singpurwalla, Methods for Statistical Analysis of Reliability and Life Data, New York:Wiley, 1974. Google Scholar; 5.A. A. Abdalla-Ghaly and A. B. L. P. Y. Chan, ""Evaluation of competing reliability predictions"", IEEE Trans. Software Eng., pp. 950-967, 1986. View Article  Google Scholar; 6.B. Littlewood and P. A. Keiller, ""Adaptive software reliability modeling"", Proc. 14th Int. Symp. Fault-Tolerant Computing, pp. 108-113, 1984. Google Scholar; 7.B. Littlewood, ""Stochastic reliability-growth: A model for fault-removal in computer programs and hardware designs"", IEEE Trans. Reliability, pp. 313-320, 1981. View Article  Google Scholar; 8.P. A. Keiller and D. R. Miller, ""On the use and the performance of software reliability growth models"", Reliability Engineering and System Safety, pp. 95-117, 1991. CrossRef  Google Scholar; 9.B. Littlewood, ""Predicting software reliability"", Phil. Trans. Roy. Soc. London, pp. 513-526, 1989. CrossRef  Google Scholar; 10.P. M. Nagel and J. A. Skrivan, Software reliability: Repetitive run experimentation and modeling, Feb. 1982. Google Scholar; 11.A. Avizienis, ""The n-version approach to fault-tolerant software"", IEEE Trans. Software Eng., pp. 1491-1501, Dec. 1985. View Article  Google Scholar; 12.R. K. Scott, J. W. Gault and D. F. McAllister, ""Fault-tolerant software reliability modeling"", IEEE Trans. Software Eng., May 1987. View Article  Google Scholar; 13.D. Miller, Making statistical inferences about software reliability, Nov. 1988. Google Scholar; 14.J. C. Knight and N. G. Leveson, ""An experimental evaluation of the assumptions of independence in multiversion programming"", IEEE Trans. Software Eng., vol. SE-12, pp. 96-109, Jan. 1986. View Article  Google Scholar; 15.T. J. Shimeall and N. G. Leveson, ""An empirical comparison of software fault-tolerance and fault elimination"", IEEE Trans. Software Eng., pp. 173-183, Feb. 1991. View Article  Google Scholar; 16.J. C. Knight and N. G. Leveson, ""A reply to the criticisms of the Knight & Leveson experiment"", ACM SIGSOFT Software Eng. Notes, Jan. 1990. CrossRef  Google Scholar"	3- 12							2	IEEE		The infeasibility of quantifying the reliability of life-critical real-time software	https://ieeexplore.ieee.org/document/210303	IEEE	nan; Year; Bibtex
294	TrustSE	A systematic literature review on fault prediction performance in software engineering														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
295	TrustSE	Software fault prediction metrics: A systematic literature review														2						
296	TrustSE	The infeasibility of experimental quantification of life-critical software reliability			Butler, Ricky W.; Finelli, George B.	SIGSOFT '91: Proceedings of the conference on Software for citical systems	https://doi.org/10.1145/125083.123054		66-76	"""@inproceedings{10.1145/125083.123054,
    author = ""Butler, Ricky W. and Finelli, George B."",
    title = ""The infeasibility of experimental quantification of life-critical software reliability"",
    year = ""1991"",
    isbn = ""0897914554"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/125083.123054"",
    doi = ""10.1145/125083.123054"",
    booktitle = ""Proceedings of the Conference on Software for Citical Systems"",
    pages = ""66-76"",
    numpages = ""11"",
    location = ""New Orleans, Louisiana, USA"",
    series = ""SIGSOFT '91""
}

@article{10.1145/123041.123054,
    author = ""Butler, Ricky W. and Finelli, George B."",
    title = ""The infeasibility of experimental quantification of life-critical software reliability"",
    year = ""1991"",
    issue_date = ""Dec. 1991"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""16"",
    number = ""5"",
    issn = ""0163-5948"",
    url = ""https://doi.org/10.1145/123041.123054"",
    doi = ""10.1145/123041.123054"",
    journal = ""SIGSOFT Softw. Eng. Notes"",
    month = ""September"",
    pages = ""66-76"",
    numpages = ""11""
}
"""						2	ACM		The infeasibility of experimental quantification of life-critical software reliability	https://doi.org/10.1145/125083.123054	Association for Computing Machinery	nan; Abstract; Keywords; References; Link
297	TrustSE	Open source software for the public administration														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
298	TrustSE	Temporal metrics for software vulnerabilities	It is widely recognized that metrics are important to information security. Metrics can be an effective tool for companies and information security professionals to measure, control, and improve their security control and mechanisms. However, common security metrics are often qualitative, subjective, and informal in the sense that they are lacking formal models and automated support. This paper discussed our work on temporal metrics for software vulnerabilities based on the Common Vulnerability Scoring System 2.0. A mathematical model is provided to calculate the severity and risk of a vulnerability, which is time dependent including exploitability, remediation level, and report confidence attributes of an information asset in a computing environment. A prototype of an automated tool, CVSSWizzard, is illustrated with examples.	threats and vulnerabilities;  metrics and measurement;  information security;  common vulnerability scoring system; threats and vulnerabilities, metrics and measurement, information security, common vulnerability scoring system	Wang, Ju An; Zhang, Fengwei; Xia, Min	CSIIRW '08: Proceedings of the 4th annual workshop on Cyber security and information intelligence research: developing strategies to meet the cyber security and information intelligence challenges ahead	https://doi.org/10.1145/1413140.1413191		1-3	"""@inproceedings{10.1145/1413140.1413191,
    author = ""Wang, Ju An and Zhang, Fengwei and Xia, Min"",
    title = ""Temporal metrics for software vulnerabilities"",
    year = ""2008"",
    isbn = ""9781605580982"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1413140.1413191"",
    doi = ""10.1145/1413140.1413191"",
    abstract = ""It is widely recognized that metrics are important to information security. Metrics can be an effective tool for companies and information security professionals to measure, control, and improve their security control and mechanisms. However, common security metrics are often qualitative, subjective, and informal in the sense that they are lacking formal models and automated support. This paper discussed our work on temporal metrics for software vulnerabilities based on the Common Vulnerability Scoring System 2.0. A mathematical model is provided to calculate the severity and risk of a vulnerability, which is time dependent including exploitability, remediation level, and report confidence attributes of an information asset in a computing environment. A prototype of an automated tool, CVSSWizzard, is illustrated with examples."",
    booktitle = ""Proceedings of the 4th Annual Workshop on Cyber Security and Information Intelligence Research: Developing Strategies to Meet the Cyber Security and Information Intelligence Challenges Ahead"",
    articleno = ""44"",
    numpages = ""3"",
    keywords = ""threats and vulnerabilities, metrics and measurement, information security, common vulnerability scoring system"",
    location = ""Oak Ridge, Tennessee, USA"",
    series = ""CSIIRW '08""
}
"""						2	ACM		Temporal metrics for software vulnerabilities	https://doi.org/10.1145/1413140.1413191	Association for Computing Machinery	nan; References; Link
299	TrustSE	Open source software and open data standards in public administration														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
300	TrustSE	Government preferences for promoting open-source software: A solution in search of a problem														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
301	TrustSE	Research on testing-based software credibility measurement and assessment														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
302	TrustSE	Software metrics: successes, failures and new directions														2						
303	TrustSE	Understanding broadcast based peer review on open source software projects	Software peer review has proven to be a successful technique in open source software (OSS) development. In contrast to industry, where reviews are typically assigned to specific individuals, changes are broadcast to hundreds of potentially interested stakeholders. Despite concerns that reviews may be ignored, or that discussions will deadlock because too many uninformed stakeholders are involved, we find that this approach works well in practice. In this paper, we describe an empirical study to investigate the mechanisms and behaviours that developers use to find code changes they are competent to review. We also explore how stakeholders interact with one another during the review process. We manually examine hundreds of reviews across five high profile OSS projects. Our findings provide insights into the simple, community-wide techniques that developers use to effectively manage large quantities of reviews. The themes that emerge from our study are enriched and validated by interviewing long-serving core developers.	peer review;  open source software;  grounded theory;  case studies; peer review, open source software, grounded theory, case studies	Rigby, Peter C.; Storey, Margaret-Anne	ICSE '11: Proceedings of the 33rd International Conference on Software Engineering	https://doi.org/10.1145/1985793.1985867		541-550	"""@inproceedings{10.1145/1985793.1985867,
    author = ""Rigby, Peter C. and Storey, Margaret-Anne"",
    title = ""Understanding broadcast based peer review on open source software projects"",
    year = ""2011"",
    isbn = ""9781450304450"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1985793.1985867"",
    doi = ""10.1145/1985793.1985867"",
    abstract = ""Software peer review has proven to be a successful technique in open source software (OSS) development. In contrast to industry, where reviews are typically assigned to specific individuals, changes are broadcast to hundreds of potentially interested stakeholders. Despite concerns that reviews may be ignored, or that discussions will deadlock because too many uninformed stakeholders are involved, we find that this approach works well in practice. In this paper, we describe an empirical study to investigate the mechanisms and behaviours that developers use to find code changes they are competent to review. We also explore how stakeholders interact with one another during the review process. We manually examine hundreds of reviews across five high profile OSS projects. Our findings provide insights into the simple, community-wide techniques that developers use to effectively manage large quantities of reviews. The themes that emerge from our study are enriched and validated by interviewing long-serving core developers."",
    booktitle = ""Proceedings of the 33rd International Conference on Software Engineering"",
    pages = ""541-550"",
    numpages = ""10"",
    keywords = ""peer review, open source software, grounded theory, case studies"",
    location = ""Waikiki, Honolulu, HI, USA"",
    series = ""ICSE '11""
}
"""						2	ACM		Understanding broadcast based peer review on open source software projects	https://doi.org/10.1145/1985793.1985867	Association for Computing Machinery	nan; References; Link
304	TrustSE	Understanding the sources of variation in software inspections	"In a previous experiment, we determined how various changes in three structural elements of the software inspection process (team size and the number and sequencing of sessions) altered effectiveness and interval. Our results showed that such changes did not significantly influence the defect detection rate, but that certain combinations of changes dramatically increased the inspection interval. We also observed a large amount of unexplained variance in the data, indicating that other factors must be affecting inspection performance. The nature and extent of these other factors now have to be determined to ensure that they had not biased our earlier results. Also, identifying these other factors might suggest additional ways to improve the efficiency of inspections. Acting on the hypothesis that the ""inputs"" into the inspection process (reviewers, authors, and code units) were significant sources of variation, we modeled their effects on inspection performance. We found that they were responsible for much more variation in detect detection than was process structure. This leads us to conclude that better defect detection techniques, not better process structures, are the key to improving inspection effectiveness. The combined effects of process inputs and process structure on the inspection interval accounted for only a small percentage of the variance in inspection interval. Therefore, there must be other factors which need to be identified."	statistical models;  software process;  software inspection;  empirical studies; statistical models, software process, software inspection, empirical studies	Porter, Adam; Siy, Harvey; Mockus, Audris; Votta, Lawrence	ACM Trans. Softw. Eng. Methodol.	https://doi.org/10.1145/268411.268421		41-79	"""@article{10.1145/268411.268421,
    author = ""Porter, Adam and Siy, Harvey and Mockus, Audris and Votta, Lawrence"",
    title = ""Understanding the sources of variation in software inspections"",
    year = ""1998"",
    issue_date = ""Jan. 1998"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""7"",
    number = ""1"",
    issn = ""1049-331X"",
    url = ""https://doi.org/10.1145/268411.268421"",
    doi = ""10.1145/268411.268421"",
    abstract = ""In a previous experiment, we determined how various changes in three structural elements of the software inspection process (team size and the number and sequencing of sessions) altered effectiveness and interval. Our results showed that such changes did not significantly influence the defect detection rate, but that certain combinations of changes dramatically increased the inspection interval. We also observed a large amount of unexplained variance in the data, indicating that other factors must be affecting inspection performance. The nature and extent of these other factors now have to be determined to ensure that they had not biased our earlier results. Also, identifying these other factors might suggest additional ways to improve the efficiency of inspections. Acting on the hypothesis that the ""inputs"" into the inspection process (reviewers, authors, and code units) were significant sources of variation, we modeled their effects on inspection performance. We found that they were responsible for much more variation in detect detection than was process structure. This leads us to conclude that better defect detection techniques, not better process structures, are the key to improving inspection effectiveness. The combined effects of process inputs and process structure on the inspection interval accounted for only a small percentage of the variance in inspection interval. Therefore, there must be other factors which need to be identified."",
    journal = ""ACM Trans. Softw. Eng. Methodol."",
    month = ""January"",
    pages = ""41-79"",
    numpages = ""39"",
    keywords = ""statistical models, software process, software inspection, empirical studies""
}
"""						2	ACM		Understanding the sources of variation in software inspections	https://doi.org/10.1145/268411.268421	Association for Computing Machinery	nan; References; Link
305	TrustSE	The Collaborative Integrity of Open-Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
306	TrustSE	Auditing and maintaining provenance in software packages														2						
307	TrustSE	Software processes analysis with provenance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
308	TrustSE	Software Provenance: Track the Reality Not the Virtual Machine	The growing use of computers and massive storage by individuals is driving interest in digital preservation. The scientific method demands accountability through digital reproducibility, adding another strong motivation for preservation. However, data alone can become obsolete if the interactivity of software required to interpret the data is lost. Virtual machines (VMs) may preserve interactivity however do so at the cost of obscuring the nature of what lies within. Occam, instead, builds VMs on-the-fly while storing and distributing well-described software packages. Thus, the system can track the exact components inside VMs without storing the machines themselves, allowing software to be repeatably built and executed. For Occam to recreate VMs, it needs to know exactly what software was used within. Through this tracking, such software can even be modified and rebuilt. Occam keeps track of all such components in manifests, allowing anybody to know exactly what is in each VM, and the origins of each component.		Wilkinson, David; Oliveira, Lu\'{\i}s; Moss\'{e}, Daniel; Childers, Bruce	P-RECS'18: Proceedings of the First International Workshop on Practical Reproducible Evaluation of Computer Systems	https://doi.org/10.1145/3214239.3214244		1-6	"""@inproceedings{10.1145/3214239.3214244,
    author = ""Wilkinson, David and Oliveira, Lu\'{\i}s and Moss\'{e}, Daniel and Childers, Bruce"",
    title = ""Software Provenance: Track the Reality Not the Virtual Machine"",
    year = ""2018"",
    isbn = ""9781450358613"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3214239.3214244"",
    doi = ""10.1145/3214239.3214244"",
    abstract = ""The growing use of computers and massive storage by individuals is driving interest in digital preservation. The scientific method demands accountability through digital reproducibility, adding another strong motivation for preservation. However, data alone can become obsolete if the interactivity of software required to interpret the data is lost. Virtual machines (VMs) may preserve interactivity however do so at the cost of obscuring the nature of what lies within. Occam, instead, builds VMs on-the-fly while storing and distributing well-described software packages. Thus, the system can track the exact components inside VMs without storing the machines themselves, allowing software to be repeatably built and executed. For Occam to recreate VMs, it needs to know exactly what software was used within. Through this tracking, such software can even be modified and rebuilt. Occam keeps track of all such components in manifests, allowing anybody to know exactly what is in each VM, and the origins of each component."",
    booktitle = ""Proceedings of the First International Workshop on Practical Reproducible Evaluation of Computer Systems"",
    articleno = ""5"",
    numpages = ""6"",
    location = ""Tempe, AZ, USA"",
    series = ""P-RECS'18""
}
"""						2	ACM		Software Provenance: Track the Reality Not the Virtual Machine	https://doi.org/10.1145/3214239.3214244	Association for Computing Machinery	nan; Keywords; References; Link
309	TrustSE	Modeling library dependencies and updates in large software repository universes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
310	TrustSE	The Spack package manager: bringing order to HPC software chaos	Large HPC centers spend considerable time supporting software for thousands of users, but the complexity of HPC software is quickly outpacing the capabilities of existing software management tools. Scientific applications require specific versions of compilers, MPI, and other dependency libraries, so using a single, standard software stack is infeasible. However, managing many configurations is difficult because the configuration space is combinatorial in size.We introduce Spack, a tool used at Lawrence Livermore National Laboratory to manage this complexity. Spack provides a novel, recursive specification syntax to invoke parametric builds of packages and dependencies. It allows any number of builds to coexist on the same system, and it ensures that installed packages can find their dependencies, regardless of the environment. We show through real-world use cases that Spack supports diverse and demanding applications, bringing order to HPC software chaos.		Gamblin, Todd; LeGendre, Matthew; Collette, Michael R.; Lee, Gregory L.; Moody, Adam; de Supinski, Bronis R.; Futral, Scott	SC '15: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis	https://doi.org/10.1145/2807591.2807623		1-12	"""@inproceedings{10.1145/2807591.2807623,
    author = ""Gamblin, Todd and LeGendre, Matthew and Collette, Michael R. and Lee, Gregory L. and Moody, Adam and de Supinski, Bronis R. and Futral, Scott"",
    title = ""The Spack package manager: bringing order to HPC software chaos"",
    year = ""2015"",
    isbn = ""9781450337236"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2807591.2807623"",
    doi = ""10.1145/2807591.2807623"",
    abstract = ""Large HPC centers spend considerable time supporting software for thousands of users, but the complexity of HPC software is quickly outpacing the capabilities of existing software management tools. Scientific applications require specific versions of compilers, MPI, and other dependency libraries, so using a single, standard software stack is infeasible. However, managing many configurations is difficult because the configuration space is combinatorial in size.We introduce Spack, a tool used at Lawrence Livermore National Laboratory to manage this complexity. Spack provides a novel, recursive specification syntax to invoke parametric builds of packages and dependencies. It allows any number of builds to coexist on the same system, and it ensures that installed packages can find their dependencies, regardless of the environment. We show through real-world use cases that Spack supports diverse and demanding applications, bringing order to HPC software chaos."",
    booktitle = ""Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis"",
    articleno = ""40"",
    numpages = ""12"",
    location = ""Austin, Texas"",
    series = ""SC '15""
}
"""						2	ACM		The Spack package manager: bringing order to HPC software chaos	https://doi.org/10.1145/2807591.2807623	Association for Computing Machinery	nan; Keywords; References; Link
311	TrustSE	Secure dependency enforcement in package management systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
312	TrustSE	Automatic polymorphic exploit generation for software vulnerabilities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
313	TrustSE	Software applications have on average 24 vulnerabilities inherited from buggy components														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
314	TrustSE	Large-scale Modeling, Analysis, and Preservation of Free and Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
315	TrustSE	'Computing'Requirements in Open Source Software Projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
316	TrustSE	User and developer mediation in an Open Source Software community: Boundary spanning through cross participation in online discussions														2						
317	TrustSE	Creating and evolving developer documentation: understanding the decisions of open source contributors	Developer documentation helps developers learn frameworks and libraries. To better understand how documentation in open source projects is created and maintained, we performed a qualitative study in which we interviewed core contributors who wrote developer documentation and developers who read documentation. In addition, we studied the evolution of 19 documents by analyzing more than 1500 document revisions. We identified the decisions that contributors make, the factors influencing these decisions and the consequences for the project. Among many findings, we observed how working on the documentation could improve the code quality and how constant interaction with the projects' community positively impacted the documentation.	software documentation;  qualitative studies;  open source projects;  grounded theory;  framework;  developer documentation; software documentation, qualitative studies, open source projects, grounded theory, framework, developer documentation	Dagenais, Barth\'{e}l\'{e}my; Robillard, Martin P.	FSE '10: Proceedings of the eighteenth ACM SIGSOFT international symposium on Foundations of software engineering	https://doi.org/10.1145/1882291.1882312		127-136	"""@inproceedings{10.1145/1882291.1882312,
    author = ""Dagenais, Barth\'{e}l\'{e}my and Robillard, Martin P."",
    title = ""Creating and evolving developer documentation: understanding the decisions of open source contributors"",
    year = ""2010"",
    isbn = ""9781605587912"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1882291.1882312"",
    doi = ""10.1145/1882291.1882312"",
    abstract = ""Developer documentation helps developers learn frameworks and libraries. To better understand how documentation in open source projects is created and maintained, we performed a qualitative study in which we interviewed core contributors who wrote developer documentation and developers who read documentation. In addition, we studied the evolution of 19 documents by analyzing more than 1500 document revisions. We identified the decisions that contributors make, the factors influencing these decisions and the consequences for the project. Among many findings, we observed how working on the documentation could improve the code quality and how constant interaction with the projects' community positively impacted the documentation."",
    booktitle = ""Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering"",
    pages = ""127-136"",
    numpages = ""10"",
    keywords = ""software documentation, qualitative studies, open source projects, grounded theory, framework, developer documentation"",
    location = ""Santa Fe, New Mexico, USA"",
    series = ""FSE '10""
}
"""						2	ACM		Creating and evolving developer documentation: understanding the decisions of open source contributors	https://doi.org/10.1145/1882291.1882312	Association for Computing Machinery	nan; References; Link
318	TrustSE	A model of open source developer foundations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
319	TrustSE	Research of trustworthy software system in the network														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
320	TrustSE	Study on credibility level of trustworthy software development process based on grey nonlinear cluster														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
321	TrustSE	Estimating development effort in Free/Open source software projects by mining software repositories: a case study of OpenStack	Because of the distributed and collaborative nature of free / open source software (FOSS) projects, the development effort invested in a project is usually unknown, even after the software has been released. However, this information is becoming of major interest, especially ---but not only--- because of the growth in the number of companies for which FOSS has become relevant for their business strategy. In this paper we present a novel approach to estimate effort by considering data from source code management repositories. We apply our model to the OpenStack project, a FOSS project with more than 1,000 authors, in which several tens of companies cooperate. Based on data from its repositories and together with the input from a survey answered by more than 100 developers, we show that the model offers a simple, but sound way of obtaining software development estimations with bounded margins of error.	Effort estimation;  free software;  mining software repositories;  open source; Effort estimation, free software, mining software repositories, open source	Robles, Gregorio; Gonz\'{a}lez-Barahona, Jes\'{u}s M.; Cervig\'{o}n, Carlos; Capiluppi, Andrea; Izquierdo-Cort\'{a}zar, Daniel	MSR 2014: Proceedings of the 11th Working Conference on Mining Software Repositories	https://doi.org/10.1145/2597073.2597107		222-231	"""@inproceedings{10.1145/2597073.2597107,
    author = ""Robles, Gregorio and Gonz\'{a}lez-Barahona, Jes\'{u}s M. and Cervig\'{o}n, Carlos and Capiluppi, Andrea and Izquierdo-Cort\'{a}zar, Daniel"",
    title = ""Estimating development effort in Free/Open source software projects by mining software repositories: a case study of OpenStack"",
    year = ""2014"",
    isbn = ""9781450328630"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2597073.2597107"",
    doi = ""10.1145/2597073.2597107"",
    abstract = ""Because of the distributed and collaborative nature of free / open source software (FOSS) projects, the development effort invested in a project is usually unknown, even after the software has been released. However, this information is becoming of major interest, especially ---but not only--- because of the growth in the number of companies for which FOSS has become relevant for their business strategy. In this paper we present a novel approach to estimate effort by considering data from source code management repositories. We apply our model to the OpenStack project, a FOSS project with more than 1,000 authors, in which several tens of companies cooperate. Based on data from its repositories and together with the input from a survey answered by more than 100 developers, we show that the model offers a simple, but sound way of obtaining software development estimations with bounded margins of error."",
    booktitle = ""Proceedings of the 11th Working Conference on Mining Software Repositories"",
    pages = ""222-231"",
    numpages = ""10"",
    keywords = ""Effort estimation, free software, mining software repositories, open source"",
    location = ""Hyderabad, India"",
    series = ""MSR 2014""
}
"""						2	ACM		Estimating development effort in free/open source software projects by mining software repositories: a case study of openstack	https://doi.org/10.1145/2597073.2597107	Association for Computing Machinery	nan; References; Link
322	TrustSE	Resistance as motivation for innovation: Open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
323	TrustSE	Bounty programs in free/libre/open source software														2						
324	TrustSE	A non-functional requirements tradeoff model in trustworthy software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
325	TrustSE	Using innovative instructions to create trustworthy software solutions	Software developers face a number of challenges when creating applications that attempt to keep important data confidential. Even with diligent attention paid to correct software design and implementation practices, secrets can still be exposed through a single flaw in any of the privileged code on the platform, code which may have been written by thousands of developers from hundreds of organizations throughout the world. Intel is developing innovative security technology which provides the ability for software developers to maintain control of the security of sensitive code and data by creating trusted domains within applications to protect critical information during execution and at rest. This paper will describe how this technology has been effectively used in lab exercises to protect private information in applications including enterprise rights management, video chat, trusted financial transactions, and others. Examples will include both protection of local processing and the establishment of secure communication with cloud services. It will illustrate useful software design patterns that can be followed to create many additional types of trusted software solutions.		Hoekstra, Matthew; Lal, Reshma; Pappachan, Pradeep; Phegade, Vinay; Del Cuvillo, Juan	HASP '13: Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy	https://doi.org/10.1145/2487726.2488370			"""@inproceedings{10.1145/2487726.2488370,
    author = ""Hoekstra, Matthew and Lal, Reshma and Pappachan, Pradeep and Phegade, Vinay and Del Cuvillo, Juan"",
    title = ""Using innovative instructions to create trustworthy software solutions"",
    year = ""2013"",
    isbn = ""9781450321181"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2487726.2488370"",
    doi = ""10.1145/2487726.2488370"",
    abstract = ""Software developers face a number of challenges when creating applications that attempt to keep important data confidential. Even with diligent attention paid to correct software design and implementation practices, secrets can still be exposed through a single flaw in any of the privileged code on the platform, code which may have been written by thousands of developers from hundreds of organizations throughout the world. Intel is developing innovative security technology which provides the ability for software developers to maintain control of the security of sensitive code and data by creating trusted domains within applications to protect critical information during execution and at rest. This paper will describe how this technology has been effectively used in lab exercises to protect private information in applications including enterprise rights management, video chat, trusted financial transactions, and others. Examples will include both protection of local processing and the establishment of secure communication with cloud services. It will illustrate useful software design patterns that can be followed to create many additional types of trusted software solutions."",
    booktitle = ""Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy"",
    articleno = ""11"",
    numpages = ""1"",
    location = ""Tel-Aviv, Israel"",
    series = ""HASP '13""
}
"""						2	ACM		Using innovative instructions to create trustworthy software solutions.	https://doi.org/10.1145/2487726.2488370	Association for Computing Machinery	nan; Keywords; References; Pages; Link
326	TrustSE	A Software Component Quality Model: A Preliminary Evaluation	Component-based software development is becoming more generalized, representing a considerable market for the software industry. The perspective of reduced development costs and shorter life cycles acts as a motivation for this expansion. However, several technical issues remain unsolved before software component's industry reaches the maturity exhibited by other component industries. Problems such as the component selection by their integrators and the uncertain quality of third-party developed components, bring new challenges to the software engineering community. By the other hand, the software components certification area is still immature and further research is needed in order to obtain well-defined standards for certification. In this way, we aim to propose a component quality model, describing consistent and well-defined characteristics, quality attributes and related metrics for the components evaluation. A preliminary evaluation to analyze the results of using the component quality model proposed is also presented	Software quality; Certification; Computer industry; Programming; Software engineering; Software standards; Mathematical model; Predictive models; Costs; Assembly; Model Quality; Software Components; Quality Attributes; Software Engineering; Related Metrics; Objective Of This Study; Null Hypothesis; Alternative Hypothesis; Development Of Applications; Quality Characteristics; Kind Of Information; Target Market; Components In Order; Considerable Information; Software Product; Market Characteristics; Technological Quality; Boolean Variable; Ability Of Components	Alexandre Alvaro; Eduardo Santana De Almeida; Silvio Lemos Meira	32nd EUROMICRO Conference on Software Engineering and Advanced Applications (EUROMICRO'06)	https://doi.org/10.1109/EUROMICRO.2006.13	"1.C.W. Krueger, ""Software Reuse"", ACM Computing Surveys, Vol. 24, No. 02, June, 1992, pp. 131-183. CrossRef  Google Scholar; 2.K.C. Wallnau, ""Volume III: A Technology for Predictable Assembly from Certifiable Components"", Software Engineering Institute (SEI), Technical Report, Vol. III, April, 2003. Google Scholar; 3.G.T. Heineman, W.T. Councill, Component-Based Software Engineering: Putting the Pieces Together, Addison-Wesley, USA, 2001. Google Scholar; 4.M. Goulao, F.B. Abreu, ""Towards a Component Quality Model"", Work in Progress Session of the 28 IEEE Euromicro Conference, Dortmund, Germany, 2002. Google Scholar; 5.J.M. Jezequel, B. Meyer, ""Design by Contract: The Lessons of Ariane"", IEEE Computer, Vol. 30, No. 02, 1997, pp. 129-130. View Article  Google Scholar; 6.A. Alvaro, E.S. Almeida, S.L. Meira, ""A Software Component Certification: A Survey"", In the 31"" IEEE EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA), CBSE Track, Portugal, 2005, pp. 117-125.; 7.M. Bertoa, A. Vallecillo, ""Quality Attributes for COTS Components"", Proc. of the 6 International ECOOP Workshop on Quantitative Approaches in Object-Oriented Software Engineering (QAOOSE), Spain, 2002. Google Scholar; 8.M. Goulao, F. Brito e Abreu, ""The Quest for Software Components Quality"", Proc. of the 26th IEEE Annual International Computer Software and Applications Conference (COMPSAC), England, August, 2002, pp. 313-318.; 9.ISO/IEC 9126: Information Technology - Product Quality - Part1: Quality Model, International Standard ISO/IEC 9126, International Standard Organization, June, 2001. Google Scholar; 10.R.P.S. Simao, A. Belchior, ""Quality Characteristics for Software Components: Hierarchy and Quality Guides"", Component-Based Software Quality: Methods and Techniques, Lecture Notes in Computer Science (LNCS) Springer-Verlag, Vol. 2693, 2003, pp. pp. 188-211. CrossRef  Google Scholar; 11.M. Torchiano, L. Jaccheri, C.-F. Sorensen, A.I. Wang, ""COTS Products Characterization"", Proc. of the 14 International Conference on Software Engineering and Knowledge Engineering (SEKE), 2002, pp. pp. 335-338. CrossRef  Google Scholar; 12.A. Alvaro, E.S. Almeida, S.L. Meira, ""Quality Attributes for a Component Quality Model"", In the 10 International Workshop on Component Oriented Programming (WCOP) in conjunction with the 19th ACM European Conference on Object Oriented Programming (ECCOP), Glasgow, Scotland, 2005.; 13.M.F. Bertoa, J.M. Troya, A. Vallecillo, ""A Survey on the Quality Information Provided by Software Component Vendors"", Proc. of the 7 ECOOP Workshop on Quantitative Approaches in Object-Oriented Software Engineering (QAOOSE), Germany, 2003. Google Scholar; 14.C. Wohlin, P. Runeson, M. Host, C. Ohlsson, B. Regnell, A. Wesslen, Experimenta-tion in Software Engineering: An Introduction, Kluver Academic Publishers, 2000. CrossRef  Google Scholar; 15.M.O. Barros, C.M.L. Werner, G.H. Travassos, ""An Experimental Study about Modeling Use and Simulation in support to the Software Project Management"" (in Portuguese), Proc. Of the 16 Brazilian Symposium in Software Engineering, Rio de Janeiro, Brazil, 2002. Google Scholar; 16.V.R. Basili, R. Selby, D. Hutchens, ""Experimentation in Software Engineering"", IEEE Transactions on Software Engineering, Vol. 12, No. 07, 1986, pp. 733-743. View Article  Google Scholar; 17.ISO/IEC 25000, 2005, Software Engineering - Software product Quality Requirements and Evaluation (SQuaRE) - Guide to SQuaRE, International Standard Organization, July, 2005. Google Scholar"								2	IEEE		A software component quality model: A preliminary evaluation	https://ieeexplore.ieee.org/document/1690122	IEEE	nan; Pages; Year; Bibtex
327	TrustSE	THE TAKEOFF OF OPEN SOURCE SOFTWARE: A SIGNALING PERSPECTIVE BASED ON COMMUNITY ACTIVITIES	A few open source software (OSS) products exhibit an abrupt and significant increase in downloads. However, the majority of OSS products fail to gain much interest. Identifying early success is important for catalyzing growth in OSS markets. However, previous OSS research has not examined early product success dynamics and assumes adoption to be a continuous process. We propose OSS takeoff in adoptions as a measure of eventual product success. Takeoff is a nonlinear inflection point separating the early development from the growth phase in the product lifecycle. Using arguments from the signaling literature, we propose that community activities send signals about product quality and reduce information asymmetry faced by potential adopters of OSS products. Estimating a Cox proportional hazard model using a large sample of OSS products from SourceForge, we find that takeoff times are significantly associated with signals of quality deficiency and improvement. Further, we find that target audience and product innovativeness moderate this relationship.	Open source software; takeoff; signaling; product quality; Open source software;  takeoff;  signaling;  product quality	Setia, Pankaj; Bayus, Barry L.; Rajagopalan, Balaji	MIS QUARTERLY	https://doi.org/10.25300/MISQ/2020/12576		1439-1458	"""@article{WOS:000576761700013,
    Author = ""Setia, Pankaj and Bayus, Barry L. and Rajagopalan, Balaji"",
    Title = ""THE TAKEOFF OF OPEN SOURCE SOFTWARE: A SIGNALING PERSPECTIVE BASED ON COMMUNITY ACTIVITIES"",
    Journal = ""MIS QUARTERLY"",
    Year = ""2020"",
    Volume = ""44"",
    Number = ""3"",
    Pages = ""1439-1458"",
    Month = ""SEP"",
    Abstract = ""A few open source software (OSS) products exhibit an abrupt and significant increase in downloads. However, the majority of OSS products fail to gain much interest. Identifying early success is important for catalyzing growth in OSS markets. However, previous OSS research has not examined early product success dynamics and assumes adoption to be a continuous process. We propose OSS takeoff in adoptions as a measure of eventual product success. Takeoff is a nonlinear inflection point separating the early development from the growth phase in the product lifecycle. Using arguments from the signaling literature, we propose that community activities send signals about product quality and reduce information asymmetry faced by potential adopters of OSS products. Estimating a Cox proportional hazard model using a large sample of OSS products from SourceForge, we find that takeoff times are significantly associated with signals of quality deficiency and improvement. Further, we find that target audience and product innovativeness moderate this relationship."",
    Publisher = ""SOC INFORM MANAGE-MIS RES CENT"",
    Address = ""UNIV MINNESOTA-SCH MANAGEMENT 271 19TH AVE SOUTH, MINNEAPOLIS, MN 55455 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Setia, P (Corresponding Author), Indian Inst Management Ahmedabad, Ahmadabad 380015, Gujarat, India. Setia, P (Corresponding Author), Univ Arkansas, Fayetteville, AR 72701 USA. Setia, Pankaj, Indian Inst Management Ahmedabad, Ahmadabad 380015, Gujarat, India. Setia, Pankaj, Univ Arkansas, Fayetteville, AR 72701 USA. Bayus, Barry L., Univ N Carolina, Kenan Flagler Business Sch, Chapel Hill, NC 27599 USA. Rajagopalan, Balaji, Northern Illinois Univ, Coll Business, De Kalb, IL 60115 USA."",
    DOI = ""10.25300/MISQ/2020/12576"",
    ISSN = ""0276-7783"",
    Keywords = ""Open source software; takeoff; signaling; product quality"",
    Keywords-Plus = ""KNOWLEDGE CONTRIBUTION; USER ACCEPTANCE; INNOVATION; ASSIMILATION; TECHNOLOGY; ORGANIZATIONS; DIFFUSION; DESIGN; MODEL; ANTECEDENTS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""pankajsetia@iima.ac.in Barry\\_Bayus@unc.edu brajagopalan@niu.edu"",
    Affiliations = ""Indian Institute of Management (IIM System); Indian Institute of Management Ahmedabad; University of Arkansas System; University of Arkansas Fayetteville; University of North Carolina; University of North Carolina Chapel Hill; Northern Illinois University"",
    ResearcherID-Numbers = ""Setia, Pankaj/AAN-5765-2021"",
    Number-of-Cited-References = ""82"",
    Times-Cited = ""12"",
    Usage-Count-Last-180-days = ""9"",
    Usage-Count-Since-2013 = ""65"",
    Journal-ISO = ""MIS Q."",
    Doc-Delivery-Number = ""NZ0DY"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000576761700013"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		THE TAKEOFF OF OPEN SOURCE SOFTWARE: A SIGNALING PERSPECTIVE BASED ON COMMUNITY ACTIVITIES.	https://www.webofscience.com/wos/woscc/full-record/WOS:000576761700013	SOC INFORM MANAGE-MIS RES CENT	nan; References
328	TrustSE	How peripheral developers contribute to open-source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
329	TrustSE	Research note—Lock-in strategy in software competition: Open-source software vs. proprietary software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
330	TrustSE	Software reliability and system reliability														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
331	TrustSE	A systematic examination of knowledge loss in open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
332	TrustSE	3.5 Open Source Software Research and Blockchain														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
333	TrustSE	“Constructing the users” in open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
334	TrustSE	Hackers vs. testers: A comparison of software vulnerability discovery processes														2						
335	TrustSE	Agents of responsibility in software vulnerability processes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
336	TrustSE	Code forking in open-source software: a requirements perspective														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
337	TrustSE	A theory-grounded framework of Open Source Software adoption in SMEs	The increasing popularity and use of Open Source Software (OSS) has led to significant interest from research communities and enterprise practitioners, notably in the small business sector where this type of software offers particular benefits given the financial and human capital constraints faced. However, there has been little focus on developing valid frameworks that enable critical evaluation and common understanding of factors influencing OSS adoption. This paper seeks to address this shortcoming by presenting a theory-grounded framework for exploring these factors and explaining their influence on OSS adoption, with the context of study being small- to medium-sized Information Technology (IT) businesses in the U.K. The framework has implications for this type of business and, we will suggest, more widely as a frame of reference for understanding, and as tool for evaluating benefits and challenges in, OSS adoption. It also offers researchers a structured way of investigating adoption issues and a base from which to develop models of OSS adoption. The study reported in this paper used the Decomposed Theory of Planned Behaviour (DTPB) as a basis for the research propositions, with the aim of: (i) developing a framework of empirical factors that influence OSS adoption; and (ii) appraising it through case study evaluation with 10 U.K. Small- to medium-sized enterprises in the IT sector. The demonstration of the capabilities of the framework suggests that it is able to provide a reliable explanation of the complex and subjective factors that influence attitudes, subjective norms and control over the use of OSS. The paper further argues that the DTPB proved useful in this research area and that it can provide a variety of situation-specific insights related to factors that influence the adoption of OSS. European Journal of Information Systems (2011) 20, 237-250. doi:10.1057/ejis.2010.60; published online I February 2011	Open Source Software (OSS); small- to medium-sized enterprises (SMEs); adoption; innovation; Decomposed Theory of Planned Behaviour; case study evaluation; Open Source Software (OSS);  small- to medium-sized enterprises (SMEs);  adoption;  innovation;  Decomposed Theory of Planned Behaviour;  case study evaluation	Macredie, Robert D.; Mijinyawa, Kabiru	EUROPEAN JOURNAL OF INFORMATION SYSTEMS	https://doi.org/10.1057/ejis.2010.60		237-250	"""@article{WOS:000288361000008,
    Author = ""Macredie, Robert D. and Mijinyawa, Kabiru"",
    Title = ""A theory-grounded framework of Open Source Software adoption in SMEs"",
    Journal = ""EUROPEAN JOURNAL OF INFORMATION SYSTEMS"",
    Year = ""2011"",
    Volume = ""20"",
    Number = ""2"",
    Pages = ""237-250"",
    Month = ""MAR"",
    Abstract = ""The increasing popularity and use of Open Source Software (OSS) has led to significant interest from research communities and enterprise practitioners, notably in the small business sector where this type of software offers particular benefits given the financial and human capital constraints faced. However, there has been little focus on developing valid frameworks that enable critical evaluation and common understanding of factors influencing OSS adoption. This paper seeks to address this shortcoming by presenting a theory-grounded framework for exploring these factors and explaining their influence on OSS adoption, with the context of study being small- to medium-sized Information Technology (IT) businesses in the U.K. The framework has implications for this type of business and, we will suggest, more widely as a frame of reference for understanding, and as tool for evaluating benefits and challenges in, OSS adoption. It also offers researchers a structured way of investigating adoption issues and a base from which to develop models of OSS adoption. The study reported in this paper used the Decomposed Theory of Planned Behaviour (DTPB) as a basis for the research propositions, with the aim of: (i) developing a framework of empirical factors that influence OSS adoption; and (ii) appraising it through case study evaluation with 10 U.K. Small- to medium-sized enterprises in the IT sector. The demonstration of the capabilities of the framework suggests that it is able to provide a reliable explanation of the complex and subjective factors that influence attitudes, subjective norms and control over the use of OSS. The paper further argues that the DTPB proved useful in this research area and that it can provide a variety of situation-specific insights related to factors that influence the adoption of OSS. European Journal of Information Systems (2011) 20, 237-250. doi:10.1057/ejis.2010.60; published online I February 2011"",
    Publisher = ""TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Macredie, RD (Corresponding Author), Brunel Univ, Sch Informat Syst Comp \\& Math, Uxbridge UB8 3PH, Middx, England. Macredie, Robert D.; Mijinyawa, Kabiru, Brunel Univ, Sch Informat Syst Comp \\& Math, Uxbridge UB8 3PH, Middx, England."",
    DOI = ""10.1057/ejis.2010.60"",
    ISSN = ""0960-085X"",
    EISSN = ""1476-9344"",
    Keywords = ""Open Source Software (OSS); small- to medium-sized enterprises (SMEs); adoption; innovation; Decomposed Theory of Planned Behaviour; case study evaluation"",
    Keywords-Plus = ""USER ACCEPTANCE; INFORMATION-TECHNOLOGY; INTERNET ADOPTION; PLANNED BEHAVIOR; MODEL; SYSTEMS; USAGE"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Author-Email = ""Robert.Macredie@brunel.ac.uk"",
    Affiliations = ""Brunel University"",
    ResearcherID-Numbers = ""Macredie, Robert/F-4928-2013"",
    ORCID-Numbers = ""Macredie, Robert/0000-0001-5066-425X"",
    Number-of-Cited-References = ""60"",
    Times-Cited = ""57"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""60"",
    Journal-ISO = ""Eur. J. Inform. Syst."",
    Doc-Delivery-Number = ""734TK"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000288361000008"",
    OA = ""Green Accepted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		A theory-grounded framework of Open Source Software adoption in SMEs	https://www.webofscience.com/wos/woscc/full-record/WOS:000288361000008	TAYLOR \& FRANCIS LTD	nan; References
338	TrustSE	From closed to open: Job role changes, individual predispositions, and the adoption of commercial open source software development	When trying to attain the benefits of open source software (OSS), proprietary closed source software (PCSS) firms are struggling to adopt this radically different practice of software development. We approach these adoption challenges as a problem of gaining support for organizational innovation. Through a mixed-method research design consisting of qualitative interviews and a survey of employees of a large telecommunications firm, we find that the organizational innovation to commercially engage in OSS has different impacts on technical and administrative dimensions of different job roles. Accordingly, individuals enacting different job roles are-on average-more or less well aligned with the OSS practice and OSS processes per se. We find that individual-level attributes can counterbalance the job role changes that weaken support for adopting OSS, while perceived organizational commitment has no effect. Suggestions for PCSS firms are presented and implications for innovation literature are discussed.	Open source software; Organizational innovation; Organizational change; Open innovation; R\&D; Open source software;  Organizational innovation;  Organizational change;  Open innovation;  R\&D	Alexy, Oliver; Henkel, Joachim; Wallin, Martin W.	RESEARCH POLICY	https://doi.org/10.1016/j.respol.2013.04.007		1325-1340	"""@article{WOS:000324453300002,
    Author = ""Alexy, Oliver and Henkel, Joachim and Wallin, Martin W."",
    Title = ""From closed to open: Job role changes, individual predispositions, and the adoption of commercial open source software development"",
    Journal = ""RESEARCH POLICY"",
    Year = ""2013"",
    Volume = ""42"",
    Number = ""8"",
    Pages = ""1325-1340"",
    Month = ""SEP"",
    Abstract = ""When trying to attain the benefits of open source software (OSS), proprietary closed source software (PCSS) firms are struggling to adopt this radically different practice of software development. We approach these adoption challenges as a problem of gaining support for organizational innovation. Through a mixed-method research design consisting of qualitative interviews and a survey of employees of a large telecommunications firm, we find that the organizational innovation to commercially engage in OSS has different impacts on technical and administrative dimensions of different job roles. Accordingly, individuals enacting different job roles are-on average-more or less well aligned with the OSS practice and OSS processes per se. We find that individual-level attributes can counterbalance the job role changes that weaken support for adopting OSS, while perceived organizational commitment has no effect. Suggestions for PCSS firms are presented and implications for innovation literature are discussed. (C) 2013 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Alexy, O (Corresponding Author), Tech Univ Munich, TUM Sch Management, Arcisstr 21, D-80333 Munich, Germany. Alexy, Oliver; Henkel, Joachim, Tech Univ Munich, TUM Sch Management, D-80333 Munich, Germany. Henkel, Joachim, CEPR, London, England. Wallin, Martin W., Swiss Fed Inst Technol, Dept Management Technol \\& Econ, CH-8092 Zurich, Switzerland."",
    DOI = ""10.1016/j.respol.2013.04.007"",
    ISSN = ""0048-7333"",
    EISSN = ""1873-7625"",
    Keywords = ""Open source software; Organizational innovation; Organizational change; Open innovation; R\\&D"",
    Keywords-Plus = ""OPEN INNOVATION; ORGANIZATIONAL INNOVATION; MODEL; PERFORMANCE; TECHNOLOGY; FIRM; PARTICIPATION; OPPORTUNITIES; ARCHITECTURE; COMMUNITIES"",
    Research-Areas = ""Business \\& Economics"",
    Web-of-Science-Categories = ""Management"",
    Author-Email = ""o.alexy@tum.de henkel@wi.tum.de mwallin@ethz.ch"",
    Affiliations = ""Technical University of Munich; Centre for Economic Policy Research - UK; Swiss Federal Institutes of Technology Domain; ETH Zurich"",
    ResearcherID-Numbers = ""Wallin, Martin/AAD-6175-2020 Alexy, Oliver/E-9819-2010"",
    ORCID-Numbers = ""Henkel, Joachim/0000-0002-6065-0983 Wallin, Martin/0000-0002-5263-1483"",
    Funding-Acknowledgement = ""ESRC {[}ES/G042993/1] Funding Source: UKRI"",
    Number-of-Cited-References = ""80"",
    Times-Cited = ""50"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""108"",
    Journal-ISO = ""Res. Policy"",
    Doc-Delivery-Number = ""218SR"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000324453300002"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		From closed to open: Job role changes, individual predispositions, and the adoption of commercial open source software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000324453300002	ELSEVIER	nan; References
339	TrustSE	Predicting software reliability from testing taking into account other knowledge about a program														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
340	TrustSE	Why do commercial companies contribute to open source software?														2						
341	TrustSE	Learning and best practices for learning in open-source software communities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
342	TrustSE	OSS opportunities in open source software - CRM and OSS standards	In many industry verticals, open source software is proving to be a credible alternative to proprietary software. When compared to proprietary software, open source software can offer a number of benefits such as stronger customer involvement, lower costs and better quality. Despite these benefits, the take-up of open source software by incumbent telecommunications providers has been virtually zero, choosing instead to focus on major proprietary commercial-off-the-shelf (COTS) packages due to prior strategic investments and negative preconceptions about open source software. Although an immediate change in take-up is not expected, the pressure to reduce operational support systems (OSS) costs is steering telecommunications providers to research potential opportunities for using open source software within their OSS. This paper addresses some of those opportunities. The general opportunities are presented using specific examples from current research. Potential short-term opportunities, using readily available open source customer relationship management (CRM) applications, and potential mid-to long-term opportunities, using open source OSS integration software, are analysed and evaluated. The paper concludes with a recommendation on what telecommunications providers should do to further investigate the opportunities presented by open source OSS.		Bruce, G; Robson, P; Spaven, R	BT TECHNOLOGY JOURNAL	https://doi.org/10.1007/s10550-006-0028-9		127-140	"""@article{WOS:000237661100015,
    Author = ""Bruce, G and Robson, P and Spaven, R"",
    Title = ""OSS opportunities in open source software - CRM and OSS standards"",
    Journal = ""BT TECHNOLOGY JOURNAL"",
    Year = ""2006"",
    Volume = ""24"",
    Number = ""1"",
    Pages = ""127-140"",
    Month = ""JAN"",
    Abstract = ""In many industry verticals, open source software is proving to be a credible alternative to proprietary software. When compared to proprietary software, open source software can offer a number of benefits such as stronger customer involvement, lower costs and better quality. Despite these benefits, the take-up of open source software by incumbent telecommunications providers has been virtually zero, choosing instead to focus on major proprietary commercial-off-the-shelf (COTS) packages due to prior strategic investments and negative preconceptions about open source software. Although an immediate change in take-up is not expected, the pressure to reduce operational support systems (OSS) costs is steering telecommunications providers to research potential opportunities for using open source software within their OSS. This paper addresses some of those opportunities. The general opportunities are presented using specific examples from current research. Potential short-term opportunities, using readily available open source customer relationship management (CRM) applications, and potential mid-to long-term opportunities, using open source OSS integration software, are analysed and evaluated. The paper concludes with a recommendation on what telecommunications providers should do to further investigate the opportunities presented by open source OSS."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Bruce, G (Corresponding Author), BT, OSS, BT GCTO Res Dev \\& Exploitat Open Source Software, London, England. BT, OSS, BT GCTO Res Dev \\& Exploitat Open Source Software, London, England. BT, OpenOSS Project, London, England. Univ Southampton, Southampton SO9 5NH, Hants, England."",
    DOI = ""10.1007/s10550-006-0028-9"",
    ISSN = ""1358-3948"",
    Research-Areas = ""Engineering; Telecommunications"",
    Web-of-Science-Categories = ""Engineering, Electrical \\& Electronic; Telecommunications"",
    Affiliations = ""University of Southampton"",
    ResearcherID-Numbers = ""Robson, Paula/Q-3351-2017"",
    Number-of-Cited-References = ""13"",
    Times-Cited = ""11"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""5"",
    Journal-ISO = ""BT Technol. J."",
    Doc-Delivery-Number = ""044GT"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000237661100015"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		OSS opportunities in open source software—CRM and OSS standards	https://doi.org/10.1007/s10550-006-0028-9	SPRINGER	nan; Keywords; References; Link
343	TrustSE	Participant satisfaction with open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
344	TrustSE	Maintenance effort estimation for open source software: A systematic literature review														2						
345	TrustSE	Understanding open source software peer review: Review processes, parameters and statistical models, and underlying behaviours and mechanisms														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
346	TrustSE	New Perspectives on Public Goods Production: Policy Implications of Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
347	TrustSE	A business model for commercial open source software: A systematic literature review														2						
348	TrustSE	Design and evaluation of a process for identifying architecture patterns in open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
349	TrustSE	Transactive memory system, communication quality, and knowledge sharing in distributed teams: An empirical examination in open source software project teams														2						
350	TrustSE	STRAM: Measuring the Trustworthiness of Computer-Based Systems	Various system metrics have been proposed for measuring the quality of computer-based systems, such as dependability and security metrics for estimating their performance and security characteristics. As computer-based systems grow in complexity with many subsystems or components, measuring their quality in multiple dimensions is a challenging task. In this work, we tackle the problem of measuring the quality of computer-based systems based on the four key attributes of trustworthiness we developed: security, trust, resilience, and agility. In addition to conducting a systematic survey on metrics, measurements, attributes of metrics, and associated ontologies, we propose a system-level trustworthiness metric framework that accommodates four submetrics, called STRAM (<u>S</u>ecurity, <u>T</u>rust, <u>R</u>esilience, and <u>A</u>gility <u>M</u>etrics). The proposed STRAM framework offers a hierarchical ontology structure where each submetric is defined as a sub-ontology. Moreover, this work proposes developing and incorporating metrics describing key assessment tools, including vulnerability assessment, risk assessment, and red teaming, to provide additional evidence in the measurement and quality of trustworthy systems. We further discuss how assessment tools are related to measuring the quality of computer-based systems and the limitations of the state-of-the-art metrics and measurements. Finally, we suggest future research directions for system-level metrics research toward measuring fundamental attributes of the quality of computer-based systems and improving the current metric and measurement methodologies.	trustworthiness;  trust;  security;  resilience;  metric;  agility;  Measurement; trustworthiness, trust, security, resilience, metric, agility, Measurement	Cho, Jin-Hee; Xu, Shouhuai; Hurley, Patrick M.; Mackay, Matthew; Benjamin, Trevor; Beaumont, Mark	ACM Comput. Surv.	https://doi.org/10.1145/3277666			"""@article{10.1145/3277666,
    author = ""Cho, Jin-Hee and Xu, Shouhuai and Hurley, Patrick M. and Mackay, Matthew and Benjamin, Trevor and Beaumont, Mark"",
    title = ""STRAM: Measuring the Trustworthiness of Computer-Based Systems"",
    year = ""2019"",
    issue_date = ""November 2019"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""51"",
    number = ""6"",
    issn = ""0360-0300"",
    url = ""https://doi.org/10.1145/3277666"",
    doi = ""10.1145/3277666"",
    abstract = ""Various system metrics have been proposed for measuring the quality of computer-based systems, such as dependability and security metrics for estimating their performance and security characteristics. As computer-based systems grow in complexity with many subsystems or components, measuring their quality in multiple dimensions is a challenging task. In this work, we tackle the problem of measuring the quality of computer-based systems based on the four key attributes of trustworthiness we developed: security, trust, resilience, and agility. In addition to conducting a systematic survey on metrics, measurements, attributes of metrics, and associated ontologies, we propose a system-level trustworthiness metric framework that accommodates four submetrics, called STRAM (<u>S</u>ecurity, <u>T</u>rust, <u>R</u>esilience, and <u>A</u>gility <u>M</u>etrics). The proposed STRAM framework offers a hierarchical ontology structure where each submetric is defined as a sub-ontology. Moreover, this work proposes developing and incorporating metrics describing key assessment tools, including vulnerability assessment, risk assessment, and red teaming, to provide additional evidence in the measurement and quality of trustworthy systems. We further discuss how assessment tools are related to measuring the quality of computer-based systems and the limitations of the state-of-the-art metrics and measurements. Finally, we suggest future research directions for system-level metrics research toward measuring fundamental attributes of the quality of computer-based systems and improving the current metric and measurement methodologies."",
    journal = ""ACM Comput. Surv."",
    month = ""February"",
    articleno = ""128"",
    numpages = ""47"",
    keywords = ""trustworthiness, trust, security, resilience, metric, agility, Measurement""
}
"""						2	ACM		Stram: Measuring the trustworthiness of computer-based systems	https://doi.org/10.1145/3277666	Association for Computing Machinery	nan; References; Pages; Link
351	TrustSE	Raising the general public's awareness and adoption of open source software through social Q\&A interactions	Purpose - The purpose of this paper is to examine the general public's information needs concerning open source software (OSS) and OSS answerers' motivations for sharing their knowledge of OSS in social Q\&A. Design/methodology/approach - Two studies were carried out. In Study 1, a content analysis classifying OSS-related questions posted during December 2005-December 2012 in Yahoo! Answers was employed to investigate the general public's information needs regarding OSS. In Study 2, an online survey was conducted with OSS answerers in Yahoo! Answers in order to examine what motivates them to share and continue to share their knowledge of OSS in social Q\&A. In total, 1,463 invitations were sent out via Yahoo! Answers' internal e-mail function to those who provided answers to OSS-related questions during September 2009-September 2012. In total, 150 usable surveys were returned and used for data analysis. Findings - The findings from Study 1 indicate that the general public is most interested in finding out if there is OSS that meets their software need in a certain category (51.4 percent). Other popular question categories include the general description of OSS (15.6 percent), technical issues that they have with OSS (9.8 percent), and the advantages/disadvantages of using OSS (7.0 percent). Results on OSS answerers' motivations from Study 2 support that all seven motivations identified (i.e. altruism, enjoyment, ideology, learning, reputation, reciprocity, and self-efficacy) are important, with the smallest mean value being 4.42 out of seven (i.e. reciprocity). However, only altruism, ideology, self-efficacy, and enjoyment were found to significantly influence contribution continuance intention. Practical implications - With social Q\&A growing in popularity, OSS communities that look for ways to draw in more users from the general public are recommended to increase their presence in social Q\&A. The findings with regard to OSS answerers' motivations can also help OSS community leaders attract and guide more members who are interested in sharing their OSS knowledge in social Q\&A. Originality/value - By classifying OSS-related questions that are publicly available in Yahoo! Answers, this study offers a breakdown of the general public's information needs regarding OSS. In addition, results on OSS answerers' motivations suggest that in order to sustain their member contributions in social Q\&A, OSS community leaders should pay more attention to nurturing the motivations that are intrinsic (i.e. altruism, self-efficacy, enjoyment) and integrated (i.e. ideology).	Open source software; Motivations; Open content; Social Q\&A; Open source software;  Motivations;  Open content;  Social Q\&A	Choi, Namjoo; Yi, Kwan	ONLINE INFORMATION REVIEW	https://doi.org/10.1108/OIR-06-2014-0139		119-139	"""@article{WOS:000350588600008,
    Author = ""Choi, Namjoo and Yi, Kwan"",
    Title = ""Raising the general public's awareness and adoption of open source software through social Q\\&A interactions"",
    Journal = ""ONLINE INFORMATION REVIEW"",
    Year = ""2015"",
    Volume = ""39"",
    Number = ""1"",
    Pages = ""119-139"",
    Abstract = ""Purpose - The purpose of this paper is to examine the general public's information needs concerning open source software (OSS) and OSS answerers' motivations for sharing their knowledge of OSS in social Q\\&A. Design/methodology/approach - Two studies were carried out. In Study 1, a content analysis classifying OSS-related questions posted during December 2005-December 2012 in Yahoo! Answers was employed to investigate the general public's information needs regarding OSS. In Study 2, an online survey was conducted with OSS answerers in Yahoo! Answers in order to examine what motivates them to share and continue to share their knowledge of OSS in social Q\\&A. In total, 1,463 invitations were sent out via Yahoo! Answers' internal e-mail function to those who provided answers to OSS-related questions during September 2009-September 2012. In total, 150 usable surveys were returned and used for data analysis. Findings - The findings from Study 1 indicate that the general public is most interested in finding out if there is OSS that meets their software need in a certain category (51.4 percent). Other popular question categories include the general description of OSS (15.6 percent), technical issues that they have with OSS (9.8 percent), and the advantages/disadvantages of using OSS (7.0 percent). Results on OSS answerers' motivations from Study 2 support that all seven motivations identified (i.e. altruism, enjoyment, ideology, learning, reputation, reciprocity, and self-efficacy) are important, with the smallest mean value being 4.42 out of seven (i.e. reciprocity). However, only altruism, ideology, self-efficacy, and enjoyment were found to significantly influence contribution continuance intention. Practical implications - With social Q\\&A growing in popularity, OSS communities that look for ways to draw in more users from the general public are recommended to increase their presence in social Q\\&A. The findings with regard to OSS answerers' motivations can also help OSS community leaders attract and guide more members who are interested in sharing their OSS knowledge in social Q\\&A. Originality/value - By classifying OSS-related questions that are publicly available in Yahoo! Answers, this study offers a breakdown of the general public's information needs regarding OSS. In addition, results on OSS answerers' motivations suggest that in order to sustain their member contributions in social Q\\&A, OSS community leaders should pay more attention to nurturing the motivations that are intrinsic (i.e. altruism, self-efficacy, enjoyment) and integrated (i.e. ideology)."",
    Publisher = ""EMERALD GROUP PUBLISHING LTD"",
    Address = ""HOWARD HOUSE, WAGON LANE, BINGLEY BD16 1WA, W YORKSHIRE, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Choi, N (Corresponding Author), Univ Kentucky, Sch Lib \\& Informat Sci, Lexington, KY 40506 USA. Choi, Namjoo, Univ Kentucky, Sch Lib \\& Informat Sci, Lexington, KY 40506 USA. Yi, Kwan, Eastern Kentucky Univ, Dept Curriculum \\& Instruct, Richmond, KY 40475 USA."",
    DOI = ""10.1108/OIR-06-2014-0139"",
    ISSN = ""1468-4527"",
    EISSN = ""1468-4535"",
    Keywords = ""Open source software; Motivations; Open content; Social Q\\&A"",
    Keywords-Plus = ""CONCEPTUAL-FRAMEWORK; MOTIVATIONS; KNOWLEDGE; COMMUNITIES; INFORMATION; DEVELOPERS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science"",
    Author-Email = ""namjoo.choi@uky.edu"",
    Affiliations = ""University of Kentucky; Eastern Kentucky University"",
    ResearcherID-Numbers = ""Yi, Kwan/H-7902-2012"",
    Number-of-Cited-References = ""65"",
    Times-Cited = ""10"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""44"",
    Journal-ISO = ""Online Inf. Rev."",
    Doc-Delivery-Number = ""CC7ZX"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000350588600008"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Raising the general public's awareness and adoption of open source software through social Q&A interactions	https://www.webofscience.com/wos/woscc/full-record/WOS:000350588600008	EMERALD GROUP PUBLISHING LTD	nan; References
352	TrustSE	How to break an API: cost negotiation and community values in three software ecosystems	Change introduces conflict into software ecosystems: breaking changes may ripple through the ecosystem and trigger rework for users of a package, but often developers can invest additional effort or accept opportunity costs to alleviate or delay downstream costs. We performed a multiple case study of three software ecosystems with different tooling and philosophies toward change, Eclipse, R/CRAN, and Node.js/npm, to understand how developers make decisions about change and change-related costs and what practices, tooling, and policies are used. We found that all three ecosystems differ substantially in their practices and expectations toward change and that those differences can be explained largely by different community values in each ecosystem. Our results illustrate that there is a large design space in how to build an ecosystem, its policies and its supporting infrastructure; and there is value in making community values and accepted tradeoffs explicit and transparent in order to resolve conflicts and negotiate change-related costs.	semantic versioning;  Software ecosystems;  Qualitative research;  Dependency management;  Collaboration; semantic versioning, Software ecosystems, Qualitative research, Dependency management, Collaboration	"Bogart, Christopher; K\""{a}stner, Christian; Herbsleb, James; Thung, Ferdian"	FSE 2016: Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering	https://doi.org/10.1145/2950290.2950325		109-120	"""@inproceedings{10.1145/2950290.2950325,
    author = {Bogart, Christopher and K\""{a}stner, Christian and Herbsleb, James and Thung, Ferdian},
    title = ""How to break an API: cost negotiation and community values in three software ecosystems"",
    year = ""2016"",
    isbn = ""9781450342186"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2950290.2950325"",
    doi = ""10.1145/2950290.2950325"",
    abstract = ""Change introduces conflict into software ecosystems: breaking changes may ripple through the ecosystem and trigger rework for users of a package, but often developers can invest additional effort or accept opportunity costs to alleviate or delay downstream costs. We performed a multiple case study of three software ecosystems with different tooling and philosophies toward change, Eclipse, R/CRAN, and Node.js/npm, to understand how developers make decisions about change and change-related costs and what practices, tooling, and policies are used. We found that all three ecosystems differ substantially in their practices and expectations toward change and that those differences can be explained largely by different community values in each ecosystem. Our results illustrate that there is a large design space in how to build an ecosystem, its policies and its supporting infrastructure; and there is value in making community values and accepted tradeoffs explicit and transparent in order to resolve conflicts and negotiate change-related costs."",
    booktitle = ""Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering"",
    pages = ""109-120"",
    numpages = ""12"",
    keywords = ""semantic versioning, Software ecosystems, Qualitative research, Dependency management, Collaboration"",
    location = ""Seattle, WA, USA"",
    series = ""FSE 2016""
}
"""						2	ACM		How to break an API: cost negotiation and community values in three software ecosystems	https://doi.org/10.1145/2950290.2950325	Association for Computing Machinery	nan; References; Link
353	TrustSE	Overview of Root Causes of Software Vulnerabilities - Technical and User-Side Perspectives	Software security is equally a shared responsibility of technical experts and clients who deploys the system. When a software receives security assurance upon its product release, security validation of the software is assured. Security compromise may take place by luring authenticate users to exploit the vulnerabilities persists in the system.Vulnerabilities emerging from user side also plays a significant role in determining security assurance of the system. Depending upon the level of software attack surface, potential vulnerability can be injected into the system. Therefore the root causes of software vulnerabilities cannot merely contributed to the technical aspects of mitigation techniques. These increased level of requirements took security experts to a spectrum where users' improper or insecure practices should also be counted while securing a software system. In this paper, I explain about various factors that includes technical and social perspectives that should be taken into consideration with a proper balance to secure a software system. Based on thorough literature review, an in-depth explanation on various information system vulnerabilities and recommended techniques to reduce the attack surfaces of those vulnerabilities are also provided.	Information systems; Encoding; Computer hacking; Computer bugs; Software systems; Security Vulnerabilities; Information System; System Software; Cybersecurity; Shared Responsibility; Vulnerability Of Systems; Security Experts; Attack Surface; Development Process; Software Development; Agentic; Processing Software; Tsunami; Computer Code; Security Policy; Information Security; Security Protocols; Beginning Of Cycle; Security Requirements; Causes Of Vulnerability; Impersonation Attack; Security Awareness; Poor Design; Phishing; Password Strength; Security Attacks; Network Vulnerability; Natural Disasters; Security; Vulnerability; Hacking	Priya Anand	2016 International Conference on Software Security and Assurance (ICSSA)	https://doi.org/10.1109/ICSSA.2016.20	"1.M. Mannan and P. C. van Oorschot, ""Security and usability: the gap in real-world online banking"", Proceedings of the 2007 Workshop on New Security Paradigms, 2008. CrossRef  Google Scholar; 2.W. Arbaugh, W. Fithen and J. McHugh, ""Windows of vulnerability: A case study analysis"", Computer, vol. 33, no. 12, pp. 52-59, 2000. View Article  Google Scholar; 3.M. Whitman and H. Mattord, Principles of information security, 2011. Google Scholar; 4.D. Ashenden, ""Information Security management: A human challenge?"", Information Security Technical Report, vol. 13, no. 4, pp. 195201, Nov. 2008. CrossRef  Google Scholar; 5.B. Arief and D. Besnard, ""Technical and human issues in computer-based systems security"", Technical Report Series-University of Newcastle upon Tyne Computing Science, vol. 790, pp. 117, March 2003. Google Scholar; 6.P. O. Okenyi and T. J. Owens, ""On the Anatomy of Human Hacking"", Information Systems Security, vol. 16, no. 6, pp. 302314, Dec. 2007. CrossRef  Google Scholar; 7.K.-S. Hong, Y.-P. Chi, L. R. Chao and J.-H. Tang, ""An integrated system theory of information security management"", Information Management &Computer Security, vol. 11, no. 5, pp. 243248, 2003. CrossRef  Google Scholar; 8.G. McGraw, Software security: building security in, Addison-Wesley Professional, 2006. CrossRef  Google Scholar; 9.G. McGraw, ""Software security"", Security & Privacy IEEE, vol. 2, no. 2, pp. 80-83, 2004. View Article  Google Scholar; 10.B. Potter and G. McGraw, ""Software security testing"", Security & Privacy IEEE, pp. 8185, 2004. View Article  Google Scholar; 11.J.-E. J. Tevis and J. a. Hamilton, ""Methods for the prevention detection and removal of software security vulnerabilities"", Proceedings of the 42nd annual Southeast regional conference - ACM - SE 42, pp. 197, 2004. CrossRef  Google Scholar; 12.B. Martin, M. Brown, A. Paller, D. Kirby and S. Christey, ""CWE/SANS top 25 most dangerous software errors"", Common Weakness Enumeration, pp. 7515, 2011. Google Scholar; 13.T. Scholte, D. Balzarotti and E. Kirda, ""Have things changed now? An empirical study on input validation vulnerabilities in web applications"", Computer Secuity, vol. 31, no. 3, pp. 344356, May 2012. CrossRef  Google Scholar; 14.L. K. Shar and H. B. K. Tan, ""Automated removal of cross site scripting vulnerabilities in web applications"", Information and Software Technology, vol. 54, no. 5, pp. 467478, May 2012. Google Scholar; 15.Z. Li, L. Tan, X. Wang, S. Lu, Y. Zhou and C. Zhai, ""Have things changed now?: an empirical study of bug characteristics in modern open source software"", Proceedings of the 1st workshop on Architecturaland system support for improving software dependability, 2006. CrossRef  Google Scholar; 16.R. Ritchey and P. Ammann, ""Using model checking to analyze network vulnerabilities"", Security and Privacy 2000. SP 2000. Proceedings. 2000 IEEE Symposium on, 2000. CrossRef  Google Scholar; 17.J. Long, No tech hacking: A guide to social engineering dumpster diving and shoulder surfing, Syngress, 2011. Google Scholar; 18.M. Wu, R. C. Miller and S. L. Garfinkel, ""Do security toolbars actually prevent phishing attacks?"", Proceedings of the SIGCHI conference on Human Factors in computing systems, 2006. CrossRef  Google Scholar; 19.T. Jordan and P. Taylor, ""A sociology of hackers"", The Sociological Review, vol. 46, no. 4, pp. 757780, Nov. 1998. CrossRef  Google Scholar; 20.Dan DaCosta et al., ""Characterizing the 'security vulnerability likelihood' of software functions"", Software Maintenance 2003. ICSM 2003. Proceedings. International Conference on, 2003. CrossRef  Google Scholar; 21.Paul Clements et al., Documenting software architectures: views and beyond, Pearson Education, 2002. Google Scholar; 22.Premkumar T. Devanbu and Stuart Stubblebine, ""Software engineering for security: a roadmap"", Proceedings of the Conference on the Future of Software Engineering, 2000. CrossRef  Google Scholar; 23.Eduardo B. Fernandez, ""A Methodology for Secure Software Design"", Software Engineering Researchand Practice, 2004. Google Scholar; 24.Lioupras Ioannis and Eleni Manthou, ""Dont let my Heart bleed!: An event study methodology in Heartbleed vulnerability case"", 2014. Google Scholar"								2	IEEE		Overview of root causes of software vulnerabilities-technical and user-side perspectives	https://ieeexplore.ieee.org/document/7861655	IEEE	nan; Pages; Year; Bibtex
354	TrustSE	Open source and accessibility: advantages and limitations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
355	TrustSE	DEVELOPER RESPONSIVENESS AND PERCEIVED USEFULNESS.														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
356	TrustSE	Is the future of software development in open source? Proprietary vs. open source software: A cross country analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
357	TrustSE	Github projects. quality analysis of open-source software														2						
358	TrustSE	A longitudinal study of the impact of open source software project characteristics on positive outcomes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
359	TrustSE	A model-driven approach for engineering trust and reputation into software services	The ever-increasing complex, dynamic and distributed nature of current systems demands model-driven techniques that allow working with abstractions and self-adaptive software in order to cope with unforeseeable changes. Models@run.time is a promising model-driven approach that supports the runtime adaptation of distributed, heterogeneous systems. Yet, frameworks that accommodate this paradigm have limited support to address security concerns, hindering their usage in real scenarios. We address this challenge by enhancing models@run.time with the notions of trust and reputation. Trust improves decision-making processes under risk and uncertainty and constitutes a distributed and flexible mechanism that does not entail heavyweight administration. This paper presents a trust and reputation framework that is integrated into a distributed component-model that implements,the models@run.time paradigm, thus allowing the system to include trust in their reasoning process. The framework is illustrated in a chat application by implementing several state-of-the-art trust and reputation models. We show that the framework entails negligible computational overhead and that it requires a minimal amount of work for developers.	Trust; Reputation; Model-driven Engineering; Self-adaptation; Trust;  Reputation;  Model-driven Engineering;  Self-adaptation	Moyano, Francisco; Fernandez-Gago, Carmen; Lopez, Javier	JOURNAL OF NETWORK AND COMPUTER APPLICATIONS	https://doi.org/10.1016/j.jnca.2016.04.018		134-151	"""@article{WOS:000377839700010,
    Author = ""Moyano, Francisco and Fernandez-Gago, Carmen and Lopez, Javier"",
    Title = ""A model-driven approach for engineering trust and reputation into software services"",
    Journal = ""JOURNAL OF NETWORK AND COMPUTER APPLICATIONS"",
    Year = ""2016"",
    Volume = ""69"",
    Pages = ""134-151"",
    Month = ""JUL"",
    Abstract = ""The ever-increasing complex, dynamic and distributed nature of current systems demands model-driven techniques that allow working with abstractions and self-adaptive software in order to cope with unforeseeable changes. Models@run.time is a promising model-driven approach that supports the runtime adaptation of distributed, heterogeneous systems. Yet, frameworks that accommodate this paradigm have limited support to address security concerns, hindering their usage in real scenarios. We address this challenge by enhancing models@run.time with the notions of trust and reputation. Trust improves decision-making processes under risk and uncertainty and constitutes a distributed and flexible mechanism that does not entail heavyweight administration. This paper presents a trust and reputation framework that is integrated into a distributed component-model that implements,the models@run.time paradigm, thus allowing the system to include trust in their reasoning process. The framework is illustrated in a chat application by implementing several state-of-the-art trust and reputation models. We show that the framework entails negligible computational overhead and that it requires a minimal amount of work for developers. (C) 2016 Elsevier Ltd. All rights reserved."",
    Publisher = ""ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD"",
    Address = ""24-28 OVAL RD, LONDON NW1 7DX, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Moyano, F (Corresponding Author), Univ Malaga, Network Informat \\& Comp Secur Lab, E-29071 Malaga, Spain. Moyano, Francisco; Fernandez-Gago, Carmen; Lopez, Javier, Univ Malaga, Network Informat \\& Comp Secur Lab, E-29071 Malaga, Spain."",
    DOI = ""10.1016/j.jnca.2016.04.018"",
    ISSN = ""1084-8045"",
    Keywords = ""Trust; Reputation; Model-driven Engineering; Self-adaptation"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Hardware \\& Architecture; Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering"",
    Author-Email = ""moyano@lcc.uma.es mcgago@lcc.uma.es jlm@lcc.uma.es"",
    Affiliations = ""Universidad de Malaga"",
    ResearcherID-Numbers = ""Gago, Carmen/M-4058-2019"",
    Funding-Acknowledgement = ""European Training Network NeCS {[}H2020-MSCA-ITN-2015-675320]; Spanish Ministry of Economy and Competitiveness through the project PERSIST {[}TIN2013-41739-R]; Ministery of Economy of Spain through the Young Researchers Programme: project PRECISE {[}TIN2014-54427-JIN]"",
    Funding-Text = ""This work has been partially supported by the European Training Network NeCS (H2020-MSCA-ITN-2015-675320) and by the Spanish Ministry of Economy and Competitiveness through the project PERSIST (TIN2013-41739-R). The second author is supported by the Ministery of Economy of Spain through the Young Researchers Programme: project PRECISE (TIN2014-54427-JIN)."",
    Number-of-Cited-References = ""32"",
    Times-Cited = ""8"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""J. Netw. Comput. Appl."",
    Doc-Delivery-Number = ""DO5RE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000377839700010"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		A model-driven approach for engineering trust and reputation into software services	https://www.webofscience.com/wos/woscc/full-record/WOS:000377839700010	ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD	nan; References
360	TrustSE	Mutual assessment in the social programmer ecosystem: an empirical investigation of developer profile aggregators	The multitude of social media channels that programmers can use to participate in software development has given rise to online developer profiles that aggregate activity across many services. Studying members of such developer profile aggregators, we found an ecosystem that revolves around the social programmer. Developers are assessing each other to evaluate whether other developers are interesting, worth following, or worth collaborating with. They are self-conscious about being assessed, and thus manage their public images. They value passion for software development, new technologies, and learning. Some recruiters participate in the ecosystem and use it to find candidates for hiring; other recruiters struggle with the interpretation of signals and issues of trust. This mutual assessment is changing how software engineers collaborate and how they advance their skills.	gamification;  motivation;  reputation;  social code sharing;  social media;  software development;  software engineering;  virtual communities; gamification, motivation, reputation, social code sharing, social media, software development, software engineering, virtual communities	Singer, Leif; Figueira Filho, Fernando; Cleary, Brendan; Treude, Christoph; Storey, Margaret-Anne; Schneider, Kurt	CSCW '13: Proceedings of the 2013 conference on Computer supported cooperative work	https://doi.org/10.1145/2441776.2441791		103-116	"""@inproceedings{10.1145/2441776.2441791,
    author = ""Singer, Leif and Figueira Filho, Fernando and Cleary, Brendan and Treude, Christoph and Storey, Margaret-Anne and Schneider, Kurt"",
    title = ""Mutual assessment in the social programmer ecosystem: an empirical investigation of developer profile aggregators"",
    year = ""2013"",
    isbn = ""9781450313315"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2441776.2441791"",
    doi = ""10.1145/2441776.2441791"",
    abstract = ""The multitude of social media channels that programmers can use to participate in software development has given rise to online developer profiles that aggregate activity across many services. Studying members of such developer profile aggregators, we found an ecosystem that revolves around the social programmer. Developers are assessing each other to evaluate whether other developers are interesting, worth following, or worth collaborating with. They are self-conscious about being assessed, and thus manage their public images. They value passion for software development, new technologies, and learning. Some recruiters participate in the ecosystem and use it to find candidates for hiring; other recruiters struggle with the interpretation of signals and issues of trust. This mutual assessment is changing how software engineers collaborate and how they advance their skills."",
    booktitle = ""Proceedings of the 2013 Conference on Computer Supported Cooperative Work"",
    pages = ""103-116"",
    numpages = ""14"",
    keywords = ""gamification, motivation, reputation, social code sharing, social media, software development, software engineering, virtual communities"",
    location = ""San Antonio, Texas, USA"",
    series = ""CSCW '13""
}
"""						2	ACM		Mutual assessment in the social programmer ecosystem: An empirical investigation of developer profile aggregators	https://doi.org/10.1145/2441776.2441791	Association for Computing Machinery	nan; References; Link
361	TrustSE	From open-source software to Wikipedia: `Backgrounding' trust by collective monitoring and reputation tracking	Open-content communities that focus on co-creation without requirements for entry have to face the issue of institutional trust in contributors. This research investigates the various ways in which these communities manage this issue. It is shown that communities of open-source software-continue to-rely mainly on hierarchy (reserving write-access for higher echelons), which substitutes (the need for) trust. Encyclopedic communities, though, largely avoid this solution. In the particular case of Wikipedia, which is confronted with persistent vandalism, another arrangement has been pioneered instead. Trust (i.e. full write-access) is `backgrounded' by means of a permanent mobilization of Wikipedians to monitor incoming edits. Computational approaches have been developed for the purpose, yielding both sophisticated monitoring tools that are used by human patrollers, and bots that operate autonomously. Measures of reputation are also under investigation within Wikipedia; their incorporation in monitoring efforts, as an indicator of the trustworthiness of editors, is envisaged. These collective monitoring efforts are interpreted as focusing on avoiding possible damage being inflicted on Wikipedian spaces, thereby being allowed to keep the discretionary powers of editing intact for all users. Further, the essential differences between backgrounding and substituting trust are elaborated. Finally it is argued that the Wikipedian monitoring of new edits, especially by its heavy reliance on computational tools, raises a number of moral questions that need to be answered urgently.	Bots; Open-source software; Reputation; Trust; Vandalism; Wikipedia; Bots;  Open-source software;  Reputation;  Trust;  Vandalism;  Wikipedia	de Laat, Paul B.	ETHICS AND INFORMATION TECHNOLOGY	https://doi.org/10.1007/s10676-014-9342-9		157-169	"""@article{WOS:000336410100006,
    Author = ""de Laat, Paul B."",
    Title = ""From open-source software to Wikipedia: `Backgrounding' trust by collective monitoring and reputation tracking"",
    Journal = ""ETHICS AND INFORMATION TECHNOLOGY"",
    Year = ""2014"",
    Volume = ""16"",
    Number = ""2"",
    Pages = ""157-169"",
    Month = ""JUN"",
    Abstract = ""Open-content communities that focus on co-creation without requirements for entry have to face the issue of institutional trust in contributors. This research investigates the various ways in which these communities manage this issue. It is shown that communities of open-source software-continue to-rely mainly on hierarchy (reserving write-access for higher echelons), which substitutes (the need for) trust. Encyclopedic communities, though, largely avoid this solution. In the particular case of Wikipedia, which is confronted with persistent vandalism, another arrangement has been pioneered instead. Trust (i.e. full write-access) is `backgrounded' by means of a permanent mobilization of Wikipedians to monitor incoming edits. Computational approaches have been developed for the purpose, yielding both sophisticated monitoring tools that are used by human patrollers, and bots that operate autonomously. Measures of reputation are also under investigation within Wikipedia; their incorporation in monitoring efforts, as an indicator of the trustworthiness of editors, is envisaged. These collective monitoring efforts are interpreted as focusing on avoiding possible damage being inflicted on Wikipedian spaces, thereby being allowed to keep the discretionary powers of editing intact for all users. Further, the essential differences between backgrounding and substituting trust are elaborated. Finally it is argued that the Wikipedian monitoring of new edits, especially by its heavy reliance on computational tools, raises a number of moral questions that need to be answered urgently."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""de Laat, PB (Corresponding Author), Univ Groningen, Dept Comp Sci, Groningen, Netherlands. Univ Groningen, Dept Comp Sci, Groningen, Netherlands."",
    DOI = ""10.1007/s10676-014-9342-9"",
    ISSN = ""1388-1957"",
    EISSN = ""1572-8439"",
    Keywords = ""Bots; Open-source software; Reputation; Trust; Vandalism; Wikipedia"",
    Research-Areas = ""Social Sciences - Other Topics; Information Science \\& Library Science; Philosophy"",
    Web-of-Science-Categories = ""Ethics; Information Science \\& Library Science; Philosophy"",
    Author-Email = ""p.b.de.laat@rug.nl"",
    Affiliations = ""University of Groningen"",
    ResearcherID-Numbers = ""de+Laat, Paul/AAC-8836-2022"",
    Number-of-Cited-References = ""29"",
    Times-Cited = ""7"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""33"",
    Journal-ISO = ""Ethics Inf. Technol."",
    Doc-Delivery-Number = ""AH8TC"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI); Arts \&amp; Humanities Citation Index (A\&amp;HCI)"",
    Unique-ID = ""WOS:000336410100006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		From open-source software to Wikipedia:'Backgrounding'trust by collective monitoring and reputation tracking	https://www.webofscience.com/wos/woscc/full-record/WOS:000336410100006	SPRINGER	nan; References
362	TrustSE	Motivations for participating in open source software communities: Roles of psychological needs and altruism														2						
363	TrustSE	Exploring the role of outside organizations in Free/Open Source Software projects														2						
364	TrustSE	Notice of Violation of IEEE Publication Principles: Open source reuse in commercial firms	"Notice of Violation of IEEE Publication Principles""Open Source Reuse in Commercial Firms""by T.R. Madanmohan and Rahul Dein IEEE Software, Vol. 21, Issue 6, November/December 2004, pp. 62-69After careful and considered review of the content and authorship of this paper by a duly constituted expert committee, this paper has been found to be in violation of IEEE's Publication Principles.This paper contains portions of original text from the sources cited below. Text from Paper 1) was reused without attribution. Text from Paper 2) was reused with attribution but without being clearly delineated from the above authors' own text.1)""Open-Source CMS: Prohibitively Fractured""by Tony Byrnein CMS Watch,http://www.cmswatch.com/Feature/89-Open-Src14 May 2003, pp 94-992)""The Amos Project: An Approach to Reusing Open Source Code""by Manuel Carro, German Puebla and Carlo Daffarain Presente y futuro de la ingenieria del software libreURJC, Madrid, May 21, 2003Open source software provides organizations with new options for component-based development. As with commercial off-the-shelf software, project developers acquire open source components from a vendor (or a community) and use them ""as is"" or with minor modifications. Although they have access to the component's source code, developers aren't required to do anything with it. If the component's community is large and active, the adopting organization can expect frequent software updates, reasonable quality assurance, responsive hug fixes, and good technical support. Also, having freely available source code addresses two typical concerns with using COTS components: unknown implementation quality and long-term vendor support."	Open-source; Commercial Firms; Operating System; Open-source Software; Source Code; Software Components; Commercial Development; Information Technology Industry; Intrusion Detection; Custom-made Software; Intellectual Property; Proprietary Software; Mailing Lists; Customer Requirements; Open-source Projects; Open-source Community; Software Maintenance	T.R. Madanmohan; Rahul De'	IEEE Software	https://doi.org/10.1109/MS.2004.45	"1.H. Wang and C. Wang, ""Open Source Software Adoption: A Status Report"", IEEE Software, vol. 18, no. 2, pp. 90-96, 2001. View Article  Google Scholar; 2.P. Lawlis, ""A Formal Process for Evaluating COTS Software Products"", Computer, vol. 34, no. 5, pp. 58-63, 2001. View Article  Google Scholar; 3.A.W. Brown and K.C. Wallnau, ""Engineering of Component-Based Systems"", pp. 7-15, 1996. View Article  Google Scholar; 4.J. Kontio, ""A Case Study in Applying a Systematic Method for COTS Selection"", Proc. 18th Int'l Conf. Software Eng., pp. 201-209, 1996. View Article  Google Scholar; 5.B. Boehm and C. Abts, ""COTS Integration: Plug and Pray?"", Computer, vol. 32, no. 1, pp. 135-138, 1999. View Article  Google Scholar; 6.D. Parnas, ""On the Criteria To Be Used in Decomposing Systems into Modules"", Comm. ACM, vol. 15, no. 12, pp. 1053-1058, 1972. CrossRef  Google Scholar; 7.D.K. Rosenberg, Open Source: The Unauthorized White Papers, 2000. Google Scholar; 8.J. Lerner and J. Tirole, ""Some Simple Economics of Open Source"", J. Industrial Economics, vol. 50, no. 2, pp. 197-234, 2002. CrossRef  Google Scholar; 9.G. Robles, ""Who Is Doing It? A Research on Libre Software Developers"", Fachgebiet fr Informatik und Gesellschaft TU-Berlin, 2001-Aug. Google Scholar; 10.S.H. Lee, ""Open Source Software Licensing"", Apr. 1999. Google Scholar; 11.M. Fink, The Business and Economics of Linux and Open Source, 2002. Google Scholar; 12.D.M. Nichols and M.B. Twidale, ""Usability and Open Source Software"". CrossRef  Google Scholar"	62- 69							2	IEEE		Notice of Violation of IEEE Publication Principles: Open source reuse in commercial firms	https://ieeexplore.ieee.org/document/1353225	IEEE	nan; Year; Bibtex
365	TrustSE	Increasing software quality using the provenance of software development processes														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
366	TrustSE	Determining the provenance of software artifacts	Software clone detection has made substantial progress in the last 15 years, and software clone analysis is starting to provide real insight into how and why code clones are born, evolve, and sometimes die. In this position paper, we make the case that there is a more general problem lurking in the background: software artifact provenance analysis. We argue that determining the origin of software artifacts is an increasingly important problem with many dimensions. We call for simple and lightweight techniques that can be used to help narrow the search space, so that more expensive techniques - including manual examination can be used effectively on a smaller candidate set. We predict the problem of software provenance will lead towards new avenues of research for the software clones community.	provenance;  code fingerprints;  code evolution;  bertillonage; provenance, code fingerprints, code evolution, bertillonage	Godfrey, Michael W.; German, Daniel M.; Davies, Julius; Hindle, Abram	IWSC '11: Proceedings of the 5th International Workshop on Software Clones	https://doi.org/10.1145/1985404.1985418		65-66	"""@inproceedings{10.1145/1985404.1985418,
    author = ""Godfrey, Michael W. and German, Daniel M. and Davies, Julius and Hindle, Abram"",
    title = ""Determining the provenance of software artifacts"",
    year = ""2011"",
    isbn = ""9781450305884"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1985404.1985418"",
    doi = ""10.1145/1985404.1985418"",
    abstract = ""Software clone detection has made substantial progress in the last 15 years, and software clone analysis is starting to provide real insight into how and why code clones are born, evolve, and sometimes die. In this position paper, we make the case that there is a more general problem lurking in the background: software artifact provenance analysis. We argue that determining the origin of software artifacts is an increasingly important problem with many dimensions. We call for simple and lightweight techniques that can be used to help narrow the search space, so that more expensive techniques - including manual examination can be used effectively on a smaller candidate set. We predict the problem of software provenance will lead towards new avenues of research for the software clones community."",
    booktitle = ""Proceedings of the 5th International Workshop on Software Clones"",
    pages = ""65-66"",
    numpages = ""2"",
    keywords = ""provenance, code fingerprints, code evolution, bertillonage"",
    location = ""Waikiki, Honolulu, HI, USA"",
    series = ""IWSC '11""
}
"""						2	ACM		Determining the provenance of software artifacts	https://doi.org/10.1145/1985404.1985418	Association for Computing Machinery	nan; References; Link
367	TrustSE	The Rise and Evolution of the Open Source Software Foundation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
368	TrustSE	Improving reusability of software libraries through usage pattern mining	Modern software systems are increasingly dependent on third-party libraries. It is widely recognized that using mature and well-tested third-party libraries can improve developers' productivity, reduce time-to-market, and produce more reliable software. Today's open-source repositories provide a wide range of libraries that can be freely downloaded and used. However, as software libraries are documented separately but intended to be used together, developers are unlikely to fully take advantage of these reuse opportunities. In this paper, we present a novel approach to automatically identify third-party library usage patterns, i.e., collections of libraries that are commonly used together by developers. Our approach employs a hierarchical clustering technique to group together software libraries based on external client usage. To evaluate our approach, we mined a large set of over 6000 popular libraries from Maven Central Repository and investigated their usage by over 38,000 client systems from the Github repository. Our experiments show that our technique is able to detect the majority (77\%) of highly consistent and cohesive library usage patterns across a considerable number of client systems.	Software libraries; Software reuse; Clustering; Usage patterns; Software libraries;  Software reuse;  Clustering;  Usage patterns	Saied, Mohamed Aymen; Ouni, Ali; Sahraoui, Houari; Kula, Raula Gaikovina; Inoue, Katsuro; Lo, David	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2018.08.032		164-179	"""@article{WOS:000447575300009,
    Author = ""Saied, Mohamed Aymen and Ouni, Ali and Sahraoui, Houari and Kula, Raula Gaikovina and Inoue, Katsuro and Lo, David"",
    Title = ""Improving reusability of software libraries through usage pattern mining"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2018"",
    Volume = ""145"",
    Pages = ""164-179"",
    Month = ""NOV"",
    Abstract = ""Modern software systems are increasingly dependent on third-party libraries. It is widely recognized that using mature and well-tested third-party libraries can improve developers' productivity, reduce time-to-market, and produce more reliable software. Today's open-source repositories provide a wide range of libraries that can be freely downloaded and used. However, as software libraries are documented separately but intended to be used together, developers are unlikely to fully take advantage of these reuse opportunities. In this paper, we present a novel approach to automatically identify third-party library usage patterns, i.e., collections of libraries that are commonly used together by developers. Our approach employs a hierarchical clustering technique to group together software libraries based on external client usage. To evaluate our approach, we mined a large set of over 6000 popular libraries from Maven Central Repository and investigated their usage by over 38,000 client systems from the Github repository. Our experiments show that our technique is able to detect the majority (77\\%) of highly consistent and cohesive library usage patterns across a considerable number of client systems."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Saied, MA (Corresponding Author), Engn \\& Comp Sci, 1455 Maisonneuve Blvd W, Montreal, PQ H3G 1M8, Canada. Saied, Mohamed Aymen; Sahraoui, Houari, Univ Montreal, DIRO, Montreal, PQ, Canada. Ouni, Ali, Univ Quebec, ETS Montreal, Dept Software Engn \\& IT, Ste Foy, PQ, Canada. Kula, Raula Gaikovina, Osaka Univ, Grad Sch Informat Sci \\& Technol, Suita, Osaka, Japan. Inoue, Katsuro, Osaka Univ, Grad Sch Informat Sci \\& Technol, Dept Comp Sci, Suita, Osaka, Japan. Lo, David, Singapore Management Univ, Sch Informat Syst, Singapore, Singapore. Saied, Mohamed Aymen, Concordia Univ, Engn \\& Comp Sci, Montreal, PQ, Canada."",
    DOI = ""10.1016/j.jss.2018.08.032"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software libraries; Software reuse; Clustering; Usage patterns"",
    Keywords-Plus = ""APIS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""m\\_saied@encs.concordia.ca ali.ouni@etsmtl.ca sahraouh@iro.umontreal.ca raula-k@ist.osaka-u.ac.jp inoue@ist.osaka-u.ac.jp davidlo@smu.edu.sg"",
    Affiliations = ""Universite de Montreal; University of Quebec; Ecole de Technologie Superieure - Canada; Osaka University; Osaka University; Singapore Management University; Concordia University - Canada"",
    ResearcherID-Numbers = ""Ouni, Ali/Y-8280-2019 Saied, Mohamed Aymen/KYR-9074-2024 Kula, Raula/AAD-6079-2019 Lo, David/A-2493-2012"",
    ORCID-Numbers = ""Saied, Mohamed Aymen/0000-0002-9488-645X Kula, Raula Gaikovina/0000-0003-2324-0608 Lo, David/0000-0002-4367-7201 Ouni, Ali/0000-0003-4708-0362"",
    Number-of-Cited-References = ""46"",
    Times-Cited = ""37"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""GX2UJ"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000447575300009"",
    OA = ""Green Accepted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Improving reusability of software libraries through usage pattern mining	https://www.webofscience.com/wos/woscc/full-record/WOS:000447575300009	ELSEVIER SCIENCE INC	nan; References
369	TrustSE	Developing artificial agents worthy of trust: ``Would you buy a used car from this artificial agent?{''}	There is a growing literature on the concept of e-trust and on the feasibility and advisability of ``trusting{''} artificial agents. In this paper we present an object-oriented model for thinking about trust in both face-to-face and digitally mediated environments. We review important recent contributions to this literature regarding e-trust in conjunction with presenting our model. We identify three important types of trust interactions and examine trust from the perspective of a software developer. Too often, the primary focus of research in this area has been on the artificial agents and the humans they may encounter after they are deployed. We contend that the humans who design, implement, and deploy the artificial agents are crucial to any discussion of e-trust and to understanding the distinctions among the concepts of trust, e-trust and face-to-face trust.	Artificial agents; Trust; E-trust; Electronic trust; Modeling trust; Artificial agents;  Trust;  E-trust;  Electronic trust;  Modeling trust	Grodzinsky, F. S.; Miller, K. W.; Wolf, M. J.	ETHICS AND INFORMATION TECHNOLOGY	https://doi.org/10.1007/s10676-010-9255-1		17-27	"""@article{WOS:000287581900003,
    Author = ""Grodzinsky, F. S. and Miller, K. W. and Wolf, M. J."",
    Title = ""Developing artificial agents worthy of trust: ``Would you buy a used car from this artificial agent?{''}"",
    Journal = ""ETHICS AND INFORMATION TECHNOLOGY"",
    Year = ""2011"",
    Volume = ""13"",
    Number = ""1"",
    Pages = ""17-27"",
    Month = ""MAR"",
    Abstract = ""There is a growing literature on the concept of e-trust and on the feasibility and advisability of ``trusting{''} artificial agents. In this paper we present an object-oriented model for thinking about trust in both face-to-face and digitally mediated environments. We review important recent contributions to this literature regarding e-trust in conjunction with presenting our model. We identify three important types of trust interactions and examine trust from the perspective of a software developer. Too often, the primary focus of research in this area has been on the artificial agents and the humans they may encounter after they are deployed. We contend that the humans who design, implement, and deploy the artificial agents are crucial to any discussion of e-trust and to understanding the distinctions among the concepts of trust, e-trust and face-to-face trust."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Wolf, MJ (Corresponding Author), Bemidji State Univ, 1500 Birchmont Dr NE,23, Bemidji, MN 56601 USA. Wolf, M. J., Bemidji State Univ, Bemidji, MN 56601 USA. Grodzinsky, F. S., Univ Cattolica Sacro Cuore, Fairfield, CT USA. Miller, K. W., Univ Illinois, Springfield, IL USA."",
    DOI = ""10.1007/s10676-010-9255-1"",
    ISSN = ""1388-1957"",
    EISSN = ""1572-8439"",
    Keywords = ""Artificial agents; Trust; E-trust; Electronic trust; Modeling trust"",
    Keywords-Plus = ""ONLINE"",
    Research-Areas = ""Social Sciences - Other Topics; Information Science \\& Library Science; Philosophy"",
    Web-of-Science-Categories = ""Ethics; Information Science \\& Library Science; Philosophy"",
    Author-Email = ""grodzinskyf@sacredheart.edu miller.keith@uis.edu mjwolf@bemidjistate.edu"",
    Affiliations = ""Minnesota State Colleges \\& Universities; Bemidji State University; Catholic University of the Sacred Heart; University of Illinois System; University of Illinois Springfield"",
    ResearcherID-Numbers = ""Wolf, Marty/H-3802-2019"",
    ORCID-Numbers = ""Miller, Keith/0000-0001-5336-8181"",
    Number-of-Cited-References = ""32"",
    Times-Cited = ""17"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""Ethics Inf. Technol."",
    Doc-Delivery-Number = ""724MZ"",
    Web-of-Science-Index = ""Social Science Citation Index (SSCI); Arts \&amp; Humanities Citation Index (A\&amp;HCI)"",
    Unique-ID = ""WOS:000287581900003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Developing artificial agents worthy of trust:“Would you buy a used car from this artificial agent?”	https://doi.org/10.1007/s10676-010-9255-1	SPRINGER	nan; References; Link
370	TrustSE	Managing license compliance in free and open source software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
371	TrustSE	Assessing Security Health of Open Source Software Packages														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
372	TrustSE	A Public Domain Approach to Free and Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
373	TrustSE	Open source-New rules in software development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
374	TrustSE	Open source software success: Measures and analysis														2						
375	TrustSE	Measuring software library stability through historical version analysis	Backward compatibility is a major concern for any library developer. In this paper, we evaluate how stable a set of frequently used third-party libraries is in terms of method removals, implementation change, the ratio of change in old methods to change in new ones and the percentage of new methods in each snapshot. We provide a motivating example of a commercial company which demonstrates several issues associated with the usage of third-party libraries. To obtain dependencies from software systems we developed a framework which extracts dependencies from Maven build files and which analyzes system and library code. We propose four metrics which provide different insights in the implementation and interface stability of a library. The usage frequency of library methods is utilized as a weight in the final metric and is obtained from a dataset of more than 2300 snapshots of 140 industrial Java systems. We finally describe three scenarios and an example of the application of our metrics.	Libraries; Measurement; Java; Stability analysis; Security; Software; Conferences; Industrial Systems; Changes In Methods; Stable Interface; Motivating Example; Backward Compatibility; Library Users; Third-party Libraries; Frequency Of Use; Reliability Analysis; Commercial Software; Amount Of Work; Application Programming Interface; Commons; Amount Of Effort; Maintenance Of State; Weighting Scheme; Library Version; Use Of Libraries; Changes In Signatures; Software Projects; Data Collection Framework; Stability Metrics; Version Control System; Part Of Interface; Final Metric; Collection Unit; Refactoring; Open-source; Third-party Libraries; API Usage; API Stability; Software Reuse	Steven Raemaekers; Arie van Deursen; Joost Visser	2012 28th IEEE International Conference on Software Maintenance (ICSM)	https://doi.org/10.1109/ICSM.2012.6405296	1.B. Dagenais and M. P. Robillard. SemDiff: Analysis and recommendation support for API evolution. In Proc. of the 31st Int. Conf. on Software Engineering, ICSE '09, pages 599-602, 2009. View Article  Google Scholar; 2.D. Dig and R. Johnson. The role of refactorings in API evolution. In Proc. of the 21st IEEE Int. Conf. on Software Maintenance, ICSM '05, pages 389-398, 2005. View Article  Google Scholar; 3.M. Grechanik, C. McMillan, L. DeFerrari, M. Comi, S. Crespi, D. Poshyvanyk, C. Fu, Q. Xie, and C. Ghezzi. An empirical investigation into a large-scale Java open source code repository. In Proc. of the 2010 ACM-IEEE Int. Symposium on Empirical Software Engineering and Measurement, ESEM '10, pages 11:1-11:10, 2010. CrossRef  Google Scholar; 4.J. Henkel and A. Diwan. CatchUp!: capturing and replaying refactorings to support API evolution. In Proc. of the 27th Int. Conf. on Software engineering, ICSE '05, pages 274-283, 2005. CrossRef  Google Scholar; 5.R. Lammel, E. Pek, and J. Starek. Large-scale, AST-based API-usage analysis of open-source Java projects. In Proceedings of the 2011 ACM Symposium on Applied Computing, SAC '11, pages 1317-1324, 2011. CrossRef  Google Scholar; 6.Y. M. Mileva, V. Dallmeier, M. Burger, and A. Zeller. Mining trends of library usage. In Proc. of the joint Int. and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops, IWPSE-Evol '09, pages 57-62, 2009. CrossRef  Google Scholar; 7.J. H. Perkins. Automatically generating refactorings to support API evolution. In Proc. of the 6th ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering, PASTE '05, pages 111-114, 2005. CrossRef  Google Scholar; 8.S. Raemaekers, A. van Deursen, and J. Visser. An analysis of dependence on third-party libraries in open source and proprietary systems. In Sixth Int. Workshop on Software Quality and Maintainability, SQM '12, 2012. Google Scholar; 9.S. Thummalapenta and T. Xie. Spotweb: Detecting framework hotspots and coldspots via mining open source code on the web. In Proc. of the 2008 23rd IEEE/ACM Int. Conf. on Automated Software Engineering, ASE '08, pages 327-336, 2008. View Article  Google Scholar; 10.G. Uddin, B. Dagenais, and M. P. Robillard. Analyzing temporal API usage patterns. In 26th IEEE/ACM Int. Conf. on Automated Software Engineering, ASE '11, pages 456-459, 2011. View Article  Google Scholar; 11.T. Xie and J. Pei. MAPO: Mining API usages from open source repositories. In Proc. of the 2006 Int. workshop on Mining software repositories, MSR '06, pages 54-57, 2006. CrossRef  Google Scholar; 12.H. Zhong, T. Xie, L. Zhang, J. Pei, and H. Mei. MAPO: Mining and Recommending API Usage Patterns. In S. Drossopoulou, editor, ECOOP 2009 Object-Oriented Programming, volume 5653 of Lecture Notes in Computer Science, pages 318-343, 2009. CrossRef  Google Scholar								2	IEEE		Measuring software library stability through historical version analysis	https://ieeexplore.ieee.org/document/6405296	IEEE	nan; Pages; Year; Bibtex
376	TrustSE	Practical approach to automate the discovery and eradication of open-source software vulnerabilities at scale														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
377	TrustSE	Empirical study of open source software selection for adoption, based on software quality characteristics														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
378	TrustSE	Trust and community in open source software production														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
379	TrustSE	Waiting for usable open source software? Don't hold your breath!														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
380	TrustSE	Mining social networks for software vulnerabilities monitoring	Staying informed about security vulnerabilities, work-arounds and the availability of patches regarding the components of a given system is crucial to ensure system security. Several channels can be used to the monitor the new vulnerabilities publications, but these channels are scattered. We propose in this paper a vulnerability monitoring system based on twitter analysis that aggregates and analyses different sources of data and extracts zero-day vulnerabilities.	Software; Security; Twitter; Media; Monitoring; Databases; Clustering algorithms; Social Networks; Security Vulnerabilities; Different Sources Of Data; Twitter Analysis; Activity Levels; Data Processing; Social Media; Open-source Software; Information Quality; Software Development; Indicator Values; Kind Of Information; Key Performance Indicators; Information Security; User Profile; Social Media Data; Twitter Users; Software Components; Trust Model; Trust Value; Classical Sources; Social Media Tools; Software Vendors; Reputation System; Source Of Information; Date Of Publication; Local Database; Vulnerability; Social; Networks; Zero-day; Monitoring; Data Mining; CVE	Slim Trabelsi; Henrik Plate; Amine Abida; M. Marouane Ben Aoun; Anis Zouaoui; Chedy Missaoui	2015 7th International Conference on New Technologies, Mobility and Security (NTMS)	https://doi.org/10.1109/NTMS.2015.7266506	"1.Jiang Feng, Jiemin Wang, Abram Hindle and Mario A. Nascimento, ""Mining the Temporal Evolution of the Android Bug Reporting Community via Sliding Windows"", 2013. Google Scholar; 2.G. Bougie, J. Starke, M. A. Storey and D. M. German, ""Towards understanding twitter use in software engineering: preliminary findings ongoing challenges and future questions"", Proceedings of the 2nd international workshop on Web 2.0 for software engineering, pp. 31-36, 2011. CrossRef  Google Scholar; 3.Y. Tian, P. Achananuparp, I. N. Lubis, D. Lo and E. P. Lim, ""What does software engineering community microblog about? In Mining Software Repositories (MSR)"", 9th IEEE Working Conference on, pp. 247-250, 2012. Google Scholar; 4.Trabelsi Slim and Luca Boasso, ""The KPI-Based Reputation Policy Language"" in 2011 The Fifth International Conference on Sensor Technologies and Applications, SENSORCOMM, 2011. Google Scholar; 5.K. Bohm, S. Etalle, J. Den Hartog, C. Hutter, S. Trabelsi, D. Trivellato, et al., ""A flexible architecture for privacy-aware trust management"", Journal of theoretical and applied electronic commerce research, vol. 5, no. 2, pp. 77-96, 2010. CrossRef  Google Scholar; 6.J. B. MacQueen, ""Some methods for classification and analysis of multivariate observations"" in Proc. of the fifth Berkeley Symposium on Mathematical Statistics and Probability, University of California Press, vol. 1, pp. 281-297, 1967. Google Scholar; 7.D. S. Rajput, R. S. Thakur, G. S. Thakur and N. Sahu, ""Analysis of Social net-working sites using K-mean Clustering algorithm"", International Journal of Computer  Communication Technology (IJCCT), pp. 2231-0371, 2012. CrossRef  Google Scholar; 8.C. Bird, A. Gourley, P. T. Devanbu, M. Gertz and A. Swaminathan, ""Mining email social networks"", MSR, pp. 137-143, 2006. CrossRef  Google Scholar; 9.D. Surian, D. Lo and E.-P. Lim, ""Mining collaboration patterns from a large developer net-work"", pp. 269-273, 2010. Google Scholar; 10.Xu Jin, Scott Christley and Greg Madey, ""Application of social network analysis to the study of open source software"", The economics of open source software development, pp. 205-224, 2006. Google Scholar; 11.Bougie Gargi, Jamie Starke, Margaret-Anne Storey and Daniel M. German, ""Towards un-derstanding twitter use in software engineering: preliminary findings ongoing challenges and future questions"", Proceedings of the 2nd international workshop on Web 2.0 for software engineering, pp. 31-36, 2011. CrossRef  Google Scholar; 12.Tian Yuan, Palakorn Achananuparp, Ibrahim Nelman Lubis, Lo David and Ee-Peng Lim, ""What does software engineering community microblog about?"", Mining Software Re-positories (MSR) 2012 9th IEEE Working Conference on, pp. 247-250, 2012. View Article  Google Scholar; 13.Sureka Ashish, Atul Goyal and Ayushi Rastogi, ""Using social network analysis for mining collaboration data in a defect tracking system for risk and vulnerability analysis"", Proceedings of the 4th India Software Engineering Conference, pp. 195-204, 2011. CrossRef  Google Scholar; 14.Arafin, Md Tanvir and Richard Royster, ""Vulnerability Exploits Advertised on Twitter"", 2013. Google Scholar; 15.B. Cui, S. Moskal, H. Du and S. J. Yang, ""Who shall we follow in twitter for cyber vulnerability?"" in Social Computing Behavioral-Cultural Modeling and Prediction, Springer Berlin Heidelber, pp. 394-402, 2013. CrossRef  Google Scholar"								2	IEEE		Mining social networks for software vulnerabilities monitoring	https://ieeexplore.ieee.org/document/7266506	IEEE	nan; Pages; Year; Bibtex
381	TrustSE	Vulnerability likelihood: A probabilistic approach to software assurance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
382	TrustSE	Bug Report Quality Evaluation Considering the Effect of Submitter Reputation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
383	TrustSE	Studying re-opened bugs in open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
384	TrustSE	Meeting challenges and surviving success: the 2nd workshop on open source software engineering	No abstract available.		Feller, Joseph	ICSE '02: Proceedings of the 24th International Conference on Software Engineering	https://doi.org/10.1145/581339.581436		669-670	"""@inproceedings{10.1145/581339.581436,
    author = ""Feller, Joseph"",
    title = ""Meeting challenges and surviving success: the 2nd workshop on open source software engineering"",
    year = ""2002"",
    isbn = ""158113472X"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/581339.581436"",
    doi = ""10.1145/581339.581436"",
    booktitle = ""Proceedings of the 24th International Conference on Software Engineering"",
    pages = ""669-670"",
    numpages = ""2"",
    location = ""Orlando, Florida"",
    series = ""ICSE '02""
}
"""						2	ACM		Meeting challenges and surviving success: the 2nd workshop on open source software engineering	https://doi.org/10.1145/581339.581436	Association for Computing Machinery	nan; Keywords; References; Link
385	TrustSE	Trustworthiness Evaluation and Testing of Open Source Components	The use of Open Source Components (OSCs) is rapidly increasing in software systems. One of the biggest obstacles for the use of OSCs is the fact that the software integrators can not be sure of the quality of the components. Thus, it is the responsibility of the integrators to perform the quality evaluation. When building products using OSCs, the integrators should have a clear method and tools that facilitate and automate the evaluation work. Our contribution is a method and tooling for trustworthiness evaluation and testing of OSCs. The method provides clear guidelines to assist the integrators to perform the evaluation in their own software development environment. The tooling assists in the technical trustworthiness evaluation, containing tools for reliability analysis and testing. The tools are independent, co-operating in the open source context.	Open source software; Programming; Software quality; Performance evaluation; Computer architecture; Software systems; Guidelines; Security; Automatic testing; Software tools; Open-source; Trustworthiness Ratings; Open Source Components; Reliability Analysis; System Software; Reliability Test; Evaluation Techniques; Testing Tools; Components Of Quality; Source Code; System Reliability; System Architecture; Quality Attributes; Model Architecture; Graphical Model; Tool Version; Reliable Evaluation; Probability Of Failure; Direct Evaluation; Software Components; Unified Modeling Language; Unit Tests; Sequence Diagram; Execution Path; Kinds Of Applications; State Diagram; Raw Information; Indirect Evaluation; Input Attributes; Domain-specific Models	Anne Immonen; Marko Palviainen	Seventh International Conference on Quality Software (QSIC 2007)	https://doi.org/10.1109/QSIC.2007.4385514	"1.S. Koch, ""Evolution of Open Source Software Systems - A Large-Scale Investigation"", Proceedings of the First International Conference on Open Source Systems, pp. 148-153, 2005. Google Scholar; 2.E. Raymond, ""The Cathedral and the Bazaar"", O'Reilly, pp. 279, 2001. Google Scholar; 3.P. Maki-Asiala and M. Matinlassi, ""Quality assurance of open source components: integrator point of view"", Proceedings of the 30th Annual International Computer Software and Applications Conference, pp. 189-192, 2006. CrossRef  Google Scholar; 4.R.H. Reussner, H.W. Schmidt and I.H. Poernomo, ""Reliability prediction for component-based software architectures"", Journal of Systems and Software, vol. 66, no. 3, pp. 241-252, 2003. CrossRef  Google Scholar; 5.E. Amoroso, J. Watson, M. Marietta and J. Weiss, ""A process-oriented methodology for assessing and improving software trustworthiness"", Proceedings of the 2nd ACM Conference on Computer and communications security, pp. 39-50, 1994. CrossRef  Google Scholar; 6.A. Immonen, ""A method for predicting reliability and availability at the architectural level"" in Software Product-Lines - Research Issues in Engineering and Management, Berlin Heidelberg:Springer-Verlag, pp. 373-422, 2006. CrossRef  Google Scholar; 7.A. Immonen and A. Niskanen, ""A tool for reliability and availability prediction"", Proceedings of the 31 st Euromicro Conference on Software Engineering and Advanced Applications, pp. 416-423, 2005. View Article  Google Scholar; 8.P. Neumann, ""Developing Open Source Systems: Principles for Composable Architectures (keynote speech)"", Proceedings of the Open Source Software Development Workshop, pp. 2-19, 2002. Google Scholar; 9.R. Murphy and D. Mauhgan, ""Trusted Open Source Operating Systems Research and Development"", Proceedings of the Open Source Software Development Workshop, pp. 22-29, 2002. Google Scholar; 10.A. Josang, R. Ismail and C. Boyd, ""A survey of trust and reputation systems for online service provision"", Decision Support Systems, 2005. Google Scholar; 11.A. Immonen and E. Niemela, ""Survey of Reliability and Availability Prediction Methods from the Viewpoint of Software Architecture"", Software and Systems Modeling, 2007. Google Scholar; 12.D. Rubel, ""The Heart of Eclipse"", ACM Queue, vol. 4, no. 6, pp. 36-44, 2006. CrossRef  Google Scholar; 13.""OMG Unified Modeling Language (UML) version 2.1.1"", Object Management Group, 2007. Google Scholar; 14.A. Evesti, Quality-oriented software architecture development in VTT Publications: 636, Espoo, Finland:VTT, pp. 79, 2007. Google Scholar; 15.M. Utting, ""Position Paper: Model-Based Testing. The Verified Software"", Theories Tools Experiments (VSTTE) conference, 2005. Google Scholar; 16.L.M. Garshol, BNF and EBNF: What are they and how do they work?, 2002. Google Scholar; 17.M. Palviainen, ""Task-based composition of the context-sensitive UIs of physical environments"", Proceedings of the Third International Conference on Autonomic and Autonomous Systems (ICAS 2007, 2007. View Article  Google Scholar"								2	IEEE		Trustworthiness evaluation and testing of open source components	https://ieeexplore.ieee.org/document/4385514	IEEE	nan; Pages; Year; Bibtex
386	TrustSE	Evolution of open source communities														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
387	TrustSE	Software and seeds: Open source methods														2						
388	TrustSE	Exploring the Effects of Process Characteristics on Products Quality in Open Source Software Development														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
389	TrustSE	Software quality attributes and trade-offs														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
390	TrustSE	Evaluation criteria for free/open source software products based on project analysis														2						
391	TrustSE	What makes computational open source software libraries successful?														2						
392	TrustSE	Attack patterns as a knowledge resource for building secure software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
393	TrustSE	Measuring security requirements for software security														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
394	TrustSE	A literature review of research in software defect reporting														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
395	TrustSE	Software editions: An application of segmentation theory to the packaged software market														2						
396	TrustSE	Patch Release Behaviors of Software Vendors in Response to Vulnerabilities: An Empirical Analysis	Software vulnerabilities have become a serious concern because unpatched software runs the risk of being exploited by hackers. There is a need for software vendors to make software patches available in a timely manner for vulnerabilities in their products. We develop a survival analysis model of software vendors' patch release behavior and test it using a data set compiled from the National Vulnerability Database, United States Computer Emergency Readiness Team, and vendor Web sites. This model helps to understand how factors specific to vulnerabilities, patches, software vendors, and software affect the patch release behavior of software vendors based on their cost structure. This study also analyzes the impact of the presence of multiple vendors and type of vendor on the patch release behavior of software vendors. Our results indicate that vulnerabilities with high confidentiality impact or high integrity impact are patched faster than vulnerabilities with high availability impact. Interesting differences in the patch release behavior of software vendors based on software type (new release versus update) and type of vendor (open source versus proprietary) are found. Our results illustrate that when there are legislative pressures, vendors react faster in patching vulnerabilities. Thus, appropriate regulations can be an important policy tool to influence vendor behavior toward socially desirable security outcomes.	patch quality; patch release time; patch types; software vendor types; software vulnerability characteristics; survival analysis; patch quality;  patch release time;  patch types;  software vendor types;  software vulnerability characteristics;  survival analysis	Temizkan, Orcun; Kumar, Ram L.; Park, SungJune; Subramaniam, Chandrasekar	JOURNAL OF MANAGEMENT INFORMATION SYSTEMS	https://doi.org/10.2753/MIS0742-1222280411		305-337	"""@article{WOS:000303603900012,
    Author = ""Temizkan, Orcun and Kumar, Ram L. and Park, SungJune and Subramaniam, Chandrasekar"",
    Title = ""Patch Release Behaviors of Software Vendors in Response to Vulnerabilities: An Empirical Analysis"",
    Journal = ""JOURNAL OF MANAGEMENT INFORMATION SYSTEMS"",
    Year = ""2012"",
    Volume = ""28"",
    Number = ""4"",
    Pages = ""305-337"",
    Month = ""SPR"",
    Abstract = ""Software vulnerabilities have become a serious concern because unpatched software runs the risk of being exploited by hackers. There is a need for software vendors to make software patches available in a timely manner for vulnerabilities in their products. We develop a survival analysis model of software vendors' patch release behavior and test it using a data set compiled from the National Vulnerability Database, United States Computer Emergency Readiness Team, and vendor Web sites. This model helps to understand how factors specific to vulnerabilities, patches, software vendors, and software affect the patch release behavior of software vendors based on their cost structure. This study also analyzes the impact of the presence of multiple vendors and type of vendor on the patch release behavior of software vendors. Our results indicate that vulnerabilities with high confidentiality impact or high integrity impact are patched faster than vulnerabilities with high availability impact. Interesting differences in the patch release behavior of software vendors based on software type (new release versus update) and type of vendor (open source versus proprietary) are found. Our results illustrate that when there are legislative pressures, vendors react faster in patching vulnerabilities. Thus, appropriate regulations can be an important policy tool to influence vendor behavior toward socially desirable security outcomes."",
    Publisher = ""ROUTLEDGE JOURNALS, TAYLOR \\& FRANCIS LTD"",
    Address = ""2-4 PARK SQUARE, MILTON PARK, ABINGDON OX14 4RN, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Temizkan, O (Corresponding Author), Univ N Carolina, Belk Coll Business Adm, Charlotte, NC 28223 USA. Temizkan, Orcun; Kumar, Ram L.; Park, SungJune; Subramaniam, Chandrasekar, Univ N Carolina, Belk Coll Business Adm, Charlotte, NC 28223 USA."",
    DOI = ""10.2753/MIS0742-1222280411"",
    ISSN = ""0742-1222"",
    EISSN = ""1557-928X"",
    Keywords = ""patch quality; patch release time; patch types; software vendor types; software vulnerability characteristics; survival analysis"",
    Keywords-Plus = ""INFORMATION; COMPLEXITY; IMPACT; DISCLOSURE; PERFORMANCE; MODELS"",
    Research-Areas = ""Computer Science; Information Science \\& Library Science; Business \\& Economics"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Information Science \\& Library Science; Management"",
    Affiliations = ""University of North Carolina; University of North Carolina Charlotte"",
    ResearcherID-Numbers = ""Temizkan, Orcun/AAE-7008-2019 Park, Sungjune/J-9525-2016"",
    ORCID-Numbers = ""Park, Sungjune/0000-0001-7482-4553"",
    Number-of-Cited-References = ""51"",
    Times-Cited = ""30"",
    Usage-Count-Last-180-days = ""6"",
    Usage-Count-Since-2013 = ""60"",
    Journal-ISO = ""J. Manage. Inform. Syst."",
    Doc-Delivery-Number = ""936QA"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000303603900012"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Patch release behaviors of software vendors in response to vulnerabilities: An empirical analysis	https://www.webofscience.com/wos/woscc/full-record/WOS:000303603900012	ROUTLEDGE JOURNALS, TAYLOR \& FRANCIS LTD	nan; References
397	TrustSE	Improvement of open source software usability: an empirical evaluation from developers' perspective														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
398	TrustSE	Assessing free/open source software quality														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
399	TrustSE	Exploitation and exploration networks in open source software development: An artifact-level analysis														2						
400	TrustSE	Software vulnerability markets: Discoverers and buyers														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
401	TrustSE	Firms' involvement in Open Source projects: A trade-off between software structural quality and popularity	Open Source (OS) was born as a pragmatic alternative to the ideology of Free Software and it is now increasingly seen by companies as a new approach to developing and making business upon software. Whereas the role of firms is clear for commercial OS projects, it still needs investigation for projects based on communities. This paper analyses the impact of firms' participation on popularity and internal software design quality for 643 SourceForge.net projects. Results show that firms' involvement improves the ranking of OS projects, but, on the other hand. puts corporate constraints to OS developing practices, thus leading to lower structural software design quality.	Open Source Community Projects; Firm participation; Internal software design quality; Open Source projects popularity; Structural Equation Modeling; Open Source Community Projects;  Firm participation;  Internal software design quality;  Open Source projects popularity;  Structural Equation Modeling	Capra, Eugenio; Francalanci, Chiara; Merlo, Francesco; Rossi-Lamastra, Cristina	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2010.09.004		144-161	"""@article{WOS:000285442400015,
    Author = ""Capra, Eugenio and Francalanci, Chiara and Merlo, Francesco and Rossi-Lamastra, Cristina"",
    Title = ""Firms' involvement in Open Source projects: A trade-off between software structural quality and popularity"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2011"",
    Volume = ""84"",
    Number = ""1, SI"",
    Pages = ""144-161"",
    Month = ""JAN"",
    Note = ""23rd International Conference on Advanced Information Networking and Applications Workshops, Bradford, ENGLAND, MAY 26-29, 2009"",
    Organization = ""IEEE"",
    Abstract = ""Open Source (OS) was born as a pragmatic alternative to the ideology of Free Software and it is now increasingly seen by companies as a new approach to developing and making business upon software. Whereas the role of firms is clear for commercial OS projects, it still needs investigation for projects based on communities. This paper analyses the impact of firms' participation on popularity and internal software design quality for 643 SourceForge.net projects. Results show that firms' involvement improves the ranking of OS projects, but, on the other hand. puts corporate constraints to OS developing practices, thus leading to lower structural software design quality. (C) 2010 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Capra, E (Corresponding Author), Politecn Milan, Dipartimento Elettron \\& Informaz, Via Ponzio 34-5, I-20133 Milan, Italy. Capra, Eugenio; Francalanci, Chiara; Merlo, Francesco, Politecn Milan, Dipartimento Elettron \\& Informaz, I-20133 Milan, Italy. Rossi-Lamastra, Cristina, Politecn Milan, Dipartimento Ingn Gest, I-20133 Milan, Italy."",
    DOI = ""10.1016/j.jss.2010.09.004"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Open Source Community Projects; Firm participation; Internal software design quality; Open Source projects popularity; Structural Equation Modeling"",
    Keywords-Plus = ""GOVERNANCE; METRICS; COMPLEXITY; COMMUNITY; MOTIVATION; INNOVATION; BUSINESS; SUCCESS; MODELS; TALE"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""capra@elet.polimi.it francala@elet.polimi.it merlo@elet.polimi.it cristina1.rossi@polimi.it"",
    Affiliations = ""Polytechnic University of Milan; Polytechnic University of Milan"",
    Number-of-Cited-References = ""109"",
    Times-Cited = ""33"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""17"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""696LH"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000285442400015"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Firms' involvement in Open Source projects: A trade-off between software structural quality and popularity	https://www.webofscience.com/wos/woscc/full-record/WOS:000285442400015	ELSEVIER SCIENCE INC	nan; References
402	TrustSE	Technical perspective: Bootstrapping a future of open source, specialized hardware	No abstract available.		Taylor, Michael B.	Commun. ACM	https://doi.org/10.1145/3366341		78	"""@article{10.1145/3366341,
    author = ""Taylor, Michael B."",
    title = ""Technical perspective: Bootstrapping a future of open source, specialized hardware"",
    year = ""2019"",
    issue_date = ""December 2019"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""62"",
    number = ""12"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/3366341"",
    doi = ""10.1145/3366341"",
    journal = ""Commun. ACM"",
    month = ""November"",
    pages = ""78"",
    numpages = ""1""
}
"""						2	ACM		Future of Open Source	https://doi.org/10.1145/3366341	Association for Computing Machinery	nan; Keywords; References; Link
403	TrustSE	Quality of EIS support and maintenance services														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
404	TrustSE	Future Trends and Development Methods in Software Quality Assurance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
405	TrustSE	A Case Study in Open Source Patch Submission														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
406	TrustSE	SECURA: Unified Reference Architecture for Advanced Security and Trust in Safety Critical Infrastructures	In the evolving landscape of safety-critical infrastructures, ensuring the integrity and security of systems has become paramount. Building upon a previously established security architecture tailored for the railway sector, this work introduces significant enhancements that extend its applicability beyond the confines of any singular industry. Key advancements include the integration of a security heartbeat to augment safety monitoring, the implementation of a sophisticated secure update mechanism leveraging Trusted Platform Module (TPM) Enhanced Authorization (EA) policies, local Trusted Platform Module (TPM) based attestation, a cyber-resiliency watchdog in a Trusted Execution Environment (TEE) that detects compromised system components and triggers remediation actions, automated vulnerability scanning leveraging Linux Integrity Measurement Architecture (IMA) logs to check against vulnerability databases, and a formal evaluation of system integrity reporting capabilities through remote attestation. Moreover, aiming for a universally adaptable framework, this paper proposes a reference architecture to accommodate various operational contexts. We use compartments--such as virtual machines, software containers, and RTOSes partitions--as a universal abstraction for system components, designed to be compatible with various real-time operating systemss (RTOSess), including the safety-certified PikeOS, the ACRN hypervisor, and beyond.	Confidential Computing;  Trusted Computing;  critical infrastructures;  cyber-resiliency watchdog;  local attestation;  remote attestation;  safety;  secure update;  security; Confidential Computing, Trusted Computing, critical infrastructures, cyber-resiliency watchdog, local attestation, remote attestation, safety, secure update, security	"Eckel, Michael; G\""{u}rgens, Sigrid"	ARES '24: Proceedings of the 19th International Conference on Availability, Reliability and Security	https://doi.org/10.1145/3664476.3664513		1-13	"""@inproceedings{10.1145/3664476.3664513,
    author = {Eckel, Michael and G\""{u}rgens, Sigrid},
    title = ""SECURA: Unified Reference Architecture for Advanced Security and Trust in Safety Critical Infrastructures"",
    year = ""2024"",
    isbn = ""9798400717185"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3664476.3664513"",
    doi = ""10.1145/3664476.3664513"",
    abstract = ""In the evolving landscape of safety-critical infrastructures, ensuring the integrity and security of systems has become paramount. Building upon a previously established security architecture tailored for the railway sector, this work introduces significant enhancements that extend its applicability beyond the confines of any singular industry. Key advancements include the integration of a security heartbeat to augment safety monitoring, the implementation of a sophisticated secure update mechanism leveraging Trusted Platform Module (TPM) Enhanced Authorization (EA) policies, local Trusted Platform Module (TPM) based attestation, a cyber-resiliency watchdog in a Trusted Execution Environment (TEE) that detects compromised system components and triggers remediation actions, automated vulnerability scanning leveraging Linux Integrity Measurement Architecture (IMA) logs to check against vulnerability databases, and a formal evaluation of system integrity reporting capabilities through remote attestation. Moreover, aiming for a universally adaptable framework, this paper proposes a reference architecture to accommodate various operational contexts. We use compartments--such as virtual machines, software containers, and RTOSes partitions--as a universal abstraction for system components, designed to be compatible with various real-time operating systemss (RTOSess), including the safety-certified PikeOS, the ACRN hypervisor, and beyond."",
    booktitle = ""Proceedings of the 19th International Conference on Availability, Reliability and Security"",
    articleno = ""9"",
    numpages = ""13"",
    keywords = ""Confidential Computing, Trusted Computing, critical infrastructures, cyber-resiliency watchdog, local attestation, remote attestation, safety, secure update, security"",
    location = ""Vienna, Austria"",
    series = ""ARES '24""
}
"""						2	ACM		Security and Trust	https://doi.org/10.1145/3664476.3664513	Association for Computing Machinery	nan; References; Link
407	TrustSE	Quality assurance for open source software configuration management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
408	TrustSE	Free and open source cloud technology based on the type Software as a Service														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
409	TrustSE	RLM: A general model for trust representation and aggregation														2						
410	TrustSE	ERP in China: one package, two profiles	How and why the same software system implementation can produce fundamentally different results.		Martinsons, Maris G.	Commun. ACM	https://doi.org/10.1145/1005817.1005823		65-68	"""@article{10.1145/1005817.1005823,
    author = ""Martinsons, Maris G."",
    title = ""ERP in China: one package, two profiles"",
    year = ""2004"",
    issue_date = ""July 2004"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""47"",
    number = ""7"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1005817.1005823"",
    doi = ""10.1145/1005817.1005823"",
    abstract = ""How and why the same software system implementation can produce fundamentally different results."",
    journal = ""Commun. ACM"",
    month = ""July"",
    pages = ""65-68"",
    numpages = ""4""
}
"""						2	ACM		ERP in China: one package, two profiles	https://doi.org/10.1145/1005817.1005823	Association for Computing Machinery	nan; Keywords; References; Link
411	TrustSE	centralized package management using Stork														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
412	TrustSE	A survey of trust in internet applications														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
413	TrustSE	Interdependencies, trust and information in relationships, alliances and networks														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
414	TrustSE	Self-Governance Developer Framework														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
415	TrustSE	Design architecture, developer networks and performance of open source software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
416	TrustSE	Global software development: where are the benefits?	IntroductionGlobal Software Development (GSD) is increasingly becoming the normal practice in the software industry, readily evidenced by U.S. estimates that the value of the offshore software development market has increased 25-fold over the past 10 years, to the extent that one-quarter of U.S. spending on application development, integration and management services is expected to go off-shore according to recent predictions. There are many potential benefits that can arise from GSD. The most frequently cited one is that of reduced development costs due to the salary savings possible. Also, GSD can lead to reduced development duration due to greater time zone effectiveness as companies practice the so-called 'follow-the-sun' software development model. GSD also affords new opportunities for cross-site modularization of development work, potential access to a larger and better-skilled developer pool, and the possibility of greater innovation, learning and transfer of best practices. Finally, GSD can facilitate closer proximity to markets and customers.However, GSD also introduces a number of challenges in relation to communication, coordination and control of the development process. These arise due to the distances involved in three dimensions -- geographical, temporal, and socio-cultural (See Figure 1). As a consequence, much research and practice has focused on trying to find ways to overcome the GSD challenges identified in Figure 1. In the literature to date, the potential benefits of GSD are usually just mentioned very briefly, if they are mentioned at all, and the realization of these benefits seems to be more or less taken for granted. The primary focus instead is on how the problems inherent in GSD might be addressed. Here, we reverse this trend and focus instead on the benefits and the extent to which they are actually being realized in practice in three global companies practicing GSD.		"Conch\'{u}ir, Eoin \'{O}; \r{A}gerfalk, P\""{a}r J.; Olsson, Helena H.; Fitzgerald, Brian"	Commun. ACM	https://doi.org/10.1145/1536616.1536648		127-131	"""@article{10.1145/1536616.1536648,
    author = {Conch\'{u}ir, Eoin \'{O} and \r{A}gerfalk, P\""{a}r J. and Olsson, Helena H. and Fitzgerald, Brian},
    title = ""Global software development: where are the benefits?"",
    year = ""2009"",
    issue_date = ""August 2009"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""52"",
    number = ""8"",
    issn = ""0001-0782"",
    url = ""https://doi.org/10.1145/1536616.1536648"",
    doi = ""10.1145/1536616.1536648"",
    abstract = ""IntroductionGlobal Software Development (GSD) is increasingly becoming the normal practice in the software industry, readily evidenced by U.S. estimates that the value of the offshore software development market has increased 25-fold over the past 10 years, to the extent that one-quarter of U.S. spending on application development, integration and management services is expected to go off-shore according to recent predictions. There are many potential benefits that can arise from GSD. The most frequently cited one is that of reduced development costs due to the salary savings possible. Also, GSD can lead to reduced development duration due to greater time zone effectiveness as companies practice the so-called 'follow-the-sun' software development model. GSD also affords new opportunities for cross-site modularization of development work, potential access to a larger and better-skilled developer pool, and the possibility of greater innovation, learning and transfer of best practices. Finally, GSD can facilitate closer proximity to markets and customers.However, GSD also introduces a number of challenges in relation to communication, coordination and control of the development process. These arise due to the distances involved in three dimensions -- geographical, temporal, and socio-cultural (See Figure 1). As a consequence, much research and practice has focused on trying to find ways to overcome the GSD challenges identified in Figure 1. In the literature to date, the potential benefits of GSD are usually just mentioned very briefly, if they are mentioned at all, and the realization of these benefits seems to be more or less taken for granted. The primary focus instead is on how the problems inherent in GSD might be addressed. Here, we reverse this trend and focus instead on the benefits and the extent to which they are actually being realized in practice in three global companies practicing GSD."",
    journal = ""Commun. ACM"",
    month = ""August"",
    pages = ""127-131"",
    numpages = ""5""
}
"""						2	ACM		Global software development: where are the benefits?	https://doi.org/10.1145/1536616.1536648	Association for Computing Machinery	nan; Keywords; References; Link
417	TrustSE	The GNOME project: a case study of open source, global software development														2						
418	TrustSE	"Bootstrapping Trust in a"" Trusted"" Platform."														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
419	TrustSE	Quality, productivity and economic benefits of software reuse: a review of industrial studies	Systematic software reuse is proposed to increase productivity and software quality and lead to economic benefits. Reports of successful software reuse programs in industry have been published. However, there has been little effort to organize the evidence systematically and appraise it. This review aims to assess the effects of software reuse in industrial contexts. Journals and major conferences between 1994 and 2005 were searched to find observational studies and experiments conducted in industry, returning eleven papers of observational type. Systematic software reuse is significantly related to lower problem (defect, fault or error) density in five studies and to decreased effort spent on correcting problems in three studies. The review found evidence for significant gains in apparent productivity in three studies. Other significant benefits of software reuse were reported in single studies or the results were inconsistent. Evidence from industry is sparse and combining results was done by vote-counting. Researchers should pay more attention to using comparable metrics, performing longitudinal studies, and explaining the results and impact on industry. For industry, evaluating reuse of COTS or OSS components, integrating reuse activities in software processes, better data collection and evaluating return on investment are major challenges.	software reuse; review; quality; productivity; evidence; software reuse;  review;  quality;  productivity;  evidence	Mohagheghi, Parastoo; Conradi, Reidar	EMPIRICAL SOFTWARE ENGINEERING	https://doi.org/10.1007/s10664-007-9040-x		471-516	"""@article{WOS:000249647100003,
    Author = ""Mohagheghi, Parastoo and Conradi, Reidar"",
    Title = ""Quality, productivity and economic benefits of software reuse: a review of industrial studies"",
    Journal = ""EMPIRICAL SOFTWARE ENGINEERING"",
    Year = ""2007"",
    Volume = ""12"",
    Number = ""5"",
    Pages = ""471-516"",
    Month = ""OCT"",
    Abstract = ""Systematic software reuse is proposed to increase productivity and software quality and lead to economic benefits. Reports of successful software reuse programs in industry have been published. However, there has been little effort to organize the evidence systematically and appraise it. This review aims to assess the effects of software reuse in industrial contexts. Journals and major conferences between 1994 and 2005 were searched to find observational studies and experiments conducted in industry, returning eleven papers of observational type. Systematic software reuse is significantly related to lower problem (defect, fault or error) density in five studies and to decreased effort spent on correcting problems in three studies. The review found evidence for significant gains in apparent productivity in three studies. Other significant benefits of software reuse were reported in single studies or the results were inconsistent. Evidence from industry is sparse and combining results was done by vote-counting. Researchers should pay more attention to using comparable metrics, performing longitudinal studies, and explaining the results and impact on industry. For industry, evaluating reuse of COTS or OSS components, integrating reuse activities in software processes, better data collection and evaluating return on investment are major challenges."",
    Publisher = ""SPRINGER"",
    Address = ""VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Mohagheghi, P (Corresponding Author), ICT, SINTEF, POB 124, N-0314 Oslo, Norway. ICT, SINTEF, N-0314 Oslo, Norway. Norwegian Univ Sci \\& Technol, Dept Comp \\& Informat Sci, N-7491 Trondheim, Norway."",
    DOI = ""10.1007/s10664-007-9040-x"",
    ISSN = ""1382-3256"",
    EISSN = ""1573-7616"",
    Keywords = ""software reuse; review; quality; productivity; evidence"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering"",
    Author-Email = ""parastoo.mohagheghi@sintef.no conradi@idi.ntnu.no"",
    Affiliations = ""SINTEF; Norwegian University of Science \\& Technology (NTNU)"",
    Number-of-Cited-References = ""56"",
    Times-Cited = ""102"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""12"",
    Journal-ISO = ""Empir. Softw. Eng."",
    Doc-Delivery-Number = ""213DU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000249647100003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Quality, productivity and economic benefits of software reuse: a review of industrial studies	https://www.webofscience.com/wos/woscc/full-record/WOS:000249647100003	SPRINGER	nan; References
420	TrustSE	Quality and the reliance on individuals in free software projects														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
421	TrustSE	Issues in global software development: A critical review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
422	TrustSE	Two case studies of open source software development: Apache and Mozilla	According to its proponents, open source style software development has the capacity to compete successfully, and perhaps in many cases displace, traditional commercial development methods. In order to begin investigating such claims, we examine data from two major open source projects, the Apache web server and the Mozilla browser. By using email archives of source code change history and problem reports we quantify aspects of developer participation, core team size, code ownership, productivity, defect density, and problem resolution intervals for these OSS projects. We develop several hypotheses by comparing the Apache project with several commercial projects. We then test and refine several of these hypotheses, based on an analysis of Mozilla data. We conclude with thoughts about the prospects for high-performance commercial/open source process hybrids.	Apache;  Mozilla;  Open source software;  code ownership;  defect density;  repair interval; Apache, Mozilla, Open source software, code ownership, defect density, repair interval	Mockus, Audris; Fielding, Roy T.; Herbsleb, James D.	ACM Trans. Softw. Eng. Methodol.	https://doi.org/10.1145/567793.567795		309-346	"""@article{10.1145/567793.567795,
    author = ""Mockus, Audris and Fielding, Roy T. and Herbsleb, James D."",
    title = ""Two case studies of open source software development: Apache and Mozilla"",
    year = ""2002"",
    issue_date = ""July 2002"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""11"",
    number = ""3"",
    issn = ""1049-331X"",
    url = ""https://doi.org/10.1145/567793.567795"",
    doi = ""10.1145/567793.567795"",
    abstract = ""According to its proponents, open source style software development has the capacity to compete successfully, and perhaps in many cases displace, traditional commercial development methods. In order to begin investigating such claims, we examine data from two major open source projects, the Apache web server and the Mozilla browser. By using email archives of source code change history and problem reports we quantify aspects of developer participation, core team size, code ownership, productivity, defect density, and problem resolution intervals for these OSS projects. We develop several hypotheses by comparing the Apache project with several commercial projects. We then test and refine several of these hypotheses, based on an analysis of Mozilla data. We conclude with thoughts about the prospects for high-performance commercial/open source process hybrids."",
    journal = ""ACM Trans. Softw. Eng. Methodol."",
    month = ""July"",
    pages = ""309-346"",
    numpages = ""38"",
    keywords = ""Apache, Mozilla, Open source software, code ownership, defect density, repair interval""
}
"""						2	ACM		Two case studies of open source software development: Apache and Mozilla	https://doi.org/10.1145/567793.567795	Association for Computing Machinery	nan; References; Link
423	TrustSE	Requirements engineering meets trust management - Model, methodology, and reasoning	The last years have seen a number of proposals to incorporate Security Engineering into mainstream Software Requirements Engineering. However, capturing trust and security requirements at an organizational level (as opposed to a design level) is still an open problem. This paper presents a formal framework for modeling and analyzing security and trust requirements. It extends the Tropos methodology, an agent-oriented software engineering methodology. The key intuition is that in modeling security and trust, we need to distinguish between the actors that manipulate resources, accomplish goals or execute tasks, and actors that own the resources or the goals. To analyze an organization and its information systems, we proceed in two steps. First, we built a trust model, determining the trust relationships among actors, and then we give a functional model, where we analyze the actual delegations against the trust model, checking whether an actor that offers a service is authorized to have it. The formal framework allows for the automatic verification of security and trust requirements by using a suitable delegation logic that can be mechanized within Datalog. To make the discussion more concrete, we illustrate the proposal with a Health Care case study.		Giorgini, P; Massacci, F; Mylopoulos, J; Zannone, N	TRUST MANAGEMENT, PROCEEDING	https://www.webofscience.com/wos/woscc/full-record/WOS:000189497000014		176-190	"""@inproceedings{WOS:000189497000014,
    Author = ""Giorgini, P and Massacci, F and Mylopoulos, J and Zannone, N"",
    Editor = ""Jensen, C and Poslad, S and Dimitrakos, T"",
    Title = ""Requirements engineering meets trust management - Model, methodology, and reasoning"",
    Booktitle = ""TRUST MANAGEMENT, PROCEEDING"",
    Series = ""Lecture Notes in Computer Science"",
    Year = ""2004"",
    Volume = ""2995"",
    Pages = ""176-190"",
    Note = ""2nd International Conference on Trust Management, Oxford, ENGLAND, MAR 29-APR 01, 2004"",
    Organization = ""Informat Soc Technol, European Union, Future \\& Emerging Technol, iTrust Work Grp"",
    Abstract = ""The last years have seen a number of proposals to incorporate Security Engineering into mainstream Software Requirements Engineering. However, capturing trust and security requirements at an organizational level (as opposed to a design level) is still an open problem. This paper presents a formal framework for modeling and analyzing security and trust requirements. It extends the Tropos methodology, an agent-oriented software engineering methodology. The key intuition is that in modeling security and trust, we need to distinguish between the actors that manipulate resources, accomplish goals or execute tasks, and actors that own the resources or the goals. To analyze an organization and its information systems, we proceed in two steps. First, we built a trust model, determining the trust relationships among actors, and then we give a functional model, where we analyze the actual delegations against the trust model, checking whether an actor that offers a service is authorized to have it. The formal framework allows for the automatic verification of security and trust requirements by using a suitable delegation logic that can be mechanized within Datalog. To make the discussion more concrete, we illustrate the proposal with a Health Care case study."",
    Publisher = ""SPRINGER-VERLAG BERLIN"",
    Address = ""HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY"",
    Type = ""Article; Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Univ Trent, Dept Informat \\& Commun Technol, I-38100 Trento, Italy. Univ Trent, Dept Informat \\& Commun Technol, I-38100 Trento, Italy. Univ Toronto, Dept Comp Sci, Toronto, ON, Canada."",
    ISSN = ""0302-9743"",
    EISSN = ""1611-3349"",
    ISBN = ""3-540-21312-0"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""giorgini@dit.unitn.it massacci@dit.unitn.it jm@cs.toronto.edu zannone@dit.unitn.it"",
    Affiliations = ""University of Trento; Fondazione Bruno Kessler; FBK-ICT - Center for Information \\& Communication Technology; University of Toronto"",
    ResearcherID-Numbers = ""Massacci, Fabio/C-2662-2012 Giorgini, Paolo/G-7886-2012 Zannone, Nicola/H-1318-2012"",
    ORCID-Numbers = ""Massacci, Fabio/0000-0002-1091-8486 Zannone, Nicola/0000-0002-9081-5996"",
    Number-of-Cited-References = ""26"",
    Times-Cited = ""39"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""13"",
    Doc-Delivery-Number = ""BY92S"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000189497000014"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Requirements engineering meets trust management	https://www.webofscience.com/wos/woscc/full-record/WOS:000189497000014	SPRINGER-VERLAG BERLIN	nan; Keywords; References
424	TrustSE	Modelling security and trust with secure tropos														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
425	TrustSE	Free/open source software development	The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development.	empirical studies;  free software;  open source software;  socio-technical relationships;  software development practices; empirical studies, free software, open source software, socio-technical relationships, software development practices	Scacchi, Walt	ESEC-FSE '07: Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering	https://doi.org/10.1145/1287624.1287689		459-468	"""@inproceedings{10.1145/1287624.1287689,
    author = ""Scacchi, Walt"",
    title = ""Free/open source software development"",
    year = ""2007"",
    isbn = ""9781595938114"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1287624.1287689"",
    doi = ""10.1145/1287624.1287689"",
    abstract = ""The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate; (ii) resources and capabilities supporting development activities; (iii) how cooperation, coordination, and control are realized in projects; (iv) alliance formation and inter-project social networking; (v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying emerging opportunities for future FOSSD studies that can give rise to the development of new software engineering tools or techniques, as well as to new empirical studies of software development."",
    booktitle = ""Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering"",
    pages = ""459-468"",
    numpages = ""10"",
    keywords = ""empirical studies, free software, open source software, socio-technical relationships, software development practices"",
    location = ""Dubrovnik, Croatia"",
    series = ""ESEC-FSE '07""
}
"""						2	ACM		Free/open source software development	https://doi.org/10.1145/1287624.1287689	Association for Computing Machinery	nan; References; Link
426	TrustSE	Reuse-conducive development environments														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
427	TrustSE	Software deployment, past, present and future														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
428	TrustSE	Updating Model of Software Component Trustworthiness Based on Users Feedback	The software trustworthiness measurement is one of the hot topics. Software component technology is the mainstream technology of software development. How to get the trustworthy degree of software component efficiently and accurately is a challenging issue for the component-based software development. Getting the trustworthy degree of software component needs many users' success cases. In this paper, we propose an updating model of software component trustworthiness. First, the trustworthy degree of the software component is computed based on users' feedback. Then, the weight of updating is determined by the number of users. Finally, the method of cluster different companies is based on the Euler distance. A case study shows that the method is reasonable and effective.	Software; Mathematical model; Software measurement; Companies; Computational modeling; Security; Acceleration; Software Components; User Feedback; Successful Cases; Geometric Mean; Weight Function; Software Companies; Attribute Weights; Software trustworthiness; software component; weight; updating model; user feedback	Baohua Wang; Yixiang Chen; Shun Zhang; Hengyang Wu	IEEE Access	https://doi.org/10.1109/ACCESS.2019.2892518	"1.J. Wang et al., ""An approach to measureing and grading software trust for spacecraft software"", Sci. Sinica Technol., vol. 45, pp. 221-228, 2015.Show in Context CrossRef  Google Scholar; 2.K. Liu, Z. Shan, J. Wang, J. He, Z. Zhang and Y.-W. Qin, ""The trusted software basic research summary of major research plan"", Nat. Natural Sci. Found. China, vol. 3, pp. 145-151, 2008.Show in Context Google Scholar; 3.H. Tao and Y. Chen, ""A new metric model for trustworthiness of softwares"", Telecommun. Syst., vol. 51, no. 2, pp. 95-105, Nov. 2012.Show in Context CrossRef  Google Scholar; 4.L. Zhang, Y. Zhou, Y. Chen, M. Zhang and J. Zhang, ""Stability of software trustworthiness measurements models"", Proc. IEEE 7th Int. Conf. Softw. Secur. Rel.-Companion, pp. 219-224, Jun. 2013.Show in Context View Article  Google Scholar; 5.Y. Ma, Y. Chen and B. Gu, ""An attributes-based allocation approach of software trustworthy degrees"", Proc. IEEE 9th Int. Conf. Softw. Secur. Rel.-Companion, pp. 89-94, Aug. 2015.Show in Context View Article  Google Scholar; 6.W. Hasseibring, ""Research on trustworthy software systems"", Computer, vol. 39, no. 4, pp. 91-92, 2006.Show in Context View Article  Google Scholar; 7.J. Voas, ""Trusted software's holy grail"", Softw. Qual. J., vol. 11, no. 1, pp. 9-17, 2003.Show in Context View Article  Google Scholar; 8.B. Lang, X. D. Liu, H. M. Wang, B. Xie and X. Mao, ""A classification model for software trustworthiness"", J. Frontiers Comput. Sci. Technol., vol. 4, no. 3, pp. 231-239, 2010.Show in Context Google Scholar; 9.Y. Shanlin, D. Shuai and C. Wei, ""Trustworthy software evaluation using utility based evidence theory"", J. Comput. Res. Develop., vol. 46, no. 7, pp. 1152-1159, 2009.Show in Context Google Scholar; 10.M. D. McIlroy, J. Buxton, P. Naur and B. Randell, ""Mass-produced software components"", Proc. Softw. Eng. Concepts Techn., pp. 88-98, 1968.Show in Context Google Scholar; 11.C. Szyperski, ""Component technology: What where and how?"", Proc. IEEE Int. Conf. Softw. Eng., pp. 684-693, May 2003.Show in Context View Article  Google Scholar; 12.J. Sametinger, Software Engineering With Reusable Components, Berlin, Germany:Springer-Verlag, pp. 1-63, 1997. CrossRef  Google Scholar; 13.F. Bachman et al., ""Technical concepts of component-based software engineering"", pp. 1-36, 2000.Show in Context CrossRef  Google Scholar; 14.C. Szyperski, Component Software: Beyond Object-Oriented Programming, Reading, MA, USA:Addison-Wesley, pp. 1-22, 2003.Show in Context Google Scholar; 15.M. Abdellatief, A. B. M. Sulta, A. A. A. Ghani and M. A. Jabar, ""Component-based software system dependency metrics based on component information flow measurements"", Proc. 6th Int. Conf. Softw. Eng. Adv. (ICSEA), pp. 76-83, 2011.Show in Context Google Scholar; 16.M. von Detten, M. C. Platenius and S. Becker, ""Reengineering component-based software systems with archimetrix"", Softw. Syst. Model., vol. 13, no. 4, pp. 1239-1268, 2014.Show in Context CrossRef  Google Scholar; 17.T. Vale et al., ""Twenty-eight years of component-based software engineering"", J. Syst. Softw., vol. 111, pp. 128-148, Jan. 2016.Show in Context CrossRef  Google Scholar; 18.B. Meyer, ""The grand challenge of trusted components"", Proc. 25th Int. Conf. Softw. Eng. (ICSE), pp. 660-667, May 2003.Show in Context View Article  Google Scholar; 19.B. Wang and S. Zhang, ""A subjective and objective integration approach of determining weights for trustworthy measurement"", IEEE Access, vol. 6, pp. 25829-25835, 2018.Show in Context View Article  Google Scholar; 20.T. L. Saaty, ""Analytic hierarchy process"", Mathematical Models for Decision Support, pp. 109-121.Show in Context CrossRef  Google Scholar"	60199- 60205							2	IEEE		Updating Model of Software Component Trustworthiness Based on Users Feedback	https://ieeexplore.ieee.org/document/8610145	IEEE	nan; Year; Bibtex
429	TrustSE	SV-AF ?€? A Security Vulnerability Analysis Framework														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
430	TrustSE	A software component assembly approach supporting credibility index quantitative evaluation	From the research background of component assembly, in view of the shortage of the current component assembly technology in dealing with the increasing demand of software credibility and customization, this paper presents a solution of component assembly which supports credibility index quantitative evaluation in order to meet the requirements of software functional or non-functional for different clients. The main idea of this solution is to create a software architecture model represented by directed graph. The solution taking the component as base element, the function as target, the credibility index as constraint, automatically computes a variety of solutions which meet the functional requirement. Optimal solution will be obtained by evaluate the credibility index of those solutions in order to form software entity. In the end, this paper designs a assembly algorithm in terms of the component credibility adjacency matrix and provides simulation experiment results.	Assembly; Indexes; Software; Connectors; Computational modeling; Software reliability; Software Components; Credibility Index; Directed Graph; Solution In Order; Software Architecture; Experimental Simulation Results; Assembly Algorithms; Selection Problem; International Organization For Standardization; Linear Graph; Software Quality; Credibility Ratings; assembly; Software architecture; Credibility; Function-driven	Jun Xu; Deng Hui Dong; Yuan Ming Zhang; Zheng Song	2012 IEEE International Conference on Computer Science and Automation Engineering (CSAE)	https://doi.org/10.1109/CSAE.2012.6272857	"1.Xu Li-hua, Ziv H, and Richardson D, ""An Architectural Pattern for Non-functional Dependability Requirements,"" Systems & Software,vol.79, no.10, pp. 1370-1378, 2006. CrossRef  Google Scholar; 2.Mei hong and Cao Dong-gang, ""The challenges of internet posed,"" Communications of the CCF, vol.6,no.2,pp.20-27,2010. Google Scholar; 3.Ca Ka-yuan, ""Some understanding of software dependability and cybernetics,"" Science Foundation in China, vol.4, pp.11-14, 2004. Google Scholar; 4.A. Avizienis, J. C. Laprie, and B. Randell, ""Fundamental Concepts of Computer System Dependability"",2001. [Online].http://www.cs.virginia.edu/ ~jck/cs651/papers/lapire.taxonomy.pdf. Google Scholar; 5.Yang Fu-qing, ""Thinking of software engineering technology development,"" Journal of Software, vol.16, no.01, pp.1-7, 2005. CrossRef  Google Scholar; 6.A. Bondavalli, I. Mura, and S. Chiaradonna, ""DEEP: A Tool for The Dependability Modeling and Evaluation of Multiple Phased Systems,"" Washington: IEEE Computer Society Press, 2000, pp.231-236. Google Scholar; 7.M. Walter, C. Trinitis, and W. Karl, ""Open SESAME: An Intuitive Dependability Modeling Environment Supporting Inter-component Dependencies: Dependable Computing,"" Seoul: 2001 Pacific Rim International Symposium, 2001, pp.76-83. Google Scholar; 8.Meng Fan-chao, Chu Dian-hui, and Zhan De-chen, ""A service quality-driven enterprise application software component assembly method,"" Computer Science,vol.36, no.7, pp.135-140, 2009. Google Scholar; 9.L. Bass, P. C. Clements, and R. Kazman, Software Architecture in Practice. Boston: Addison-Wesley Publishing, 1998. Google Scholar; 10.Lo JH, Huang CY, and Chen IY, ""Reliability assessment and sensitivity analysis of software reliability growth modeling based on software module structure,"" Journal of systems and software, vol.76, pp.3-13, 2005. CrossRef  Google Scholar"								2	IEEE		A software component assembly approach supporting credibility index quantitative evaluation	https://ieeexplore.ieee.org/document/6272857	IEEE	nan; Pages; Year; Bibtex
431	TrustSE	Software Testing, Software Quality and Trust in Software-Based Systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
432	TrustSE	Enhancing Trust ?€? Software Vulnerability Analysis Framework														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
433	TrustSE	A multi-property trust model for reconfiguring component software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
434	TrustSE	Assessing uncertainty in reliability of component-based software systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
435	TrustSE	Decision of Trusted Software Behavior	User's behaviors in information systems have different formats in different working modes, they mean users' intention actually. API callings, menu selections or requests are the familiar base elements of software behaviors, and different technologies are required to monitor and understand them. In information systems, it is necessary to insure that users' software behavior is trusted while processing. Client-Server mode is widely used in distributed computing system, the decision technology of trusted software behaviors from software of client meets the demand of forward defense in information systems. This paper puts forward the definition of software behavior and behavior set in client-server mode, software behavior is composed of requests from client, Request is the component of one or more software behaviors easy to be monitored. The expression of software behavior has been studied, and decision model of trusted software behavior has been built based on fuzzy matching algorithm, it can decide whether the processing software behavior is trusted or not.	Software; Servers; Monitoring; Information systems; Security; Unified modeling language; Computers; Information System; Definition Of Behavior; Logarithm; Access Control; Ongoing Behavior; Kind Of Threat; Client Requests; client-server mode; trusted software behavior; behavior set; fuzzy matching		2010 International Symposium on Intelligence Information Processing and Trusted Computing	https://doi.org/10.1109/IPTC.2010.153	"1.Yanwen Qu, Software Behavior(in Chinese), Beijing:Publishing House of Electronics industry, 2004. Google Scholar; 2.W. Gao, ""Forwardly Defensive Technology"", Software World, vol. 19, 2007. Google Scholar; 3.Tim Mccollum, ""Applications control: Software behavior monitoring offers another layer of protection to corporate information systems"", Computers & Auditing, 2002. Google Scholar; 4.Ivan Porres, Modeling and Analyzing Software Behavior in UML, 2001,  [online]  Available: http://citeseer.ist.psu.edu/porres01modeling.html. Google Scholar; 5.James F. Bowring, Software Behavior: Automatic Classification and its Applications, Georgia Institute of Technology, 2003. Google Scholar; 6.James F. Bowring, ""Active Learning for Automatic Classification of Software Behavior"",  [online]  Available: http://www.cc.gatech.edu/aristotle/Publications/Papers/p398-bowring.pdf. CrossRef  Google Scholar; 7.Software behavior pattern recognition and analysis. Google Scholar; 8.B. Liu, ""The Summarize of the Technique about Proactive Network Security Protection"", Proceedings of the 11th China Symposium on Computer Application in Mordern Science & Technology, pp. 9, 2003. Google Scholar; 9.Fred Cohen, ""Computer Viruses - Theory and Experiments"", Computers & Security, vol. 6, no. 1, pp. 22-35, 1987. CrossRef  Google Scholar; 10.LUO Guang-chun, ""Research of Software Measurement on Behavior"", Journal of University of Electronic Science and Technology of China, vol. 38, no. 3, 2009. Google Scholar; 11.Wu Biao, ""Design and Implementation of Files Tamper-Proofing Software Based on Process Bahavior Analysis"", Application of Computer system, pp. 11, 2009. Google Scholar; 12.Lin Chuang, Tian Liqin and Wang Yuanzuo, ""Research on user behavior trust in trustworthy network"", Journal of Computer Research and Development, vol. 12, pp. 2033-2043, 2008. Google Scholar; 13.M Nielsen and K Krukow, ""A bayesian model for event-based Trust"", Electronic Notes in Theoretical Computer Science (EN TCS), vol. 172, no. 4, pp. 499-521, 2007. CrossRef  Google Scholar; 14.E Dodonov and Mello RF, ""A model for automatic online process behavior extraction classification and prediction in heterogeneous distributed Systems"", CCGR ID 2007, pp. 899-904. Google Scholar; 15.Man Junfeng, ""Research on Trust Analysis and Trend Prediction of Software Interactive Behavior"", Journal of Chinese Computer Systems, vol. 30, no. 11, 2009. Google Scholar; 16.Tao Fen, Yin Zhiyi and Fu Jianming, ""Software Behavior Model Based on System Calls"", Computer Science, vol. 37, no. 4, 2010. Google Scholar"								2	IEEE		Decision of Trusted Software Behavior	https://ieeexplore.ieee.org/document/5663158	IEEE	nan; Authors; Pages; Year; Bibtex
436	TrustSE	Reference Model of Trustworthy Proof for Trusted Components	Nowadays, trusted components have become one of the most focused fields of the software engineer. Trustworthy proof is a very important part of the trusted components, and also an important basis of the trusted components evaluation and relating studies. This paper regards trusted components as the research object, comprehensively analyzes the correlation theories and techniques of the trustworthy proof, gives definition and character of the trustworthy proof, and then proposes a reference model of the trustworthy proof for trusted components life cycle. In the end, two methods about obtaining trustworthy proofs are presented.	Queueing analysis; Feedback; Network servers; Information technology; Conference management; Information management; Technology management; Engineering management; Chaotic communication; Failure analysis; Reference Model; Design Stage; User Satisfaction; Software Components; User Feedback; Security Proof; Kinds Of Components; trusted components; trustworthy proof; proof item; reference model	JiuSong He; Hong Hou; QinBao Song; KeGang Hao	2009 Second International Conference on Future Information Technology and Management Engineering	https://doi.org/10.1109/FITME.2009.39	"1.Andreas S. Andreou and Marios Tziakouris, ""A quality framework for developing and evaluating original"", ELSEVIER: Information and Software Technology, vol. 49, pp. 122-141, 2007. CrossRef  Google Scholar; 2.SHI Shuang-yuan and CHEN Zhao-de, ""Research on the Trustworthiness Evaluation of Business Components"", Comprter Engineering, vol. 31, no. 5, pp. 84-86, 2009. Google Scholar; 3.GUO Shu Hang, LAN Yu Qing, JIN Mao Zhong et al., ""Some Issue about Trusted Components Research"", Journal of Computer Science, vol. 5, pp. 243-246, 2007. Google Scholar; 4.SHI Shuang-yuan and CHEN Qi, Design by Contract in the Application of Trusted Business Component, vol. 28, no. 1, pp. 127-130, 2006. Google Scholar; 5.B Councill and G T Heineman, ""Component - Based Software Engineering and the Issue of Trust"", Proc of the 22nd Intl Conf on Software Engineering, pp. 661-664, 2000. View Article  Google Scholar; 6.B Meyer, ""The grand challenge of trusted components"", Software Engineering 2003 Proceedings 25th International Conference on, pp. 660-667, May 2003. View Article  Google Scholar; 7.David Aspinall and Christoph Luth, Proof Tool Integration with Proof General. Google Scholar; 8.""The group of software components standard for Ministry of Information Industry: Software components quality mode, V0.9"", 12 2004."								2	IEEE		Reference Model of Trustworthy Proof for Trusted Components	https://ieeexplore.ieee.org/document/5380913	IEEE	nan; Pages; Year; Bibtex
437	TrustSE	Third-Party Software's Trust Quagmire	Integrating software developed by third-party organizations into a larger system raises concerns about the software's quality, origin, functionality, security, and interoperability. Addressing these concerns requires rethinking the roles of software's principal supply-chain actors--vendor, assessor, and evaluator.	Software development; Computer security; Software measurement; Third party software developers; Software engineering; Third-party Software; Universe; Cybersecurity; Formal Methods; Probability Of Failure; Software Quality; Hardware Configuration; Malware; commercial-off-the-shelf software; COTS; software reliability; software measurement; software composability; component-based software engineering; CBSE; software liability; third-party software; independent verification and validation; software engineering	Jeffrey Voas; George Hurlburt	Computer	https://doi.org/10.1109/MC.2015.372	"1.S. McConnell, ""The Art Science and Engineering of Software Development"", IEEE Software, vol. 15, no. 1, pp. 118-20, 1998. View Article  Google Scholar; 2.""Test and Evaluation Management Guide"", Dec. 2012,  [online]  Available: www.dau.mil/publications/publicationsDocs/Test%20and%20Evaluation%20Management%20Guide,%20December%202012,%206th%20Edition%20-v1.pdf. Google Scholar; 3.K.R.M. Rao and D. Pant, ""A Threat Risk Modeling Framework for Geospatial Weather Information System: A DREAD based Study"", Int'l J. Advanced Computer Science and Applications, vol. 1, no. 3, pp. 20-28, 2010. Google Scholar; 4.V. Cortellessa, A. Di Marco and P. Inverardi, Model-Based Software Performance Analysis, Springer, 2011. CrossRef  Google Scholar; 5.J. Voas, ""Software's Secret Sauce: the '-ilities'"", IEEE Software, vol. 21, no. 6, pp. 2-3, 2004. View Article  Google Scholar; 6.J. Voas, ""Software Quality Unpeeled"", Crosstalk, pp. 27-30, June 2008. Google Scholar"	80- 87							2	IEEE		Third-Party Software's Trust Quagmire	https://ieeexplore.ieee.org/document/7368015	IEEE	nan; Year; Bibtex
438	TrustSE	Modeling trusted software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
439	TrustSE	Toward trustworthy software systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
440	TrustSE	Trusted components - 2nd Workshop on Trusted Components														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
441	TrustSE	Product Review Credibility Analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
442	TrustSE	A trusted model for service selection in trustworthy service composition														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
443	TrustSE	Sandboxing Adoption in Open Source Ecosystems	Sandboxing mechanisms allow developers to limit how much access applications have to resources, following the least-privilege principle. However, it's not clear how much and in what ways developers are using these mechanisms. This study looks at the use of Seccomp, Landlock, Capsicum, Pledge, and Unveil in all packages of four open-source operating systems. We found that less than 1\% of packages directly use these mechanisms, but many more indirectly use them. Examining how developers apply these mechanisms reveals interesting usage patterns, such as cases where developers simplify their sandbox implementation. It also highlights challenges that may be hindering the widespread adoption of sandboxing mechanisms.		Alhindi, Maysara; Hallett, Joseph	SESoS '24: Proceedings of the 12th ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems	https://doi.org/10.1145/3643655.3643878		13-20	"""@inproceedings{10.1145/3643655.3643878,
    author = ""Alhindi, Maysara and Hallett, Joseph"",
    title = ""Sandboxing Adoption in Open Source Ecosystems"",
    year = ""2024"",
    isbn = ""9798400705571"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3643655.3643878"",
    doi = ""10.1145/3643655.3643878"",
    abstract = ""Sandboxing mechanisms allow developers to limit how much access applications have to resources, following the least-privilege principle. However, it's not clear how much and in what ways developers are using these mechanisms. This study looks at the use of Seccomp, Landlock, Capsicum, Pledge, and Unveil in all packages of four open-source operating systems. We found that less than 1\\% of packages directly use these mechanisms, but many more indirectly use them. Examining how developers apply these mechanisms reveals interesting usage patterns, such as cases where developers simplify their sandbox implementation. It also highlights challenges that may be hindering the widespread adoption of sandboxing mechanisms."",
    booktitle = ""Proceedings of the 12th ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems"",
    pages = ""13-20"",
    numpages = ""8"",
    location = ""Lisbon, Portugal"",
    series = ""SESoS '24""
}
"""						2	ACM		Open source ecosystems	https://doi.org/10.1145/3643655.3643878	Association for Computing Machinery	nan; Keywords; References; Link
444	TrustSE	Trusted Software Architectural Modeling Method	This paper introduces a new process algebra based language with its powerful model-checking tools for trusted software architecture. It deals with incompatibility between two components due to a single interaction or the combination of several interactions and with the lack of interoperability among a set of components through architectural compatibility check and interoperability check relying on standard observational equivalences and weak bi-simulation equivalence.	Computer architecture; Software architecture; Algebra; Flowcharts; Software tools; Architecture description languages; Concurrent computing; Information processing; Paper technology; Computer science; Software Architecture; Model Checking; Lack Of Interoperability; Access Control; Language Model; Typical Architecture; Description Language; Access Request; trusted modeling; weak bi-simulation equivalence	Yang Jie; Zhou Yu-ren; Zheng Jin-bin	2009 Asia-Pacific Conference on Information Processing	https://doi.org/10.1109/APCIP.2009.193	"1.Sun Chang Ai, Jin Mao, Liu Chao, ""Software Architecture Review"", Software Journal 2002,Vol.7,No.13, pp: 1228-1237. CrossRef  Google Scholar; 2.Bell, D. E. and L. J. Lapadula, ""Secure Computer Systems: Mathematical Foundations"", Technical Report M74-244, The MITRE Corporation, Bedford, Massachusetts, May 1973. Google Scholar; 3.Colin Boyd, ""Security Architectures Using Formal Methods"", IEEE Journal on Selected Areas in Communications, June 1993, Vol. 11, No. 5. View Article  Google Scholar; 4.Bernardo, M., Ciancarini, P., and Donatiello, L., ""On the formalization of architectural types with process algebras"", In Proceedings of the 8th ACM International Symposium on the Foundations of Software Engineering (FSE-8), 2000, ACM, New York, pp: 140-148. CrossRef  Google Scholar"								2	IEEE		Trusted Software Architectural Modeling Method	https://ieeexplore.ieee.org/document/5197178	IEEE	nan; Pages; Year; Bibtex
445	TrustSE	TRUSTIE: Design of a Trustworthy Software Production Environment	Internet fundamentally changes the model of software development, the demands of software quality, and the process of software resource sharing. Internet- based environment for trustworthy software production is recognized as a key topic of software engineering in both academic and software industry. In this paper, the concepts and models of trustworthy software are introduced which dominate the design of Trustie environment. Trustie provides trustworthy software components sharing by an evolving software repository, and provides collaborative software development in a customizable development platform powered by a software production line framework. Finally the layered practices of research and application based on Trustie preliminarily demonstrate the effectiveness as well as the promising future of this environment.	Software; Production; Collaboration; Internet; Resource management; Software engineering; Programming; Production Environment; Software Product; Trustworthy Software; Modeling Software; Software Engineering; Software Components; Collaborative Development; Software Quality; Trustworthy Software; Production Environment; Collaboration Development	Huaimin Wang	2011IEEE 10th International Conference on Trust, Security and Privacy in Computing and Communications	https://doi.org/10.1109/TrustCom.2011.2	1.Fuqing Yang, Jian Lu, Hong Mei: Technical framework for Internetware: An architecture centric approach. Science in China Series F: Information Sciences 51(6):610-622, 2008. CrossRef  Google Scholar; 2.Ke Liu, Zhiguang Shan, Ji Wang, Jifeng He, et al, Overview on Major Research Plan of Trustworthy Software, Science Foundation in China, 22(3): 145-151, 2008. Google Scholar; 3.Huaimin Wang, Gang Yin, Trustworthy Software Evolution in Internet Era. Communications of China Computer Federation, 6(2): 28-36, 2010. Google Scholar								2	IEEE		TRUSTIE: Design of a Trustworthy Software Production Environment	https://ieeexplore.ieee.org/document/6120794	IEEE	nan; Pages; Year; Bibtex
446	TrustSE	Providing trusted components to the industry														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
447	TrustSE	Towards trusted composition in software design	In this paper, we investigate the issues on software composition at the design level. A formal framework for component composition, replacement, refinement in software design is proposed. This framework can help software designers to design software systems from existing design components and to rigorously analyze these systems. Thus, wrong design decisions, errors, and inconsistencies can be detected early in the development process.	Software design; Contracts; Software tools; Formal specifications; Independent component analysis; Software systems; Programming; Object oriented modeling; Computer science; Buildings; Design Software; Development Process; Design Of Components; Model Formulation; Large Systems; Software Development; Access Control; Implementation Phase; Level Of Implementation; Software Components; Model Checking; Formal Verification; Verification Techniques	Jing Dong; Sheng Yang	Eighth IEEE International Symposium on High Assurance Systems Engineering, 2004. Proceedings.	https://doi.org/10.1109/HASE.2004.1281772	1.G. Booch, J. Rumbaugh, and I. Jacobson. The Unified Modeling Language User Guide. Addison-Wesley, 1999. Google Scholar; 2.D. Dalcher. Disaster in London: The LAS Case Study. Proceedings of the IEEE International Conference on Engineering of Computer Based Systems, pages 41-52, 1999. View Article  Google Scholar; 3.J. Dong. Adding Pattern Related Information in Structural and Behavioral Diagrams. International Journal of Information and Software Technology (IST), Elsevier-Science, 2003 (to appear). CrossRef  Google Scholar; 4.J. Dong, P. Alencar, and D. Cowan. Ensuring Structure and Behavior Correctness in Design Composition. Proceedings of the IEEE International Conference on Engineering of Computer Based Systems, pp279-287, 2000. View Article  Google Scholar; 5.J. Dong, P. Alencar, and D. Cowan. A Behavioral Analysis and Verification Approach to Pattern-Based Design Composition. International Journal of Software and Systems Modeling, Springer-Verlag, 2003 (to appear). CrossRef  Google Scholar; 6.J. Dong, P. Alencar, and D. Cowan. A Formal Framework for Design Component Contracts. Proceedings of the IEEE International Conference on Information Reuse and Integration (IRI), pp53-60, Las Vegas, US, October 2003. View Article  Google Scholar; 7.E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns, Elements of Reusable Object-Oriented Software. Addison-Wesley Publishing Company, 1995. Google Scholar; 8.J.-M. Jezequel and B. Meyer. Design by Contract: The Lessons of Ariane. IEEE Computer, 30(1):129-130, 1997. View Article  Google Scholar; 9.R. Keller and R. Schauer. Design Components: Towards Software Composition at the Design Level. Proceedings of the International Conference on Software Engineering, pages 302-311, 1998. View Article  Google Scholar; 10.R. Milner, Communication and Concurrency. International Series in Computer Science. Prentice Hall, 1989. Google Scholar								2	IEEE		Towards trusted composition in software design	https://ieeexplore.ieee.org/document/1281772	IEEE	nan; Pages; Year; Bibtex
448	TrustSE	A new trusted software modeling method	The paper introduces the process algebra based modeling language and its powerful standard model-checking tools for trusted software architectures, which deals with incompatibility between two components due to a single interaction or the combination of several interactions and with the lack of interoperability among a set of components through architectural compatibility check and interoperability check relying on standard observational equivalences.	Algebra; Software architecture; Computer architecture; Software tools; Software safety; Concurrent computing; Flowcharts; Educational technology; Paper technology; Software standards; Language Model; Software Architecture; Lack Of Interoperability; Semantic; Interaction Analysis; Local Interactions; Access Control; Equivalency; Typical Architecture; Deadlock; Description Language; Access Request; Source Of Danger; process algebras; software architecture; trusted model	Yang Jie; Li Yi; Yu Min-cong	2009 4th International Conference on Computer Science & Education	https://doi.org/10.1109/ICCSE.2009.5228213	"1.SUNC A, Jin M, Liu C, ""Software architecture"" Journal of Software,2002,VoI.7,No.13, pp: 1228-1237.; 2.Bell, D. E. and L. 1. Lapadula, ""Secure computer systems: Mathematical foundations"", Technical Report M74-244, The MITRE Corporation, Bedford, Massachusetts, May 1973.; 3.Colin Boyd, ""Security architectures using formal methods"", IEEE Journal on Selected Areas in Communications, June 1993, Vol. 11, No. 5. View Article  Google Scholar; 4.Bernardo, M., Ciancarini, P., and Donatiello, L., ""On the formalization of architectural types with process algebras"", In Proceedings of the 8th ACM International Symposium on the Foundations of Software Engineering (FSE-8), 2000, ACM, New York, pp: 140-148. CrossRef  Google Scholar; 5.M. Bernardo, P. Ciancarini, L. Donatiello, ""Architecture families of software systems with process algebras."" ACM Transactions on Software Engineering and Methodology, October 2002, Vol.11, No.4. CrossRef  Google Scholar; 6.P. Grunbacher, A. Egyed, N. Medvidovic, ""Reconciling software requirements and architectures: The CBSP Approach"", Proceedings of the 5th International Symposium on Requirements Engineering (RE'01), IEEE CS Presss2001, pp: 202-211. View Article  Google Scholar"								2	IEEE		A new trusted software modeling method	https://ieeexplore.ieee.org/document/5228213	IEEE	nan; Pages; Year; Bibtex
449	TrustSE	Autonomic Trust Management for a Component-Based Software System														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
450	TrustSE	Barriers to adoption of software reuse: A qualitative study														2						
451	TrustSE	Evaluation and Application of Bounded Generalized Pareto Analysis to Fault Distributions in Open Source Software	In general, one of the most important aspects of software development and project management is how to make predictions and assessments of quality and reliability for developed products. Project data usually will be systematically collected and analyzed during the process of software development. Practically, it would be helpful if developers could identify the most error-prone modules early so that they can optimize testing-resource allocation and increase fault detection effectiveness accordingly. In the past, many research studies revealed the applicability of the Pareto principle to software systems, and some of them reported that the Pareto distribution (PD) model can be used to predict the fault distribution of software. In this paper, a special form of the Generalized PD model, named the Bounded Generalized Pareto distribution (BGPD) model, is further proposed to investigate the fault distributions of Open Source Software (OSS). It can be seen that the BGPD model eliminates the issue which occurred in the classical PD model. Three methods of parameter estimation will be presented, and related experiments are performed based on real OSS failure data. Experimental results show that the BGPD model presents high fitness to the actual failure data of OSS. Finally, the possibility of using early limited fault data to predict the later software fault distribution is also studied. Numerical results indicate that the BGPD model can be trusted to consistently produce accurate estimates of fault predictions during the early stages of development. The findings can provide an effective foundation for managing the necessary activities of software development and testing.	Predictive models; Mathematical model; Data models; Open source software; Cascading style sheets; Software reliability; Open-source Software; Distribution Of Defects; Pareto Analysis; Model Parameters; Mean Square Error; Parameter Estimates; Causal Effect; Maximum Likelihood Estimation; Quality Assurance; Distribution Models; System Software; Software Development; Processing Software; Shape Parameter; Least Squares Estimation; Method Of Moments; Weibull Distribution; Software Testing; Software Defect; Parameter Estimation Method; Open Source Software Projects; Kolmogorov-Smirnov Test; Internal Validity; Value Of Model; Mozilla Firefox; Model Performance; Magnitude Of Error; Software Quality; Heavy-tailed; Hazard Rate; Fault distribution; open source software; Pareto principle; software quality; software reliability; software testing; Weibull model	Chin-Yu Huang; Chih-Song Kuo; Shao-Pu Luan	IEEE Transactions on Reliability	https://doi.org/10.1109/TR.2013.2285056	"1.M. R. Lyu, Handbook of Software Reliability Engineering, USA, NY, New York:McGraw-Hill, 1996. Google Scholar; 2.X. Li, Y. F. Li, M. Xie and S. H. Ng, ""Reliability analysis and optimal version-updating for opensource software"", Inf. Software Technol., vol. 53, no. 9, pp. 929-936, Sept. 2011. CrossRef  Google Scholar; 3.J. D. Musa, A. Iannino and K. Okumoto, Software Reliability Measurement Prediction and Application, USA, NY, New York:McGraw-Hill, 1987. Google Scholar; 4.M. Xie, Software Reliability Modeling, USA, NY, New York:World Scientific Publishing Company, 1991. CrossRef  Google Scholar; 5.C. Y. Huang, M. R. Lyu and S. Y. Kuo, ""A unified scheme of some non-homogenouspoisson process models for software reliability estimation"", IEEE Trans. Software Eng., vol. 29, no. 3, pp. 261-269, Mar. 2003. View Article  Google Scholar; 6.E. O. Costa, A. T. R. Pozo and S. R. Vergilio, ""A genetic programming approachfor software reliability modeling"", IEEE Trans. Rel., vol. 59, no. 1, pp. 222-230, Sep. 2012. View Article  Google Scholar; 7.C. Y. Huang and C. T. Lin, ""Analysis of software reliabilitymodeling considering testing compression factor and failure-to-fault relationship"", IEEE Trans. Comput., vol. 59, no. 2, pp. 283-288, Feb. 2010. View Article  Google Scholar; 8.J. D. Musa and K. Okumoto, ""A comparison of time domainsfor software reliability models"", J. Syst. Software, vol. 4, no. 4, pp. 277-287, Nov. 1984. CrossRef  Google Scholar; 9.P. K. Kapur, H. Pham, S. Anand and K. Yadav, ""A unified approach for developing software reliability growthmodels in the presence of imperfect debugging and error generation"", IEEE Trans. Rel., vol. 60, no. 1, pp. 331-340, Mar. 2011. View Article  Google Scholar; 10.C. Y. Huang and M. R. Lyu, ""Estimation and analysis ofsome generalized multiple change-point software reliability models"", IEEE Trans. Rel., vol. 60, no. 2, pp. 498-514, Jun. 2011. View Article  Google Scholar; 11.E. N. Adams, ""Optimizing preventive serviceof software products"", IBM J. Res. Develop., vol. 28, no. 1, pp. 2-14, Jan. 1984. View Article  Google Scholar; 12.A. Endres, ""An analysis of errors and theircauses in system programs"", IEEE Trans. Software Eng., vol. SE-1, no. 2, pp. 140-149, Jun. 1975. View Article  Google Scholar; 13.T. J. Ostrand and E. J. Weyuker, ""The distribution of faultsin a large industrial software system"", Proc. 2002 ACM/SIGSOFT Int. Symp. Software Testing Anal. (ISSTA 2002), pp. 55-64, 2002-Jul. CrossRef  Google Scholar; 14.M. K. Daskalantonakis, ""A practical view of softwaremeasurement and implementation experiences within motorola (1001-1004)"", IEEE Trans. Software Eng., vol. 18, no. 11, pp. 998-1010, Nov. 1992. View Article  Google Scholar; 15.C. S. Kuo and C. Y. Huang, ""A study of applying the boundedgeneralized pareto function to the analysis of software fault distribution"", Proc. 2010 IEEE Int. Conf. Ind. Eng. Eng. Manag. (IEEM 2010), pp. 611-615, 2010-Dec. View Article  Google Scholar; 16.N. Fenton and N. Ohlsson, ""Quantitative analysis of faultsand failures in a complex software system"", IEEE Trans. Software Eng., vol. 26, no. 8, pp. 797-814, Aug. 2000. View Article  Google Scholar; 17.C. Andersson and P. Runeson, ""A replicated quantitative analysisof fault distributions in complex software systems"", IEEE Trans. Software Eng., vol. 33, no. 5, pp. 273-286, May 2007. View Article  Google Scholar; 18.M. Hamill and K. Goseva-Popstojanova, ""Common trends in software faultsand failure data"", IEEE Trans. Software Eng., vol. 35, no. 4, pp. 484-496, Jul.-Aug. 2009. View Article  Google Scholar; 19.F. Hunt and P. Johnson, ""On the pareto distributionof sourceforge projects"", Proc. Int. Workshop Open Source Software Develop., pp. 122-129, 2002-Feb. Google Scholar; 20.P. L. Li, M. Shaw, J. D. Herbsleb, B. K. Ray and P. Santhanam, ""Empirical evaluation of defect projectionmodels for widely-deployed production software systems"", Proc. 12th ACM SIGSOFT Int. Symp. Foundations Software Eng. (SIGSOFT '04/FSE-12), pp. 263-272, 2004-Nov. CrossRef  Google Scholar; 21.G. Concas, M. Marchesi, A. Murgia, R. Tonelli and I. Turnu, ""On the distribution of bugs in the eclipsesystem"", IEEE Trans. Software Eng., vol. 37, no. 6, pp. 872-877, Nov./Dec. 2011. View Article  Google Scholar; 22.S. H. Kan, Metrics Models Software Quality Eng., USA, MA, Boston:Addison-Wesley, 2003. Google Scholar; 23.Y. Zhou and J. Davis, ""Open source software reliability model:An empirical approach"", Proc. 5th Workshop Open Source Software Eng. Conjunction 27th ACM/IEEE Int. Conf. Software Eng. (ICSE'05), pp. 67-72, 2005-May. CrossRef  Google Scholar; 24.H. Zhang, ""On the distribution of softwarefaults"", IEEE Trans. Software Eng., vol. 34, no. 2, pp. 301-302, Mar./Apr. 2008. View Article  Google Scholar; 25.D. N. P. Murthy, M. Xie and R. Jiang, Weibull Models, USA, NJ, Hoboken:Wiley, 2003. CrossRef  Google Scholar; 26.J. Pickands, ""Statistical inference usingextreme order statistics"", Annals Statist., vol. 3, no. 1, pp. 119-131, 1975. CrossRef  Google Scholar; 27.Accessed on August 15 2012. Google Scholar; 28.K. Kanoun, M. Martini and J. Souza, ""A method for software reliability analysisand prediction application to the TROPICO-R Switching System"", IEEE Trans. Software Engineering, vol. 17, no. 4, pp. 334-344, Apr. 1991. View Article  Google Scholar; 29.P. L. Li, J. Herbsleb and M. Shaw, ""Forecasting field defect rates using a combinedtime-based and metrics-based approach: A case study of OpenBSD"", Proc. 16th IEEE Int. Symp. Software Rel. Eng. (ISSRE 2005), pp. 193-202, 2005-Nov. View Article  Google Scholar; 30.K. Holden, D. A. Peel and J. L. Thompson, Economic Forecasting: An Introduction, U.K., Cambridge:Cambridge Univ. Press, 1991. CrossRef  Google Scholar"	309- 319							2	IEEE		Evaluation and Application of Bounded Generalized Pareto Analysis to Fault Distributions in Open Source Software	https://ieeexplore.ieee.org/document/6631477	IEEE	nan; Year; Bibtex
452	TrustSE	Trust and vulnerability in open source software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
453	TrustSE	Trustworthy Software: lessons from `goto fail' & Heartbleed bugs														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
454	TrustSE	Trusted software supply chain	Modern software delivery happens in a geographically distributed environment and resembles like a supply chain - consists of various participants, involves various phases, needs adherence to multiple regulations and needs to maintain artifacts' integrity throughout the delivery phases. This shift in software development brings along with it several challenges ranging from communication of information/knowledge, coordination and control of teams, activities adhering to goals and policies and artifacts adhering to quality, visibility, and management. With the dispersion of centralized control over software delivery to autonomous delivery organizations, the variety of processes and tools used turns transparency into opacity as autonomous teams use different software processes, tools, and metrics, leading to issues like ineffective compliance monitoring, friction prone coordination, and lack of provenance, and thereby trust. In this paper, we present a delivery governance framework based on distributed ledger technology that uses a notion of 'software telemetry' to record data from disparate delivery partners and enables compliance monitoring and adherence, provenance and traceability, transparency, and thereby trust.		Singi, Kapil; Bose, R. P. Jagadeesh Chandra; Podder, Sanjay; Burden, Adam P.	ASE '19: Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering	https://doi.org/10.1109/ASE.2019.00141		1212-1213	"""@inproceedings{10.1109/ASE.2019.00141,
    author = ""Singi, Kapil and Bose, R. P. Jagadeesh Chandra and Podder, Sanjay and Burden, Adam P."",
    title = ""Trusted software supply chain"",
    year = ""2020"",
    isbn = ""9781728125084"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ASE.2019.00141"",
    doi = ""10.1109/ASE.2019.00141"",
    abstract = ""Modern software delivery happens in a geographically distributed environment and resembles like a supply chain - consists of various participants, involves various phases, needs adherence to multiple regulations and needs to maintain artifacts' integrity throughout the delivery phases. This shift in software development brings along with it several challenges ranging from communication of information/knowledge, coordination and control of teams, activities adhering to goals and policies and artifacts adhering to quality, visibility, and management. With the dispersion of centralized control over software delivery to autonomous delivery organizations, the variety of processes and tools used turns transparency into opacity as autonomous teams use different software processes, tools, and metrics, leading to issues like ineffective compliance monitoring, friction prone coordination, and lack of provenance, and thereby trust. In this paper, we present a delivery governance framework based on distributed ledger technology that uses a notion of 'software telemetry' to record data from disparate delivery partners and enables compliance monitoring and adherence, provenance and traceability, transparency, and thereby trust."",
    booktitle = ""Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering"",
    pages = ""1212-1213"",
    numpages = ""2"",
    location = ""San Diego, California"",
    series = ""ASE '19""
}
"""						2	ACM		Trusted Software Supply Chain	https://doi.org/10.1109/ASE.2019.00141	IEEE Press	nan; Keywords; References; Link
455	TrustSE	Research on Management Scheme of Trusted Application Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
456	TrustSE	Position Statement: Software Testing, Software Quality and Trust in Software-Based Systems	Software-Based systems cover a very wide range of application domains. They include industrial applications, e.g. rail systems, building management systems, fire safety systems, industrial control systems, Energy applications to support generation, transmission, measurement, control, and numerous Healthcare and Medical applications just to name a few. The Testing requirements and Quality challenges for individual systems are very different.	Software testing; Medical services; Companies; Documentation; Software quality; Software Testing; Software Quality; Software-based System; Open-source Software; Rate Of Return; Medical Applications; Range Of Domains; Software Defect; Wide Range Of Domains; External Entities; Rail System; Industrial Control Systems; Internal Software; Scope Of Testing; 3rd Party	Rajesh Subramanyan	2012 IEEE 36th Annual Computer Software and Applications Conference	https://doi.org/10.1109/COMPSAC.2012.108									2	IEEE		Position Statement: Software Testing, Software Quality and Trust in Software-Based Systems	https://ieeexplore.ieee.org/document/6340151	IEEE	nan; References; Pages; Year; Bibtex
457	TrustSE	Trust services: a framework for service-based solutions														2						
458	TrustSE	Toward a Formalism for Conservative Claims about the Dependability of Software-Based Systems	"In recent work, we have argued for a formal treatment of confidence about the claims made in dependability cases for software-based systems. The key idea underlying this work is ""the inevitability of uncertainty"": It is rarely possible to assert that a claim about safety or reliability is true with certainty. Much of this uncertainty is epistemic in nature, so it seems inevitable that expert judgment will continue to play an important role in dependability cases. Here, we consider a simple case where an expert makes a claim about the probability of failure on demand (pfd) of a subsystem of a wider system and is able to express his confidence about that claim probabilistically. An important, but difficult, problem then is how such subsystem (claim, confidence) pairs can be propagated through a dependability case for a wider system, of which the subsystems are components. An informal way forward is to justify, at high confidence, a strong claim, and then, conservatively, only claim something much weaker: ""I'm 99 percent confident that the pfd is less than 10-5, so it's reasonable to be 100 percent confident that it is less than 10-3."" These conservative pfds of subsystems can then be propagated simply through the dependability case of the wider system. In this paper, we provide formal support for such reasoning."	Uncertainty; Software reliability; Phase frequency detector; Battery powered vehicles; Software systems; Software safety; Programming; Power engineering computing; Reliability engineering; Power engineering and energy; Dependability; Software-based System; Probability Of Failure; Expert Judgment; Wider System; Probability Density Function; Conservation Value; Software Engineering; Probability Mass; Subjective Probability; Nuclear Industry; Epistemic Uncertainty; Sufficient Confidence; Number Of Demands; Aleatoric Uncertainty; Original Claim; Software Reliability; Evidence Of Work; Posterior Beliefs; Improper Function; Bayesian probability; safety case; software reliability.	Peter Bishop; Robin Bloomfield; Bev Littlewood; Andrey Povyakalo; David Wright	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2010.67	"1.P.G. Bishop and R.E. Bloomfield, ""The SHIP Safety Case"", Proc. 14th IFAC Conf. Computer Safety Reliability and Security, 1995. CrossRef  Google Scholar; 2.R.E. Bloomfield, P.G. Bishop, C.C.M. Jones and P.K.D. Froome, ASCADAdelard Safety Case Development Manual., 1998. Google Scholar; 3.J. Gorski, ""Trust CaseA Case for Trustworthiness of IT Infrastructures"", Proc. NATO Advanced Research Workshop Cyberspace Security and Defence: Research Issues, 2004. Google Scholar; 4.T.P. Kelly and R.A. Weaver, ""The Goal Structuring NotationA Safety Argument Notation"", Proc. Workshop Assurance Cases Dependable Systems and Networks, 2004. Google Scholar; 5.J. Penny, A. Eaton, P.G. Bishop and R.E. Bloomfield, ""The Practicalities of Goal-Based Regulation"", Proc. Ninth Safety-Critical Systems Symp., 2001. CrossRef  Google Scholar; 6.SW01: Regulatory Objective for Software Safety Assurance in Air Traffic Service Equipment., 2001. Google Scholar; 7.Def-Stan 00-56 Issue 4: Safety Management Requirements for Defence Systems., 2007. Google Scholar; 8.R. Bloomfield and B. Littlewood, ""Multi-Legged Arguments: The Impact of Diversity Upon Confidence in Dependability Arguments"", Proc. Intl Conf. Dependable Systems and Networks, 2003. View Article  Google Scholar; 9.R. Bloomfield and B. Littlewood, ""Confidence: Its Role in Dependability Cases for Risk Assessment"", Proc. Intl Conf. Dependable Systems and Networks, 2007. View Article  Google Scholar; 10.B. Littlewood and D. Wright, ""The Use of Multi-Legged Arguments to Increase Confidence in Safety Claims for Software-Based Systems: A Study Based on a BBN of an Idealized Example"", IEEE Trans. Software Eng., vol. 33, no. 5, pp. 347-365, May 2007. View Article  Google Scholar; 11.W.L. Oberkampf and J.C. Helton, ""Alternative Representations of Epistemic Uncertainty"", Reliability Eng. and System Safety, 2004. Google Scholar; 12.B. Littlewood and D. Wright, ""Some Conservative Stopping Rules for the Operational Testing of Safety-Critical Software"", IEEE Trans. Software Eng., vol. 23, no. 11, pp. 673-683, Nov. 1997. View Article  Google Scholar; 13.D.L. Parnas, A.J.v. Schowan and S.P. Kwan, ""Evaluation of Safety-Critical Software"", Comm. ACM, vol. 33, no. 6, pp. 636-648, 1990. CrossRef  Google Scholar; 14.R.M. Cooke, ""Expert Judgement"", Reliability Eng. and System Safety, vol. 93, no. 5, 2008. CrossRef  Google Scholar; 15.D.M. Hunns and N. Wainwright, ""Software-Based Protection for Sizewell B: The Regulators Perspective"", Proc. Nuclear Eng. Intl., pp. 38-40, 1991-Sept. Google Scholar; 16.J. May, G. Hughes and A.D. Lunn, ""Reliability Estimation from Appropriate Testing of Plant Protection Software"", Software Eng. J., vol. 10, no. 6, pp. 206-218, 1995. CrossRef  Google Scholar; 17.The Use of Computers in Safety-Critical Applications., 1998. Google Scholar; 18.Safety Assessment Principles for Nuclear Facilities., 2006. Google Scholar; 19.IEC61508: Functional Safety of Electrical Electronic and Programmable Electronic Safety Related Systems Parts 1 to 7., 2000. Google Scholar; 20.Def-Stan 00-56 Issue 2: Hazard Analysis and Safety Classification of the Computer and Programmable Electronic Systems Elements of Defence Equipment., 1996. Google Scholar; 21.R.W. Butler and G.B. Finelli, ""The Infeasibility of Quantifying the Reliability of Life-Critical Real-Time Software"", IEEE Trans Software Eng., vol. 19, no. 1, pp. 3-12, Jan. 1993. View Article  Google Scholar; 22.B. Littlewood and L. Strigini, ""Validation of Ultra-High Dependability for Software-Based Systems"", Comm. ACM, vol. 36, no. 11, pp. 69-80, 1993. CrossRef  Google Scholar; 23.Software Considerations in Airborne Systems and Equipment Certification DO-178B., 1992. Google Scholar; 24.G. Guiho and C. Hennebert, ""SACEM Software Validation"", Proc. 12th Intl Conf. Software Eng., 1990. View Article  Google Scholar"	708- 717							2	IEEE		Toward a Formalism for Conservative Claims about the Dependability of Software-Based Systems	https://ieeexplore.ieee.org/document/5492693	IEEE	nan; Year; Bibtex
459	TrustSE	Importance Measures for a Modular Software System (Short Paper)														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
460	TrustSE	Software reliability with architectural uncertainties	Architecture-based software reliability analysis can provide early identification of critical components which can then be targeted for cost-effective reliability improvement of the application. However, an important challenge in conducting this analysis early in the life cycle is that it is nearly impossible to estimate the architectural and component parameters with certainty. The issue of estimating software application reliability in the presence of uncertain component reliabilities has been addressed in the previous research. In this paper we consider the estimation of software reliability in the presence of architectural uncertainties. We present a methodology to estimate the confidence levels in the architectural parameters using limited testing or simulation data based on the theory of confidence intervals of the multinomial distribution. The sensitivity of the system reliability to uncertain architectural parameters can then be quantified by varying these parameters within their confidence intervals. The illustration of the methodology using a case study indicates that the impact of the uncertainty in a given architectural parameter on the overall application reliability is determined by the inherent branching behavior of the application and the component reliabilities.	Software reliability; Uncertainty; Application software; Software systems; Availability; Computer architecture; Computer science; Reliability engineering; Life estimation; Testing; Software Reliability; Confidence Interval; Confidence Level; System Reliability; Software Applications; Impact Of Uncertainty; Component Parameters; Multinomial Distribution; Architecture Parameters; Component Reliability; Inherent Behavior; Application Behavior; Transition Probabilities; System Architecture; Impact Of Parameters; Behavioral Components; Design Phase; Confidence Intervals For Estimates; European Space Agency; Trace Data; Discrete-time Markov Chain; Application Components; High Level Of Reliability	Lance Fiondella; Swapna S. Gokhale	2008 IEEE International Symposium on Parallel and Distributed Processing	https://doi.org/10.1109/IPDPS.2008.4536436	"1.W. Farr, Handbook Of Software Reliability Engineering. New York, NY: McGraw-Hill, 1996, chapter Software reliability modeling survey, pp. 71-117.; 2.K. Goseva-Popstojanova and K. Trivedi, ""Architecture based approach to quantitative assessment of software systems,"" Performance Evaluation, vol. 45, no. 2-3, pp. 179-204, June 2001. CrossRef  Google Scholar; 3.S. Gokhale, ""Architecture-based software reliability analysis: Overview and limitations,"" IEEE Trans. Dependable Secure Comput., vol. 4, no. 1, pp. 32-40, January-March 2007. View Article  Google Scholar; 4.J. Musa, G. Fuoco, N. Irving, D. Kropfl, and B. Juhlin, Handbook Of Software Reliability Engineering. New York, NY: McGraw-Hill, 1996, chapter The operational profile, pp. 167-216.; 5.S. Gokhale, ""Quantifying the variance in application reliability,"" in Proc. of Pacific Rim Intl Symposium on Dependable Computing, Tahiti,March 2004, pp. 113-121. View Article  Google Scholar; 6.S. Kamavaram and K. Goseva-Popstojanova, ""Sensitivity of software usage to changes in the operational profile,"" in 28th NASA/IEEE Software Engineering Workshop, Greenbelt, MD, December 2003, pp. 157-164. View Article  Google Scholar; 7.K. Goseva-Popstojanova and S. Kamavaram, ""Assessing uncertainty in reliability of component-based software systems,"" in Proc. of Fourteenth Intl. Symposium on Software Reliability Engineering, Denver, CO, November 2003, pp. 307-320. View Article  Google Scholar; 8.J. Kemeny and J. Snell, Finite Markov Chains. Princeton, NJ: D. Van Nostrand Company, 1960. Google Scholar; 9.R. Cheung, ""A user-oriented software reliability model,"" IEEE Trans. Software Eng., vol. 6, no. 2, pp. 118-125, March 1980. View Article  Google Scholar; 10.N. Johnson, S. Kotz, and N. Balakrishnan, Discrete Multivariate Distributions, ser. Wiley Series in Probability and Statistics. New York, NY: John Wiley  Sons, Inc., 1997. Google Scholar; 11.J. Bromaghin, ""Sample size determination for interval estimation of multinomial probabilities,"" The American Statistician, vol. 47, no. 3, pp. 203-206, August 1993. CrossRef  Google Scholar; 12.J. Correa, ""Interval estimation of the parameters of the multinomial distribution,"" Statistics on the Internet, vol. http://interstat.statjournals.net, October, 2001.; 13.L. Leemis and K. Trivedi, ""A comparison of approximate interval estimators for the bernoulli parameter,"" The American Statistician, vol. 50, no. 1, pp. 63-68, February 1996. CrossRef  Google Scholar; 14.C. Blyth, ""Approximate binomial confidence limits,"" Journal of the American Statistical Association, vol. 81, no. 395, pp. 843-855, September 1986. CrossRef  Google Scholar; 15.G. Casella and R. Berger, Statistical Inference, 2nd ed. New York, NY: Thomson, 2002. Google Scholar; 16.S. Gokhale, J. Horgan, and K. Trivedi, Book on Architecting Dependable Systems, ser. Lecture Notes in Computer Science. Springer-Verlag, July 2003, ch. Specification-level integration of simulation and dependability analysis, pp. 245-266. CrossRef  Google Scholar; 17.S. Gokhale, W. Wong, J. Horgan, and K. Trivedi, ""An analytical approach to architecture-based software performance and reliability prediction,"" Performance Evaluation, vol. 58, no. 4, pp. 391-412, December 2004. CrossRef  Google Scholar; 18.W. Wong and A. Mathur, ""Fault detection effectiveness of mutation and data flow testing,"" Software Quality Journal, vol. 4, pp. 69-83, 1995. CrossRef  Google Scholar"								2	IEEE		Software reliability with architectural uncertainties	https://ieeexplore.ieee.org/document/4536436	IEEE	nan; Pages; Year; Bibtex
461	TrustSE	Measuring Software Assurance														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
462	TrustSE	Software reliability estimation under certainty: generalization of the method of moments	Traditionally, reliability models of component-based software systems compute the point estimate of system reliability by plugging point estimates of unknown parameters into the model. These models discard the uncertainty of the parameters, that is, do not attempt to answer the question how parameters uncertainties affect the estimates of system reliability. In this paper we focus on uncertainty analysis in software reliability based on method of moments. In particular, we present a generalization of our earlier work that allows us to consider the uncertainty in the operational profile (i.e., the way software is used) in addition to the uncertainty in components failure behavior (i.e., component reliabilities) considered earlier. The method of moments is an approximate analytical method that allows us to generate system reliability moments based on (1) the knowledge of software architecture reflected in the expression of system reliability as a function of component reliabilities and frequencies of control transfer between components, (2) estimates of the moments of components reliabilities, and (3) estimates of the moments of probabilities of control transfer between components. Further, we apply the method of moments on two case studies and discuss its advantages and disadvantages.	Software reliability; Moment methods; Uncertainty; Frequency estimation; Software systems; Parameter estimation; Uncertain systems; Control systems; Computer science; Software architecture; Method Of Moments; Software Reliability; Estimation Method; Point Estimates; System Software; System Reliability; Uncertainty Analysis; Software Architecture; Component Reliability; Knowledge Of Architecture; Point Estimates Of Parameters; Monte Carlo Simulation; Bayesian Model; Transition Probabilities; Uncertainty Estimation; Sources Of Uncertainty; Taylor Series; Term In Equation; Taylor Expansion; Probability Of Failure; Discrete-time Markov Chain; High-order Approximation; Transition Probability Matrix; Design Documents; Independent Random Variables; Hypothetical Example; Expansion Terms; Software Components; European Space Agency; Software Defect	K. Goseva-Popstojanova; S. Kamavaram	Eighth IEEE International Symposium on High Assurance Systems Engineering, 2004. Proceedings.	https://doi.org/10.1109/HASE.2004.1281745	"1.T. Adams, ""Total Variance Approach to Software Reliability Estimation"", IEEE Trans. Software Engineering, vol. 22, no. 9, pp. 687-688, 1996. View Article  Google Scholar; 2.M. Chen, A. P. Mathur and V. J. Rego, ""A Case Study to Investigate Sensitivity of Reliability Estimates to Errors in Operational Profile"", 5th Intl Symp. Software Reliability Engineering, pp. 276-281, 1994. View Article  Google Scholar; 3.R. C. Cheung, ""A User-Oriented Software Reliability Model"", IEEE Trans. Software Engineering, vol. 6, no. 2, pp. 118-125, 1980. View Article  Google Scholar; 4.W. Farr, ""Software Reliability Modeling Survey"" in Handbook of Software Reliability Engineering, McGraw-Hill, pp. 71-117, 1996. Google Scholar; 5.S. Gokhale and K. Trivedi, ""Reliability Prediction and Sensitivity Analysis Based on Software Architecture"", 13th Intl Symp. Software Reliability Engineering, pp. 64-75, 2002. View Article  Google Scholar; 6.K. Go A!eva-Popstojanova and K. S. Trivedi, ""Architecture-Based Approach to Reliability Assessment of Software System"", Performance Evaluation, vol. 45, no. 2-3, pp. 179-204, 2001. CrossRef  Google Scholar; 7.K. Go A!eva-Popstojanova and K. S. Trivedi, ""Architecture Based Approaches to Software Reliability Prediction"", International Journal Computers  Mathematics with Applications, vol. 46, pp. 1023-1036, 2003. CrossRef  Google Scholar; 8.K. Go A!eva-Popstojanova, A. P. Mathur and K. S. Trivedi, ""Comparison of Architecture-Based Software Reliability Models"", 12th Intl Symp. Software Reliability Engineering, pp. 22-31, 2001. View Article  Google Scholar; 9.K. Go A!eva-Popstojanova and S. Kamavaram, ""Assessing Uncertainty in Reliablity of Component-Based Software Systems"", 14th Intl Symp. Software Reliability Engineering, pp. 307-320, Nov. 2003. View Article  Google Scholar; 10.K. Go A!eva-Popstojanova, A. Hassan, A. Guedem, W. Abdelmoez, D. Nassar, H. Ammar, et al., ""Architectural-Level Risk Analysis using UML"", IEEE Trans. on Software Engineering, vol. 29, no. 10, pp. 946-960, 2003. View Article  Google Scholar; 11.P. S. Jackson, R. W. Hockenbury and M. L. Yeater, ""Uncertainty Analysis of System Reliability and Availability Assessment"", Nuclear Engineering and Design, vol. 68, pp. 5-29, 1981. CrossRef  Google Scholar; 12.K. Kanoun and T. Sabourin, ""Software Dependability of a Telephone Switching System"", 17th Intl Symp. on Fault-Tolerant Computing, pp. 236-241, 1987. Google Scholar; 13.Y-W Leung, ""Software Reliability Allocation under an Uncertain Operational Profile"", Journal of the Operational Research Society, vol. 48, no. 1997, pp. 401-411. CrossRef  Google Scholar; 14.B. Littlewood and D. Wright, ""Some Conservative Stopping Rules for Operational Testing of Safety - Critical Software"", IEEE Trans. Software Engineering, vol. 23, no. 11, pp. 673-683, 1997. View Article  Google Scholar; 15.K. W. Miller, L. J. Morell, R. E. Noonan, S. K. Park, D. M. Nikol, B. W. Murrill, et al., ""Estimating the Probability of Failure when Testing Reveals no Failures"", IEEE Trans. Software Engineering, vol. 18, no. 1, pp. 33-43, 1992. View Article  Google Scholar; 16.J. D. Musa, ""Operational Profiles in Software Reliability Engineering"", IEEE Software, vol. 10, pp. 14-32, 1993. View Article  Google Scholar; 17.J. D. Musa, ""Sensitivity of Field Failure Intensity to Operational Profile Errors"", 5th Intl Symp. Software Reliability Engineering, pp. 334-337, 1994. View Article  Google Scholar; 18.E. Nelson, ""A Statistical Bases for Software Reliability"", TRW-SS-73-02 TRW Software series 1973. Google Scholar; 19.A. Pasquini, A. N. Crespo and P. Matrella, ""Sensitivity of Reliability - Growth Models to Operational Profile Errors vs. Testing Accuracy"", IEEE Trans. Reliability, vol. 45, no. 4, pp. 531-540, 1996. View Article  Google Scholar; 20.C. V. Ramamoorthy and F. B. Bastani, ""Software Reliability - Status and Perspectives"", IEEE Trans. on Software Engineering, vol. 8, no. 4, pp. 354-371, 1982. View Article  Google Scholar; 21.K. Sayre and J. Poore, ""A Reliability Estimator for Model Based Software Testing"", 13th Intl Symp. Software Reliability Engineering, pp. 53-63, 2002. View Article  Google Scholar; 22.K. Siegrist, ""Reliability of System with Markov Transfer of Control"", IEEE Trans. Reliability, vol. 14, no. 7, pp. 1409-1053, 1988. View Article  Google Scholar; 23.H. Singh, V. Cortellessa, B. Cukic, E. Guntel and V. Bharadwaj, ""A Bayesian Approach to Reliability Prediction and Assessment of Component Based Systems"", 12th Intl Symp. Software Reliability Engineering, pp. 12-21, 2001. View Article  Google Scholar; 24.C. Smidts, D. Sova and G. K. Mandela, ""An Architectural Model for Software Reliability Quantification"", 8th Intl Symp. Software Reliability Engineering, pp. 324-335, 1997. View Article  Google Scholar; 25.C. Smidts and D. Sova, ""An Architectural Model for Software Reliability Quantification"", Reliability Engineering and System Safety, vol. 64, pp. 279-290, 1999. CrossRef  Google Scholar; 26.J. M. Voas, ""Certifying Off-the-shelf Software Components"", IEEE Computer, vol. 31, no. 6, pp. 53-59, 1998. View Article  Google Scholar; 27.S. M. Yacoub, B. Cukic and H. H. Ammar, ""Scenario-Based Reliability Analysis of Component-Based Software"", 10th Intl Symp. Software Reliability Engineering, pp. 22-31, 1999. View Article  Google Scholar; 28.L. Yin, M. A. J. Smith and K. S. Trivedi, ""Uncertainty Analysis in Reliability Modeling"", 2001 Annual Reliability and Maintainability Symposium, pp. 229-234, 2001. Google Scholar"								2	IEEE		Software reliability estimation under certainty: generalization of the method of moments	https://ieeexplore.ieee.org/document/1281745	IEEE	nan; Pages; Year; Bibtex
463	TrustSE	"Is My Software ""Good Enough"" to Release? - A Probabilistic Assessment"	"We present the basics of a probabilistic methodology to assess the overall quality of software preparatory to its release through the evaluation of process and product evidence, the 'Good Enough' to Release"" (GETR) Methodology, in this paper. GETR Methodology has three main elements: a model whose elements represent activities and artifacts identified in the literature as being effective assessors of software quality, a process for populating certain parts of the model, and methods for analyzing the importance of contributions made by individual evidence to the determination of overall system quality. First, the methodology's components are briefly introduced. A demonstration of how the methodology can be applied is then given through two case studies reviewing release assessments for inhouse developed analytical tools. The robustness of the model is also illustrated by the results of the case studies."	Uncertainty; Software quality; Bayesian methods; Robustness; Application software; NASA; Software engineering; Conferences; Good Enough; Analytical Tools; System Quality; Software Quality; In-house Development; Use Of Information; Quality Of Evidence; Conditional Probability; Sources Of Uncertainty; Root Node; Formal Methods; System Usability; Node Status; Subjective Probability; Target Node; Probabilistic Assessment; Verification And Validation; Discharge Criteria; Error Handling; Distribution-based Methods; Bayesian Belief Networks; ModelPopulation; Software Quality Assurance; Software Validation and Verification	S.K. Donohue; J.B. Dugan	29th Annual IEEE/NASA Software Engineering Workshop	https://doi.org/10.1109/SEW.2005.30	"1.Susan K. Donohue and Joanne Bechta Dugan. ""Modeling the ""Good Enough to Release"" Decision Using V&V Preference Structures and Bayesian Belief Networks."" In the 2003 Proceedings of the Annual Reliability and Maintainability Symposium, pp. 568-573. View Article  Google Scholar; 2.Susan K. Donohue and Joanne Bechta Dugan. ""Transforming Expert Opinion Into Subjective Conditional Probabilities: The Quantifying Judgment Method for Bayesian Belief Networks."" Submitted to IEEE Transactions on Knowledge and Data Engineering. Google Scholar; 3.Susan K. Donohue and Joanne Bechta Dugan. ""Combining Evidence and Engineering Judgment: A Probabilistic Model for the '""Good Enough"" to Release' Assessment for Computer-Based Systems."" In development. Google Scholar; 4.Daniel Kahneman, Paul Slovic, and Amos Tversky. Judgment Under Uncertainty: Heuristics and Biases. Cambridge, UK: Cambridge University Press, 1982. CrossRef  Google Scholar; 5.Kathryn Blackmond Laskey. ""Sensitivity Analysis for Probability Assessments in Bayesian Networks."" In IEEE Transactions on Systems, Man, and Cybernetics 25(6), June 1995, pp. 901-909. View Article  Google Scholar; 6.Martin Neil, Norman E. Fenton, and L. Nielsen. ""Building Large-Scale Bayesian Networks."" In the Knowledge Engineering Review 15(3), 2000, pp. 257-284. CrossRef  Google Scholar; 7.Judea Pearl. Causality: Models, Reasoning, and Inference. Cambridge, UK: The Cambridge University Press, 2001. Google Scholar"								2	IEEE		"Is My Software ""Good Enough"" to Release? - A Probabilistic Assessment"	https://ieeexplore.ieee.org/document/1521189	IEEE	nan; Pages; Year; Bibtex
464	TrustSE	A low-cost, mobile real-time kinematic geolocation service for engineering and research applications	Centimetre accurate geolocation service is beneficial to a wide range of applications, ranging from sports engineering, civil infrastructure, autonomous vehicles, surveying to digitisation of historically significant structures. Previously, these features were confined to prohibitively expensive commercial hardware, requiring technical knowledge and experience to operate. Continued technological advancements have seen the miniaturisation of electronics and antennas, coupled with an increase in the number and performance of global navigation satellite systems (GNSS) by various nations and organisations, providing global signal coverage. This paper demonstrates a low-cost, mobile, real-time kinematic (RTK) geolocation service for engineering and research applications, fabricated from components readily available from commercial suppliers. This solution, consisting of a mobile RTK base station and RTK rover, provides centimetre-accuracy performance up to a distance of 15 km away from the base station. Correction data is transmitted over the internet using free and open software solutions. The small footprint of both the RTK base station and RTK rover, provides versatile applications even in remote locations. The performance of the geolocation service is validated using field experiments, comparing measurements against state-of-the-art photogrammetry, light detection and ranging (LiDAR) and digital level measurement technologies. The authors encourage the adoption of the RTK geolocation solution based on the calibrated results.	RTK;  GNSS;  GPS;  NTRIP;  PPP;  RTK2go;  RTK-ASM;  UAV;  LiDAR;  U-blox;  Geolocation;  Surveying;  Point cloud;  Photogrammetry; RTK, GNSS, GPS, NTRIP, PPP, RTK2go, RTK-ASM, UAV, LiDAR, U-blox, Geolocation, Surveying, Point cloud, Photogrammetry	Broekman, Andre; Grabe, Petrus Johannes	HardwareX	https://www.webofscience.com/wos/woscc/full-record/WOS:A1995RF71300016		e00203	"""@article{BROEKMAN2021e00203,
    author = ""Broekman, Andre and Grabe, Petrus Johannes"",
    title = ""A low-cost, mobile real-time kinematic geolocation service for engineering and research applications"",
    journal = ""HardwareX"",
    volume = ""10"",
    pages = ""e00203"",
    year = ""2021"",
    issn = ""2468-0672"",
    doi = ""https://doi.org/10.1016/j.ohx.2021.e00203"",
    url = ""https://www.sciencedirect.com/science/article/pii/S2468067221000328"",
    keywords = ""RTK, GNSS, GPS, NTRIP, PPP, RTK2go, RTK-ASM, UAV, LiDAR, U-blox, Geolocation, Surveying, Point cloud, Photogrammetry"",
    abstract = ""Centimetre accurate geolocation service is beneficial to a wide range of applications, ranging from sports engineering, civil infrastructure, autonomous vehicles, surveying to digitisation of historically significant structures. Previously, these features were confined to prohibitively expensive commercial hardware, requiring technical knowledge and experience to operate. Continued technological advancements have seen the miniaturisation of electronics and antennas, coupled with an increase in the number and performance of global navigation satellite systems (GNSS) by various nations and organisations, providing global signal coverage. This paper demonstrates a low-cost, mobile, real-time kinematic (RTK) geolocation service for engineering and research applications, fabricated from components readily available from commercial suppliers. This solution, consisting of a mobile RTK base station and RTK rover, provides centimetre-accuracy performance up to a distance of 15 km away from the base station. Correction data is transmitted over the internet using free and open software solutions. The small footprint of both the RTK base station and RTK rover, provides versatile applications even in remote locations. The performance of the geolocation service is validated using field experiments, comparing measurements against state-of-the-art photogrammetry, light detection and ranging (LiDAR) and digital level measurement technologies. The authors encourage the adoption of the RTK geolocation solution based on the calibrated results.""
}
"""						2	Web of Science		Are we developers liars or just fools [software managers]	https://www.webofscience.com/wos/woscc/full-record/WOS:A1995RF71300016	IEEE COMPUTER SOC	nan; References
465	TrustSE	The three dimensions of software risk: technical, organizational, and environmental														2						
466	TrustSE	An entropy based approach for software risk assessment: A perspective of trustworthiness enhancement	Software risk management is an important approach to obtain trustworthy software. In this paper, entropy was applied to uncover the reasons of chaos and gave the mechanism of risk management in development life cycle. Information entropy was introduced to assess risk uncertainty and a three-dimension risk assessment was obtained through a questionnaire survey. The finding of the study shows the necessity and importance of risk management for enhancing software trustworthiness. Additionally, risk uncertainty is a new assessment of software risks, providing a view of analyzing risk in software development process.	Risk management; Information entropy; Uncertainty; Programming; Chaos; Microscopy; Costs; Software development management; Statistics; Mathematics; Risk Management; Software Development; Processing Software; Information Entropy; Risk Of Exposure; High Uncertainty; Low Uncertainty; Aspects Of Risk; Software risk management; Entropy; Information Entropy; Trustworthy software	Hao Song; Dengsheng Wu; Minglu Li; Chen Cai; Jianping Li	The 2nd International Conference on Software Engineering and Data Mining	https://ieeexplore.ieee.org/document/5542858	"1.The Chaos Report, 2009,  [online]  Available: www.standishgroup.com. Google Scholar; 2.B. W. Boehm, ""Software Risk Management - Principles and Practices"", IEEE Software, vol. 8, pp. 32-41, Jan 1991. View Article  Google Scholar; 3.Y. Y. Haimes, Risk modeling assessment and management, Wiley-IEEE, 2004. CrossRef  Google Scholar; 4.C. E. Shannon, ""A Mathematical Theory of Communication"", Bell System Technical Journal, vol. 27, pp. 379-423, 1948. View Article  Google Scholar; 5.B. Henri et al., ""Toward an assessment of software development risk"", Journal of Management Information Systems, vol. 10, pp. 203-225, 1993. Google Scholar; 6.L. Wallace et al., ""Understanding software project risk: a cluster analysis"", Information  Management, vol. 42, pp. 115-125, 2004. CrossRef  Google Scholar; 7.D. X. Houston et al., ""Stochastic simulation of risk factor potential effects for software development risk management"", Journal of Systems and Software, vol. 59, pp. 247-257, Dec 2001. CrossRef  Google Scholar; 8.R. Schmidt et al., ""Identifying software project risks: An international Delphi study"", Journal of Management Information Systems, vol. 17, pp. 5-36, 2001. CrossRef  Google Scholar"								2	IEEE		An entropy based approach for software risk assessment: A perspective of trustworthiness enhancement	https://ieeexplore.ieee.org/document/5542858	IEEE	nan; Pages; Year; Bibtex
467	TrustSE	Extracting Development Organization from Open Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
468	TrustSE	Mining and analyzing the characteristic of projects collaborative relationship in open source software	This paper focus on the relationship between projects that have same participants. A definition of projects collaborative relationship has been presented, and a projects collaborative network model is constructed. By mining and analyzing more than 10000 projects from sourceforge.net, we find that the projects collaborative relationship of software has a great impact on software trustworthiness. The number of project's collaborative project and the proportion of project's participants, who also join in other projects, are mostly important factors of projects collaborative network.	Collaboration; Open source software; Communities; Collaborative work; Data mining; Software quality; Open-source; Open-source Software; Collaborative Project; Definite Relationship; Software Development; Software Quality; Open-source Projects; Open Projects; Project Quality; Software Projects; Trustworthiness Ratings; open source software; trusted software; projects collaborative relationship; evaluation of trustworthiness	Bai Wang; Meng Shi	2012 IEEE 2nd International Conference on Cloud Computing and Intelligence Systems	https://doi.org/10.1109/CCIS.2012.6664590	"1.TANG Tong-Xin, LIU Zeng-Liang, ""Progress in software trustworthiness metrics models,"" Computer Engineering and Applications, vol. 46(27), pp. 12-16, 2010. Google Scholar; 2.CAI Si-Bo, ZOU Yan-Zhen, ""Framework supporting software assets evaluation on trustworthiness,"" Journal of Software, Vol. 21, No. 2, pp. 369-372. CrossRef  Google Scholar; 3.YUAN Lin, WANG Huai-Min, ""Trustworthy evaluation technology of software based on roles,"" Journal of Beijing University of Technology, Vol. 36, No. 5, pp. 611-615, 2010. Google Scholar; 4.G. Robles, JM. Gonzalez. Barahona, ""Evolution of the core team of developers in libre software projects,"" in MSR '09. 6th, pp. 167-171, 2009. View Article  Google Scholar; 5.G. Madey, V. Freeh; R. Tynan, ""The open source software development phenomenon: An analysis based on social network theory,"" in 8th Americas Conference on Information Systems, pp. 1806-1813, 2002. Google Scholar; 6.Lin Yuan, Huaimin Wang, ""Mining frequent development patterns of roles in open source software,"" in 2010 Symposia and Workshops on Ubiquitous, Autonomic and Trusted Computing, pp. 444-448, 2010. View Article  Google Scholar; 7.Liu Ke, Shan Zhi-Guang, ""Overview on major Research Plan of trustworthy software,"" Bulletin of National Natural Science Foundation of China, pp. 145-151, 2008. Google Scholar; 8.Audris Mockus, James D Herbsleb, ""Two case studies of open source software development: Apache and Mozilla,"" ACM Transactions on Software Engineering and Methodology, Vol. 11, No. 3, pp. 309-346, 2002. CrossRef  Google Scholar; 9.Kevin Crowston, James Howsion, ""The social structure of free and open source software development,"" First Monday, Vol. 10, No. 2-7, 2005. CrossRef  Google Scholar"								2	IEEE		Mining and analyzing the characteristic of projects collaborative relationship in open source software	https://ieeexplore.ieee.org/document/6664590	IEEE	nan; Pages; Year; Bibtex
469	TrustSE	Visibility & Control: Addressing Supply Chain Challenges to Trustworthy Software-Enabled Things	"Software is playing a pivotal role in most enterprises, whether they realize it or not, and with the proliferation of Industrial Internet of Things (IoT) and other cyber/physical systems across our society and critical infrastructure and our collective love affair with automation, optimization, and ""smart"" devices, the role of these types of systems is only going to increase. This talk addresses the myriad of issues that underlie unsafe, insecure, and unreliable software and provides the insights of the Industrial Internet Consortium and other government and industry efforts on how to conquer them and pave the way to a marketplace of trustworthy software-enabled connected things.As the experience of several sectors has shown, the dependence on connected software needs to be met with a strong understanding of the risks to the overall trustworthiness of our software-based capabilities that we, our enterprises, and our world utilize. In many of these new connected systems issues of safety, reliability, and resilience rival or dominate concerns for security and privacy, the long-time focus of many in the IT world. Without a scalable and efficient method for managing these risks so our enterprises can continue to benefit from these advancements that powers our military, commercial industries, cities, and homes to new levels of efficiency, versatility, and cost effectiveness we face the potential for harm, death, and destructiveness.In such a marketplace, creating, exchanging, and integrating components that are trustworthy as well as entering into value-chain relationships with trustworthy partners and service suppliers will be common if we can provide a method for explicitly defining what is meant by the word trustworthy. The approach being pursued by these groups for applying Software Assurance to these systems and their Supply Chains by leveraging Structured Assurance Cases, Software Bill of Materials (the focus of this paper), and secure development practices applied..."	Supply Chain; Internet Of Things; Critical Infrastructure; Industrial Internet Of Things; Software Version; Basic Information; Types Of Information; Pedigree; Software Components; Constituent Parts; Reference Base; Security Vulnerabilities; Usage Scenarios; Terms Of This License; Provenance Information; Unambiguous Information; software; IoT; CyberPhysical; software assurance; software bill of materials; SBOM; DevSecOps	Robert Alan Martin	2020 IEEE Systems Security Symposium (SSS)	https://doi.org/10.1109/SSS47320.2020.9174365	1.National Telecommunications and Information Agency's (NTIA's) Software Transparency efforts,  [online]  Available: www.ntia.doc.gov/Software Transparency. Google Scholar; 2.The Consortium for Information and Software Quality (CISQ) SBOM Working Group,  [online]  Available: https://www.it-cisq.org/sbom/. Google Scholar								2	IEEE		Visibility & Control: Addressing Supply Chain Challenges to Trustworthy Software-Enabled Things	https://ieeexplore.ieee.org/document/9174365	IEEE	nan; Pages; Year; Bibtex
470	TrustSE	Trustrace: Improving Automated Trace Retrieval through Resource Trust Analysis	Traceability is a task to create/recover traceability links among different software artifacts. It uses resources, such as an expert, source and target document, and traceability approach, to create/recover traceability links. However, it does not provide any guidance that how much we can trust on available resources. We propose Trustrace, a trust-based traceability recovery process, to improve expert trust on a recovered link and trust over the traceability inputs. Trustrace has three sub components, in particular, Link trust improver (LTI), traceability factor controller (TFC), and a hybrid traceability approach (HTA). LTI uses various source of information, such as temporal information, design documents, source code structure, and so on, to increase experts' trust over a link. To develop TFC, we will perform a systematic literature review and empirical studies to find out which factors impact the traceability-process inputs and document these factors in a trust pattern. TFC trust pattern will help practitioner and researchers to know which steps they can take to avoid/control these factors to improve their trust on these inputs. In the HTA, we will combine different traceability recovery approaches. All approaches have different positive and negative points, we will combine all the positive points of different approaches to increase experts' trust over the HTA. In Trustrace, HTA will implement the LTI model following TFC instructions to improve the expert trust over recovered link as well as precision and recall.	Conferences; USA Councils; Software engineering; Software; IEEE Computer Society; Q factor; Unified modeling language; Source Of Information; Empirical Studies; Source Code; Precision And Recall; Temporal Information; Recovery Model; Design Documents; Software Artifacts; Quality Factor; Project Management; Hybrid Approach; Low Precision; Functional Requirements; Mailing Lists; Quality Of Input; Rule-based Approach; Text Similarity; Non-functional Requirements; Bug Reports; Traceability; trust-based model; hybrid approach; quality factors	Nasir Ali	2011 IEEE 19th International Conference on Program Comprehension	https://doi.org/10.1109/ICPC.2011.55	"1.N. Pennington, ""Comprehension Strategies in Programming"", Empirical Studies of Programmers: Second Workshop, 1987. Google Scholar; 2.R. Brooks, ""Towards a theory of the comprehension of computer programs"", International Journal of Man-Machine Studies, vol. 18, pp. 543-554, 1983. CrossRef  Google Scholar; 3.A. De Lucia, M. Di Penta, R. Oliveto and F. Zurolo, ""Improving comprehensibility of source code via traceability information: a controlled experiment"", Program Comprehension 2006. ICPC 2006. 14th IEEE International Conference on, pp. 317-326, 2006. CrossRef  Google Scholar; 4.""IEEE Standard Glossary of Software Engineering Terminology"", ""Ieee std 610.12-1990(r2002)"", 1990. Google Scholar; 5.G. Antoniol, G. Canfora, G. Casazza, A. De Lucia and E. Merlo, Recovering traceability links between code and documentation, Piscataway, NJ, USA, pp. 970-983, October 2002. Google Scholar; 6.J. Cleland-Huang, C. K. Chang and M. Christensen, ""Event-based traceability for managing evolutionary change"", IEEE Transaction Software Engineering, vol. 29, no. 9, pp. 796-810, 2003. View Article  Google Scholar; 7.S. A. Sherba, ""Towards automating traceability: an incremental and scalable approach"" in Ph.D. dissertation, Boulder, CO, USA, 2005. Google Scholar; 8.A. Egyed and P. Grunbacher, ""Automating requirements traceability: Beyond the record & replay paradigm"", ASE'02: Proceedings of the 17th IEEE international conference on Automated software engineering, pp. 163, 2002. View Article  Google Scholar; 9.J. Cleland-Huang, R. Settimi, O. BenKhadra, E. Berezhan-skaya and S. Christina, ""Goal-centric traceability for managing non-functional requirements"", ICSE '05: Proceedings of the 27th international conference on Software engineering, pp. 362-371, 2005. CrossRef  Google Scholar; 10.G. Spanoudakis, A. Zisman, E. Prez-Miana and P. Krause, ""Rule-based generation of requirements traceability relations"", Journal of Systems and Software, vol. 72, no. 2, pp. 105-127, 2004. CrossRef  Google Scholar; 11.R. Oliveto, M. Gethers, D. Poshyvanyk and A. D. Lucia, ""On the equivalence of information retrieval methods for automated traceability link recovery"", ICPC, pp. 68-71, 2010. CrossRef  Google Scholar; 12.A. Abadi, M. Nisenson and Y. Simionovici, ""A traceability technique for specifications"", International Conference on Program Comprehension, pp. 103-112, 2008. CrossRef  Google Scholar; 13.G. Antoniol, ""Recovery of traceability links in software artifacts and systems"", Ph.D. dissertation, 2003. Google Scholar; 14.J. H. Hayes and A. Dekhtyar, ""Humans in the traceability loop: can't live with 'em can't live without 'em"", Proceedings of the 3rd international workshop on Traceability in emerging forms of software engineering, pp. 20-23, 2005. CrossRef  Google Scholar; 15.W. Jirapanthong and A. Zisman, ""Xtraque: traceability for product line systems"", Software and Systems Modeling, vol. 8, no. 1, pp. 117-144, February 2009. CrossRef  Google Scholar; 16.B. Ramesh, ""Factors influencing requirements traceability practice"", Commun. ACM, vol. 41, no. 12, pp. 37-44, 1998. CrossRef  Google Scholar; 17.J. I. Maletic and M. L. Collard, ""Tql: A query language to support traceability"", TEFSE '09: Proceedings of the 2009 ICSE Workshop on Traceability in Emerging Forms of Software Engineering, pp. 16-20, 2009. View Article  Google Scholar; 18.P. Mader, O. Gotel and I. Philippow, ""Getting back to basics: Promoting the use of a traceability information model in practice"", TEFSE '09: Proceedings of the 2009 ICSE Workshop on Traceability in Emerging Forms of Software Engineering, pp. 21-25, 2009. View Article  Google Scholar; 19.P. Arkley and S. Riddle, ""Overcoming the traceability benefit problem"", RE '05: Proceedings of the 13th IEEE International Conference on Requirements Engineering, pp. 385-389, 2005. View Article  Google Scholar; 20.J. Cleland-Huang, J. H. Hayes and J. M. Domel, ""Model-based traceability"", TEFSE '09: Proceedings of the 2009 ICSE Workshop on Traceability in Emerging Forms of Software Engineering, pp. 6-10, 2009. View Article  Google Scholar; 21.S. A. Sherba, K. M. A. and M. Faisal, ""A framework for mapping traceability relationships"", 2nd International Workshop on Traceability in Emerging Forms of Software Engineering at 18th IEEE International Conference on Automated Software Engineering, pp. 32-39, 2003. Google Scholar; 22.K. Osterbye and U. K. Wiil, ""The flag taxonomy of open hypermedia systems"", HYPERTEXT '96: Proceedings of the the seventh ACM conference on Hypertext, pp. 129-139, 1996. CrossRef  Google Scholar; 23.N. Ali, Y.-G. Gueheneuc and G. Antoniol, ""Trust-based requirements traceability"", ICPC '11: Proceedings of the International Conference on Program Comprehension (ICPC'11), 2011. CrossRef  Google Scholar; 24.D. H. McKnight, V. C. and C. K., ""The impact of initial consumer trust on intentions to transact with a web site: a trust building model"", The Journal of Strategic Information Systems, vol. 11, no. 3-4, pp. 297-323, 2002. CrossRef  Google Scholar"								2	IEEE		Trustrace: Improving Automated Trace Retrieval through Resource Trust Analysis	https://ieeexplore.ieee.org/document/5970194	IEEE	nan; Pages; Year; Bibtex
471	TrustSE	Secure Identification of Actively Executed Code on a Generic Trusted Component														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
472	TrustSE	Trust Trade-off Analysis for Security Requirements Engineering	Security requirements often have implicit assumptions about trust relationships among actors. The more actors trust each other, the less stringent the security requirements are likely to be. Trust always involves the risk of mistrust; hence, trust implies a trade-off: gaining some benefits from depending on a second party in trade for getting exposed to security and privacy risks. When trust assumptions are implicit, these trust trade-offs are made implicitly and in an ad-hoc way. By taking advantage of agent- and goal-oriented analysis, we propose a method for discovering trade-offs that trust relationships bring. This method aims to help the analyst select among alternative dependency relationships by making explicit trust trade-offs. We propose a simple algorithm for making the trade-offs in a way that reaches a balance between costs and benefits.	Permission; Information security; Privacy; Information analysis; Computer security; Computer science; Costs; Navigation; Environmental economics; Psychology; Security Requirements; Requirements Engineering; Trade-off Analysis; Distrust; Trusting Relationship; Dependent Relationship; Security Risks; Privacy Risks; Alternative Relationships; Delegation; Local Estimates; Resultant Signal; Multi-criteria Decision-making; Comparison Criteria; Resource Dependence; WiFi Signals; Quality Goals; Software Agents; Stakeholder Requirements	Golnaz Elahi; Eric Yu	2009 17th IEEE International Requirements Engineering Conference	https://doi.org/10.1109/RE.2009.12	"1.J. Viega, T. Kohno, and B. Potter, ""Trust (and mistrust) in secure applications,"" Commun. ACM, vol. 44, no. 2, pp. 31-36, 2001. CrossRef  Google Scholar; 2.S. P. Marsh and M. R. Dibben, ""Trust, untrust, distrust and mistrust - an exploration of the dark(er) side,"" vol. 3477, pp. 17-33, 2005. Google Scholar; 3.C. Castelfranchi and R. Falcone, ""Principles of trust for MAS: cognitive anatomy, social importance, and quanti cation,"" in Proc. of Multi Agent Systems, 1998, pp. 72-79. View Article  Google Scholar; 4.P. Giorgini, F. Massacci, and N. Zannone, ""Security and trust requirements engineering,"" in Proc. of FOSAD, 2005, pp. 237-272. CrossRef  Google Scholar; 5.P. Giorgini, F. Massacci, J. Mylopoulos, and N. Zannone, ""Modeling security requirements through ownership, permission and delegation,"" in Proc. of RE05, 2005, pp. 167-176. View Article  Google Scholar; 6.B. Haley, C. Laney, D. Moffett, and B. Nuseibeh, ""Using trust assumptions with security requirements,"" Requir. Eng., vol. 11, no. 2, pp. 138-151, 2006. CrossRef  Google Scholar; 7.C. Haley, R. Laney, J. Moffett, and B. Nuseibeh, ""Security requirements engineering: A framework for representation and analysis,"" TSE, vol. 34, no. 1, pp. 133-153, 2008. View Article  Google Scholar; 8.E. S. K. Yu and L. Liu, ""Modelling trust for system design using the i* strategic actors framework,"" in Proc. of the workshop on Deception, Fraud, and Trust in Agent Societies, 2001, pp. 175-194. CrossRef  Google Scholar; 9.A. van Lamsweerde, ""Requirements engineering in the year 00: a research perspective,"" in Proc. of ICSE00, 2000, pp. 5-19. View Article  Google Scholar; 10.E. Yu, ""Modeling Strategic Relationships for Process Reengineering,"" Ph.D. dissertation, University of Toronto, 1995. Google Scholar; 11.L. Liu, E. Yu, and J. Mylopoulos, ""Security and privacy requirements analysis within a social setting,"" in Proc. of RE03, 2003, p. 151. View Article  Google Scholar; 12.G. Elahi and E. Yu, ""A goal oriented approach for modeling and analyzing security trade-offs,"" in Proc. of ER07, ser. LNCS 4801, 2007, pp. 375-390. CrossRef  Google Scholar; 13.G. Elahi, E. Yu, and N. Zannone, ""A vulnerability-centric requirements engineering framework: Analyzing security attacks, countermeasures, and requirements based on vulnerabilities,"" Manuscript submitted to REJ, 2009. CrossRef  Google Scholar; 14.J. Horkoff and E. Yu, ""A Qualitative, Interactive Evaluation Procedure for Goal- and Agent-Oriented Models,"" in CAiSE Forum. CEUR Workshop Proceedings, 2009.; 15.L. Chung, B. A. Nixon, E. Yu, and J. Mylopoulos, Non-Functional Requirements in Software Engineering. Kluwer Academic, 1999. Google Scholar; 16.L. Bass, P. Clements, and R. Kazman, Software Architecture in Practice. Boston, MA, USA: Second Edition, Addison Wesley, 2003. Google Scholar; 17.R. L. Keeney and H. Raiffa, Decisions with multiple objectives : preferences and value tradeoffs. Wiley, 1976. Google Scholar; 18.B. Schneier, Beyond Fear. Springer, 2003. Google Scholar; 19.B. Blakley, E. McDermott, and D. Geer, ""Information security is information risk management,"" in Proc. of NSPW 01, 2001, pp. 97-104. CrossRef  Google Scholar; 20.J. Figueira, S. Greco, and M. Ehrgott, Multiple Criteria Decision Analysis: State of the Art Surveys. Springer Verlag, 2005. Google Scholar; 21.J. S. Hammond, R. L. Keeney, and H. Raiffa, Smart choices : a practical guide to making better life decisions. Broadway Books, 2002. Google Scholar; 22.G. Elahi, Z. Lieber, and E. Yu, ""Trade-off analysis of identity management systems with an untrusted identity provider,"" in Proc. of COMPSAC08, STPSA08 Workshop, 2008, pp. 661-666. View Article  Google Scholar"								2	IEEE		Trust Trade-off Analysis for Security Requirements Engineering	https://ieeexplore.ieee.org/document/5328522	IEEE	nan; Pages; Year; Bibtex
473	TrustSE	An approach for cross-domain access control policy generation from reputation evaluation to trust management	In view of existing access control mechanisms having coarse granularity and being lack of dynamic adaptability in cross-domain open environment with a lot of strange entities, an access control policy generation approach from reputation evaluation up to trust management is proposed. This approach can generate fine-grained authorization policies automatically and dynamically according to entities' behaviour features and context attributes, which is achieved by integrating reputation evaluation and trust management in an original data mining based way. Such integration makes the approach surpass the limitations of existing integration models, in which reputation evaluation is only subjectively taken as an extension to trust management without overcoming the pre-set policies' limited ability to adapt to dynamic environment. The reputation evaluation combines cloud model and Bayesian networks, which can represent and evaluate the uncertainty of trust more accurately and efficiently. Then the association relationships between entities' attributes and their reputation are extracted from reputation evaluation results. Finally, these relationships will be transformed into attribute based access control policies. Simulation results show that the entities' behaviour features can be automatically mapped into access control policies which can better adapt to cross-domain dynamic environment.	access control policy generation; reputation evaluation; trust management; XACML; association rule	Y. Wang; Z.Y. Liu; C.Z. Hu; X.L. Zhao; J.F. Xue; L.X. Wei	2013 International Conference on Information and Network Security (ICINS 2013)	https://doi.org/10.1049/cp.2013.2461									2	IEEE		An approach for cross-domain access control policy generation from reputation evaluation to trust management	https://ieeexplore.ieee.org/document/6826010	IET	nan; References; Pages; Year; Bibtex
474	TrustSE	Consumers' Trust Maintenance: From the Perspective of Knowledge-Based and Identification-Based Trust	Trust changes and develops gradually. How to maintain and preserve trust relationship is the key problem to solve as long as initial trust is build. From the perspective of knowledge-based and identification-based trust, this article focuses on trust maintenance and its impact mechanism after transaction. Firstly, based on related literature, this paper constructs a research model of trust maintenance mechanism. Then data are gathered by the method of questionnaire. Finally, the model and hypotheses are tested by Structured Equation Model software. The results show that post-transaction trust contains knowledge-based trust and identification-based trust. Moreover, the model reveals that the former positively affects the latter. Besides, it has been confirmed that security and privacy protection and service quality affect two types of trust respectively, while familiarity affects both of them, which eventually affect satisfactory and loyalty. At last, the paper provides suggestions contributing to the development of e-commerce enterprises and points out the deficiency and the direction of future research.	Knowledge based systems; Privacy; Maintenance engineering; Security; Mathematical model; Software reliability; Perspective Of Trust; Identification-based Trust; Service Quality; Structural Equation Modeling; Impact Force; Privacy Protection; Security Protection; Types Of Trust; Cronbach's Alpha; Entrepreneurial; Fit Index; Personal Information; Levels Of Satisfaction; Path Coefficients; Online Shopping; Customer Loyalty; Security Mechanisms; Development Of Trust; Trust Model; Consumer Trust; Trust Mechanism; Establishment Of Trust; E-commerce Websites; Shopping Experience; After-sales Service; Definition Of Trust; Trust Formation; Concept Of Trust; Protective Impact; Trust maintenance; Knowledge-based trust; Identification-based trust; Satisfaction; Loyalty	Hanyang Luo; Wei Huang; Sai Wang; Lijun Ma; Xudong Lin	2018 15th International Conference on Service Systems and Service Management (ICSSSM)	https://doi.org/10.1109/ICSSSM.2018.8465070	"1.H. Luo and Q. Lu, ""Empirical research on the evolution of consumers trust in B2C e-business in China"", Advances in Information Sciences  Service Sciences, vol. 4, pp. 640-648, 2012. Google Scholar; 2.P. M. Doney and J. P. Cannon, ""An Examination of the Nature of Trust in Buyer-Seller Relationships"", Journal of Marketing, vol. 61, pp. 35-51, 1997. CrossRef  Google Scholar; 3.D. Gefen, ""E-commerce: the role of familiarity and trust"", Omega, vol. 28, pp. 725-737, 2000. CrossRef  Google Scholar; 4.J. K. Rempel et al., ""Trust in close relationships"", Journal of Personality and Social Psychology, vol. 49, pp. 95-112, 1985. CrossRef  Google Scholar; 5.L. G. Zucker, ""Production of trust: Institutional sources of economic structure 1840-1920"", Research in Organizational Behavior, vol. 8, pp. 53-111, 1986. Google Scholar; 6.D. J. McAllister, ""Affect- and cognition-based trust as foundations for interpersonal cooperation in organizations"", The Academy of Management Journal, vol. 38, pp. 24-59, 1995. CrossRef  Google Scholar; 7.R. K. K. Fung and M. K. O. Lee, EC-trust (trust in electronic commerce): Exploring the antecedent factors, 1999. Google Scholar; 8.D. L. Shapiro et al., ""Business on a Handshake"", Negotiation Journal, vol. 8, pp. 365-377, 1992. CrossRef  Google Scholar; 9.R. J. Lewicki and B. B. Bunker, ""Developing and Maintaining Trust in Work Relationships"", Trust in Organizations Frontiers of Theory  Research, 1996. CrossRef  Google Scholar; 10.L. Hanyang et al., ""From Trust to Online Loyalty: Theoretical Models and Empirical Research"", Journal of Information, vol. 29, pp. 190-194, 2010. Google Scholar; 11.L. Hanyang et al., ""Cross-stage Empirical Study on the Evolution of Consumers Trust and Gender Difference in B2C E-business"", Journal of Systems  Management, vol. 25, pp. 484-497, 2016. Google Scholar; 12.P. Ratnasingham, ""Trust in Web - based electronic commerce security"", Information Management  Computer Security, vol. 6, pp. 162-166, 1998. CrossRef  Google Scholar; 13.M. Koufaris and W. Hampton-Sosa, ""The development of initial trust in an online company by new customers"", Information  Management, vol. 41, pp. 377-397, 01 2004. CrossRef  Google Scholar; 14.V. Shankar et al., ""Online trust: a stakeholder perspective concepts implications and future directions"", The Journal of Strategic Information Systems, vol. 11, pp. 325-344, 2002. CrossRef  Google Scholar; 15.C. Flavian and M. Guinaliu, ""Consumer trust perceived security and privacy policy"", Industrial Management  Data Systems, vol. 106, pp. 601-620, 2006. CrossRef  Google Scholar; 16.S.-J. Yoon, ""The antecedents and consequences of trust in online-purchase decisions"", Journal of Interactive Marketing, vol. 16, pp. 47-63, 01 2002. CrossRef  Google Scholar; 17.H. W. Kim et al., ""A Comparison of Online Trust Building Factors between Potential Customers and Repeat Customers"", Journal of the Association for Information Systems, vol. 5, 2004. CrossRef  Google Scholar; 18.J. S. Chiou and C. Droge, ""Service quality trust specific asset investment and expertise: Direct and indirect effects in a satisfaction-loyalty framework"", Journal of the Academy of Marketing Science, vol. 34, pp. 613-627, 2006. CrossRef  Google Scholar; 19.F. Lai et al., ""How quality value image and satisfaction create loyalty at a Chinese telecom"", Journal of Business Research, vol. 62, pp. 980-986, 2009. CrossRef  Google Scholar; 20.Kim et al., ""Trust and Satisfaction Two Stepping Stones for Successful E-Commerce Relationships: A Longitudinal Exploration"", Information Systems Research, vol. 20, pp. 237-257, 2009. CrossRef  Google Scholar; 21.J. Kim et al., ""The role of etail quality e-satisfaction and e-trust in online loyalty development process"", Journal of Retailing  Consumer Services, vol. 16, pp. 239-247, 2009. CrossRef  Google Scholar; 22.R. L. Oliver and R. R. Burke, ""Expectation Processes in Satisfaction Formation: A Field Study"", Journal of Service Research, vol. 1, pp. 196-214, 1999. CrossRef  Google Scholar"								2	IEEE		Consumers' Trust Maintenance: From the Perspective of Knowledge-Based and Identification-Based Trust	https://ieeexplore.ieee.org/document/8465070	IEEE	nan; Pages; Year; Bibtex
475	TrustSE	A security-enhanced key authorization management scheme for trusted computing platform	Secure storage is one of the important functionalities in trusted computing platform. The key management is one of the important technologies in secure storage. There is a key synchronization problem in the existing trusted key authorization management mechanism for Trusted Computing Platform. To solve the problem, we propose a security-enhanced trusted key authorization management scheme. The new scheme can effectively enhance the trust and security of the trusted storage through adding child key information in parent key.	Authorization; Secure storage; Cryptography; Synchronization; Software; Engines; Management Strategies; Computational Platform; Management Mechanism; Secure Storage; Decoding; Computer Technology; Key Objective; Information Security; Key Nodes; Secret Key; Public Key; Military Technology; Detailed Flow; External Space; Remote Measurement; Protection Objectives; Software Stack; External Storage; Trusted Computing Plaform; Key Synchronization; Trusted Storage; Authorization Data	Song Cheng; Li Jing; Peng Weiping; Tian Xinji	2012 2nd International Conference on Consumer Electronics, Communications and Networks (CECNet)	https://doi.org/10.1109/CECNet.2012.6202130	1.TCG: TCG Specification Architecture Overview. TCG Specification Version 1.2, The Trusted Computing Group (TCG), Portland, Oregon, USA (April 2003). Google Scholar; 2.TCG: TPM Main, Part 1: Design Principles. TCG Specification Version 1.2 Revision94, The Trusted Computing Group (TCG), Portland, Oregon, USA (March 2006). Google Scholar; 3.TCG. Design, Implementation, and Usage Principles Version 2.0. December 2005. Google Scholar; 4.Trusted Computing Group, TCG Software Stack (TSS) Specification, Version 1.2, January 6, 2006. Google Scholar; 5.Balacheff Boris, Chen Liqun, Pearson Siani, Plaquin David, and Proudler Graeme. Trusted Computing Platforms: TCPA Technology in Context. Prentice-Hall, 2003. Google Scholar; 6.TCG: TPM Main, Part 2: TPM Data Structures. TCG Specification Version 1.2 Revision 94, The Trusted Computing Group (TCG), Portland, Oregon, USA (March 2006). Google Scholar; 7.Zhang Xing, Zhang Xiaofei, Liu Yi and Shen Changxiang. A New AuthData Management Scheme. Journal of Wuhan University(Natural Science Edition). Vol. 53(5), PP. 518-522, Oct. 2007. Google Scholar; 8.TCG: TPM Main, Part 3: Commands. TCG Specification Version 1.2 Revision 94, The Trusted Computing Group (TCG), Portland, Oregon, USA (March 2006). Google Scholar								2	IEEE		A security-enhanced key authorization management scheme for trusted computing platform	https://ieeexplore.ieee.org/document/6202130	IEEE	nan; Pages; Year; Bibtex
476	TrustSE	On the Personalization of Trust Management	In this paper we present a system architecture for trust management inspired by a human model for the evaluation of trust. We focus on large-scale marketplaces for diverse software resources and services. In such marketplaces, user agents (consumer, provider and broker) are largely autonomous with vastly diverse requirements, capabilities, and trust preferences. We hypothesize the need for personalized trust management system for the robustness and wide-scale adoption of such large-scale heterogeneous marketplaces. Our proposed system architecture for personalized trust management comprises five layers, namely Monitoring, Data, Analytics, Expectation, and Decision management. Additionally, it utilizes a trust model based on the four aspects of intent, integrity, capability and results. Our simulation results demonstrate the effectiveness, efficiency and resilience of our proposed system.	Human Trust Model; Trust Management; Intent; Integrity; Capability; Personalized Trust; Trust Architecture; Human Trust Model;  Trust Management;  Intent;  Integrity;  Capability;  Personalized Trust;  Trust Architecture	Salah, Hisham; Eltoweissy, Mohamed	2017 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW 2017)	https://doi.org/10.1109/SPW.2017.25		1-10	"""@inproceedings{WOS:000852904100001,
    Author = ""Salah, Hisham and Eltoweissy, Mohamed"",
    Book-Group-Author = ""IEEE COMP SOC"",
    Title = ""On the Personalization of Trust Management"",
    Booktitle = ""2017 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW 2017)"",
    Series = ""IEEE Security and Privacy Workshops"",
    Year = ""2017"",
    Pages = ""1-10"",
    Note = ""38th IEEE Symposium on Security and Privacy (SP), San Jose, CA, MAY 22-26, 2017"",
    Organization = ""IEEE; IEEE Comp Soc Tech Comm Secur \\& Privacy; IEEE Comp Soc; Natl Sci Fdn"",
    Abstract = ""In this paper we present a system architecture for trust management inspired by a human model for the evaluation of trust. We focus on large-scale marketplaces for diverse software resources and services. In such marketplaces, user agents (consumer, provider and broker) are largely autonomous with vastly diverse requirements, capabilities, and trust preferences. We hypothesize the need for personalized trust management system for the robustness and wide-scale adoption of such large-scale heterogeneous marketplaces. Our proposed system architecture for personalized trust management comprises five layers, namely Monitoring, Data, Analytics, Expectation, and Decision management. Additionally, it utilizes a trust model based on the four aspects of intent, integrity, capability and results. Our simulation results demonstrate the effectiveness, efficiency and resilience of our proposed system."",
    Publisher = ""IEEE COMPUTER SOC"",
    Address = ""10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA"",
    Type = ""Proceedings Paper"",
    Language = ""English"",
    Affiliation = ""Salah, H (Corresponding Author), Arab Acad Sci \\& Technol, Cairo, Egypt. Salah, H (Corresponding Author), Virginia Tech, Blacksburg, VA 24061 USA. Salah, Hisham, Arab Acad Sci \\& Technol, Cairo, Egypt. Salah, Hisham; Eltoweissy, Mohamed, Virginia Tech, Blacksburg, VA 24061 USA. Eltoweissy, Mohamed, Virginia Mil Inst, Lexington, VA 24450 USA."",
    DOI = ""10.1109/SPW.2017.25"",
    ISSN = ""2639-7862"",
    EISSN = ""2770-8411"",
    ISBN = ""978-1-5386-1968-1"",
    Keywords = ""Human Trust Model; Trust Management; Intent; Integrity; Capability; Personalized Trust; Trust Architecture"",
    Keywords-Plus = ""REPUTATION-BASED TRUST"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Interdisciplinary Applications"",
    Author-Email = ""hishamsalah@aast.edu eltoweissymy@vmi.edu"",
    Affiliations = ""Egyptian Knowledge Bank (EKB); Arab Academy for Science, Technology \\& Maritime Transport; Egyptian Academy of Scientific Research \\& Technology (ASRT); Virginia Polytechnic Institute \\& State University"",
    Number-of-Cited-References = ""35"",
    Times-Cited = ""0"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""0"",
    Doc-Delivery-Number = ""BT8EI"",
    Web-of-Science-Index = ""Conference Proceedings Citation Index - Science (CPCI-S)"",
    Unique-ID = ""WOS:000852904100001"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		On the Personalization of Trust Management	https://www.webofscience.com/wos/woscc/full-record/WOS:000852904100001	IEEE COMPUTER SOC	nan; References
477	TrustSE	Trust-but-Verify in Cyber-Physical Systems	Cyber-physical systems span a wide spectrum, from long-lived legacy systems to more modern installations. Trust is an issue that arises across the spectrum, albeit with different variants of goals and constraints. On the one end of the spectrum, legacy systems are characterized by function-based designs in which trust is an implicitly in-built concept -- the operation is historically designed, implemented, and optimized in a benign stance with respect to intended use. On the other end of the spectrum, modern systems are characterized by offerings from manufacturers, vendors, and system installers -- the devices and deployments use a variety of security features that offer promises of increased trust. All along this spectrum of cyber-physical systems, extending trust beyond the traditional cyber portions to the arteries that connect the physical portions to the cyber portions is a major challenge. Here, we identify a Trust-but-Verify approach that spans this spectrum in addressing trust.	automation;  cyber-physical systems;  intelligent analysis;  machine learning;  security;  trust;  verification;  vetting; automation, cyber-physical systems, intelligent analysis, machine learning, security, trust, verification, vetting	Perumalla, Kalyan	SAT-CPS '21: Proceedings of the 2021 ACM Workshop on Secure and Trustworthy Cyber-Physical Systems	https://doi.org/10.1145/3445969.3450434		1-2	"""@inproceedings{10.1145/3445969.3450434,
    author = ""Perumalla, Kalyan"",
    title = ""Trust-but-Verify in Cyber-Physical Systems"",
    year = ""2021"",
    isbn = ""9781450383196"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3445969.3450434"",
    doi = ""10.1145/3445969.3450434"",
    abstract = ""Cyber-physical systems span a wide spectrum, from long-lived legacy systems to more modern installations. Trust is an issue that arises across the spectrum, albeit with different variants of goals and constraints. On the one end of the spectrum, legacy systems are characterized by function-based designs in which trust is an implicitly in-built concept -- the operation is historically designed, implemented, and optimized in a benign stance with respect to intended use. On the other end of the spectrum, modern systems are characterized by offerings from manufacturers, vendors, and system installers -- the devices and deployments use a variety of security features that offer promises of increased trust. All along this spectrum of cyber-physical systems, extending trust beyond the traditional cyber portions to the arteries that connect the physical portions to the cyber portions is a major challenge. Here, we identify a Trust-but-Verify approach that spans this spectrum in addressing trust."",
    booktitle = ""Proceedings of the 2021 ACM Workshop on Secure and Trustworthy Cyber-Physical Systems"",
    pages = ""1-2"",
    numpages = ""2"",
    keywords = ""automation, cyber-physical systems, intelligent analysis, machine learning, security, trust, verification, vetting"",
    location = ""Virtual Event, USA"",
    series = ""SAT-CPS '21""
}
"""						2	ACM		Trust, but Verify	https://doi.org/10.1145/3445969.3450434	Association for Computing Machinery	nan; References; Link
478	TrustSE	The effect of trust in product chains in a Digital Business Ecosystem	We present a study in product chain creation in a digital business ecosystem (DBE). We perform the study using a simulated DBE. It was created by a software package that receives statistical data from a real DBE as input and outputs a realistic simulated model consisting of a certain number of companies and services. Issues of trust between companies are modelled using the psychophysical law of Weber Fechner and their effect on the quality of the chains of products created is studied.	Ecosystems; Companies; Psychology; Internet; Educational institutions; Software packages; Testing; Statistical analysis; Human factors; Stress measurement; Production Chain; Effect Of Trust; Digital Ecosystem; Trust Issues; Numeric; Distrust; Chain Length; Airport; Statistical Properties; Dynamic Programming; Quality Value; Lack Of Uniformity; Dynamic Programming Algorithm; Bad Reputation; Company Reputation; Virtual Product; DBE; Trust; Weber-Fechner; Chains of products; quality	Konstantinos N Giannoutakis; Maria Petrou	2007 Inaugural IEEE-IES Digital EcoSystems and Technologies Conference	https://doi.org/10.1109/DEST.2007.371982	1.D. P. Cook and W. Luo, The role of third-party seals in building trust on line, e-Service Journal, Indiana University Press, Vol. 2, Issue 3, Summer 2003, pp. 71-84. Google Scholar; 2.D. Gefen, E-commerce: The role of familiarity and trust, Omega, Vol. 28, Issue 6, December 2000, pp. 725-737. CrossRef  Google Scholar; 3.D. Gefen and D. Straub, Managing user-trust in B2C e-services, e-Service Journal, Indiana University Press, Winter 2003, Vol. 2, Issue 2, pp.7-24. Google Scholar; 4.J. Jahng, H. Jain and K. Ramamurthy, Effective design of electronic commerce environments: a proposed theory of congruence and an illustration, IEEE Transactions on System, Man and Cybernetics, Part A: Systems and Humans, Vol. 30, Issue 4, July 2000, pp. 456-471.; 5.S.Y.X. Komiak, W. Wang and I. Benbasat, Trust building in virtual salespersons versus in human salespersons; similarities and differences, e-Service Journal, Indiana University Press, Summer 2004/2005, Vol. 3, Issue 3, pp. 49-63. Google Scholar; 6.M. Limayem, M. Khalifa and A. Frini, What makes consumers buy from internet? A longitudinal study of online shopping, IEEE Transactions on System, Man and Cybernetics, Part A: Systems and Humans, Vol. 30, Issue 4, July 2000, pp. 421-432.; 7.D. W. Manchala, E-commerce trust metrics and models, IEEE Internet Computing, Vol. 4, Issue 2, March - April 2000, pp. 36-44. View Article  Google Scholar; 8.L. W. McKnight and J. P. Bailey, Internet economics: when constitutions collide in cyberspace, IEEE Internet Computing, Vol. 1, Issue 6, November - December 1997, pp. 30-37. View Article  Google Scholar; 9.A. Noteberg, E. Christiaanse and P Wallage, Consumer Trust in electronic channels, e-Service Journal, Indiana University Press, Winter 2003, Vol. 2, Issue 2, pp. 46-67. Google Scholar; 10.A. S. Patrick, Building trustworthy software agents, IEEE Internet Computing, Vol. 6, Issue 6, November - December 2002, pp. 46-52. View Article  Google Scholar; 11.M. Petrou, S. Gautam and K. N. Giannoutakis, Simulating a Digital Business Ecosystem, Proceedings of the 2nd international conference in computational finance and its applications, June 2006, pp. 277-287. CrossRef  Google Scholar; 12.C. Ruppel, L. Underwood-Queen and S. J. Harrington, e-Commerce: The roles of Trust, security and type of e-commerce involvement, e-Service Journal, Indiana University Press, Winter 2003, Vol. 2, Issue 2, pp. 25-45. Google Scholar; 13.M. P. Singh, The e-commerce Inversion, IEEE Internet Computing, Vol. 3, Issue 5, September - October 1999, pp. 4-5. View Article  Google Scholar; 14.W. K. Sung, D. Yang, S. M. Yiu, D. W. Cheung, W. S. Ho and T. W. Lam, Automatic Construction of online catalog topologies, IEEE Transactions on System, Man and Cybernetics, Part C: Applications and Reviews, Vol. 32, Issue 4, November 2002, pp. 382-391.								2	IEEE		The effect of trust in product chains in a Digital Business Ecosystem	https://ieeexplore.ieee.org/document/4233716	IEEE	nan; Pages; Year; Bibtex
479	TrustSE	Microsoft - anti trust case														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
480	TrustSE	Multi-criterion Evaluation of Development Strategy Components in the Presence of Intangibles and Uncertainty	Regional development comprises a complex process. Therefore, its modelling requires application of appropriate tools. The tools have to be able to cope with diversity of issues including intangibility of utilised resources and obtained results, uncertainty with regard to available information, conflicts between different stakeholders etc. An approach for decision support with regard to sustainable development strategy components evaluation is introduced in the paper. It comprises combination of 3 components, namely: multi-criterion decision analysis, simulation and a concept of a game against nature. Each of the components makes it possible to address devoted sources of complexity. Due to computational requirements practical validation and utilisation of the approach is only possible using its software implementation. The implementation is still in development now. But preliminary results obtained for a sample problem of key development areas identification are encouraging.	Modeling; Games; Uncertainty; Software; Computational modeling; Complexity theory; Decision making; Presence Of Uncertainty; Multi-criteria Decision-making; Against Nature; Evaluation Of Alternatives; Single Criterion; Influence Matrix; Ranking Of Alternatives; regional development; decision making; strategy; system analysis; evaluation; MCDA; DEMATEL; simulation; game against nature	Miroslaw Dytczak; Grzegorz Ginda	2008 19th International Conference on Systems Engineering	https://doi.org/10.1109/ICSEng.2008.95	"1.G. Ginda, ""Selected tools for multi-criterion decision analysis"", [In:] R. Knosala (Ed.), Computer-integrated management, OW PTZP, Opole, 2008, pp. 361-370.; 2.T.L. Saaty, The Analytic Hierarchy Process: Planning, Priority Setting, Resource Allocation, McGraw-Hill, New York, 1980. Google Scholar; 3.T.L. Saaty, Decision Making with Dependence and Feedback: The Analytic Network Process, RWS Publ., Pittsburgh, 1996. Google Scholar; 4.E. Fontela, A. Gabus, The DEMATEL Observer, DEMATEL 1976 Report, Geneva Research Center, Geneva, 1976. Google Scholar; 5.M. Dytczak, ""Parallel application of AHP and DEMATEL methods in multi-criterion decision analysis"", [In:] R. Knosala (Ed.), Computer-integrated management, OW PTZP, Opole, 2008, pp. 249-257.; 6.T.J. Stewart, ""Dealing with Uncertainties in MCDA"", [In:] J. Figueira, S. Greco, and M. Ehrgott (Eds.), Multiple Criteria Decision Analysis. State of the Art Surveys, Springer, New York, 2005, pp. 445-470.; 7.M. Dytczak, G. Ginda ""Identification of Key Development Areas For the Opole Region"", [In:] Proceedings of the Nineteenth International Conference on Systems Engineering (ICSENG 2008), Las Vegas, USA, 19-21 August 2008.; 8.R.D. Luce, H. Raiffa Games and decisions. Introduction and critical survey, Jon Wiley & Sons, New York, 1958. Google Scholar"								2	IEEE		Multi-criterion Evaluation of Development Strategy Components in the Presence of Intangibles and Uncertainty	https://ieeexplore.ieee.org/document/4616681	IEEE	nan; Pages; Year; Bibtex
481	TrustSE	Attack simulation based software protection assessment method	Software protection is an essential aspect of information security to withstand malicious activities on software, and preserving software assets. However, software developers still lacks a methodology for the assessment of the deployed protections. To solve these issues, we present a novel attack simulation based software protection assessment method to assess and compare various protection solutions. Our solution relies on Petri Nets to specify and visualize attack models, and we developed a Monte Carlo based approach to simulate attacking processes and to deal with uncertainty. Then, based on this simulation and estimation, a novel protection comparison model is proposed to compare different protection solutions. Lastly, our attack simulation based software protection assessment method is presented. We illustrate our method by means of a software protection assessment process to demonstrate that our approach can provide a suitable software protection assessment for developers and software companies.	Software; Software protection; Monte Carlo methods; Numerical models; Mathematical model; Software measurement; Petri nets; Assessment Methods; Attack Simulation; Software Development; Types Of Attacks; Suitability Assessment; Software Companies; Petri Nets; Random Variables; Uniform Distribution; Monte Carlo Simulation; Cybersecurity; Set Of Rules; Hyperbolic Tangent; Method In This Paper; Final Assessment; Real Process; Directed Acyclic Graph; Horizontal Coordinates; Protection Methods; Starting State; Attack Process; Uncertain Process; Specific Attack; Probability Of Attack; Simulation Assessment; Multiple Attacks; Vertical Coordinate; Software Security; Software Protection Assessment; Attack Simulation; Monte Carlo Method; Petri Net	Gaofeng Zhang; Paolo Falcarin; Elena Gomez-Martinez; Shareeful Islam; Christophe Tartary; Bjorn De Sutter	2016 International Conference On Cyber Security And Protection Of Digital Services (Cyber Security)	https://doi.org/10.1109/CyberSecPODS.2016.7502352	"1.ASPIRE Project (Advanced Software Protection: Integration Research and Exploitation),  [online]  Available: https://aspire-fp7.eu/. Google Scholar; 2.L. C. Briand, S. Morasca and V. R. Basili, ""Property-based Software Engineering Measurement"", IEEE Transactions on Software Engineering, vol. 22, no. 1, pp. 68-86, January 1996. View Article  Google Scholar; 3.C. K. Cheng, ""Evaluation and Measurement of Software Process Improvement-A Systematic Literature Review"", IEEE Transactions on Software Engineering, vol. 38, no. 2, pp. 398-424, March-April 2012. View Article  Google Scholar; 4.P. Tonella, M. Ceccato, B. De Sutter and B. Coppens, ""A Measurable Framework to Quantify Software Protections"", Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pp. 1505-1507, November 3-7, 2014. Google Scholar; 5.R. Dewri, N. Poolsappasit, I. Ray and D. Whitley, ""Optimal Security Hardening using Multi-Objective Optimization on Attack Tree Models of Networks"", Proceedings of the 14th ACM Conference on Computer and Communications Security, pp. 204-213, October 29-November 02, 2007. CrossRef  Google Scholar; 6.O. Sheyner, J. Haines, S. Jha, R. Lippmann and J. M. Wing, ""Automated Generation and Analysis of Attack Graphs"", Proceedings of the 2002 IEEE Symposium on Security and Privacy, pp. 273-284, May 12-15, 2002. View Article  Google Scholar; 7.X. Ou, W. F. Boyer and M. A. McQueen, ""A Scalable Approach to Attack Graph Generation"", roceedings of the 13th ACM Conference on Computer and Communications Security, pp. 336-345, October 30-November 03, 2006. CrossRef  Google Scholar; 8.T. Murata, ""Petri Nets: Properties Analysis and Applications"", in Proceedings of the IEEE, vol. 77, no. 4, pp. 541-580, April, 1989. View Article  Google Scholar; 9.T. M. Chen, J. C. Sanchez-Aarnoutse and J. Buford, ""Petri Net Modeling of Cyber-Physical Attacks on Smart Grid"", IEEE Transactions on Smart Grid, vol. 2, no. 4, pp. 741-749, December 2011. View Article  Google Scholar; 10.H. Wang, D. Fang, H. Dong, Y. Lei, X. Gong and Y. Gu, ""Software Attack Modelling and Its Application"", Proceeding of the 2014 IEEE International Conference on High Performance Computing and Communication, pp. 1152-1158, November 13-15, 2013. View Article  Google Scholar; 11.S. Raychaudhuri, ""Introduction to Monte Carlo Simulation"", Proceedings of 2008 Winter Simulation Conference, pp. 91-100, December 7-10, 2008. View Article  Google Scholar; 12.M. DellAmico and M. Filippone, ""Monte Carlo Strength Evaluation: Fast and Reliable Password Checking"", Proceedings of the 22nd ACM Conference on Computer and Communications Security, pp. 158-169, October 12-16, 2015. CrossRef  Google Scholar; 13.P. Falcarin, C. Collberg, M. Atallah and M. Jakubowski, ""Guest Editors Introduction: Software Protection"", IEEE Software, vol. 28, no. 2, pp. 24-27, March/April 2011. View Article  Google Scholar; 14.C. Basile and M. Ceccato, ""Towards a Unified Software Attack Model to Assess Software Protections"", Proceeding of 2013 IEEE 21st International Conference on Program Comprehension, pp. 219-222, May 20-21, 2013. View Article  Google Scholar; 15.M. Ceccato, M. DiPenta, P. Falcarin, F. Ricca, M. Torchiano and P. Tonella, ""A Family of Experiments to Assess the Effectiveness and Efficiency of Source Code Obfuscation Techniques"", Empirical Software Engineering, vol. 19, no. 4, pp. 1040-1074, August 2014. Google Scholar; 16.P. Falcarin, ""Preliminary ASPIRE Security Model"",  [online]  Available: https://aspire-fp7.eu/sites/default/files/D4.01-Preliminary-ASPIRE-Security-Model.pdf. Google Scholar; 17.B. D. Sutter, ""Preliminary Complexity Metrics"",  [online]  Available: https://aspire-fp7.eu/sites/default/files/D4.02-ASPIRE-Preliminary-Complexity-Metrics.pdf. Google Scholar; 18.M. Ceccato, ""Early White-Box Cryptography and Data Obfuscation Report"",  [online]  Available: https://aspire-fp7.eu/sites/default/files/D2.01-ASPIRE-Early-White-Box-Cryptography-and-Data-Obfuscation-Report-v1.01.pdf. Google Scholar; 19.M. Ceccato, M. Di Penta, J. Nagra, P. Falcarin, F. Ricca and M. Torchiano, ""Towards Experimental Evaluation of Code Obfuscation Techniques"", Proceedings of the 4th ACM Workshop on Quality of Protection, pp. 39-46, October 27-32, 2008. CrossRef  Google Scholar; 20.M. Ceccato, A. Capiluppi, P. Falcarin and C. Boldyreff, ""A Large Study on the Effect of Code Obfuscation on the Quality of Java Code"", Empirical Software Engineering, vol. 20, no. 6, pp. 1486-1524, December 2015. CrossRef  Google Scholar"								2	IEEE		Attack simulation based software protection assessment method	https://ieeexplore.ieee.org/document/7502352	IEEE	nan; Pages; Year; Bibtex
482	TrustSE	(Do not) trust in ecosystems	In the context of Smart Ecosystems, systems engage in dynamic cooperation with other systems to achieve their goals. Expedient operation is only possible when all systems cooperate as expected. This requires a level of trust between the components of the ecosystem. New systems that join the ecosystem therefore first need to build up a level of trust. Humans derive trust from behavioral reputation in key situations. In Smart Ecosystems (SES), the reputation of a system or system component can also be based on observation of its behavior.In this paper, we introduce a method and a test platform that support virtual evaluation of decisions at runtime, thereby supporting trust building within SES. The key idea behind the platform is that it employs and evaluates Digital Twins, which are executable models of system components, to learn about component behavior in observed situations. The trust in the Digital Twin then builds up over time based on the behavioral compliance of the real system component with its Digital Twin. In this paper, we use the context of automotive ecosystems and examine the concepts for building up reputation on control algorithms of smart agents dynamically downloaded at runtime to individual autonomous vehicles within the ecosystem.	automotive;  building trust;  malicious behavior;  smart ecosystems;  virtual evaluation; automotive, building trust, malicious behavior, smart ecosystems, virtual evaluation	Cioroaica, Emilia; Kuhn, Thomas; Buhnova, Barbora	ICSE-NIER '19: Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results	https://doi.org/10.1109/ICSE-NIER.2019.00011		9-12	"""@inproceedings{10.1109/ICSE-NIER.2019.00011,
    author = ""Cioroaica, Emilia and Kuhn, Thomas and Buhnova, Barbora"",
    title = ""(Do not) trust in ecosystems"",
    year = ""2019"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ICSE-NIER.2019.00011"",
    doi = ""10.1109/ICSE-NIER.2019.00011"",
    abstract = ""In the context of Smart Ecosystems, systems engage in dynamic cooperation with other systems to achieve their goals. Expedient operation is only possible when all systems cooperate as expected. This requires a level of trust between the components of the ecosystem. New systems that join the ecosystem therefore first need to build up a level of trust. Humans derive trust from behavioral reputation in key situations. In Smart Ecosystems (SES), the reputation of a system or system component can also be based on observation of its behavior.In this paper, we introduce a method and a test platform that support virtual evaluation of decisions at runtime, thereby supporting trust building within SES. The key idea behind the platform is that it employs and evaluates Digital Twins, which are executable models of system components, to learn about component behavior in observed situations. The trust in the Digital Twin then builds up over time based on the behavioral compliance of the real system component with its Digital Twin. In this paper, we use the context of automotive ecosystems and examine the concepts for building up reputation on control algorithms of smart agents dynamically downloaded at runtime to individual autonomous vehicles within the ecosystem."",
    booktitle = ""Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results"",
    pages = ""9-12"",
    numpages = ""4"",
    keywords = ""automotive, building trust, malicious behavior, smart ecosystems, virtual evaluation"",
    location = ""Montreal, Quebec, Canada"",
    series = ""ICSE-NIER '19""
}
"""						2	ACM		(Do Not) Trust in Ecosystems	https://doi.org/10.1109/ICSE-NIER.2019.00011	IEEE Press	nan; References; Link
483	TrustSE	Openness and requirements: Opportunities and tradeoffs in software ecosystems	A growing number of software systems is characterized by continuous evolution as well as by significant interdependence with other systems (e.g. services, apps). Such software ecosystems promise increased innovation power and support for consumer oriented software services at scale, and are characterized by a certain openness of their information flows. While such openness supports project and reputation management, it also brings some challenges to Requirements Engineering (RE) within the ecosystem. We report from a mixed-method study of IBM(r)'s CLM(r)ecosystem that uses an open commercial development model. We analyzed data from from interviews within several ecosystem actors, participatory observation, and software repositories, to describe the flow of product requirements information through the ecosystem, how the open communication paradigm in software ecosystems provides opportunities for `just-in-time' RE, as well as some of the challenges faced when traditional requirements engineering approaches are applied within such an ecosystem. More importantly, we discuss two tradeoffs brought about the openness in software ecosystems: i) allowing open, transparent communication while keeping intellectual property confidential within the ecosystem, and ii) having the ability to act globally on a long-term strategy while empowering product teams to act locally to answer end-users' context specific needs in a timely manner.	Ecosystems; Software; Context; Interviews; Automotive engineering; Organizations; Collaboration; Software Ecosystems; Specific Context; Information Flow; Participant Observation; Open Communication; Requirements Engineering; Transparent Communication; Reputation Management; Confidential Information; Software Development; Open Channel; Development Team; Technology Platform; Team Leaders; Value Creation; Personal Networks; Management Solutions; Software Product; Open-source Projects; Steep Learning Curve; Open Communication Channels; Issue Tracking; Agile Development; Hackathon; Technical Leadership; Lifecycle Management; High-level Themes; Business Goals; Communication Requirements; Stakeholder Satisfaction; requirements engineering; software ecosystem; mixed method	Eric Knauss; Daniela Damian; Alessia Knauss; Arber Borici	2014 IEEE 22nd International Requirements Engineering Conference (RE)	https://doi.org/10.1109/RE.2014.6912263	"1.P. Feiler, R. P. Gabriel et al., Ultra-Large-Scale Systems: The Software Challenge of the Future. Software Engineering Institute, 2006. Google Scholar; 2.A. Gawer, Platforms, Markets, and Innovation. Edward Elgar, 2009. CrossRef  Google Scholar; 3.J. van Angeren, J. Kabbedijk et al. Managing software ecosystems through partnering, in [4], 85-102. Google Scholar; 4.S. Jansen, M. A. Cusumano, and S. Brinkkemper, Eds., Software Ecosystems: Analyzing and Managing Business Networks in the Software Industry. Cheltenham, UK: Edward Elgar, 2012. Google Scholar; 5.R. Frost, ""Jazz and the eclipse way of collaboration,"" IEEE Software, vol. 24, no. 6, 114-117, 2007. View Article  Google Scholar; 6.S. Jansen, S. Brinkkemper, and A. Finkelstein, Business Network Management as a Survival Strategy, in [4], 29-42. Google Scholar; 7.S. Jansen, S. Brinkkemper et al. ""Shades of gray: Opening up a software producing organization with the open software enterprise model,"" The Journal of Systems and Software, vol. 85, p. 1495-1510, 2012. CrossRef  Google Scholar; 8.L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, ""Leveraging transparency,"" IEEE Software, vol. 30, no. 1, 37-43, 2013. View Article  Google Scholar; 9.O. Barbosa, R. Pereira et al. A Systematic Mapping Study on Software Ecosystems through a Three-dimensional Perspective, in [4], 87-129. Google Scholar; 10.K. Manikas and K. M. Hansen, ""Software ecosystems: A systematic literature review,"" Systems and Software, vol. 86, 1294-1306, 2013. CrossRef  Google Scholar; 11.S. Fricker, ""Requirements Value Chains: Stakeholder Management and Requirements Engineering in Software Ecosystems,"" in Proc. of Requir. Eng.: Foundation for Softw. Quality, Essen, Germany, 2010, 60-66. CrossRef  Google Scholar; 12.S. Jansen, A. Finkelstein, and S. Brinkkemper, ""A sense of community: A research agenda for software ecosystems,"" in Proc. of Intl Conf. on Softw. Eng., 2009, NIER Track. View Article  Google Scholar; 13.D. Damian, S. Marczak, and I. Kwan, ""Collaboration Patterns and the Impact of Distance on Awareness in Requirements-Centred Social Networks,"" in Proc. of Intl Requir. Eng. Conf., 2007. View Article  Google Scholar; 14.K. Manikas and K. M. Hansen, ""Reviewing the Health of Software Ecosystems-A Conceptual Framework Proposal,"" in Proc. of Intl Wksp on Softw. Ecosys., Potsdam, Germany, 2013, 33-44. Google Scholar; 15.C. Castro-Herrera, C. Duan, et al. ""Using Data Mining and Recommender Systems to Facilitate Large-Scale, Open, and Inclusive Requirements Elicitation Processes,"" in Proc. of Intl Requir. Eng. Conf., Barcelona, Spain, 2008, 165-168. View Article  Google Scholar; 16.K. Schneider, ""Focusing Spontaneous Feedback to Support System Evolution,"" in Proc. of Intl Requir. Eng. Conf., Trento, 2011, 165-174. View Article  Google Scholar; 17.K. Schneider, S. Meyer, et al. ""Feedback in Context: Supporting the Evolution of IT-Ecosystems,"" in PROFES, 2010, 191-205. CrossRef  Google Scholar; 18.W. Maalej and A. K. Thurimella, ""Towards a Research Agenda for Recommendation Systems in Requirements Engineering,"" in Proc. of Intl Wksp on Managing Requir. Know., 2009, 32-39. View Article  Google Scholar; 19.O. Brill and E. Knauss, ""Structured and Unobtrusive Observation of Anonymous Users and their Context for Requirements Elicitation,"" in Proc. of Intl Requir. Eng. Conf., Trento, Italy, 2011, 175-184. View Article  Google Scholar; 20.O. Liskin, C. Herrmann, et al. ""Supporting acceptance testing in distributed software projects with integrated feedback systems: Experiences and requirements,"" in Proc. of Intl Conf. on Global Softw. Eng., 2012. View Article  Google Scholar; 21.N. Seyff, N. Maiden, et al. ""Exploring how to use scenarios to discover requirements,"" Requir. Eng., vol. 14, no. 2, 91-111, 2009. CrossRef  Google Scholar; 22.E. Knauss, D. Damian, et al. ""Detecting and Classifying Patterns of Requirements Clarifications,"" in Proc. of Intl Requir. Eng. Conf., Chicago, USA, 2012, 251-260. View Article  Google Scholar; 23.D. Damian and D. Zowghi, ""RE challenges in multi-site software development organisations,"" Requir. Eng., vol. 8, 149-160, 2003. CrossRef  Google Scholar; 24.D. Damian, ""Stakeholders in global requirements engineering: Lessons learned from practice,"" IEEE Software, vol. 24, 21-27, 2007. View Article  Google Scholar; 25.T. Tuunanen and M. Rossi, ""Engineering a Method for Wide Audience Requirements Elicitation and Integrating It to Software Development,"" in Proc. of Hawaii Intl Conf. on System Sciences, vol. 7, Jan. 2004. View Article  Google Scholar; 26.P. Runeson and M. Host, ""Guidelines for conducting and reporting case study research in software engineering,"" Emp. SE, (14) 131-154, 2009. CrossRef  Google Scholar; 27.V. Braun and V. Clarke, ""Using thematic analysis in psychology,"" Qualitative Research in Psychology, vol. 3, 86-94, 2006. CrossRef  Google Scholar; 28.G. Ruhe, Product Release Planning: Methods, Tools and Applications. CRC Press, 2010. CrossRef  Google Scholar; 29.S. Robertson and J. Robertson, Mastering the Requirements Process. Addison-Wesley, 1999. Google Scholar; 30.W. Scacchi, ""Understanding requirements for open source software,"" in Proc. of Design Reqts. Wksp. Springer LNBIP 14, 2009, p. 467-494. CrossRef  Google Scholar"								2	IEEE		Openness and requirements: Opportunities and tradeoffs in software ecosystems	https://ieeexplore.ieee.org/document/6912263	IEEE	nan; Pages; Year; Bibtex
484	TrustSE	On developers' personality in large-scale distributed projects: the case of the apache ecosystem	Large-scale distributed projects are typically the results of collective efforts performed by multiple developers, each one having a different personality. The study of developers' personalities has the potential of explaining their' behavior in various contexts. For example, the propensity to trust others, a critical factor to the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects.In this paper, we perform a quantitative analysis of developers' personality in open source software projects, intended as an extreme form of distributed projects in which no single organization controls the project. We mine ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects.We find that developers become over time more conscientious, agreeable, and neurotic. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open and more agreeable developers are more likely to become project contributors.1	team-building;  social and human aspects;  personality traits;  open source software;  large-scale distributed projects;  ecosystems;  apache; team-building, social and human aspects, personality traits, open source software, large-scale distributed projects, ecosystems, apache	Calefato, Fabio; Iaffaldano, Giuseppe; Lanubile, Filippo; Vasilescu, Bogdan	ICGSE '18: Proceedings of the 13th International Conference on Global Software Engineering	https://doi.org/10.1145/3196369.3196372		92-101	"""@inproceedings{10.1145/3196369.3196372,
    author = ""Calefato, Fabio and Iaffaldano, Giuseppe and Lanubile, Filippo and Vasilescu, Bogdan"",
    title = ""On developers' personality in large-scale distributed projects: the case of the apache ecosystem"",
    year = ""2018"",
    isbn = ""9781450357173"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/3196369.3196372"",
    doi = ""10.1145/3196369.3196372"",
    abstract = ""Large-scale distributed projects are typically the results of collective efforts performed by multiple developers, each one having a different personality. The study of developers' personalities has the potential of explaining their' behavior in various contexts. For example, the propensity to trust others, a critical factor to the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects.In this paper, we perform a quantitative analysis of developers' personality in open source software projects, intended as an extreme form of distributed projects in which no single organization controls the project. We mine ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects.We find that developers become over time more conscientious, agreeable, and neurotic. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open and more agreeable developers are more likely to become project contributors.1"",
    booktitle = ""Proceedings of the 13th International Conference on Global Software Engineering"",
    pages = ""92-101"",
    numpages = ""10"",
    keywords = ""team-building, social and human aspects, personality traits, open source software, large-scale distributed projects, ecosystems, apache"",
    location = ""Gothenburg, Sweden"",
    series = ""ICGSE '18""
}
"""						2	ACM		On Developers' Personality in Large-Scale Distributed Projects: The Case of the Apache Ecosystem	https://doi.org/10.1145/3196369.3196372	Association for Computing Machinery	nan; References; Link
485	TrustSE	A survey on technical threat intelligence in the age of sophisticated cyber attacks														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
486	TrustSE	Selection of third party software in Off-The-Shelf-based software development-An interview study with industrial practitioners	The success of software development using third party components highly depends on the ability to select a suitable component for the intended application. The evidence shows that there is limited knowledge about current industrial OTS selection practices. As a result, there is often a gap between theory and practice, and the proposed methods for supporting selection are rarely adopted in the industrial practice. This paper's goal is to investigate the actual industrial practice of component selection in order to provide an initial empirical basis that allows the reconciliation of research and industrial endeavors. The study consisted of semi-structured interviews with 23 employees from 20 different software-intensive companies that mostly develop web information system applications. It provides qualitative information that help to further understand these practices, and emphasize some aspects that have been overlooked by researchers. For instance, although the literature claims that component repositories are important for locating reusable components: these are hardly used in industrial practice. Instead, other resources that have not received considerable attention are used with this aim. Practices and potential market niches for software-intensive companies have been also identified. The results are valuable from both the research and the industrial perspectives as they provide a basis for formulating well-substantiated hypotheses and more effective improvement strategies.	Software engineering; Software reuse; Empirical study; Off-The-Shelf-based software development; Component selection; Software engineering;  Software reuse;  Empirical study;  Off-The-Shelf-based software development;  Component selection	Ayala, Claudia; Hauge, Oyvind; Conradi, Reidar; Franch, Xavier; Li, Jingyue	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2010.10.019		620-637	"""@article{WOS:000288142500008,
    Author = ""Ayala, Claudia and Hauge, Oyvind and Conradi, Reidar and Franch, Xavier and Li, Jingyue"",
    Title = ""Selection of third party software in Off-The-Shelf-based software development-An interview study with industrial practitioners"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2011"",
    Volume = ""84"",
    Number = ""4, SI"",
    Pages = ""620-637"",
    Month = ""APR"",
    Abstract = ""The success of software development using third party components highly depends on the ability to select a suitable component for the intended application. The evidence shows that there is limited knowledge about current industrial OTS selection practices. As a result, there is often a gap between theory and practice, and the proposed methods for supporting selection are rarely adopted in the industrial practice. This paper's goal is to investigate the actual industrial practice of component selection in order to provide an initial empirical basis that allows the reconciliation of research and industrial endeavors. The study consisted of semi-structured interviews with 23 employees from 20 different software-intensive companies that mostly develop web information system applications. It provides qualitative information that help to further understand these practices, and emphasize some aspects that have been overlooked by researchers. For instance, although the literature claims that component repositories are important for locating reusable components: these are hardly used in industrial practice. Instead, other resources that have not received considerable attention are used with this aim. Practices and potential market niches for software-intensive companies have been also identified. The results are valuable from both the research and the industrial perspectives as they provide a basis for formulating well-substantiated hypotheses and more effective improvement strategies. (C) 2010 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Ayala, C (Corresponding Author), Tech Univ Catalunya, UPC Campus Nord Omega, Barcelona 08034, Spain. Ayala, Claudia; Franch, Xavier, Tech Univ Catalunya, Barcelona 08034, Spain. Hauge, Oyvind; Conradi, Reidar, Norwegian Univ Sci \\& Technol, N-7491 Trondheim, Norway. Li, Jingyue, DNV Res \\& Innovat, N-1363 Hovik, Norway."",
    DOI = ""10.1016/j.jss.2010.10.019"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software engineering; Software reuse; Empirical study; Off-The-Shelf-based software development; Component selection"",
    Keywords-Plus = ""COMPONENTS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""cayala@essi.upc.edu hauge@idi.ntnu.no conradi@idi.ntnu.no franch@essi.upc.edu jingyue.li@dnv.com"",
    Affiliations = ""Universitat Politecnica de Catalunya; Norwegian University of Science \\& Technology (NTNU)"",
    ResearcherID-Numbers = ""Franch, Xavier/A-8588-2008"",
    ORCID-Numbers = ""Franch, Xavier/0000-0001-9733-8830"",
    Funding-Acknowledgement = ""ERCIM; Spanish project {[}TIN2007-64753]"",
    Funding-Text = ""We thank all people that participated in piloting an early version of the interview guide and the interview participants who took time from their workdays to participate in our interviews. Claudia Ayala's work was mostly carried out during the tenure of an ERCIM Alain Bensoussan Postdoctoral Fellowship. This work has been partially supported by the Spanish project ref. TIN2007-64753."",
    Number-of-Cited-References = ""58"",
    Times-Cited = ""23"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""2"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""731XA"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000288142500008"",
    OA = ""Green Published"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Selection of third party software in Off-The-Shelf-based software development—An interview study with industrial practitioners	https://doi.org/10.1016/j.jss.2010.10.019	ELSEVIER SCIENCE INC	nan; References; Link
487	TrustSE	Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review	Context: Component-based software systems require decisions on component origins for acquiring components. A component origin is an alternative of where to get a component from. Objective: To identify factors that could influence the decision to choose among different component origins and solutions for decision-making (For example, optimization) in the literature. Method: A systematic review study of peer-reviewed literature has been conducted. Results: In total we included 24 primary studies. The component origins compared were mainly focused on in-house vs. COTS and COTS vs. OSS. We identified 11 factors affecting or influencing the decision to select a component origin. When component origins were compared, there was little evidence on the relative (either positive or negative) effect of a component origin on the factor. Most of the solutions were proposed for in-house vs. COTS selection and time, cost and reliability were the most considered factors in the solutions. Optimization models were the most commonly proposed technique used in the solutions. Conclusion: The topic of choosing component origins is a green field for research, and in great need of empirical comparisons between the component origins, as well of how to decide between different combinations of them.	OSS; COTS; In-house development; Outsourcing; Decision-making; Component-based software engineering; OSS;  COTS;  In-house development;  Outsourcing;  Decision-making;  Component-based software engineering	Badampudi, Deepika; Wohlin, Claes; Petersen, Kai	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2016.07.027		105-124	"""@article{WOS:000384864500008,
    Author = ""Badampudi, Deepika and Wohlin, Claes and Petersen, Kai"",
    Title = ""Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2016"",
    Volume = ""121"",
    Pages = ""105-124"",
    Month = ""NOV"",
    Abstract = ""Context: Component-based software systems require decisions on component origins for acquiring components. A component origin is an alternative of where to get a component from. Objective: To identify factors that could influence the decision to choose among different component origins and solutions for decision-making (For example, optimization) in the literature. Method: A systematic review study of peer-reviewed literature has been conducted. Results: In total we included 24 primary studies. The component origins compared were mainly focused on in-house vs. COTS and COTS vs. OSS. We identified 11 factors affecting or influencing the decision to select a component origin. When component origins were compared, there was little evidence on the relative (either positive or negative) effect of a component origin on the factor. Most of the solutions were proposed for in-house vs. COTS selection and time, cost and reliability were the most considered factors in the solutions. Optimization models were the most commonly proposed technique used in the solutions. Conclusion: The topic of choosing component origins is a green field for research, and in great need of empirical comparisons between the component origins, as well of how to decide between different combinations of them. (C) 2016 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Badampudi, D (Corresponding Author), Blekinge Inst Technol, Karlskrona, Sweden. Badampudi, Deepika; Wohlin, Claes; Petersen, Kai, Blekinge Inst Technol, Karlskrona, Sweden."",
    DOI = ""10.1016/j.jss.2016.07.027"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""OSS; COTS; In-house development; Outsourcing; Decision-making; Component-based software engineering"",
    Keywords-Plus = ""FRAMEWORK"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""deepika.badampudi@bth.se claes.wohlin@bth.se kai.petersen@bth.se"",
    Affiliations = ""Blekinge Institute Technology"",
    ORCID-Numbers = ""Petersen, Kai/0000-0002-1532-8223"",
    Funding-Acknowledgement = ""Knowledge Foundation in Sweden {[}20140218]"",
    Funding-Text = ""The work is partially supported by a research grant for the ORION project (reference number 20140218) from The Knowledge Foundation in Sweden."",
    Number-of-Cited-References = ""58"",
    Times-Cited = ""40"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""20"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""DY1OO"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000384864500008"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review	https://www.webofscience.com/wos/woscc/full-record/WOS:000384864500008	ELSEVIER SCIENCE INC	nan; References
488	TrustSE	Forecasting IT security vulnerabilities – An empirical analysis														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
489	TrustSE	Dual-use open source security software in organizations - Dilemma: Help or hinder?	Dual-use technology can be used for both peaceful and harmful purposes. While the new type of anonymous, invisible and devastating security threats (malware, worms and viruses) shape contemporary warfare, organizations are challenged by the undefined risks of open source dual-use security tools. The dual-use dilemma is very important. It has not received adequate academic focus: questions such as increased or decreased risk, facilitation of security breaches, and the impact on security awareness have not been clarified or studied. This research closes existing gaps by studying the open source dual-use security software challenges that organizations should consider when using this technology. We utilize a triangulation approach with three independent data sources to conduct a detailed analysis of this phenomenon. Our study has found that the dual-use technology has both positive and negative effects on information system security. The ease of use of the dual-use security software facilitates security breaches and enterprises are using vulnerable open source security libraries and frameworks to develop their own in-house applications. On a positive note, open source dual-use security software is used as a powerful defense tool against attackers. Our study also found that security awareness is the key to maintaining the right level of information security risk in the dual-use context. Dual-use can also be of a great help to organizations in leveraging their information system security.	Dual-use technology; Open source security tools; Information security; Organizational security; OSS; Trust; Dual-use technology;  Open source security tools;  Information security;  Organizational security;  OSS;  Trust	Silic, Mario	COMPUTERS \& SECURITY	https://doi.org/10.1016/j.cose.2013.09.003		386-395	"""@article{WOS:000329007400020,
    Author = ""Silic, Mario"",
    Title = ""Dual-use open source security software in organizations - Dilemma: Help or hinder?"",
    Journal = ""COMPUTERS \\& SECURITY"",
    Year = ""2013"",
    Volume = ""39"",
    Number = ""B"",
    Pages = ""386-395"",
    Month = ""NOV"",
    Abstract = ""Dual-use technology can be used for both peaceful and harmful purposes. While the new type of anonymous, invisible and devastating security threats (malware, worms and viruses) shape contemporary warfare, organizations are challenged by the undefined risks of open source dual-use security tools. The dual-use dilemma is very important. It has not received adequate academic focus: questions such as increased or decreased risk, facilitation of security breaches, and the impact on security awareness have not been clarified or studied. This research closes existing gaps by studying the open source dual-use security software challenges that organizations should consider when using this technology. We utilize a triangulation approach with three independent data sources to conduct a detailed analysis of this phenomenon. Our study has found that the dual-use technology has both positive and negative effects on information system security. The ease of use of the dual-use security software facilitates security breaches and enterprises are using vulnerable open source security libraries and frameworks to develop their own in-house applications. On a positive note, open source dual-use security software is used as a powerful defense tool against attackers. Our study also found that security awareness is the key to maintaining the right level of information security risk in the dual-use context. Dual-use can also be of a great help to organizations in leveraging their information system security. (C) 2013 Elsevier Ltd. All rights reserved."",
    Publisher = ""ELSEVIER ADVANCED TECHNOLOGY"",
    Address = ""OXFORD FULFILLMENT CENTRE THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Silic, M (Corresponding Author), Univ St Gallen, Inst Informat Management, Mueller Friedberg Str 8, CH-9000 St Gallen, Switzerland. Univ St Gallen, Inst Informat Management, CH-9000 St Gallen, Switzerland."",
    DOI = ""10.1016/j.cose.2013.09.003"",
    ISSN = ""0167-4048"",
    EISSN = ""1872-6208"",
    Keywords = ""Dual-use technology; Open source security tools; Information security; Organizational security; OSS; Trust"",
    Keywords-Plus = ""TECHNOLOGY; MOTIVATION; ACCEPTANCE; AWARENESS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems"",
    Author-Email = ""mario.silic@student.unisg.ch"",
    Affiliations = ""University of St Gallen"",
    ORCID-Numbers = ""Silic, Mario/0009-0009-4141-991X"",
    Number-of-Cited-References = ""44"",
    Times-Cited = ""10"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""23"",
    Journal-ISO = ""Comput. Secur."",
    Doc-Delivery-Number = ""280CX"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000329007400020"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Dual-use open source security software in organizations – Dilemma: Help or hinder?	https://doi.org/10.1016/j.cose.2013.09.003	ELSEVIER ADVANCED TECHNOLOGY	nan; References; Link
490	TrustSE	Quality assurance in software ecosystems: A systematic literature mapping and research agenda	Software ecosystems are becoming a common model for software development in which different actors cooperate around a shared platform. However, it is not clear what the implications are on software quality when moving from a traditional approach to an ecosystem, and this is becoming increasingly important as ecosystems emerge in critical domains such as embedded applications. Therefore, this paper investigates the challenges related to quality assurance in software ecosystems, and identifies what approaches have been proposed in the literature. The research method used is a systematic literature mapping, which however only resulted in a small set of six papers. The literature findings are complemented with a constructive approach where areas are identified that merit further research, resulting in a set of research topics that form a research agenda for quality assurance in software ecosystems. The agenda spans the entire system life-cycle, and focuses on challenges particular to an ecosystem setting, which are mainly the results of the interactions across organizational borders, and the dynamic system integration being controlled by the users.	Software ecosystems; Quality; Verification; Testing; Software ecosystems;  Quality;  Verification;  Testing	Axelsson, Jakob; Skoglund, Mats	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2015.12.020		69-81	"""@article{WOS:000370914300005,
    Author = ""Axelsson, Jakob and Skoglund, Mats"",
    Title = ""Quality assurance in software ecosystems: A systematic literature mapping and research agenda"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2016"",
    Volume = ""114"",
    Pages = ""69-81"",
    Month = ""APR"",
    Abstract = ""Software ecosystems are becoming a common model for software development in which different actors cooperate around a shared platform. However, it is not clear what the implications are on software quality when moving from a traditional approach to an ecosystem, and this is becoming increasingly important as ecosystems emerge in critical domains such as embedded applications. Therefore, this paper investigates the challenges related to quality assurance in software ecosystems, and identifies what approaches have been proposed in the literature. The research method used is a systematic literature mapping, which however only resulted in a small set of six papers. The literature findings are complemented with a constructive approach where areas are identified that merit further research, resulting in a set of research topics that form a research agenda for quality assurance in software ecosystems. The agenda spans the entire system life-cycle, and focuses on challenges particular to an ecosystem setting, which are mainly the results of the interactions across organizational borders, and the dynamic system integration being controlled by the users. (c) 2015 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Axelsson, J (Corresponding Author), SICS, Software \\& Syst Engn Lab, POB 1263, SE-16429 Kista, Sweden. Axelsson, Jakob; Skoglund, Mats, SICS, Software \\& Syst Engn Lab, POB 1263, SE-16429 Kista, Sweden."",
    DOI = ""10.1016/j.jss.2015.12.020"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software ecosystems; Quality; Verification; Testing"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""jakob.axelsson@sics.se"",
    Affiliations = ""RISE Research Institutes of Sweden"",
    ResearcherID-Numbers = ""Axelsson, Jakob/AAE-3249-2020"",
    ORCID-Numbers = ""Axelsson, Jakob/0000-0002-3986-1196"",
    Funding-Acknowledgement = ""Vinnova; Swedish Agency for Innovation Systems {[}2013-03492]; consortium of Swedish companies; Vinnova {[}2013-03492] Funding Source: Vinnova"",
    Funding-Text = ""This research has been supported by Vinnova, the Swedish Agency for Innovation Systems (grant no. 2013-03492), and a consortium of Swedish companies."",
    Number-of-Cited-References = ""36"",
    Times-Cited = ""36"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""28"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""DE8VH"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000370914300005"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Quality assurance in software ecosystems: A systematic literature mapping and research agenda	https://www.webofscience.com/wos/woscc/full-record/WOS:000370914300005	ELSEVIER SCIENCE INC	nan; References
491	TrustSE	What happens when software developers are (un)happy	The growing literature on affect among software developers mostly reports on the linkage between happiness, software quality, and developer productivity. Understanding happiness and unhappiness in all its components - positive and negative emotions and moods - is an attractive and important endeavor. Scholars in industrial and organizational psychology have suggested that understanding happiness and unhappiness could lead to cost-effective ways of enhancing working conditions, job performance, and to limiting the occurrence of psychological disorders. Our comprehension of the consequences of (un)happiness among developers is still too shallow, being mainly expressed in terms of development productivity and software quality. In this paper, we study what happens when developers are happy and unhappy while developing software. Qualitative data analysis of responses given by 317 questionnaire participants identified 42 consequences of unhappiness and 32 of happiness. We found consequences of happiness and unhappiness that are beneficial and detrimental for developers' mental well-being, the software development process, and the produced artifacts. Our classification scheme, available as open data enables new happiness research opportunities of cause-effect type, and it can act as a guideline for practitioners for identifying damaging effects of unhappiness and for fostering happiness on the job.	Behavioral software engineering; Developer experience; Human aspects; Happiness; Affect; Emotion; Behavioral software engineering;  Developer experience;  Human aspects;  Happiness;  Affect;  Emotion	Graziotin, Daniel; Fagerholm, Fabian; Wang, Xiaofeng; Abrahamsson, Pekka	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2018.02.041		32-47	"""@article{WOS:000430904500004,
    Author = ""Graziotin, Daniel and Fagerholm, Fabian and Wang, Xiaofeng and Abrahamsson, Pekka"",
    Title = ""What happens when software developers are (un)happy"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2018"",
    Volume = ""140"",
    Pages = ""32-47"",
    Month = ""JUN"",
    Abstract = ""The growing literature on affect among software developers mostly reports on the linkage between happiness, software quality, and developer productivity. Understanding happiness and unhappiness in all its components - positive and negative emotions and moods - is an attractive and important endeavor. Scholars in industrial and organizational psychology have suggested that understanding happiness and unhappiness could lead to cost-effective ways of enhancing working conditions, job performance, and to limiting the occurrence of psychological disorders. Our comprehension of the consequences of (un)happiness among developers is still too shallow, being mainly expressed in terms of development productivity and software quality. In this paper, we study what happens when developers are happy and unhappy while developing software. Qualitative data analysis of responses given by 317 questionnaire participants identified 42 consequences of unhappiness and 32 of happiness. We found consequences of happiness and unhappiness that are beneficial and detrimental for developers' mental well-being, the software development process, and the produced artifacts. Our classification scheme, available as open data enables new happiness research opportunities of cause-effect type, and it can act as a guideline for practitioners for identifying damaging effects of unhappiness and for fostering happiness on the job. (C) 2018 The Authors. Published by Elsevier Inc."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Fagerholm, F (Corresponding Author), Univ Helsinki, Dept Comp Sci, Helsinki, Finland. Fagerholm, F (Corresponding Author), Blekinge Inst Technol, Software Engn Res Lab Sweden, Karlskrona, Sweden. Graziotin, Daniel, Univ Stuttgart, Inst Software Technol, Stuttgart, Germany. Fagerholm, Fabian, Univ Helsinki, Dept Comp Sci, Helsinki, Finland. Fagerholm, Fabian, Blekinge Inst Technol, Software Engn Res Lab Sweden, Karlskrona, Sweden. Wang, Xiaofeng, Free Univ Bozen Bolzano, Fac Comp Sci, Bolzano, Italy. Abrahamsson, Pekka, Univ Jyvaskyla, Fac Informat Technol, Jyvaskyla, Finland."",
    DOI = ""10.1016/j.jss.2018.02.041"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Behavioral software engineering; Developer experience; Human aspects; Happiness; Affect; Emotion"",
    Keywords-Plus = ""MOOD; EMOTIONS; CREATIVITY; HAPPINESS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""daniel.graziotin@informatik.uni-stuttgart.de fabian.fagerholm@helsinki.fi xiaofeng.wang@unibz.it pekka.abrahamsson@jyu.fi"",
    Affiliations = ""University of Stuttgart; University of Helsinki; Blekinge Institute Technology; Free University of Bozen-Bolzano; University of Jyvaskyla"",
    ResearcherID-Numbers = ""Hu, Shaolin/N-1791-2018 Fagerholm, Fabian/B-1952-2015"",
    ORCID-Numbers = ""Fagerholm, Fabian/0000-0002-7298-3021 Graziotin, Daniel/0000-0002-9107-7681"",
    Funding-Acknowledgement = ""Alexander von Humboldt (AvH) Foundation"",
    Funding-Text = ""The authors would like to thank all those who participated in this study. Daniel Graziotin has been supported by the Alexander von Humboldt (AvH) Foundation."",
    Number-of-Cited-References = ""59"",
    Times-Cited = ""108"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""25"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""GE0LE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000430904500004"",
    OA = ""Green Submitted, Green Published, hybrid, Green Accepted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		What happens when software developers are (un)happy	https://www.webofscience.com/wos/woscc/full-record/WOS:000430904500004	ELSEVIER SCIENCE INC	nan; References
492	TrustSE	A trusted feature aggregator federated learning for distributed malicious attack detection														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
493	TrustSE	Be more familiar with our enemies and pave the way forward: A review of the roles bugs played in software failures	There has been an increasing frequency of failures due to defective software that cost millions of dollars. Recent high profile incidents have drawn increased attention to the risks of failed software systems to the public. Yet aside from the Therac-25 case, very few incidents of software failure causing humans harm have been proven and widely reported. With increased government oversight and the expanded use of social networking for real time reporting of problems, we are only beginning to understand the potential for major injury or death related to software failures. However, debugging defective software can be costly and time consuming. Moreover, undetected bugs could induce great harm to the public when software systems are applied in safety-critical areas, such as consumer products, public infrastructure, transportation systems, etc. Therefore, it is vital that we remove these bugs as early as possible. To gain more understanding of the nature of these bugs, we review the reported software failures that have impacted the health, safety, and welfare of the public. A focus on lessons learned and implications for future software systems is also provided which acts as guidelines for engineers to improve the quality of their products and avoid similar failures from happening.	Accidents; Bugged software systems; Software failures; Mishaps; Lessons learned; Accidents;  Bugged software systems;  Software failures;  Mishaps;  Lessons learned	Wong, W. Eric; Li, Xuelin; Laplante, Philip A.	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2017.06.069		68-94	"""@article{WOS:000412614400005,
    Author = ""Wong, W. Eric and Li, Xuelin and Laplante, Philip A."",
    Title = ""Be more familiar with our enemies and pave the way forward: A review of the roles bugs played in software failures"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2017"",
    Volume = ""133"",
    Pages = ""68-94"",
    Month = ""NOV"",
    Abstract = ""There has been an increasing frequency of failures due to defective software that cost millions of dollars. Recent high profile incidents have drawn increased attention to the risks of failed software systems to the public. Yet aside from the Therac-25 case, very few incidents of software failure causing humans harm have been proven and widely reported. With increased government oversight and the expanded use of social networking for real time reporting of problems, we are only beginning to understand the potential for major injury or death related to software failures. However, debugging defective software can be costly and time consuming. Moreover, undetected bugs could induce great harm to the public when software systems are applied in safety-critical areas, such as consumer products, public infrastructure, transportation systems, etc. Therefore, it is vital that we remove these bugs as early as possible. To gain more understanding of the nature of these bugs, we review the reported software failures that have impacted the health, safety, and welfare of the public. A focus on lessons learned and implications for future software systems is also provided which acts as guidelines for engineers to improve the quality of their products and avoid similar failures from happening. (C) 2017 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Wong, WE (Corresponding Author), Univ Elect Sci \\& Technol China, Sch Comp Sci \\& Engn, Chengdu, Sichuan, Peoples R China. Wong, WE (Corresponding Author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA. Wong, W. Eric, Univ Elect Sci \\& Technol China, Sch Comp Sci \\& Engn, Chengdu, Sichuan, Peoples R China. Wong, W. Eric; Li, Xuelin, Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA. Laplante, Philip A., Penn State Univ, Software \\& Syst Engn, University Pk, PA 16802 USA."",
    DOI = ""10.1016/j.jss.2017.06.069"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Accidents; Bugged software systems; Software failures; Mishaps; Lessons learned"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""ewong@utdallas.edu"",
    Affiliations = ""University of Electronic Science \\& Technology of China; University of Texas System; University of Texas Dallas; Pennsylvania Commonwealth System of Higher Education (PCSHE); Pennsylvania State University; Pennsylvania State University - University Park"",
    ORCID-Numbers = ""Li, Xuelin/0000-0001-7204-0616"",
    Funding-Acknowledgement = ""Direct For Computer \\& Info Scie \\& Enginr; Division of Computing and Communication Foundations {[}1461149] Funding Source: National Science Foundation"",
    Number-of-Cited-References = ""122"",
    Times-Cited = ""66"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""25"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""FJ3EX"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000412614400005"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Be more familiar with our enemies and pave the way forward: A review of the roles bugs played in software failures	https://www.webofscience.com/wos/woscc/full-record/WOS:000412614400005	ELSEVIER SCIENCE INC	nan; References
494	TrustSE	Satisfaction and its correlates in agile software development	In this paper we address the topic of software development team members satisfaction with their development process. We present an in-depth analysis of the results of a nationwide survey about software development in Switzerland. We wanted to find out if satisfaction relates to the applied development method, and to the use of various practices, and impacts on business, team and software issues. We found that higher satisfaction is reported more by those using Agile development than with plan-driven processes. We explored the different perspectives of developers and those with a management role and found a high consistency of satisfaction between Agile developers and Agile management, and differences with those using working plan-driven methods. We found that certain practices and impacts have high correlations to satisfaction, and that collaborative processes are closely related to satisfaction. We then explored the relationship between satisfaction and various other perspectives. Our results in this analysis are principally descriptive, but we think they can be a relevant contribution to understand the challenges for everyone involved in Agile development.		Kropp, Martin; Meier, Andreas; Anslow, Craig; Biddle, Robert	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2020.110544			"""@article{WOS:000527289100003,
    Author = ""Kropp, Martin and Meier, Andreas and Anslow, Craig and Biddle, Robert"",
    Title = ""Satisfaction and its correlates in agile software development"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2020"",
    Volume = ""164"",
    Month = ""JUN"",
    Abstract = ""In this paper we address the topic of software development team members satisfaction with their development process. We present an in-depth analysis of the results of a nationwide survey about software development in Switzerland. We wanted to find out if satisfaction relates to the applied development method, and to the use of various practices, and impacts on business, team and software issues. We found that higher satisfaction is reported more by those using Agile development than with plan-driven processes. We explored the different perspectives of developers and those with a management role and found a high consistency of satisfaction between Agile developers and Agile management, and differences with those using working plan-driven methods. We found that certain practices and impacts have high correlations to satisfaction, and that collaborative processes are closely related to satisfaction. We then explored the relationship between satisfaction and various other perspectives. Our results in this analysis are principally descriptive, but we think they can be a relevant contribution to understand the challenges for everyone involved in Agile development. (C) 2020 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Biddle, R (Corresponding Author), Carleton Univ, Ottawa, ON, Canada. Kropp, Martin, Univ Appl Sci Northwestern Switzerland, Windisch, Switzerland. Meier, Andreas, Zurich Univ Appl Sci, Winterthur, Switzerland. Anslow, Craig, Victoria Univ Wellington, Wellington, New Zealand. Biddle, Robert, Carleton Univ, Ottawa, ON, Canada."",
    DOI = ""10.1016/j.jss.2020.110544"",
    Article-Number = ""110544"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords-Plus = ""JOB-SATISFACTION; TEAMWORK QUALITY; SUCCESS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""martin.kropp@fhnw.ch meea@zhaw.ch craig@ecs.vuw.ac.nz robert.biddle@carleton.ca"",
    Affiliations = ""FHNW University of Applied Sciences \\& Arts Northwestern Switzerland; Zurich University of Applied Sciences; Victoria University Wellington; Carleton University"",
    Funding-Acknowledgement = ""Swiss IT organizations swiss ICT; SWEN"",
    Funding-Text = ""We especially thank the study participants for their most valuable answers, the anonymous referees of this paper, and the Swiss IT organizations swiss ICT and SWEN for supporting and funding the study."",
    Number-of-Cited-References = ""32"",
    Times-Cited = ""13"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""LF2YS"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000527289100003"",
    DA = ""2024-10-22""
}
"""						2	Web of Science		Satisfaction and its correlates in agile software development	https://www.webofscience.com/wos/woscc/full-record/WOS:000527289100003	ELSEVIER SCIENCE INC	nan; Keywords; References; Pages
495	TrustSE	Software evaluation problem situations														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
496	TrustSE	A comparative study of challenges in integrating Open Source Software and Inner Source Software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
497	TrustSE	Explaining reputation assessments														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
498	TrustSE	The reliability estimation, prediction and measuring of component-based software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
499	TrustSE	Characterizing and predicting blocking bugs in open source projects	As software becomes increasingly important, its quality becomes an increasingly important issue. Therefore, prior work focused on software quality and proposed many prediction models to identify the location of software bugs, to estimate their fixing-time, etc. However, one special type of severe bugs is blocking bugs. Blocking bugs are software bugs that prevent other bugs from being fixed. These blocking bugs may increase maintenance costs, reduce overall quality and delay the release of the software systems. In this paper, we study blocking-bugs in six open source projects and propose a model to predict them. Our goal is to help developers identify these blocking bugs early on. We collect the bug reports from the bug tracking systems of the projects, then we obtain 14 different factors related to, for example, the textual description of the bug, the location the bug is found in and the people involved with the bug. Based on these factors we build decision trees for each project to predict whether a bug will be a blocking bug or not. Then, we analyze these decision trees in order to determine which factors best indicate these blocking bugs. Our results show that our prediction models achieve F-measures of 15-42\%, which is a two- to four-fold improvement over the baseline random predictors. We also find that the most important factors in determining blocking bugs are the comment text, comment size, the number of developers in the CC list of the bug report and the reporter's experience. Our analysis shows that our models reduce the median time to identify a blocking bug by 3-18 days.	Code Metrics;  Post-release Defects;  Process Metrics; Code Metrics, Post-release Defects, Process Metrics	Valdivia Garcia, Harold; Shihab, Emad	MSR 2014: Proceedings of the 11th Working Conference on Mining Software Repositories	https://doi.org/10.1145/2597073.2597099		72-81	"""@inproceedings{10.1145/2597073.2597099,
    author = ""Valdivia Garcia, Harold and Shihab, Emad"",
    title = ""Characterizing and predicting blocking bugs in open source projects"",
    year = ""2014"",
    isbn = ""9781450328630"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2597073.2597099"",
    doi = ""10.1145/2597073.2597099"",
    abstract = ""As software becomes increasingly important, its quality becomes an increasingly important issue. Therefore, prior work focused on software quality and proposed many prediction models to identify the location of software bugs, to estimate their fixing-time, etc. However, one special type of severe bugs is blocking bugs. Blocking bugs are software bugs that prevent other bugs from being fixed. These blocking bugs may increase maintenance costs, reduce overall quality and delay the release of the software systems. In this paper, we study blocking-bugs in six open source projects and propose a model to predict them. Our goal is to help developers identify these blocking bugs early on. We collect the bug reports from the bug tracking systems of the projects, then we obtain 14 different factors related to, for example, the textual description of the bug, the location the bug is found in and the people involved with the bug. Based on these factors we build decision trees for each project to predict whether a bug will be a blocking bug or not. Then, we analyze these decision trees in order to determine which factors best indicate these blocking bugs. Our results show that our prediction models achieve F-measures of 15-42\\%, which is a two- to four-fold improvement over the baseline random predictors. We also find that the most important factors in determining blocking bugs are the comment text, comment size, the number of developers in the CC list of the bug report and the reporter's experience. Our analysis shows that our models reduce the median time to identify a blocking bug by 3-18 days."",
    booktitle = ""Proceedings of the 11th Working Conference on Mining Software Repositories"",
    pages = ""72-81"",
    numpages = ""10"",
    keywords = ""Code Metrics, Post-release Defects, Process Metrics"",
    location = ""Hyderabad, India"",
    series = ""MSR 2014""
}
"""						2	ACM		Characterizing and predicting blocking bugs in open source projects	https://doi.org/10.1145/2597073.2597099	Association for Computing Machinery	nan; References; Link
500	TrustSE	Open source software––an evaluation														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
501	TrustSE	Comparative case studies of open source software peer review practices														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
502	TrustSE	Empirical study of the effects of open source adoption on software development economics														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
503	TrustSE	Social network analysis of open source software: A review and categorisation														2						
504	TrustSE	Towards comprehending the non-functional requirements through Developers' eyes: An exploration of Stack Overflow using topic analysis	Context: As a vital role for the quality of software, non-functional requirements (NFRs) are attracting greater attention from developers. The programming question and answer (Q\&A) websites like Stack Overflow gathered the knowledge and expertise of developers worldwide which reflects some insight into the development activities (e.g., NFRs), but the NFR5 in the Q\&A site are rarely investigated. Objective: Our research aims to aid comprehension on the actual thoughts and needs of the developers by analyzing the NFRs on Stack Overflow. Method: We extracted the textual content of Stack Overflow discussions, and then we applied the topic modeling technique called latent Dirichlet allocation (LDA) helping us to discover the main topics of the corpus. Next, we labelled the topics with NFR5 by the wordlists to analyze the hot, unresolved, difficult NFRs, and the evolutionary trends which involves the trends of the NFR5 focus and NFRs difficulty. Results: Our findings show that (1) The developers mostly discuss usability and reliability while discussing less on maintainability and efficiency. (2) The most unresolved problems also occurred in usability and reliability. (3) The visualization of the NFR evolutions over time shows the functionality and reliability attract more and more attention from developers and usability remains hot. (4) The NFRs investigation in specific technologies indicates the quality is a similar concern among different technologies and some NFRs are of more interest as time progresses. (5) The research on NFRs difficulty in specific technologies shows the maintainability is the most difficult NFR In addition, the trends of the NFRs difficulty over time in the seven categories signal that we should focus more on usability to address them. Conclusion: We present an empirical study on 21.7 million posts and 32.5 million comments of Stack Overflow, and our research provides some guide to understand the NFR5 through developers' eyes.	Non-functional requirements (NFRs); Topic model; Latent Dirichlet allocation (LDA); Stack Overflow; Non-functional requirements (NFRs);  Topic model;  Latent Dirichlet allocation (LDA);  Stack Overflow	Zou, Jie; Xu, Ling; Yang, Mengning; Zhang, Xiaohong; Yang, Dan	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2016.12.003		19-32	"""@article{WOS:000393252400002,
    Author = ""Zou, Jie and Xu, Ling and Yang, Mengning and Zhang, Xiaohong and Yang, Dan"",
    Title = ""Towards comprehending the non-functional requirements through Developers' eyes: An exploration of Stack Overflow using topic analysis"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2017"",
    Volume = ""84"",
    Pages = ""19-32"",
    Month = ""APR"",
    Abstract = ""Context: As a vital role for the quality of software, non-functional requirements (NFRs) are attracting greater attention from developers. The programming question and answer (Q\\&A) websites like Stack Overflow gathered the knowledge and expertise of developers worldwide which reflects some insight into the development activities (e.g., NFRs), but the NFR5 in the Q\\&A site are rarely investigated. Objective: Our research aims to aid comprehension on the actual thoughts and needs of the developers by analyzing the NFRs on Stack Overflow. Method: We extracted the textual content of Stack Overflow discussions, and then we applied the topic modeling technique called latent Dirichlet allocation (LDA) helping us to discover the main topics of the corpus. Next, we labelled the topics with NFR5 by the wordlists to analyze the hot, unresolved, difficult NFRs, and the evolutionary trends which involves the trends of the NFR5 focus and NFRs difficulty. Results: Our findings show that (1) The developers mostly discuss usability and reliability while discussing less on maintainability and efficiency. (2) The most unresolved problems also occurred in usability and reliability. (3) The visualization of the NFR evolutions over time shows the functionality and reliability attract more and more attention from developers and usability remains hot. (4) The NFRs investigation in specific technologies indicates the quality is a similar concern among different technologies and some NFRs are of more interest as time progresses. (5) The research on NFRs difficulty in specific technologies shows the maintainability is the most difficult NFR In addition, the trends of the NFRs difficulty over time in the seven categories signal that we should focus more on usability to address them. Conclusion: We present an empirical study on 21.7 million posts and 32.5 million comments of Stack Overflow, and our research provides some guide to understand the NFR5 through developers' eyes. (C) 2016 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Xu, L (Corresponding Author), Chongqing Univ, Minist Educ, Key Lab Dependable Serv Comp Cyber Phys Soc, Chongqing 400044, Peoples R China. Xu, L (Corresponding Author), Chongqing Univ, Sch Software Engn, Chongqing 401331, Peoples R China. Xu, Ling, Chongqing Univ, Minist Educ, Key Lab Dependable Serv Comp Cyber Phys Soc, Chongqing 400044, Peoples R China. Zou, Jie; Xu, Ling; Yang, Mengning; Zhang, Xiaohong; Yang, Dan, Chongqing Univ, Sch Software Engn, Chongqing 401331, Peoples R China."",
    DOI = ""10.1016/j.infsof.2016.12.003"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Non-functional requirements (NFRs); Topic model; Latent Dirichlet allocation (LDA); Stack Overflow"",
    Keywords-Plus = ""LATENT; CLASSIFICATION; DISTRIBUTIONS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""xuling@cqu.edu.cn"",
    Affiliations = ""Chongqing University; Chongqing University"",
    ResearcherID-Numbers = ""Zhang, Xiaohong/A-3060-2015 YANG, Dan/HHD-2733-2022"",
    Funding-Acknowledgement = ""Chongqing University Postgraduates' Innovation Project {[}CYS15022]; National Natural Science Foundation of China {[}91118005, 61173131]; Changjiang Scholars and Innovative Research Team in University {[}IRT1196]"",
    Funding-Text = ""The work described in this paper was partially supported by Chongqing University Postgraduates' Innovation Project (Grant No. CYS15022), the National Natural Science Foundation of China (Grant Nos. 91118005, 61173131), and Changjiang Scholars and Innovative Research Team in University (Grant No. IRT1196)."",
    Number-of-Cited-References = ""65"",
    Times-Cited = ""28"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""EJ5IV"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000393252400002"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Towards comprehending the non-functional requirements through Developers’ eyes: An exploration of Stack Overflow using topic analysis	https://doi.org/10.1016/j.infsof.2016.12.003	ELSEVIER	nan; References; Link
505	TrustSE	Open source software ecosystems: A Systematic mapping														2						
506	TrustSE	A large-scale, in-depth analysis of developers' personalities in the Apache ecosystem	Context Large-scale distributed projects are typically the results of collective efforts performed by multiple developers with heterogeneous personalities. Objective: We aim to find evidence that personalities can explain developers' behavior in large scale-distributed projects. For example, the propensity to trust others - a critical factor for the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects. Method: In this paper, we perform a quantitative analysis of ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects. Results: We find that there are three common types of personality profiles among Apache developers, characterized in particular by their level of Agreeableness and Neuroticism. We also confirm that developers' personality is stable over time. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open developers are more likely to make contributors to Apache projects. Conclusion: Overall, our findings reinforce the need for future studies on human factors in software engineering to use psychometric tools to control for differences in developers' personalities.	Personality traits; Large-scale distributed projects; Ecosystems; Apache; Big five; Five-Factor model; Open source software; Human aspects; Psychometric analysis; Computational personality detection; Personality traits;  Large-scale distributed projects;  Ecosystems;  Apache;  Big five;  Five-Factor model;  Open source software;  Human aspects;  Psychometric analysis;  Computational personality detection	Calefato, Fabio; Lanubile, Filippo; Vasilescu, Bogdan	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2019.05.012		1-20	"""@article{WOS:000480669200001,
    Author = ""Calefato, Fabio and Lanubile, Filippo and Vasilescu, Bogdan"",
    Title = ""A large-scale, in-depth analysis of developers' personalities in the Apache ecosystem"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2019"",
    Volume = ""114"",
    Pages = ""1-20"",
    Month = ""OCT"",
    Abstract = ""Context Large-scale distributed projects are typically the results of collective efforts performed by multiple developers with heterogeneous personalities. Objective: We aim to find evidence that personalities can explain developers' behavior in large scale-distributed projects. For example, the propensity to trust others - a critical factor for the success of global software engineering - has been found to influence positively the result of code reviews in distributed projects. Method: In this paper, we perform a quantitative analysis of ecosystem-level data from the code commits and email messages contributed by the developers working on the Apache Software Foundation (ASF) projects, as representative of large scale-distributed projects. Results: We find that there are three common types of personality profiles among Apache developers, characterized in particular by their level of Agreeableness and Neuroticism. We also confirm that developers' personality is stable over time. Moreover, personality traits do not vary with their role, membership, and extent of contribution to the projects. We also find evidence that more open developers are more likely to make contributors to Apache projects. Conclusion: Overall, our findings reinforce the need for future studies on human factors in software engineering to use psychometric tools to control for differences in developers' personalities."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Calefato, F (Corresponding Author), Univ Bari, Bari, Italy. Calefato, Fabio; Lanubile, Filippo, Univ Bari, Bari, Italy. Vasilescu, Bogdan, Carnegie Mellon Univ, Pittsburgh, PA 15213 USA."",
    DOI = ""10.1016/j.infsof.2019.05.012"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Personality traits; Large-scale distributed projects; Ecosystems; Apache; Big five; Five-Factor model; Open source software; Human aspects; Psychometric analysis; Computational personality detection"",
    Keywords-Plus = ""5-FACTOR MODEL; WORK PREFERENCES; SOFTWARE; TRAITS; SATISFACTION; RECOGNITION; COOPERATION; PERSPECTIVE; MOTIVATION; PROFILES"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""fabio.calefato@uniba.it filippo.lanubile@uniba.it vasilescu@cmu.edu"",
    Affiliations = ""Universita degli Studi di Bari Aldo Moro; Carnegie Mellon University"",
    ResearcherID-Numbers = ""Lanubile, Filippo/AAF-9132-2020 Calefato, Fabio/H-4177-2014"",
    ORCID-Numbers = ""Vasilescu, Bogdan/0000-0003-4418-5783 Calefato, Fabio/0000-0003-2654-1588"",
    Funding-Acknowledgement = ""MIUR under the program ``PON RC 2007-2013{''}"",
    Funding-Text = ""We thank IBM for providing free access to the Personality Insights API. The computational work has been executed on the IT resources made available by two projects, ReCaS and PRISMA, funded by MIUR under the program ``PON R\\&C 2007-2013.{''} We are also grateful to Marco Iannotta for his help in the data extraction process."",
    Number-of-Cited-References = ""132"",
    Times-Cited = ""22"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""5"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""IQ3RQ"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000480669200001"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		A large-scale, in-depth analysis of developers’ personalities in the Apache ecosystem	https://doi.org/10.1016/j.infsof.2019.05.012	ELSEVIER	nan; References; Link
507	TrustSE	An empirically-based characterization and quantification of information seeking through mailing lists during Open Source developers' software evolution	Context: Several authors have proposed information seeking as an appropriate perspective for studying software evolution. Empirical evidence in this area suggests that substantial time delays can accrue, due to the unavailability of required information, particularly when this information must travel across geographically distributed sites. Objective: As a first step in addressing the time delays that can occur in information seeking for distributed Open Source (OS) programmers during software evolution, this research characterizes the information seeking of OS developers through their mailing lists. Method: A longitudinal study that analyses 17 years of developer mailing list activity in total, over 6 different OS projects is performed, identifying the prevalent information types sought by developers, from a qualitative, grounded analysis of this data. Quantitative analysis of the number-of-responses and response time-lag is also performed. Results: The analysis shows that Open Source developers are particularly implementation centric and team focused in their use of mailing lists, mirroring similar findings that have been reported in the literature. However novel findings include the suggestion that OS developers often require support regarding the technology they use during development, that they refer to documentation fairly frequently and that they seek implementation-oriented specifics based on system design principles that they anticipate in advance. In addition, response analysis suggests a large variability in the response rates for different types of questions, and particularly that participants have difficulty ascertaining information on other developer's activities. Conclusion: The findings provide insights for those interested in supporting the information needs of OS developer communities: They suggest that the tools and techniques developed in support of co-located developers should be largely mirrored for these communities: that they should be implementation centric, and directed at illustrating ``how{''} the system achieves its functional goals and states. Likewise they should be directed at determining the reason for system bugs: a type of question frequently posed by OS developers but less frequently responded to.	Information seeking software maintenance; Open source software; Qualitative empirical study; Information seeking software maintenance;  Open source software;  Qualitative empirical study	Sharif, Khaironi Y.; English, Michael; Ali, Nour; Exton, Chris; Collins, J. J.; Buckley, Jim	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2014.09.003		77-94	"""@article{WOS:000345947500006,
    Author = ""Sharif, Khaironi Y. and English, Michael and Ali, Nour and Exton, Chris and Collins, J. J. and Buckley, Jim"",
    Title = ""An empirically-based characterization and quantification of information seeking through mailing lists during Open Source developers' software evolution"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2015"",
    Volume = ""57"",
    Pages = ""77-94"",
    Month = ""JAN"",
    Abstract = ""Context: Several authors have proposed information seeking as an appropriate perspective for studying software evolution. Empirical evidence in this area suggests that substantial time delays can accrue, due to the unavailability of required information, particularly when this information must travel across geographically distributed sites. Objective: As a first step in addressing the time delays that can occur in information seeking for distributed Open Source (OS) programmers during software evolution, this research characterizes the information seeking of OS developers through their mailing lists. Method: A longitudinal study that analyses 17 years of developer mailing list activity in total, over 6 different OS projects is performed, identifying the prevalent information types sought by developers, from a qualitative, grounded analysis of this data. Quantitative analysis of the number-of-responses and response time-lag is also performed. Results: The analysis shows that Open Source developers are particularly implementation centric and team focused in their use of mailing lists, mirroring similar findings that have been reported in the literature. However novel findings include the suggestion that OS developers often require support regarding the technology they use during development, that they refer to documentation fairly frequently and that they seek implementation-oriented specifics based on system design principles that they anticipate in advance. In addition, response analysis suggests a large variability in the response rates for different types of questions, and particularly that participants have difficulty ascertaining information on other developer's activities. Conclusion: The findings provide insights for those interested in supporting the information needs of OS developer communities: They suggest that the tools and techniques developed in support of co-located developers should be largely mirrored for these communities: that they should be implementation centric, and directed at illustrating ``how{''} the system achieves its functional goals and states. Likewise they should be directed at determining the reason for system bugs: a type of question frequently posed by OS developers but less frequently responded to. (C) 2014 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""English, M (Corresponding Author), Univ Limerick, Irish Software Engn Res Ctr LERO, Limerick, Ireland. Sharif, Khaironi Y., Univ Putra Malaysia, FSKTM, SERG, Serdang 43400, Malaysia. English, Michael; Exton, Chris; Collins, J. J.; Buckley, Jim, Univ Limerick, Irish Software Engn Res Ctr LERO, Limerick, Ireland. Ali, Nour, Brighton Univ, Sch Comp Engn \\& Math, Brighton, E Sussex, England."",
    DOI = ""10.1016/j.infsof.2014.09.003"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Information seeking software maintenance; Open source software; Qualitative empirical study"",
    Keywords-Plus = ""PROGRAM COMPREHENSION; MAINTENANCE; GOVERNANCE; QUESTIONS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Affiliations = ""Universiti Putra Malaysia; University of Limerick; University of Brighton"",
    ResearcherID-Numbers = ""English, Michael/KIC-0937-2024 Collins, J.J./E-5574-2014"",
    ORCID-Numbers = ""Buckley, Jim/0000-0001-6928-6746 Ali, Nour/0000-0002-0161-5600 Sharif, Khaironi Yatim/0000-0003-3894-1773"",
    Funding-Acknowledgement = ""Science Foundation Ireland {[}10/CE/I1855]"",
    Funding-Text = ""This work was supported, in part, by Science Foundation Ireland Grant 10/CE/I1855 to Lero - the Irish Software Engineering Research Centre (www.lero.ie)."",
    Number-of-Cited-References = ""90"",
    Times-Cited = ""17"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""8"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""AU9YI"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000345947500006"",
    OA = ""Green Submitted, Green Accepted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		An empirically-based characterization and quantification of information seeking through mailing lists during Open Source developers’ software evolution	https://doi.org/10.1016/j.infsof.2014.09.003	ELSEVIER	nan; References; Link
508	TrustSE	A theory of power in emerging software ecosystems formed by small-to-medium enterprises	In a software ecosystem, partner companies rely on each other to succeed and survive. This scenario of mutual dependence entails a flow of power among companies. Power is an intrinsic property of their relationship and an asset to be exercised with a degree of intentionality. This paper presents a substantive theory to explain how power and dependence manifest in partnerships among small-to-medium enterprises (SMEs) building a software ecosystem. We performed exploratory case studies of two emerging software ecosystems formed by SMEs. We interpreted the results in light of a theoretical framework underpinned by French and Raven's power taxonomy. Finally, we performed a cross-case analysis to evaluate our findings and build the theory. The proposed theory highlights the interactions among different forms of power and corresponding sources of power employed by companies. It provides a better understanding on how power and dependence influence the behaviour and coordination of companies within a software ecosystem. The theory is a useful lens for researchers to explore ecosystem partnerships by understanding the structure and impact of power relationships between partners. In addition, it is a valuable tool for companies to analyse power distribution and define sustainable strategies for software ecosystem governance.	Software ecosystem; Small-to-medium enterprises; Power; Dependence; Multiple case studies; Software ecosystem;  Small-to-medium enterprises;  Power;  Dependence;  Multiple case studies	Valenca, George; Alves, Carina	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/j.jss.2017.08.044		76-104	"""@article{WOS:000415909200006,
    Author = ""Valenca, George and Alves, Carina"",
    Title = ""A theory of power in emerging software ecosystems formed by small-to-medium enterprises"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2017"",
    Volume = ""134"",
    Pages = ""76-104"",
    Month = ""DEC"",
    Abstract = ""In a software ecosystem, partner companies rely on each other to succeed and survive. This scenario of mutual dependence entails a flow of power among companies. Power is an intrinsic property of their relationship and an asset to be exercised with a degree of intentionality. This paper presents a substantive theory to explain how power and dependence manifest in partnerships among small-to-medium enterprises (SMEs) building a software ecosystem. We performed exploratory case studies of two emerging software ecosystems formed by SMEs. We interpreted the results in light of a theoretical framework underpinned by French and Raven's power taxonomy. Finally, we performed a cross-case analysis to evaluate our findings and build the theory. The proposed theory highlights the interactions among different forms of power and corresponding sources of power employed by companies. It provides a better understanding on how power and dependence influence the behaviour and coordination of companies within a software ecosystem. The theory is a useful lens for researchers to explore ecosystem partnerships by understanding the structure and impact of power relationships between partners. In addition, it is a valuable tool for companies to analyse power distribution and define sustainable strategies for software ecosystem governance. (C) 2017 Elsevier Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Valenca, G (Corresponding Author), Univ Fed Rural Pernambuco UFRPE, Dept Estat \\& Informat, Recife, PE, Brazil. Valenca, George, Univ Fed Rural Pernambuco UFRPE, Dept Estat \\& Informat, Recife, PE, Brazil. Alves, Carina, Univ Fed Pernambuco UFPE, Ctr Informat, Recife, PE, Brazil."",
    DOI = ""10.1016/j.jss.2017.08.044"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""Software ecosystem; Small-to-medium enterprises; Power; Dependence; Multiple case studies"",
    Keywords-Plus = ""EVOLUTION; BASES; CONFLICT; CHANNELS; DYNAMICS; FRENCH; RAVEN"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""george.valenca@ufrpe.br cfa@cin.ufpe.br"",
    Affiliations = ""Universidade Federal Rural de Pernambuco (UFRPE); Universidade Federal de Pernambuco"",
    Number-of-Cited-References = ""89"",
    Times-Cited = ""19"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""9"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""FN3OR"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000415909200006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		A theory of power in emerging software ecosystems formed by small-to-medium enterprises	https://www.webofscience.com/wos/woscc/full-record/WOS:000415909200006	ELSEVIER SCIENCE INC	nan; References
509	TrustSE	Making the operating system trusted — A trend														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
510	TrustSE	Whom do you trust?														2						
511	TrustSE	DESIGN AND IMPLEMENTATION OF A QUERY PROCESSOR FOR A TRUSTED DISTRIBUTED DATA-BASE MANAGEMENT-SYSTEM	Distributed systems are vital for the efficient processing required in military and commercial applications. For many of these applications, it is especially important that the distributed data base management systems (DDBMS) operate in a secure manner. For example, the DDBMS should allow users, who are cleared at different security levels access to the data base at different levels of data sensitivity without compromising security. A DDBMS with multilevel user/data-handling capability is called a trusted distributed data base management system (TDDBMS). This article focuses on query processing in a TDDBMS. It describes the security issues, algorithms for query processing, and design and implementation of a query processor prototype for a TDDBMS.		RUBINOVITZ, H; THURAISINGHAM, B	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/0164-1212(93)90017-R		49-69	"""@article{WOS:A1993KV37300006,
    Author = ""RUBINOVITZ, H and THURAISINGHAM, B"",
    Title = ""DESIGN AND IMPLEMENTATION OF A QUERY PROCESSOR FOR A TRUSTED DISTRIBUTED DATA-BASE MANAGEMENT-SYSTEM"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""1993"",
    Volume = ""21"",
    Number = ""1"",
    Pages = ""49-69"",
    Month = ""APR"",
    Abstract = ""Distributed systems are vital for the efficient processing required in military and commercial applications. For many of these applications, it is especially important that the distributed data base management systems (DDBMS) operate in a secure manner. For example, the DDBMS should allow users, who are cleared at different security levels access to the data base at different levels of data sensitivity without compromising security. A DDBMS with multilevel user/data-handling capability is called a trusted distributed data base management system (TDDBMS). This article focuses on query processing in a TDDBMS. It describes the security issues, algorithms for query processing, and design and implementation of a query processor prototype for a TDDBMS."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""655 AVENUE OF THE AMERICAS, NEW YORK, NY 10010"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""MITRE CORP,BEDFORD,MA 01730."",
    DOI = ""10.1016/0164-1212(93)90017-R"",
    ISSN = ""0164-1212"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Affiliations = ""MITRE Corporation"",
    Number-of-Cited-References = ""23"",
    Times-Cited = ""1"",
    Usage-Count-Last-180-days = ""3"",
    Usage-Count-Since-2013 = ""3"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""KV373"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:A1993KV37300006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Design and implementation of a query processor for a trusted distributed data base management system	https://www.webofscience.com/wos/woscc/full-record/WOS:A1993KV37300006	ELSEVIER SCIENCE INC	nan; Keywords; References
512	TrustSE	Adopters’ trust in enterprise open source vendors: An empirical examination														2						
513	TrustSE	A fuzzy-based credibility model to assess Web services trust under uncertainty														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
514	TrustSE	A formal approach for the specification and verification of trustworthy component-based systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
515	TrustSE	Model checking of robustness properties in trust and reputation systems														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
516	TrustSE	An extended attribute based access control model with trust and privacy: Application to a collaborative crisis management system	Many efforts in the area of computer security have been drawn to attribute-based access control (ABAC). Compared to other adopted models, ABAC provides more granularity, scalability, and flexibility. This makes it a valuable access control system candidate for securing platforms and environments used for coordination and cooperation among organizations and communities, especially over open networks such as the Internet. On the other hand, the basic ABAC model lacks provisions for context, trust and privacy issues, all of which are becoming increasingly critical, particularly in high performance distributed collaboration environments. This paper presents an extended access control model based on attributes associated with objects and subjects. It incorporates trust and privacy issues in order to make access control decisions sensitive to the cross-organizational collaboration context. Several aspects of the proposed model are implemented and illustrated by a case study that shows realistic ABAC policies in the domain of distributed multiple organizations crisis management systems. Furthermore, the paper shows a collaborative graphical tool that enables the actors in the emergency management system to make better decisions. The prototype shows how it guarantees the privacy of object's attributes, taking into account the trust of the subjects. This tool incorporates a decision engine that relies on attribute based policies and dynamic trust and privacy evaluation. The resulting platform demonstrates the integration of the ABAC model, the evolving context, and the attributes of actors and resources.	Access control; ABAC; Trust; Privacy; Context; Distributed collaboration; Crisis management system; Access control;  ABAC;  Trust;  Privacy;  Context;  Distributed collaboration;  Crisis management system	Smari, Waleed W.; Clemente, Patrice; Lalande, Jean-Francois	FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE	https://doi.org/10.1016/j.future.2013.05.010		147-168	"""@article{WOS:000329683200014,
    Author = ""Smari, Waleed W. and Clemente, Patrice and Lalande, Jean-Francois"",
    Title = ""An extended attribute based access control model with trust and privacy: Application to a collaborative crisis management system"",
    Journal = ""FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE"",
    Year = ""2014"",
    Volume = ""31"",
    Pages = ""147-168"",
    Month = ""FEB"",
    Abstract = ""Many efforts in the area of computer security have been drawn to attribute-based access control (ABAC). Compared to other adopted models, ABAC provides more granularity, scalability, and flexibility. This makes it a valuable access control system candidate for securing platforms and environments used for coordination and cooperation among organizations and communities, especially over open networks such as the Internet. On the other hand, the basic ABAC model lacks provisions for context, trust and privacy issues, all of which are becoming increasingly critical, particularly in high performance distributed collaboration environments. This paper presents an extended access control model based on attributes associated with objects and subjects. It incorporates trust and privacy issues in order to make access control decisions sensitive to the cross-organizational collaboration context. Several aspects of the proposed model are implemented and illustrated by a case study that shows realistic ABAC policies in the domain of distributed multiple organizations crisis management systems. Furthermore, the paper shows a collaborative graphical tool that enables the actors in the emergency management system to make better decisions. The prototype shows how it guarantees the privacy of object's attributes, taking into account the trust of the subjects. This tool incorporates a decision engine that relies on attribute based policies and dynamic trust and privacy evaluation. The resulting platform demonstrates the integration of the ABAC model, the evolving context, and the attributes of actors and resources. (C) 2013 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Smari, WW (Corresponding Author), Ball Aerosp \\& Technol Corp, Dayton, OH 45324 USA. Smari, Waleed W., Ball Aerosp \\& Technol Corp, Dayton, OH 45324 USA. Clemente, Patrice; Lalande, Jean-Francois, ENSI Bourges, LIFO, F-18020 Bourges, France."",
    DOI = ""10.1016/j.future.2013.05.010"",
    ISSN = ""0167-739X"",
    EISSN = ""1872-7115"",
    Keywords = ""Access control; ABAC; Trust; Privacy; Context; Distributed collaboration; Crisis management system"",
    Keywords-Plus = ""AUTHENTICATION"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""smari@aiys.org"",
    Affiliations = ""Ball Aerospace \\& Technologies"",
    ResearcherID-Numbers = ""Lalande, Jean-Francois/I-1128-2019"",
    ORCID-Numbers = ""Lalande, Jean-Francois/0000-0003-4984-2199"",
    Number-of-Cited-References = ""95"",
    Times-Cited = ""56"",
    Usage-Count-Last-180-days = ""2"",
    Usage-Count-Since-2013 = ""74"",
    Journal-ISO = ""Futur. Gener. Comp. Syst."",
    Doc-Delivery-Number = ""289LE"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000329683200014"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		An extended attribute based access control model with trust and privacy: Application to a collaborative crisis management system	https://www.webofscience.com/wos/woscc/full-record/WOS:000329683200014	ELSEVIER	nan; References
517	TrustSE	Special Section: Trusted computing														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
518	TrustSE	Facilitating contagion trust through tools in Global Systems Engineering teams	Context: In Global Systems Engineering teams, researchers have found that trust can be transitive to some degree or imported (swift trust) under certain conditions. We argue that trust can be contagion and seeded by tools (spread from one individual to another through tools). Objective: We sought to investigate the potential for using tools to support the development of trust in such teams and facilitate contagion trust. Specifically, we sought to investigate whether any existing tools support the development of trust in such teams and which information helps such development, whether the visualization of past collaborations would help developing trust, and what tools or features practitioners would wish for, if they had a magic wand. Method: We interviewed 71 employees from five multinational organizations. We focused on gaining an understanding of the tools that are currently used to engender trust and the information needed to facilitate contagion, in which conditions visualizations of past collaborations are helpful, and what software tool features could help develop trust. Our analysis was guided by grounded theory. Results: We found evidence that supports the theory of contagion trust and tools can be used to initiate the development of trust. These tools include software tools, office technologies, or organizational structures. Practitioners' needs were functional (e.g. audio channel with remote colleagues) and/or non-functional (e.g. can be adopted in sites with poor infrastructure). Conclusion: Our study illustrates that tools can be used to facilitate contagion trust and provides three main contributions. First, our exploration of how existing tools are used provides a guide to effective practices in such teams. Second, the descriptions of features that can facilitate contagion trust provide useful design implications for future tools. Third, the identification of the kind of information that facilitates contagion trust provides an understanding of practitioners' underlying needs that can be used to develop collaboration tools.	Global collaboration; Contagion trust; Swift trust; Global collaboration;  Contagion trust;  Swift trust	Al-Ani, Ban; Marczak, Sabrina; Redmiles, David; Prikladnicki, Rafael	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2013.11.001		309-320	"""@article{WOS:000331353000003,
    Author = ""Al-Ani, Ban and Marczak, Sabrina and Redmiles, David and Prikladnicki, Rafael"",
    Title = ""Facilitating contagion trust through tools in Global Systems Engineering teams"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2014"",
    Volume = ""56"",
    Number = ""3"",
    Pages = ""309-320"",
    Month = ""MAR"",
    Abstract = ""Context: In Global Systems Engineering teams, researchers have found that trust can be transitive to some degree or imported (swift trust) under certain conditions. We argue that trust can be contagion and seeded by tools (spread from one individual to another through tools). Objective: We sought to investigate the potential for using tools to support the development of trust in such teams and facilitate contagion trust. Specifically, we sought to investigate whether any existing tools support the development of trust in such teams and which information helps such development, whether the visualization of past collaborations would help developing trust, and what tools or features practitioners would wish for, if they had a magic wand. Method: We interviewed 71 employees from five multinational organizations. We focused on gaining an understanding of the tools that are currently used to engender trust and the information needed to facilitate contagion, in which conditions visualizations of past collaborations are helpful, and what software tool features could help develop trust. Our analysis was guided by grounded theory. Results: We found evidence that supports the theory of contagion trust and tools can be used to initiate the development of trust. These tools include software tools, office technologies, or organizational structures. Practitioners' needs were functional (e.g. audio channel with remote colleagues) and/or non-functional (e.g. can be adopted in sites with poor infrastructure). Conclusion: Our study illustrates that tools can be used to facilitate contagion trust and provides three main contributions. First, our exploration of how existing tools are used provides a guide to effective practices in such teams. Second, the descriptions of features that can facilitate contagion trust provide useful design implications for future tools. Third, the identification of the kind of information that facilitates contagion trust provides an understanding of practitioners' underlying needs that can be used to develop collaboration tools. (C) 2013 Elsevier B.V. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE BV"",
    Address = ""PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Al-Ani, B (Corresponding Author), 400 Covina Blvd, San Dimas, CA 91773 USA. Al-Ani, Ban; Redmiles, David, Univ Calif Irvine, Dept Informat, Donald Bren Sch Informat \\& Comp Sci, Irvine, CA 92697 USA. Marczak, Sabrina; Prikladnicki, Rafael, Pontificia Univ Catolica Rio Grande Sul PUCRS, Fac Informat, BR-90619900 Porto Alegre, RS, Brazil."",
    DOI = ""10.1016/j.infsof.2013.11.001"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Global collaboration; Contagion trust; Swift trust"",
    Keywords-Plus = ""SOFTWARE-DEVELOPMENT; VIRTUAL TEAMS; COMMUNICATION; COLLABORATION; TECHNOLOGY; TIME"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""balani@ics.uci.edu sabrina.marczak@pucrs.br redmiles@ics.uci.edu rafael.prikladnicki@pucrs.br"",
    Affiliations = ""University of California System; University of California Irvine; Pontificia Universidade Catolica Do Rio Grande Do Sul"",
    Funding-Acknowledgement = ""National Science Foundation {[}0943262, 0808783, 1111446]; Dell Computers of Brazil Ltd. {[}Law 8.248/91]; CNPq {[}309000/2012-2]; Direct For Computer \\& Info Scie \\& Enginr {[}0808783, 1111446] Funding Source: National Science Foundation; Direct For Computer \\& Info Scie \\& Enginr; Div Of Information \\& Intelligent Systems {[}0943262] Funding Source: National Science Foundation; Div Of Information \\& Intelligent Systems {[}1111446, 0808783] Funding Source: National Science Foundation"",
    Funding-Text = ""This work was supported by National Science Foundation 0943262, 0808783, and 1111446. We also thank the PDTI Program, financed by Dell Computers of Brazil Ltd. (Law 8.248/91), and CNPq (309000/2012-2). Special thanks to the participants for their collaboration and time."",
    Number-of-Cited-References = ""40"",
    Times-Cited = ""6"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""16"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""AA8NU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000331353000003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Facilitating contagion trust through tools in Global Systems Engineering teams	https://www.webofscience.com/wos/woscc/full-record/WOS:000331353000003	ELSEVIER SCIENCE BV	nan; References
519	TrustSE	Multi-Value Models for Allocation of Software Component Development Costs Based on Trustworthiness	The trustworthiness of software is an important attribute. The cost of software development increases with its improvement by software trustworthiness. As one of main methods of software development, component-based software development can reduce development costs to a certain extent. However, it is important to study how to allocate the given development costs to each component so that software trustworthiness can be optimized. First, multi-value models for allocation of software component development costs are established based on different structures of software system. Second, algorithms for allocation of software component development costs can be designed by using dynamic programming. The proposed allocation algorithms can allocate development costs to each component to optimize software trustworthiness. Furthermore, in order to allocate development costs to each component automatically, a web-based software tool for allocating development costs to each component is developed. Finally, a case study of a self-service ticketing system is provided to show the feasibility of the proposed allocation algorithms.	Resource management; Software systems; Software algorithms; Mathematical model; Heuristic algorithms; Computational modeling; Development Costs; Software Components; System Software; Software Development; Dynamic Programming; Web-based Tool; Allocation Algorithm; Cost Allocation; Component Of Complex; Additional Costs; Loop Structure; Space Complexity; Analytic Hierarchy Process; Branching Structure; Allocation Model; Software Quality; Two-dimensional Array; Basic Cost; Recursive Equation; Top Components; Array Output; Trustworthiness Ratings; Allocation algorithm; component; development costs; dynamic programming; software trustworthiness	Mengyue Wang; Yanfang Ma; Guanru Li; Wei Zhou; Liang Chen	IEEE Access	https://doi.org/10.1109/ACCESS.2020.3007158	"1.T. A. Ahanger and A. Aljumah, ""Internet of Things: A comprehensive study of security issues and defense mechanisms"", IEEE Access, vol. 7, pp. 11020-11028, 2019.Show in Context View Article  Google Scholar; 2.P. G. Neumann, ""Trustworthiness and truthfulness are essential"", Commun. ACM, vol. 60, pp. 26-28, May 2017.Show in Context CrossRef  Google Scholar; 3.F. Schneider, Trust in Cyberspace, Washington, DC, USA:National Academy Press, 1998.Show in Context Google Scholar; 4.J. He, Z. Shan, J. Wang, G. Y. Pu; Fang, K. Liu, R. Zhao, et al., ""Review of the achievements of major research plan of trustworthy software"", Bull. Natl. Nat. Sci. Found., vol. 32, no. 3, pp. 291-296, 2018.Show in Context Google Scholar; 5.W. Hasselbring and R. Reussner, ""Toward trustworthy software systems"", Computer, vol. 39, no. 4, pp. 91-92, Apr. 2006.Show in Context View Article  Google Scholar; 6.H. Tao and Y. Chen, ""A new metric model for trustworthiness of software"", Telecommun. Syst., vol. 51, pp. 95-105, Nov. 2010.Show in Context CrossRef  Google Scholar; 7.H. Tao, H. Wu and Y. Chen, ""An approach of trustworthy measurement allocation based on sub-attributes of software"", Mathematics, vol. 7, pp. 237, Mar. 2019.Show in Context CrossRef  Google Scholar; 8.H. Tao, Y. Chen and J. Pang, ""Axiomatic approaches based software trustworthiness measure"", Proc. Int. Conf. Appl. Syst. Innov. (ICASI), pp. 135-142, May 2015.Show in Context Google Scholar; 9.B. Gu, J. Xu, J. Zhang, Y. Chen, X. Guo, S. Jin, et al., ""An approach to measureing and grading software trust for spacecraft software"", Scientia Sinica Technologica, vol. 45, no. 2, pp. 221-228, Jan. 2015.Show in Context CrossRef  Google Scholar; 10.F. Brosig, P. Meier, S. Becker, A. Koziolek, H. Koziolek and S. Kounev, ""Quantitative evaluation of model-driven performance analysis and simulation of component-based architectures"", IEEE Trans. Softw. Eng., vol. 41, no. 2, pp. 157-175, Feb. 2015.Show in Context View Article  Google Scholar; 11.T. Hongwei, C. Yixiang, W. Hengyang and D. Rumei, ""A survey of software trustworthiness measurements"", Int. J. Performability Eng., vol. 15, no. 9, pp. 2364, 2019.Show in Context CrossRef  Google Scholar; 12.J. Li, M. Li, D. Wu and H. Song, ""An integrated risk measurement and optimization model for trustworthy software process management"", Inf. Sci., vol. 191, pp. 47-60, May 2012.Show in Context CrossRef  Google Scholar; 13.S. Ding, S.-L. Yang and C. Fu, ""A novel evidential reasoning based method for software trustworthiness evaluation under the uncertain and unreliable environment"", Expert Syst. Appl., vol. 39, no. 3, pp. 2700-2709, Feb. 2012.Show in Context CrossRef  Google Scholar; 14.Y. Ma, Y. Chen and B. Gu, ""An attributes-based allocation approach of software trustworthy degrees"", Proc. IEEE Int. Conf. Softw. Quality Rel. Secur. Companion, pp. 89-94, Aug. 2015.Show in Context View Article  Google Scholar; 15.H. Tao, Y. Chen and H. Wu, ""A reallocation approach for software trustworthiness based on trustworthy attributes"", Mathematics, vol. 8, no. 1, pp. 14, Dec. 2019.Show in Context CrossRef  Google Scholar; 16.T. Vale, I. Crnkovic, E. S. de Almeida, P. A. D. M. S. Neto, Y. C. Cavalcanti and S. R. D. L. Meira, ""Twenty-eight years of component-based software engineering"", J. Syst. Softw., vol. 111, pp. 128-148, Jan. 2016.Show in Context CrossRef  Google Scholar; 17.B. Wang, Y. Chen, S. Zhang and H. Wu, ""Updating model of software component trustworthiness based on users feedback"", IEEE Access, vol. 7, pp. 60199-60205, 2019.Show in Context View Article  Google Scholar; 18.D. Huang, ""Component-based software trustworthiness measurement and allocation model"", 2019.Show in Context Google Scholar; 19.Y. Ma, M. Wang and W. Zhou, ""Trustworthiness-based development costs allocation algorithm of modular software"", Comput. Eng. Sci., vol. 42, no. 6, pp. 50-57, 2020.Show in Context Google Scholar; 20.C. J. Dale and A. Winterbottom, ""Optimal allocation of effort to improve system reliability"", IEEE Trans. Rel., vol. R-35, no. 2, pp. 188-191, Jun. 1986.Show in Context View Article  Google Scholar; 21.W. F. Lu Xu and L. Jia, ""An approach of software reliability evolution in open environment"", Chin. J. Computers., vol. 33, no. 3, pp. 452-461, 2010.Show in Context CrossRef  Google Scholar"	122673- 122684							2	IEEE		Multi-Value Models for Allocation of Software Component Development Costs Based on Trustworthiness	https://ieeexplore.ieee.org/document/9133387	IEEE	nan; Year; Bibtex
520	TrustSE	A preliminary analysis on the effects of propensity to trust in distributed software development	Establishing trust between developers working at distant sites facilitates team collaboration in distributed software development. While previous research has focused on how to build and spread trust in absence of direct, face-to-face communication, it has overlooked the effects of the propensity to trust, i.e., the trait of personality representing the individual disposition to perceive the others as trustworthy. In this study, we present a preliminary, quantitative analysis on how the propensity to trust affects the success of collaborations in a distributed project, where the success is represented by pull requests whose code changes and contributions are successfully merged into the project's repository.	trust;  pull requests;  personality traits;  distributed software development; trust, pull requests, personality traits, distributed software development	Calefato, Fabio; Lanubile, Filippo; Novielli, Nicole	ICGSE '17: Proceedings of the 12th International Conference on Global Software Engineering	https://doi.org/10.1109/ICGSE.2017.1		56-60	"""@inproceedings{10.1109/ICGSE.2017.1,
    author = ""Calefato, Fabio and Lanubile, Filippo and Novielli, Nicole"",
    title = ""A preliminary analysis on the effects of propensity to trust in distributed software development"",
    year = ""2017"",
    isbn = ""9781538615874"",
    publisher = ""IEEE Press"",
    url = ""https://doi.org/10.1109/ICGSE.2017.1"",
    doi = ""10.1109/ICGSE.2017.1"",
    abstract = ""Establishing trust between developers working at distant sites facilitates team collaboration in distributed software development. While previous research has focused on how to build and spread trust in absence of direct, face-to-face communication, it has overlooked the effects of the propensity to trust, i.e., the trait of personality representing the individual disposition to perceive the others as trustworthy. In this study, we present a preliminary, quantitative analysis on how the propensity to trust affects the success of collaborations in a distributed project, where the success is represented by pull requests whose code changes and contributions are successfully merged into the project's repository."",
    booktitle = ""Proceedings of the 12th International Conference on Global Software Engineering"",
    pages = ""56-60"",
    numpages = ""5"",
    keywords = ""trust, pull requests, personality traits, distributed software development"",
    location = ""Buenos Aires, Argentina"",
    series = ""ICGSE '17""
}
"""						2	ACM		A Preliminary Analysis on the Effects of Propensity to Trust in Distributed Software Development	https://doi.org/10.1109/ICGSE.2017.1	IEEE Press	nan; References; Link
521	TrustSE	Model Checking the Uncertainties in Software Systems Introduced by Intelligent Components	An intelligent software system consists of intelligent components, fundamentally modeled by neural networks and traditional software components, in which the intelligent components are responsible to make decisions. Thus, intelligent systems can adapt to environment changes in the running time. However, due to the fact that a neural network highly relies on the training data, its structure and quality are both uncertain. These uncertainties will be passed to the rest of the software system by the intelligent components. This paper presents a framework to model checking such kind of intelligent system software.	Petri nets; Adaptation models; Neural networks; Software systems; Computational modeling; Adaptive systems; Uncertainty; System Software; Model Checking; Neural Network; Training Data; Intelligent Systems; Traditional Software; Intelligent Software; Material Costs; Adaptive Model; Manufacturing Systems; Fuzzy Rules; High-quality Materials; Supplier Selection; Petri Nets; Customer Requests; Intelligent software system, Intelligent system software, adaptive model, model checking	Zuohua Ding; Wenjie Jiang; Mingyue Jiang; Zhi Jin; He Jiang	2018 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)	https://doi.org/10.1109/ISSREW.2018.00-18	"1.X.Q. Wu, ""An intelligent Petri nets model based on competitive neural network"", Computer Supported Cooperative Work in Design, pp. 388-397, 2005. CrossRef  Google Scholar; 2.Z. Ding, M. Zhou and Y. Zhou, ""Modeling self-adaptive software system with learning Petri nets"", IEEE Transactions on Systems Man And Cybernetics: Systems, vol. 46, no. 4, pp. 483-498, 2016. View Article  Google Scholar; 3.I. Enbutsu, K. Baba and N. Hara, ""Fuzzy rule extraction from a multilayered neural network"", Proceedings of the International Joint Conference on Neural Networks, pp. 461-465, 1991. View Article  Google Scholar; 4.Z. Ding, Y. Zhou and M. Zhou, ""Modeling self-adaptive software systems by fuzzy rules and petri nets"", IEEE Transactions on Fuzzy Systems, 2018. View Article  Google Scholar; 5.G. J. Holzmann, ""The Model Checker SPIN"", IEEE Transactions on Software Engineering, vol. 23, no. 5, pp. 279-295, 1997. View Article  Google Scholar"								2	IEEE		Model Checking the Uncertainties in Software Systems Introduced by Intelligent Components	https://ieeexplore.ieee.org/document/8539176	IEEE	nan; Pages; Year; Bibtex
522	TrustSE	Designing Safety Critical Software Systems to Manage Inherent Uncertainty	Deploying machine learning algorithms in safety critical systems raises new challenges for system designers. The opaque nature of some algorithms together with the potentially large input space makes reasoning or formally proving safety difficult. In this paper, we argue that the inherent uncertainty that comes from using certain classes of machine learning algorithms can be mitigated through the development of software architecture design patterns. New or adapted patterns will allow faster roll out time for new technologies and decrease the negative impact machine learning components can have on safety critical systems. We outline the important safety challenges that machine learning algorithms raise and define three important directions for the development of new architectural patterns.	Safety; Software algorithms; Software architecture; Uncertainty; Software; Cognition; Machine learning algorithms; System Software; Safety-critical; Inherent Uncertainty; Machine Learning; Learning Algorithms; Evolutionary Patterns; Architectural Design; Input Space; Large Input; Design Patterns; Software Architecture; Safety Challenges; Architectural Patterns; Training Data; Components Of System; Object Recognition; Unmanned Aerial Vehicles; Fault-tolerant; Autonomous Vehicles; Design Space; Formal Verification; Safe Design; Systematic Uncertainties; Safety Properties; Responsibility For Safety; Safe Conditions; Output Space; Software Components; Deep Learning System; Safety Systems; Software architecture; Software safety; Machine Learning	Alexandru Constantin Serban	2019 IEEE International Conference on Software Architecture Companion (ICSA-C)	https://doi.org/10.1109/ICSA-C.2019.00051	"1.M. Bojarski, D. Del, D. Dworakowski, B. Firner, B. Flepp, P. Goyal, L. D. Jackel, M. Monfort, U. Muller, J. Zhang et al., End to end learning for self-driving cars, 2016. Google Scholar; 2.A. Rodriguez-Ramos, C. Sampedro, H. Bavle, P. de la Puente and P. Campoy, ""A deep reinforcement learning strategy for uav autonomous landing on a moving platform"", Journal of Intelligent & Robotic Systems, pp. 1-16, 2018. Google Scholar; 3.D. Sarikaya, J. J. Corso and K. A. Guru, ""Detection and localization of robotic tools in robot-assisted surgery videos using deep neural networks for region proposal and detection"", IEEE transactions on medical imaging, vol. 36, no. 7, pp. 1542-1549, 2017. View Article  Google Scholar; 4.ISO standard 26262:2011 Road vehicles - Functional safety, International Organization for Standardization (ISO), 2011. Google Scholar; 5.C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. Goodfellow, et al., Intriguing properties of neural networks, 2013. Google Scholar; 6.A. C. Serban and E. Poll, Adversarial examples - a complete characterisation of the phenomenon, 2018. Google Scholar; 7.K. R. Varshney and H. Alemzadeh, ""On the safety of machine learning: Cyber-physical systems decision sciences and data products"", Big data, vol. 5, no. 3, pp. 246-255, 2017. CrossRef  Google Scholar; 8.R. Kazman, M. Klein, M. Barbacci, T. Longstaff, H. Lipson and J. Carriere, ""The architecture tradeoff analysis method"" in IEEE ICECCS'98, IEEE, pp. 68-78, 1998. CrossRef  Google Scholar; 9.S. Shafaei, S. Kugele, M. H. Osman and A. Knoll, ""Un-certainty in machine learning: A safety perspective on autonomous driving"", International Conference on Computer Safety Reliability and Security, pp. 458-464, 2018. Google Scholar; 10.A. C. Serban, E. Poll and J. Visser, ""Tactical safety reasoning. a case for autonomous vehicles"", IEEE 87th Vehicular Technology Conference (VTC Spring), pp. 1-5, 2018. View Article  Google Scholar; 11.L. Gauerhof, P. Munk and S. Burton, ""Structuring validation targets of a machine learning function applied to automated driving"", International Conference on Computer Safety Reliability and Security, pp. 45-58, 2018. CrossRef  Google Scholar; 12.A. K. Saberi, E. Barbier, F. Benders and M. van den Brand, ""On functional safety methods: A system of systems approach"", Systems Conference (SysCon) 2018 Annual IEEE International, pp. 1-6, 2018. View Article  Google Scholar; 13.IEC 615038 - Functional Safety of Electrical/Electronic/Programmable Electronic Safety- Related Systems, International Electrotechnical Commission, 1998. Google Scholar; 14.B. O'Connor, ""NASA Software Safety Guidebook"" in NASA Technical Standard NASA-GB-8719.13, 2004. Google Scholar; 15.C. Preschern, N. Kajtazovic and C. Kreiner, ""            Building                          a                        safety architecture pattern system          "", European Conference on Pattern Languages of Program, pp. 17, 2015. CrossRef  Google Scholar; 16.W. Wu and T. Kelly, ""Safety tactics for software architecture design"" in COMPSAC, IEEE, pp. 368-375, 2004. Google Scholar; 17.J. S. Albus, ""The NIST real-time control system (RCS): an approach to intelligent systems research"", Journal of Experimental & Theoretical Artificial Intelligence, vol. 9, no. 2-3, pp. 157-174, 1997. CrossRef  Google Scholar; 18.E. Gat and R. P. Bonnasso, ""On three-layer architectures"", Artificial intelligence and mobile robots, vol. 195, pp. 210, 1998. Google Scholar; 19.R. Volpe, I. Nesnas, T. Estlin, D. Mutz, R. Petras and H. Das, ""The CLARAty architecture for robotic autonomy"", IEEE Aerospace Conference, vol. 1, pp. 121-132, 2001. View Article  Google Scholar; 20.A. Armoush, Design patterns for safety-critical embedded systems, 2010. Google Scholar; 21.R. Salay and K. Czarnecki, Using machine learning safely in automotive software: An assessment and adaption of software process requirements in ISO 26262, 2018. Google Scholar"								2	IEEE		Designing Safety Critical Software Systems to Manage Inherent Uncertainty	https://ieeexplore.ieee.org/document/8712362	IEEE	nan; Pages; Year; Bibtex
523	TrustSE	Expert software development estimation with uncertainty correction	Creation of an effective metrics and estimation program is an important but daunting step for the maturing software development organization This paper outlines a roadmap for implementing a process that establishes a program that will reap a large portion of the benefits early in the process with a minimum of implementation effort and cost This process includes a mechanism to improve software estimation accuracy as historical data becomes available for more sophisticated methods. Furthermore, we present a practical proposal for software estimation in industry based on software task size, complexity, and uncertainty.	Programming; Uncertainty; Costs; Job shop scheduling; Computer industry; Project management; Research and development; Biomedical optical imaging; Proposals; Calibration; Software Development; Linear Model; Complex Problems; Sources Of Error; Project Management; Estimation Process; Individual Estimates; Person Years; Expert Judgment; Anchoring Effect; Problem Space; Subject Matter Experts; Cost Overruns; Probability Curves; Top-down Methods; Types Of Requirements; Software Projects; Project Life Cycle; Improve Estimation Accuracy; Worst-case Estimate; Expert Estimates; Point Estimates; software estimation; metrics; process; effort and cost; dependency; historical data; accuracy; complexity; uncertainty	Ron Rammage; Hairong Lei; Michael Claus; David Baer	The 2nd International Conference on Software Engineering and Data Mining	https://ieeexplore.ieee.org/document/5542847	"1.The Standish Group: Chaos Chronicles Version 3.0. 2003: West Yarmouth MA. Google Scholar; 2.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 181-193, 2006. Google Scholar; 3.R. Stutzke, Estimating Software-Intensive System: Projects Products and Processes, Upper Saddle River, NJ, pp. 49-79, 2005. Google Scholar; 4.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 3, 2006. Google Scholar; 5.L. Laranjeira, ""Software Size Estimation of Object Oriented Systems"", IEEE Transactions on Software Engineering, vol. 16, no. 5, pp. 510-512, May 1990. View Article  Google Scholar; 6.McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 35, 2006. Google Scholar; 7.B. Boehm, Software Engineering Economics, Englewood Cliffs, NJ:Prentice-Hall Inc., pp. 311, 1981. Google Scholar; 8.M. J rgensen, ""A review of studies on Expert Estimation of software development effort"" Simula Research Laboratory"", Feb 2010. Google Scholar; 9.M. J. Rgensen and D.I.K. Sjberg, ""The impact of customer expectation on software development effort estimates"" International Journal of Project Management"", vol. 22, pp. 317-325, Feb 2004. Google Scholar; 10.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 109, 2006. Google Scholar; 11.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 150-155, 2006. Google Scholar; 12.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 122, 2006. Google Scholar; 13.Steve McConnell, Software Estimation: Demystifying the Black Art, Redmond WA:Microsoft Press, pp. 110, 2006. Google Scholar; 14.Lei Hairong, Claus Michael, Rammage Ron, C. David Baer, Rene Decool, Joe Michael Kniss, et al., ""Software's Eight Essentials"", International Conference on New Trends in Information and Service Science, 2009. Google Scholar"								2	IEEE		Expert software development estimation with uncertainty correction	https://ieeexplore.ieee.org/document/5542847	IEEE	nan; Pages; Year; Bibtex
524	TrustSE	The Use of Multilegged Arguments to Increase Confidence in Safety Claims for Software-Based Systems: A Study Based on a BBN Analysis of an Idealized Example	"The work described here concerns the use of so-called multilegged arguments to support dependability claims about software-based systems. The informal justification for the use of multilegged arguments is similar to that used to support the use of multiversion software in pursuit of high reliability or safety. Just as a diverse 1-out-of-2 system might be expected to be more reliable than each of its two component versions, so might a two-legged argument be expected to give greater confidence in the correctness of a dependability claim (for example, a safety claim) than would either of the argument legs alone. Our intention here is to treat these argument structures formally, in particular, by presenting a formal probabilistic treatment of ""confidence,? which will be used as a measure of efficacy. This will enable claims for the efficacy of the multilegged approach to be made quantitatively, answering questions such as, ""How much extra confidence about a system's safety will I have if I add a verification argument leg to an argument leg based upon statistical testing?? For this initial study, we concentrate on a simplified and idealized example of a safety system in which interest centers upon a claim about the probability of failure on demand. Our approach is to build a ""Bayesian Belief Network? (BBN) model of a two-legged argument and manipulate this analytically via parameters that define its node probability tables. The aim here is to obtain greater insight than what is afforded by the more usual BBN treatment, which involves merely numerical manipulation. We show that the addition of a diverse second argument leg can indeed increase confidence in a dependability claim; in a reasonably plausible example, the doubt in the claim is reduced to one-third of the doubt present in the original single leg. However, we also show that there can be some unexpected and counterintuitive subtleties here; for example, an entirely supportive second leg can sometimes undermine an..."	Leg; Software safety; Uncertainty; Battery powered vehicles; Particle measurements; System testing; Probability; Software reliability; Bayesian methods; Control systems; Use Of Arguments; Bayesian Belief Network; Software-based System; Confidence In Claims; Form Of Treatment; Dependability; Probability Of Failure; Single Leg; Model Parameters; Numeric; Posterior Probability; Probability Density; Use Of Variables; Conditional Probability; Conditional Distribution; Conditional Independence; Statistical Evidence; Entailment; Beta Distribution; Row Of Table; Ideal Observer; Marginal Probability; Conservative Assumption; Improvement In Confidence; Reliability Issues; Unconditional Probability; Variable C; Verification And Validation; Simple Assumption; Arguments In Support; Safety claims; safety arguments; software safety; software reliability; Bayesian belief networks.	Bev Littlewood; David Wright	IEEE Transactions on Software Engineering	https://doi.org/10.1109/TSE.2007.1002	"1.Handbook of Math. Functions, 1970. Google Scholar; 2.B. Littlewood and D. Wright, ""Some Conservative Stopping Rules for the Operational Testing of Safety-Critical Software"", IEEE Trans. Software Eng., vol. 23, no. 11, pp. 673-683, Nov. 1997. View Article  Google Scholar; 3.S.K. Andersen, K.G. Olesen, F.V. Jensen and F. Jensen, ""Hugin A Shell for Building Bayesian Belief Universes for Expert Systems"", Proc. 11th Intl Joint Conf. Artificial Intelligence, pp. 1080-1084, 1989. Google Scholar; 4.S. Yih and C.-F. Fan, ""Search for the Unnecessary"", Nuclear Eng. Intl, pp. 24-26, 2001. Google Scholar; 5.R. Bloomfield, P.-J. Courtois, L. Strigini and B. Littlewood, ""Letter to the Editor"", Nuclear Eng. Intl, pp. 11, 2002. Google Scholar; 6.""GAPGroups Algorithms and Programming"", 2007. Google Scholar; 7.L.H. Soicher, ""GRAPE: A System for Computing with Graphs and Groups"", 2007. Google Scholar; 8.Requirements for Safety Related Software in Defence Equipment, Aug. 1997. Google Scholar; 9.""Regulatory Objective for Software Safety Assurance in Air Traffic Service Equipment"", 2001. Google Scholar; 10.R.E. Bloomfield and B. Littlewood, ""Multi-Legged Arguments: The Impact of Diversity upon Confidence in Dependability Arguments"", Proc. Intl Conf. Dependable Systems and Networks (DSN 03), pp. 25-34, 2003. View Article  Google Scholar; 11.D.E. Eckhardt and L.D. Lee, ""A Theoretical Basis for the Analysis of Multi-Version Software Subject to Coincident Errors"", IEEE Trans. Software Eng., vol. 11, no. 12, pp. 1511-1517, Dec. 1985. View Article  Google Scholar; 12.B. Littlewood and D.R. Miller, ""Conceptual Modeling of Coincident Failures in Multiversion Software"", IEEE Trans. Software Eng., vol. 15, pp. 1596-1614, 1989. View Article  Google Scholar; 13.J.C. Knight and N.G. Leveson, ""An Experimental Evaluation of the Assumption of Independence in Multi-Version Programming"", IEEE Trans. Software Eng., vol. 12, no. 1, pp. 96-109, Jan. 1986. View Article  Google Scholar; 14.J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference Mathematics and Its Applications, 1991. Google Scholar; 15.M. Volf and M. Studen, ""A Graphical Characterisation of the Largest Chain Graphs"", Intl J. Approximate Reasoning, no. 3, pp. 209-236, 1999. CrossRef  Google Scholar; 16.D.R. Wright, ""Elicitation and Validation of Graphical Dependability Models"", 2003. CrossRef  Google Scholar; 17.A.P. Dawid, ""Conditional Independence in Statistical Theory"", J. Royal Statistical Soc. B, vol. 41, no. 1, pp. 1-31, 1979. CrossRef  Google Scholar; 18.R.G. Cowell, A.P. Dawid, S.L. Lauritzen and D.J. Spiegelhalter, Statistics for Engineering and Information Science, 1999. View Article  Google Scholar; 19.S.L. Lauritzen, Graphical Models., 1996. Google Scholar; 20.G. Shafer, ""Probabilistic Expert Systems"", Proc. Conf. Board Math. SciencesNatl Science Foundation Regional Conf. Series Applied Math., 1996. CrossRef  Google Scholar; 21.A.P. Dawid, ""Conditional Independence for Statistical Operations"", Annals of Statistics, vol. 8, no. 3, pp. 598-617, 1980. CrossRef  Google Scholar; 22.M. Studen, On Mathematical Description of Probabilistic Conditional Independence Structures, May 2001. Google Scholar; 23.N. Wermuth and S.L. Lauritzen, ""On Substantive Research Hypotheses Conditional Independence Graphs and Graphical Chain Models"", J. Royal Statistical Soc. B, vol. 52, no. 1, pp. 21-72, 1990. CrossRef  Google Scholar; 24.D. Wright, ""Elicitation and Validation of Graphical Dependability Models"", Proc. 22nd Intl Conf. Computer Safety (SAFECOMP 03), pp. 8-21, 2003-Sept. CrossRef  Google Scholar; 25.G. de Barra, Measure Theory and Integration Mathematics and Its Applications., 1981. Google Scholar; 26.M.H. DeGroot, Optimal Statistical Decisions., 2004. CrossRef  Google Scholar"	347- 365							2	IEEE		The Use of Multilegged Arguments to Increase Confidence in Safety Claims for Software-Based Systems: A Study Based on a BBN Analysis of an Idealized Example	https://ieeexplore.ieee.org/document/4160972	IEEE	nan; Year; Bibtex
525	TrustSE	Software reuse with uncertainties	A software component design technique using fuzzy logic is presented. To handle uncertainty in software component reuse, we propose a two-level software component design. The top-level is represented by fuzzy logic rules and the low level is represented by fuzzy membership functions. We analyze some properties of this fuzzy logic software component.	Uncertainty; Fuzzy logic; Software maintenance; Software design; Programming; Application software; Concrete; Planets; Hardware; Automatic control	J. Chen; D.C. Rine	FUZZ-IEEE'99. 1999 IEEE International Fuzzy Systems. Conference Proceedings (Cat. No.99CH36315)	https://doi.org/10.1109/FUZZY.1999.793261	"1.J. Chen, A Training Approach to Develop Reusable Software Components by Combining Adaptation Algorithms, 1998. Google Scholar; 2.J. Chen and D. C. Rine, ""Maintenance of Controller Software Components Using Adaptation Algorithms"", Proceedings of 1998 Joint Conference on Information Sciences, vol. 4, pp. 5-8, 1998-Oct.-23-28. Google Scholar; 3.C. Doherty and T. Uslander, ""Plug-And-Play Software Hones Car And Plane Manufacture"", IEEE Spectrum, pp. 39-42, Oct. 1998. View Article  Google Scholar; 4.FLDE for Windows User's Manual, 1997. Google Scholar; 5.Spacecraft Attitude Determination and Control, Holland, Dordrecht:Kluwer, 1997. Google Scholar; 6.S. Murakami and M. Maeda, ""Automobile Speed Control System Using A Fuzzy Logic Controller"", Industrial Applications of Fuzzy Control, pp. 105-123, 1985. Google Scholar; 7.J. T. Nosek and P. Palvia, ""Software maintenance management: changes in the last decade"", Software Maintenance: Research and Practice, vol. 2, no. 3, pp. 157-174, 1990. CrossRef  Google Scholar; 8.D. C. Rine, ""Software perfective maintenance: including retainable software in software reuse"", Information Sciences: International Journal, vol. 75, Dec. 1993. CrossRef  Google Scholar"								2	IEEE		Software reuse with uncertainties	https://ieeexplore.ieee.org/document/793261	IEEE	nan; Pages; Year; Bibtex
526	TrustSE	Scenario-based reliability analysis of component-based software														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
527	TrustSE	Software quality: a market perspective	"The author investigates software quality in a market setting. He points out that imperfections in reputation place downward pressure on a product's price and lower the average quality of the delivered software. Testing, verification, and validation improve quality only when reputation is important to end users, when demand satiation is low, and when the marginal cost of improving quality is low in comparison with the improvement in quality. As firms improve total quality control, testing, verification, and validation become less relevant, until they may actually become counterproductive. Where complex products are produced, high quality may lower marginal costs of software, and this is shown to provide an accelerator effect that enhances other competitive strategies. Warranties can ameliorate the underprovision of quality by improving software reputation. But even with warranties, the authors shows that software developers will tend to underprovide quality.<
>"	Software quality; Costs; Warranties; Testing; Quality control; Software measurement; Electronic mail; Failure analysis; Probability density function; Capacity planning	J.C. Westland	[1993] Proceedings of the Twenty-sixth Hawaii International Conference on System Sciences	https://doi.org/10.1109/HICSS.1993.284261	"1.W. J. Abernathy, K. B. Clark and A. M. Kantrow, ""The new industrial Competition"", Harvard Business Review, pp. 68-81, September-October 1981. CrossRef  Google Scholar; 2.G. A. Akerlof, ""The Market for Lemons"", Quarterly Journal of Economics, vol. 84, pp. 488-500, 1970. CrossRef  Google Scholar; 3.G. A. Akerlof, ""A Theory of Social Custom of Which Unemployment May Be One Consequence"", The Quarterly Journal of Economics, vol. 94, pp. 749-775, 1980. CrossRef  Google Scholar; 4.G. C. Archibald and G. Rosenbluth, ""The New Theory of Consumer Demand and Monopolistic Competition"", Quarterly Journal of Economics, vol. 89. CrossRef  Google Scholar; 5.K. J. Arrow, ""Models of Job Discrimination"" in Racial Discrimination in Economic Life, MA, Lexington:Heath, pp. 83-102, 1972. Google Scholar; 6.G. S. Becker, The Economics of Discrimination, Chicago:University of Chicago Press, 1957. Google Scholar; 7.G. S. Becker, ""A Theory of Marriage: Part I&II"", J. of Political Economy, vol. 81, pp. 813-846, 1973. CrossRef  Google Scholar; 8.A. Braverman, J. L. Guasch and S. Salop, ""Defects in Disneyland: quality control as a two-part tariff"", Review of Economic Studies, vol. 50, pp. 121-131, 1983. CrossRef  Google Scholar; 9.E. Chamberlin, The Theory of Monopolistic Competition, MA, Cambridge:Harvard University Press, 1956. Google Scholar; 10.E. Chamberlin, The Theory of Monopolistic Competition, MA, Cambridge:Harvard University Press, 1956. Google Scholar; 11.R. B. Chase and N. J. Aquilano, Software and Operations Software developer, IL, Homewood:Irwin, 1989. Google Scholar; 12.R. Cooper and T. W. Ross, ""Software warranties and double moral hazard"", Rand Journal of Economics, vol. 16, pp. 103-113, 1985. CrossRef  Google Scholar; 13.P. B. Crosby, Quality is Free, New York:McGraw-Hill, 1979. Google Scholar; 14.W. E. Deming, Some Theory of Sampling, New York:Wiley, 1950. Google Scholar; 15.W. E. Deming, Quality Productivity and Competitive Position, M.I.T. Center for Advanced Engineering Study, 1982. Google Scholar; 16.A. K. Dixit and J. E. Stiglitz, ""Monopolistic Competition and Optimum Software Diversity"", The American Economic Review, vol. 67, 1977. Google Scholar; 17.C. H. Fine, ""Quality Improvement and Learning in Productive Systems"", Software developer Science, pp. 1301-1315, 1986. CrossRef  Google Scholar; 18.D. A. Garvin, ""Quality on the Line"", Harvard Business Review, pp. 64-75, September-October 1983. Google Scholar; 19.H. Hotelling, ""Stability in competition"", Economic Journal, vol. 39, pp. 41-57, 1929. CrossRef  Google Scholar; 20.J. Kambhu, ""Optimal software quality under asymmetric information and moral hazard"", B ell Journal of Economics, vol. 13, pp. 483-492, 1982. CrossRef  Google Scholar; 21.J. J. Lartont and E. Maskin, ""Monopoly with asymmetric information about quality: behavior and regulation"", European Economic Review, vol. 31, pp. 483-489, 1987. CrossRef  Google Scholar; 22.H. E. Leland, ""Quacks Lemons and Licensing: A Theory of Minimum Quality Standards"", Journal of Political Economy, vol. 87, no. 6, pp. 1328-1346, 1979. CrossRef  Google Scholar; 23.D. M. Lundvall and J. M. Juran, ""Quality Costs"" in Quality Control Handbook, San Francisco:McGraw-Hill, 1974. Google Scholar; 24.P. R. Milgrom and J. Roberts, ""Informational Asymmetries Strategic Behavior and Industrial Organization"", American Economic Review, vol. 77, pp. 184-193, 1987. Google Scholar; 25.M. J. J. Nakane and T. Vollmann, The 1985 Global Manufacturing Futures Survey, Boston University, 1986. Google Scholar; 26.P. Plsek, ""Defining Quality at the Marketing/Development Interface"", Quality Progress, pp. 28-36, June 1987. Google Scholar; 27.A. M. Spence, Job Market Signaling Quarterly Journal of Economics, pp. 355-374, August 1973. Google Scholar; 28.A. M. Spence, ""Monopoly quality and regulation"", Bell J. of Econ., vol. 2, no. l, pp. 417-429, 1975. CrossRef  Google Scholar; 29.A. M. Spence, ""Software Selection Fixed Costs and Monopolistic Competition"", Review of Economic Studies, vol. 43, 1976. CrossRef  Google Scholar; 30.G. J. Stigler, ""The Economics of Information"", Journal of Political Economy, vol. 69, pp. 213-285, 1961. CrossRef  Google Scholar"								2	IEEE		Software quality: a market perspective	https://ieeexplore.ieee.org/document/284261	IEEE	nan; Pages; Year; Bibtex
528	TrustSE	Early prediction of software component reliability	The ability to predict the reliability of a software system early in its development, e.g., during architectural design, can help to improve the system's quality in a cost-effective manner. Existing architecture-level reliability prediction approaches focus on system-level reliability and assume that the reliabilities of individual components are known. In general, this assumption is unreasonable, making component reliability prediction an important missing ingredient in the current literature. Early prediction of component reliability is a challenging problem because of many uncertainties associated with components under development. In this paper we address these challenges in developing a software component reliability prediction framework. We do this by exploiting architectural models and associated analysis techniques, stochastic modeling approaches, and information sources available early in the development lifecycle. We extensively evaluate our framework to illustrate its utility as an early reliability prediction approach.	modeling;  reliability prediction;  software architecture; modeling, reliability prediction, software architecture	Cheung, Leslie; Roshandel, Roshanak; Medvidovic, Nenad; Golubchik, Leana	ICSE '08: Proceedings of the 30th international conference on Software engineering	https://doi.org/10.1145/1368088.1368104		111-120	"""@inproceedings{10.1145/1368088.1368104,
    author = ""Cheung, Leslie and Roshandel, Roshanak and Medvidovic, Nenad and Golubchik, Leana"",
    title = ""Early prediction of software component reliability"",
    year = ""2008"",
    isbn = ""9781605580791"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/1368088.1368104"",
    doi = ""10.1145/1368088.1368104"",
    abstract = ""The ability to predict the reliability of a software system early in its development, e.g., during architectural design, can help to improve the system's quality in a cost-effective manner. Existing architecture-level reliability prediction approaches focus on system-level reliability and assume that the reliabilities of individual components are known. In general, this assumption is unreasonable, making component reliability prediction an important missing ingredient in the current literature. Early prediction of component reliability is a challenging problem because of many uncertainties associated with components under development. In this paper we address these challenges in developing a software component reliability prediction framework. We do this by exploiting architectural models and associated analysis techniques, stochastic modeling approaches, and information sources available early in the development lifecycle. We extensively evaluate our framework to illustrate its utility as an early reliability prediction approach."",
    booktitle = ""Proceedings of the 30th International Conference on Software Engineering"",
    pages = ""111-120"",
    numpages = ""10"",
    keywords = ""modeling, reliability prediction, software architecture"",
    location = ""Leipzig, Germany"",
    series = ""ICSE '08""
}
"""						2	ACM		Early prediction of software component reliability	https://doi.org/10.1145/1368088.1368104	Association for Computing Machinery	nan; References; Link
529	TrustSE	Dealing with Uncertainties in Software Project Management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
530	TrustSE	Managing Non-Technical Requirements in COTS Components Selection	The selection of COTS components is made not only by an analysis of their technical quality but also (and sometimes mostly) by considering how they fulfill those non-technical requirements considered relevant, which refer to licensing, reputation, and similar issues. In this paper we present an approach for managing nontechnical requirements during COTS selection. The proposal is based on extending the ISO/IEC 9126-1 catalogue of quality factors by adding factors related to non-technical issues, obtaining a cohesive and comprehensive framework for managing requirements during selection.	Commercial Off-the-shelf; Commercial-off-the-shelf Components; Quality Factor; Technical Quality; Model Quality; Low-level Properties	Juan Pablo Carvallo; Xavier Franch; Carme Quer	14th IEEE International Requirements Engineering Conference (RE'06)	https://doi.org/10.1109/RE.2006.40	"1.A. Finkelstein, G. Spanoudakis, K. Ryan. ""Software Package Requirements and Procurement"". IWSSD96, Westphalia, 1996. View Article  Google Scholar; 2.J. Kontio. ""A case study in applying a systematic method for COTS selection"". ICSE96, Berlin, 1996. View Article  Google Scholar; 3.B. Wong, D. R. Jeffery. ""A Framework for Software Quality Evaluation"". PROFES02, Rovaniemi, 2002. CrossRef  Google Scholar; 4.D. Kunda. ""STACE: Social Technical Approach to COTS Software Evaluation"". Book Chapter in Component-Based Software Quality - Methods and Techniques, LNCS 2693, 2003. Google Scholar; 5.ISO Standard 9126: Software Engineering - Product Quality, part 1. International Organization for Standarization, 2001. Google Scholar; 6.http://www.lsi.upc.es/~gessi/QMTool/CQM/; 7.X. Franch, J.P. Carvallo. ""A Quality-Model-Based Approach for Describing and Evaluating Software Packages"". RE02, Essen, 2002. View Article  Google Scholar; 8.X. Franch, J.P. Carvallo. ""Using quality models in software package selection"". IEEE Software, 20(1), 2003. View Article  Google Scholar; 9.J.P. Carvallo, X. Franch, C. Quer. ""A Quality Model for Requirements Management Tools"". Book chapter in Requirem-ents Engineering for Sociotechnical Systems, Idea Group, 2005. CrossRef  Google Scholar; 10.J.P. Carvallo, X. Franch, C. Quer, N. Rodriguez. ""A Framework for Selecting Workflow Tools in the Context of Composite Information Systems"". DEXA 04, Zaragoza, 2004. CrossRef  Google Scholar; 11.J.P. Carvallo. ""Supporting Organizational Induction and Goals Alignment for COTS Components Selection by Means of i*"". ICCBSS06, Orlando, 2006. View Article  Google Scholar; 12.J.P. Carvallo, X. Franch. ""Extending the ISO/IEC 9126-1 Quality Model with Non-Technical Factors for COTS Components Selection"". WOSQ06, Shangai, 2006. CrossRef  Google Scholar; 13.D. Kunda, L. Brooks. ""Identifying and classifying processes (traditional and soft factors) that support COTS component selection: a case study"". European Journal of Information Systems, 9(4), 2000. CrossRef  Google Scholar; 14.A. Powell, A. Vickers, W. Lam. ""Evaluating Tools to support Component Based Software Engineering"". SAST95, Los Alamitos, 1997. View Article  Google Scholar; 15.M.F. Bertoa, J.M. Troya, A. Vallecillo. ""A Survey on the Quality Information Provided by Software Component Vendors"". QAOOSE03, Darmstadt, 2003. Google Scholar; 16.M. Torchiano, L. Jaccheri, C.-F. Sorensen, A. I. Wang. ""COTS products characterization"". SEKE02, Ischia, 2002. CrossRef  Google Scholar; 17.CMMI Product Team. ""Capability Maturity Model(r) Integration (CMMI)"", Version 1.1. Carnegie Mellon SEI, Pittsburgh, 2002."								2	IEEE		Managing Non-Technical Requirements in COTS Components Selection	https://ieeexplore.ieee.org/document/1704087	IEEE	nan; Pages; Year; Bibtex
531	TrustSE	Identifying and Addressing Uncertainty in Architecture-Level Software Reliability Modeling	Assessing reliability at early stages of software development, such as at the level of software architecture, is desirable and can provide a cost-effective way of improving a software system's quality. However, predicting a component's reliability at the architectural level is challenging because of uncertainties associated with the system and its individual components due to the lack of information. This paper discusses representative uncertainties which we have identified at the level of a system's components, and illustrates how to represent them in our reliability modeling framework. Our preliminary evaluation indicates promising results in our framework's ability to handle such uncertainties.	Uncertainty; Software reliability; Software systems; Hidden Markov models; Programming; Software quality; Software architecture; Predictive models; Computer architecture; Information resources; Software Reliability; System Software; Software Architecture; Source Of Information; Behavioral Model; Reliable Prediction; State Model; Stochastic Model; Processing Software; Sources Of Uncertainty; Model Architecture; Design Software; Level Of Abstraction; Probability Of Failure; Level Of Granularity; Undesirable Behaviors; Component Reliability; Different Levels Of Abstraction; Three-state Model; Different Levels Of Granularity; Several Sources Of Uncertainty	Leslie Cheung; Leana Golubchik; Nenad Medvidovic; Gaurav Sukhatme	2007 IEEE International Parallel and Distributed Processing Symposium	https://doi.org/10.1109/IPDPS.2007.370524	"1.Banerjee S., Cheung L., Golubchik L., Medvidovic N., Roshandel R., Sukhatme G., ""Engineering Reliability into Hybrid Systems via Rich Design Models: Recent Results and Current Directions"", In Workshop on NSF Next Generation Software (NGS) Program, Apr 2006. View Article  Google Scholar; 2.Boehm B., et al., ""Using Empirical Testbeds to Accelerate Technology Maturity and Transition: The SCRover Experience"", in Proceedings of ISESE'04, pp. 117-126, 2004. View Article  Google Scholar; 3.Cheung, R.C., A User-Oriented Software Reliability Model, IEEE Trans. on Software Engineering, 6 (2), pp. 118-125, 1980. View Article  Google Scholar; 4.Goel A.L., Okumoto K., Time-Dependent Error-Detection Rate Models for Software Reliability and Other Performance Measures, IEEE Trans. on Reliability, 28(3):206-211, 1979. View Article  Google Scholar; 5.Goseva-Popstojanova K. et al., Comparison of Architecture-Based Software Reliability Models, in ISSRE 2001, pp. 22-31 View Article  Google Scholar; 6.Jelinski, Z., Moranda, P. B., Software Reliability Research, Statistical Computer Performance Evaluation, edited by W. Freigerger, Academic Press, 1972. CrossRef  Google Scholar; 7.Littlewood, B.A., Verrall, J.L., A Bayesian Reliability Growth Model for Computer Software, Applied Statistics, Volume 22, pp. 332-346, 1973.; 8.Littlewood, B., Software Reliability Model for Modular Program Structure, IEEE Tran. on Reliability, 28 (3), 1979. View Article  Google Scholar; 9.Musa J.D., Okumoto K., Logarithmic Poisson Execution Time Model for Software Reliability Measurement, in Proceedings of Compsac 1984, pp. 230-238, 1984. Google Scholar; 10.Perry, D.E., Wolf, A.L. Foundations for the Study of Software Architecture, Software Engineering Notes, 17(4), 1992. CrossRef  Google Scholar; 11.Reussner R., Schmidt H., Poernomo I., Reliability prediction for component-based software architectures, In Journal of Systems and Software, 66(3), Elsevier Science Inc, 2003. CrossRef  Google Scholar; 12.Roshandel R., et al., ""Estimating Software Component Reliability by Leveraging Architectural Models"", 28th Int'l Conference on Software Engineering (ICSE'06), May 2006. CrossRef  Google Scholar; 13.Roshandel R., Medvidovic N., Multi-View Software Component Modeling for Dependability, in Architecting Dependable Systems II, LNCS, 2004. CrossRef  Google Scholar; 14.Yacoub S.M., Cukic B., Ammar H.H., Scenario-Based Reliability Analysis of Component-Based Software, in 10th Int'l Symposium on Software Reliability Engr., Boca Raton, Nov. 1999. View Article  Google Scholar"								2	IEEE		Identifying and Addressing Uncertainty in Architecture-Level Software Reliability Modeling	https://ieeexplore.ieee.org/document/4228252	IEEE	nan; Pages; Year; Bibtex
532	TrustSE	A formal model for the reuse of software specifications														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
533	TrustSE	A Common Terminology for Software Risk Management	In order to improve and sustain their competitiveness over time, organisations nowadays need to undertake different initiatives to adopt frameworks, models and standards that will allow them to align and improve their business processes. In spite of these efforts, organisations may still encounter governance and management problems. This is where Risk Management (RM) can play a major role, since its purpose is to contribute to the creation and preservation of value in the context of the organisation's processes. RM is a complex and subjective activity that requires experience and a high level of knowledge about risks, and it is for this reason that standardisation institutions and researchers have made great efforts to define initiatives to overcome these challenges. However, the RM field nevertheless presents a lack of uniformity in its terms and concepts, due to the different contexts and scopes of application, a situation that can generate ambiguities and misunderstandings. To address these issues, this paper aims to present an ontology called SRMO (Software Risk Management Ontology), which seeks to unify the terms and concepts associated with RM and provide an integrated and holistic view of risk. In doing so, the Pipeline framework has been applied in order to assure and verify the quality of the proposed ontology, and it has been implemented in Prot\'{e}g\'{e} and validated by means of competency questions. Three application scenarios of this ontology demonstrating their usefulness in the software engineering field are presented in this paper. We believe that this ontology can be useful for organisations that are interested in: (i) establishing an RM strategy from an integrated approach, (ii) defining the elements that help to identify risks and the criteria that support decision-making in risk assessment, and (iii) helping the involved stakeholders during the process of risk management.	ISO 31000;  risk ontology;  integrated risk management;  Risk management; ISO 31000, risk ontology, integrated risk management, Risk management	Masso, Jhon; Garc\'{\i}a, F\'{e}lix; Pardo, C\'{e}sar; Pino, Francisco J.; Piattini, Mario	ACM Trans. Softw. Eng. Methodol.	https://doi.org/10.1145/3498539			"""@article{10.1145/3498539,
    author = ""Masso, Jhon and Garc\'{\i}a, F\'{e}lix and Pardo, C\'{e}sar and Pino, Francisco J. and Piattini, Mario"",
    title = ""A Common Terminology for Software Risk Management"",
    year = ""2022"",
    issue_date = ""October 2022"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    volume = ""31"",
    number = ""4"",
    issn = ""1049-331X"",
    url = ""https://doi.org/10.1145/3498539"",
    doi = ""10.1145/3498539"",
    abstract = ""In order to improve and sustain their competitiveness over time, organisations nowadays need to undertake different initiatives to adopt frameworks, models and standards that will allow them to align and improve their business processes. In spite of these efforts, organisations may still encounter governance and management problems. This is where Risk Management (RM) can play a major role, since its purpose is to contribute to the creation and preservation of value in the context of the organisation's processes. RM is a complex and subjective activity that requires experience and a high level of knowledge about risks, and it is for this reason that standardisation institutions and researchers have made great efforts to define initiatives to overcome these challenges. However, the RM field nevertheless presents a lack of uniformity in its terms and concepts, due to the different contexts and scopes of application, a situation that can generate ambiguities and misunderstandings. To address these issues, this paper aims to present an ontology called SRMO (Software Risk Management Ontology), which seeks to unify the terms and concepts associated with RM and provide an integrated and holistic view of risk. In doing so, the Pipeline framework has been applied in order to assure and verify the quality of the proposed ontology, and it has been implemented in Prot\'{e}g\'{e} and validated by means of competency questions. Three application scenarios of this ontology demonstrating their usefulness in the software engineering field are presented in this paper. We believe that this ontology can be useful for organisations that are interested in: (i) establishing an RM strategy from an integrated approach, (ii) defining the elements that help to identify risks and the criteria that support decision-making in risk assessment, and (iii) helping the involved stakeholders during the process of risk management."",
    journal = ""ACM Trans. Softw. Eng. Methodol."",
    month = ""July"",
    articleno = ""59"",
    numpages = ""47"",
    keywords = ""ISO 31000, risk ontology, integrated risk management, Risk management""
}
"""						2	ACM		Software risk management	https://doi.org/10.1145/3498539	Association for Computing Machinery	nan; References; Pages; Link
534	TrustSE	Uncertainties in software projects management														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
535	TrustSE	Towards providing decision support for COTS selection														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
536	TrustSE	Uncertainty-aware reliability analysis and optimization	Due to manufacturing tolerances and aging effects, future embedded systems have to cope with unreliable components. The intensity of such effects depends on uncertain aspects like environmental or usage conditions such that highly safety-critical systems are pessimistically designed for worst-case mission profiles. In this work, we propose to explicitly model the uncertain characteristics of system components, i. e. we model components using reliability functions with parameters distributed between a best and worst case. Since destructive effects like temperature may affect several components simultaneously (e. g. those in the same package), a correlation between uncertainties of components exists. The proposed uncertainty-aware method combines a formal analysis approach and a Monte Carlo simulation to consider uncertain characteristics and their different correlations. It delivers a holistic view on the system's reliability with best/worst/average-case behavior and also insights on variance and quantiles. But, existing optimization approaches typically assume design objectives to be single values or to follow a predefined distribution. As a remedy, we propose a dominance criterion for meta-heuristic optimization approaches like evolutionary algorithms that enables the comparison of system implementations with arbitrarily distributed characteristics. Our presented experimental results show that (a) the proposed analysis comes at low overhead while capturing existing uncertainties with sufficient accuracy, and (b) the optimization process is significantly enhanced when guiding the search process by additional aspects like variance and the 95\% quantile, delivering better system implementations as found by an uncertainty-oblivious optimization approach.		"Khosravi, Faramarz; M\""{u}ller, Malte; Gla\ss{}, Michael; Teich, J\""{u}rgen"	DATE '15: Proceedings of the 2015 Design, Automation & Test in Europe Conference & Exhibition	https://doi.org/10.5555/2755753.2755775		97-102	"""@inproceedings{10.5555/2755753.2755775,
    author = {Khosravi, Faramarz and M\""{u}ller, Malte and Gla\ss{}, Michael and Teich, J\""{u}rgen},
    title = ""Uncertainty-aware reliability analysis and optimization"",
    year = ""2015"",
    isbn = ""9783981537048"",
    publisher = ""EDA Consortium"",
    address = ""San Jose, CA, USA"",
    abstract = ""Due to manufacturing tolerances and aging effects, future embedded systems have to cope with unreliable components. The intensity of such effects depends on uncertain aspects like environmental or usage conditions such that highly safety-critical systems are pessimistically designed for worst-case mission profiles. In this work, we propose to explicitly model the uncertain characteristics of system components, i. e. we model components using reliability functions with parameters distributed between a best and worst case. Since destructive effects like temperature may affect several components simultaneously (e. g. those in the same package), a correlation between uncertainties of components exists. The proposed uncertainty-aware method combines a formal analysis approach and a Monte Carlo simulation to consider uncertain characteristics and their different correlations. It delivers a holistic view on the system's reliability with best/worst/average-case behavior and also insights on variance and quantiles. But, existing optimization approaches typically assume design objectives to be single values or to follow a predefined distribution. As a remedy, we propose a dominance criterion for meta-heuristic optimization approaches like evolutionary algorithms that enables the comparison of system implementations with arbitrarily distributed characteristics. Our presented experimental results show that (a) the proposed analysis comes at low overhead while capturing existing uncertainties with sufficient accuracy, and (b) the optimization process is significantly enhanced when guiding the search process by additional aspects like variance and the 95\\% quantile, delivering better system implementations as found by an uncertainty-oblivious optimization approach."",
    booktitle = ""Proceedings of the 2015 Design, Automation \\& Test in Europe Conference \\& Exhibition"",
    pages = ""97-102"",
    numpages = ""6"",
    location = ""Grenoble, France"",
    series = ""DATE '15""
}
"""						2	ACM		Uncertainty-aware reliability analysis and optimization	https://doi.org/10.5555/2755753.2755775	EDA Consortium	nan; Keywords; References; Link
537	TrustSE	An empirically evaluated checklist for surveys in software engineering	Context: Over the past decade Software Engineering research has seen a steady increase in survey-based studies, and there are several guidelines providing support for those willing to carry out surveys. The need for auditing survey research has been raised in the literature. Checklists have been used both to conduct and to assess different types of empirical studies, such as experiments and case studies. Objective: To operationalize the assessment of survey studies by means of a checklist. To fulfill such goal, we aim to derive a checklist from standards for survey research and further evaluate the appropriateness of the checklist in the context of software engineering research. Method: We systematically aggregated knowledge from 12 methodological studies supporting survey-based research in software engineering. We identified the key stages of the survey process and its recommended practices through thematic analysis and vote counting. We evaluated the checklist by applying it to existing surveys and analyzed the results. Thereafter, we gathered the feedback of experts (the surveys' authors) on our analysis and used the feedback to improve the survey checklist. Results: The evaluation provided insights regarding limitations of the checklist in relation to its understanding and objectivity. In particular, 19 of the 38 checklist items were improved according to the feedback received from experts. Conclusion: The proposed checklist is appropriate for auditing survey reports as well as a support tool to guide ongoing research with regard to the survey design process. A discussion on how to use the checklist and what its implications are for research practice is also provided.	Checklist; Assessment; Survey; Methodology; Checklist;  Assessment;  Survey;  Methodology	Molleri, Jefferson Seide; Petersen, Kai; Mendes, Emilia	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2019.106240			"""@article{WOS:000513290100009,
    Author = ""Molleri, Jefferson Seide and Petersen, Kai and Mendes, Emilia"",
    Title = ""An empirically evaluated checklist for surveys in software engineering"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2020"",
    Volume = ""119"",
    Month = ""MAR"",
    Abstract = ""Context: Over the past decade Software Engineering research has seen a steady increase in survey-based studies, and there are several guidelines providing support for those willing to carry out surveys. The need for auditing survey research has been raised in the literature. Checklists have been used both to conduct and to assess different types of empirical studies, such as experiments and case studies. Objective: To operationalize the assessment of survey studies by means of a checklist. To fulfill such goal, we aim to derive a checklist from standards for survey research and further evaluate the appropriateness of the checklist in the context of software engineering research. Method: We systematically aggregated knowledge from 12 methodological studies supporting survey-based research in software engineering. We identified the key stages of the survey process and its recommended practices through thematic analysis and vote counting. We evaluated the checklist by applying it to existing surveys and analyzed the results. Thereafter, we gathered the feedback of experts (the surveys' authors) on our analysis and used the feedback to improve the survey checklist. Results: The evaluation provided insights regarding limitations of the checklist in relation to its understanding and objectivity. In particular, 19 of the 38 checklist items were improved according to the feedback received from experts. Conclusion: The proposed checklist is appropriate for auditing survey reports as well as a support tool to guide ongoing research with regard to the survey design process. A discussion on how to use the checklist and what its implications are for research practice is also provided."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Molleri, JS (Corresponding Author), BTH, Valhallavagen 1, S-37141 Karlskrona, Sweden. Molleri, JS (Corresponding Author), Simula Metropolitan Ctr Digital Engn, Pilestredet 52, N-0167 Oslo, Norway. Molleri, Jefferson Seide; Petersen, Kai; Mendes, Emilia, BTH, Valhallavagen 1, S-37141 Karlskrona, Sweden. Molleri, Jefferson Seide, Simula Metropolitan Ctr Digital Engn, Pilestredet 52, N-0167 Oslo, Norway. Petersen, Kai, Hsch Flensburg, D-24943 Flensburg, Germany."",
    DOI = ""10.1016/j.infsof.2019.106240"",
    Article-Number = ""106240"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Checklist; Assessment; Survey; Methodology"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""jefferson@simula.no"",
    Affiliations = ""Blekinge Institute Technology"",
    ResearcherID-Numbers = ""Mendes, Maria/B-4207-2015 Molleri, Jefferson/AAY-3288-2020"",
    ORCID-Numbers = ""Molleri, Jefferson/0000-0001-5629-5256 Mendes, Emilia/0000-0003-0449-5322 Petersen, Kai/0000-0002-1532-8223"",
    Funding-Acknowledgement = ""Science Without Borders program; CNPq (National Council for Scientific and Technological Development - Brazil)"",
    Funding-Text = ""The work of Jefferson Seide Moiled is supported by the Science Without Borders program, funded by CNPq (National Council for Scientific and Technological Development - Brazil)."",
    Number-of-Cited-References = ""59"",
    Times-Cited = ""32"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""3"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""KL2WU"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000513290100009"",
    OA = ""Green Submitted"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		An empirically evaluated checklist for surveys in software engineering	https://www.webofscience.com/wos/woscc/full-record/WOS:000513290100009	ELSEVIER	nan; References; Pages
538	TrustSE	Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm	Context Reproducibility of Empirical Software Engineering (ESE) studies is an essential part for improving their credibility, as it offers the opportunity to the research community to verify, evaluate and improve their research outcomes. Objective: We aim to study reproducibility and credibility in ESE with a case study, by investigating how they have been addressed in studies where SZZ, a widely-used algorithm by gliwerski, Zimmermann and Zeller to detect the origin of a bug, has been applied. Methodology: We have performed a systematic literature review to evaluate publications that use SZZ. In total, 187 papers have been analyzed for reproducibility, reporting of limitations and use of improved versions of the algorithm. Results: We have found a situation with a lot of room for improvement in ESE as reproducibility is not commonly found; factors that undermine the credibility of results are common. We offer some lessons learned and guidelines for researchers and reviewers to address this problem. Conclusion: Reproducibility and other related aspects that ensure a high quality scientific process should be taken more into consideration by the ESE community in order to increase the credibility of the research results.	Credibility; Reproducibility; SZZ Algorithm; Systematic literature review; Credibility;  Reproducibility;  SZZ Algorithm;  Systematic literature review	Rodriguez-Perez, Gema; Robles, Gregorio; Gonzalez-Barahona, Jesus M.	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2018.03.009		164-176	"""@article{WOS:000432767900014,
    Author = ""Rodriguez-Perez, Gema and Robles, Gregorio and Gonzalez-Barahona, Jesus M."",
    Title = ""Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2018"",
    Volume = ""99"",
    Pages = ""164-176"",
    Month = ""JUL"",
    Abstract = ""Context Reproducibility of Empirical Software Engineering (ESE) studies is an essential part for improving their credibility, as it offers the opportunity to the research community to verify, evaluate and improve their research outcomes. Objective: We aim to study reproducibility and credibility in ESE with a case study, by investigating how they have been addressed in studies where SZZ, a widely-used algorithm by gliwerski, Zimmermann and Zeller to detect the origin of a bug, has been applied. Methodology: We have performed a systematic literature review to evaluate publications that use SZZ. In total, 187 papers have been analyzed for reproducibility, reporting of limitations and use of improved versions of the algorithm. Results: We have found a situation with a lot of room for improvement in ESE as reproducibility is not commonly found; factors that undermine the credibility of results are common. We offer some lessons learned and guidelines for researchers and reviewers to address this problem. Conclusion: Reproducibility and other related aspects that ensure a high quality scientific process should be taken more into consideration by the ESE community in order to increase the credibility of the research results."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Rodriguez-Perez, G (Corresponding Author), Univ Rey Juan Carlos, Madrid, Spain. Rodriguez-Perez, Gema; Robles, Gregorio; Gonzalez-Barahona, Jesus M., Univ Rey Juan Carlos, Madrid, Spain."",
    DOI = ""10.1016/j.infsof.2018.03.009"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""Credibility; Reproducibility; SZZ Algorithm; Systematic literature review"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""gema.rodriguez@urjc.es grex@gsyc.urjc.es jgb@gsyc.es"",
    Affiliations = ""Universidad Rey Juan Carlos"",
    ResearcherID-Numbers = ""Robles, Gregorio/I-2507-2012 Rodriguez-Perez, Gema/AAN-7844-2020 Gonzalez-Barahona, Jesus M./L-5646-2017"",
    ORCID-Numbers = ""Rodriguez, Gema/0000-0002-0062-8418 Robles, Gregorio/0000-0002-1442-6761 Gonzalez-Barahona, Jesus M./0000-0001-9682-460X"",
    Funding-Acknowledgement = ""Spanish Government {[}TIN2014-59400-R]"",
    Funding-Text = ""We want to express our gratitude to the Spanish Government, as the authors are funded in part by it, through project TIN2014-59400-R. We would also thank Alexander Serebrenik and Marcos Roman-Gonzalez for their feedback and help."",
    Number-of-Cited-References = ""48"",
    Times-Cited = ""55"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""7"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""GG5XA"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000432767900014"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm	https://www.webofscience.com/wos/woscc/full-record/WOS:000432767900014	ELSEVIER	nan; References
539	TrustSE	Adapting usability techniques for application in open source Software: A multiple case study														2						
540	TrustSE	Uncertainty in information system development: Causes, effects, and coping mechanisms														2						
541	TrustSE	Reliability prediction for component-based software architectures	One of the motivations for specifying software architectures explicitly is the use of high level structural design information for improved control and prediction of software system quality attributes. In this paper, we present an approach for determining the reliability of component-based software architectures. Our method is based on rich architecture definition language (RADL) oriented towards modem industrial middleware platforms, such as Microsoft's. NET and Sun's EJB. Our methods involve parameterised contractual specifications based on state machines and thus permits efficient static analysis. We show how RADL allows software architects to predict component reliability through compositional analysis of usage profiles and of environment component reliability. We illustrate our approach with an e-commerce example and report about empirical measurements which confirm our analytical reliability prediction through monitoring in our reliability test-bed. Our evaluation confirms that prediction accuracy for software components necessitates modelling the behaviour of binary components and the dependency of provided services on required components. Fortunately, our measurements also show that an abstract protocol, view of that behaviour is sufficient to predict reliability with high accuracy. The reliability of a component most strongly depends on its environment. Therefore, we advocate a reliability model parameterized by required component reliability in a deployment context.	reliability; availability; component-based software; software architecture; reliability;  availability;  component-based software;  software architecture	Reussner, RH; Schmidt, HW; Poernomo, IH	JOURNAL OF SYSTEMS AND SOFTWARE	https://doi.org/10.1016/S0164-1212(02)00080-8		241-252	"""@article{WOS:000183568400006,
    Author = ""Reussner, RH and Schmidt, HW and Poernomo, IH"",
    Title = ""Reliability prediction for component-based software architectures"",
    Journal = ""JOURNAL OF SYSTEMS AND SOFTWARE"",
    Year = ""2003"",
    Volume = ""66"",
    Number = ""3"",
    Pages = ""241-252"",
    Month = ""JUN 15"",
    Abstract = ""One of the motivations for specifying software architectures explicitly is the use of high level structural design information for improved control and prediction of software system quality attributes. In this paper, we present an approach for determining the reliability of component-based software architectures. Our method is based on rich architecture definition language (RADL) oriented towards modem industrial middleware platforms, such as Microsoft's. NET and Sun's EJB. Our methods involve parameterised contractual specifications based on state machines and thus permits efficient static analysis. We show how RADL allows software architects to predict component reliability through compositional analysis of usage profiles and of environment component reliability. We illustrate our approach with an e-commerce example and report about empirical measurements which confirm our analytical reliability prediction through monitoring in our reliability test-bed. Our evaluation confirms that prediction accuracy for software components necessitates modelling the behaviour of binary components and the dependency of provided services on required components. Fortunately, our measurements also show that an abstract protocol, view of that behaviour is sufficient to predict reliability with high accuracy. The reliability of a component most strongly depends on its environment. Therefore, we advocate a reliability model parameterized by required component reliability in a deployment context. (C) 2002 Elsevier Science Inc. All rights reserved."",
    Publisher = ""ELSEVIER SCIENCE INC"",
    Address = ""360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Monash Univ, Sch Comp Sci \\& Software Engn, 900 Dandenong Rd,3145, Caulfield, Vic 3800, Australia. Monash Univ, Sch Comp Sci \\& Software Engn, Caulfield, Vic 3800, Australia. Distributed Syst Technol Ctr, Melbourne, Vic, Australia."",
    DOI = ""10.1016/S0164-1212(02)00080-8"",
    ISSN = ""0164-1212"",
    EISSN = ""1873-1228"",
    Keywords = ""reliability; availability; component-based software; software architecture"",
    Keywords-Plus = ""MODEL"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Software Engineering; Computer Science, Theory \\& Methods"",
    Author-Email = ""reussner@dstc.monash.edu.au heinz.schmidt@monash.edu.au imanp@dstc.monash.edu.au"",
    Affiliations = ""Monash University"",
    ORCID-Numbers = ""Reussner, Ralf/0000-0002-9308-6290 Schmidt, Heinrich (Heinz) Wilhelm/0000-0001-6278-4793"",
    Number-of-Cited-References = ""27"",
    Times-Cited = ""148"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Syst. Softw."",
    Doc-Delivery-Number = ""690UL"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000183568400006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Reliability prediction for component-based software architectures	https://www.webofscience.com/wos/woscc/full-record/WOS:000183568400006	ELSEVIER SCIENCE INC	nan; References
542	TrustSE	Characterizing the contribution of quality requirements to software sustainability														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
543	TrustSE	Trustworthy data: A survey, taxonomy and future trends of secure provenance schemes	Data is a valuable asset for the success of business and organizations these days, as it is effectively utilized for decision making, risk assessment, prioritizing the goals and performance evaluation. Extreme reliance on data demands quality assurance and trust on processes. Data Provenance is information that can be used to reason about the current state of a data object. Provenance can be broadly described as the information that explains where a piece of data object came from, how it was derived or created, who was involved in said creation, manipulations involved, processes applied, etc. It consists of information that had an effect on the data, evolving to its present state. Provenance has been used widely for the authenticity of data and processes. Despite having such a wide range of uses and applications, provenance poses vexing privacy and integrity challenges. Provenance data itself is, therefore, critical and it must be secured. Over the years, a number of secure provenance schemes have been proposed. This paper aims to enhance the understanding of secure provenance schemes and its associated security issues. In this paper, we have discussed why secure provenance is needed, what are its essential characteristics, and what objectives it serves? We describe the lifecycle of secure provenance and highlighted how trust is achieved in different domains by its application. Firstly, a detailed taxonomy of existing secure provenance schemes is presented. Then, a comparative analysis of existing secure provenance schemes, which highlights their strengths and weaknesses is also provided. Furthermore; we highlight future trends, which should be focused upon by the research community.	Secure provenance; Trustworthy data; Forensics; Security and privacy; Cloud computing; Wireless sensor networks; Secure provenance;  Trustworthy data;  Forensics;  Security and privacy;  Cloud computing;  Wireless sensor networks	Zafar, Faheem; Khan, Abid; Suhail, Saba; Ahmed, Idrees; Hameed, Khizar; Khan, Hayat Mohammad; Jabeen, Farhana; Anjum, Adeel	JOURNAL OF NETWORK AND COMPUTER APPLICATIONS	https://doi.org/10.1016/j.jnca.2017.06.003		50-68	"""@article{WOS:000411537100003,
    Author = ""Zafar, Faheem and Khan, Abid and Suhail, Saba and Ahmed, Idrees and Hameed, Khizar and Khan, Hayat Mohammad and Jabeen, Farhana and Anjum, Adeel"",
    Title = ""Trustworthy data: A survey, taxonomy and future trends of secure provenance schemes"",
    Journal = ""JOURNAL OF NETWORK AND COMPUTER APPLICATIONS"",
    Year = ""2017"",
    Volume = ""94"",
    Pages = ""50-68"",
    Month = ""SEP 15"",
    Abstract = ""Data is a valuable asset for the success of business and organizations these days, as it is effectively utilized for decision making, risk assessment, prioritizing the goals and performance evaluation. Extreme reliance on data demands quality assurance and trust on processes. Data Provenance is information that can be used to reason about the current state of a data object. Provenance can be broadly described as the information that explains where a piece of data object came from, how it was derived or created, who was involved in said creation, manipulations involved, processes applied, etc. It consists of information that had an effect on the data, evolving to its present state. Provenance has been used widely for the authenticity of data and processes. Despite having such a wide range of uses and applications, provenance poses vexing privacy and integrity challenges. Provenance data itself is, therefore, critical and it must be secured. Over the years, a number of secure provenance schemes have been proposed. This paper aims to enhance the understanding of secure provenance schemes and its associated security issues. In this paper, we have discussed why secure provenance is needed, what are its essential characteristics, and what objectives it serves? We describe the lifecycle of secure provenance and highlighted how trust is achieved in different domains by its application. Firstly, a detailed taxonomy of existing secure provenance schemes is presented. Then, a comparative analysis of existing secure provenance schemes, which highlights their strengths and weaknesses is also provided. Furthermore; we highlight future trends, which should be focused upon by the research community."",
    Publisher = ""ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD"",
    Address = ""24-28 OVAL RD, LONDON NW1 7DX, ENGLAND"",
    Type = ""Review"",
    Language = ""English"",
    Affiliation = ""Zafar, F (Corresponding Author), COMSATS Inst Informat Technol, Dept Comp Sci, Islamabad, Pakistan. Zafar, Faheem; Khan, Abid; Ahmed, Idrees; Khan, Hayat Mohammad; Jabeen, Farhana; Anjum, Adeel, COMSATS Inst Informat Technol, Dept Comp Sci, Islamabad, Pakistan. Suhail, Saba, Kyung Hee Univ, Yongin, South Korea. Hameed, Khizar, Univ Management \\& Technol, Dept Comp Sci \\& Elect Engn, Sialkot, Pakistan."",
    DOI = ""10.1016/j.jnca.2017.06.003"",
    ISSN = ""1084-8045"",
    Keywords = ""Secure provenance; Trustworthy data; Forensics; Security and privacy; Cloud computing; Wireless sensor networks"",
    Keywords-Plus = ""AUTOMATIC CAPTURE; COLLECTION; FRAMEWORK"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Hardware \\& Architecture; Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering"",
    Author-Email = ""faheemiiui@gmail.com abidkhan@comsats.edu.pk sabah@khu.ac.kr idrees.ciit@gmail.com khizer@skt.umt.edu.pk hayatkh@hotmail.com farhanakhan@comsats.edu.pk adeel.anjum@comsats.edu.pk"",
    Affiliations = ""COMSATS University Islamabad (CUI); Kyung Hee University; University of Management \\& Technology (UMT)"",
    ResearcherID-Numbers = ""Khizar, Khizar/ABG-5431-2020 Khan, Abid/V-1488-2019 Anjum, Adeel/L-4391-2013"",
    ORCID-Numbers = ""Ahmed, Idrees/0000-0003-0090-5478 jabeen, farhana/0000-0001-5420-4103 Khan, Abid/0000-0003-2712-1956 Khizar, Dr/0000-0003-1203-2010"",
    Number-of-Cited-References = ""115"",
    Times-Cited = ""57"",
    Usage-Count-Last-180-days = ""1"",
    Usage-Count-Since-2013 = ""19"",
    Journal-ISO = ""J. Netw. Comput. Appl."",
    Doc-Delivery-Number = ""FH9MV"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000411537100003"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Trustworthy data: A survey, taxonomy and future trends of secure provenance schemes	https://www.webofscience.com/wos/woscc/full-record/WOS:000411537100003	ACADEMIC PRESS LTD- ELSEVIER SCIENCE LTD	nan; References
544	TrustSE	R<SUP>2</SUP>Trust, a reputation and risk based trust management framework for large-scale, fully decentralized overlay networks	Peer-to-peer (P2P) networking is widely used to exchange, contribute, or obtain files from any participating user. Building trust relationships between peers in a large-scale distributed P2P file-sharing system is a fundamental and challenging research topic. However, it is difficult to build a good trust relationship with the traditional mechanism. Recommendation based trust model from social relationship can be adopted to resolve the problem. But it faces the challenges of subjectivity, and experiential referral weighting. This paper presents R(2)Trust a robust Reputation and Risk evaluation based Trust management model. Our novel framework uses both reputation and risk to evaluate the trustworthiness of a peer and it is applicable for unstructured P2P networks. The model will evaluate peer trust values from direct interactions and peers referrals. R(2)Trust also distinguishes the credibility of peers. As a result, the aggregated trust value will filter out the noises and reflect more accurate trust values. The proposed R(2)Trust can also defense against several malicious attacks, such as simple malicious attacks, collusive attacks, and strategic attacks. Our experimental results show that, compared to the existing trust models, our model is cleanly a winner when security is the major concern of a system.	Peer-to-Peer; Trust; Reputation; Credibility; Peer-to-Peer;  Trust;  Reputation;  Credibility	Tian, Chunqi; Yang, Baijian	FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE	https://doi.org/10.1016/j.future.2011.03.006		1135-1141	"""@article{WOS:000294521200014,
    Author = ""Tian, Chunqi and Yang, Baijian"",
    Title = ""R<SUP>2</SUP>Trust, a reputation and risk based trust management framework for large-scale, fully decentralized overlay networks"",
    Journal = ""FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE"",
    Year = ""2011"",
    Volume = ""27"",
    Number = ""8"",
    Pages = ""1135-1141"",
    Month = ""OCT"",
    Abstract = ""Peer-to-peer (P2P) networking is widely used to exchange, contribute, or obtain files from any participating user. Building trust relationships between peers in a large-scale distributed P2P file-sharing system is a fundamental and challenging research topic. However, it is difficult to build a good trust relationship with the traditional mechanism. Recommendation based trust model from social relationship can be adopted to resolve the problem. But it faces the challenges of subjectivity, and experiential referral weighting. This paper presents R(2)Trust a robust Reputation and Risk evaluation based Trust management model. Our novel framework uses both reputation and risk to evaluate the trustworthiness of a peer and it is applicable for unstructured P2P networks. The model will evaluate peer trust values from direct interactions and peers referrals. R(2)Trust also distinguishes the credibility of peers. As a result, the aggregated trust value will filter out the noises and reflect more accurate trust values. The proposed R(2)Trust can also defense against several malicious attacks, such as simple malicious attacks, collusive attacks, and strategic attacks. Our experimental results show that, compared to the existing trust models, our model is cleanly a winner when security is the major concern of a system. (C) 2011 Elsevier By. All rights reserved."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Tian, CQ (Corresponding Author), Tongji Univ, Minist Educ, Key Lab Embedded Syst \\& Serv Comp, Shanghai 200092, Peoples R China. Tian, Chunqi, Tongji Univ, Minist Educ, Key Lab Embedded Syst \\& Serv Comp, Shanghai 200092, Peoples R China. Tian, Chunqi, Beijing Univ Posts \\& Telecommun, State Key Lab Networking \\& Switching, Beijing 100876, Peoples R China. Yang, Baijian, Ball State Univ, Dept Technol, Muncie, IN 47306 USA."",
    DOI = ""10.1016/j.future.2011.03.006"",
    ISSN = ""0167-739X"",
    EISSN = ""1872-7115"",
    Keywords = ""Peer-to-Peer; Trust; Reputation; Credibility"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Theory \\& Methods"",
    Author-Email = ""tianchunqi@163.com"",
    Affiliations = ""Tongji University; Beijing University of Posts \\& Telecommunications; Ball State University"",
    ResearcherID-Numbers = ""Yang, Baijian/L-6058-2018"",
    ORCID-Numbers = ""Yang, Baijian/0000-0003-4440-3701"",
    Funding-Acknowledgement = ""NSFC {[}60903194]; National Research Foundation for the Doctoral Program of Ministry of Education of China {[}200802471060]; State Key Laboratory of Networking and Switching (Beijing University of Posts and Telecommunications); Key Laboratory of Communication and Information System (Beijing Jiaotong University)"",
    Funding-Text = ""This research is partially supported by the NSFC Grant 60903194, the National Research Foundation for the Doctoral Program of Ministry of Education of China under Grant 200802471060 and Open Project of State Key Laboratory of Networking and Switching (Beijing University of Posts and Telecommunications), Key Laboratory of Communication and Information System (Beijing Jiaotong University). The authors thank the anonymous reviewers for their suggestion on how to improve the articles. Their comments were of great help."",
    Number-of-Cited-References = ""24"",
    Times-Cited = ""40"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""16"",
    Journal-ISO = ""Futur. Gener. Comp. Syst."",
    Doc-Delivery-Number = ""815JF"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED)"",
    Unique-ID = ""WOS:000294521200014"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		R2Trust, a reputation and risk based trust management framework for large-scale, fully decentralized overlay networks	https://www.webofscience.com/wos/woscc/full-record/WOS:000294521200014	ELSEVIER	nan; References
545	TrustSE	A revised open source usability defect classification taxonomy														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
546	TrustSE	Trusted Product Lines														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
547	TrustSE	Trust in the information society														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
548	TrustSE	Understanding reuse of software examples: A case study of prejudice in a community of practice	Context: The context of this research is software developers' perceptions about the use of code examples in professional software development. Objective: The primary objective of this paper is to identify the human factors that dominate example usage among professional software developers, and to provide a theory that explains these factors. Method: To achieve this goal, we analyzed the perceptions of professional software developers as manifested on LinkedIn online community. We analyzed the data qualitatively using adapted grounded theory research procedures. Results: The research yields an initial framework of key factors that dominate professional developers' perception regarding example usage. We use the theoretical lens of prejudice theory to put these factors in a broader context, and outline initial recommendations to address these factors in professional organizational context. Conclusion: The results of this work, in particular the use of qualitative techniques - allowed us to obtain rich insight into key human factors that affect professional software developers, and enrich the body of literature on the issues of reuse. These factors need to be taken into account as part of an organizational reuse strategy.	LinkedIn; Qualitative research; Grounded theory; Virtual focus group; Human aspects; Open source development; LinkedIn;  Qualitative research;  Grounded theory;  Virtual focus group;  Human aspects;  Open source development	Barzilay, Ohad; Urquhart, Cathy	INFORMATION AND SOFTWARE TECHNOLOGY	https://doi.org/10.1016/j.infsof.2014.02.013		1613-1628	"""@article{WOS:000341903100006,
    Author = ""Barzilay, Ohad and Urquhart, Cathy"",
    Title = ""Understanding reuse of software examples: A case study of prejudice in a community of practice"",
    Journal = ""INFORMATION AND SOFTWARE TECHNOLOGY"",
    Year = ""2014"",
    Volume = ""56"",
    Number = ""12, SI"",
    Pages = ""1613-1628"",
    Month = ""DEC"",
    Abstract = ""Context: The context of this research is software developers' perceptions about the use of code examples in professional software development. Objective: The primary objective of this paper is to identify the human factors that dominate example usage among professional software developers, and to provide a theory that explains these factors. Method: To achieve this goal, we analyzed the perceptions of professional software developers as manifested on LinkedIn online community. We analyzed the data qualitatively using adapted grounded theory research procedures. Results: The research yields an initial framework of key factors that dominate professional developers' perception regarding example usage. We use the theoretical lens of prejudice theory to put these factors in a broader context, and outline initial recommendations to address these factors in professional organizational context. Conclusion: The results of this work, in particular the use of qualitative techniques - allowed us to obtain rich insight into key human factors that affect professional software developers, and enrich the body of literature on the issues of reuse. These factors need to be taken into account as part of an organizational reuse strategy. (c) 2014 Published by Elsevier B.V."",
    Publisher = ""ELSEVIER"",
    Address = ""RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS"",
    Type = ""Article"",
    Language = ""English"",
    Affiliation = ""Barzilay, O (Corresponding Author), Tel Aviv Univ, Recanati Bldg, IL-69978 Tel Aviv, Israel. Barzilay, Ohad, Tel Aviv Univ, IL-69978 Tel Aviv, Israel. Urquhart, Cathy, Manchester Metropolitan Univ, Manchester M15 6BH, Lancs, England."",
    DOI = ""10.1016/j.infsof.2014.02.013"",
    ISSN = ""0950-5849"",
    EISSN = ""1873-6025"",
    Keywords = ""LinkedIn; Qualitative research; Grounded theory; Virtual focus group; Human aspects; Open source development"",
    Keywords-Plus = ""KNOWLEDGE MANAGEMENT; GROUP VARIABILITY; EGO-DEPLETION; IN-GROUP; SELF; INGROUP; SYSTEMS; DEFINITION; SUCCESS; MODELS"",
    Research-Areas = ""Computer Science"",
    Web-of-Science-Categories = ""Computer Science, Information Systems; Computer Science, Software Engineering"",
    Author-Email = ""ohadbr@tau.ac.il c.urquhart@mmu.ac.uk"",
    Affiliations = ""Tel Aviv University; Manchester Metropolitan University"",
    ResearcherID-Numbers = ""Urquhart, Cathy/HLQ-1865-2023"",
    Number-of-Cited-References = ""114"",
    Times-Cited = ""11"",
    Usage-Count-Last-180-days = ""0"",
    Usage-Count-Since-2013 = ""42"",
    Journal-ISO = ""Inf. Softw. Technol."",
    Doc-Delivery-Number = ""AP2LG"",
    Web-of-Science-Index = ""Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)"",
    Unique-ID = ""WOS:000341903100006"",
    DA = ""2024-10-11""
}
"""						2	Web of Science		Understanding reuse of software examples: A case study of prejudice in a community of practice	https://www.webofscience.com/wos/woscc/full-record/WOS:000341903100006	ELSEVIER	nan; References
549	TrustSE	Recommendations to the Adoption of New Software Practices: A Case Study of Team Intention and Behavior in Three Software Companies	It is believed that people consider the implications of their actions and act based on a reasonable assessment of those implications. In this context, belief can be defined as a state of mind that embodies trust and confidence in something. So, behavior is driven by what is believed, by what is culturally assumed to be true about the world. Our work aims to study and characterize a belief system of software project teams to understand the beliefs underlying an intention or practice, and seek answers about how people progress from intention to behavior in software engineering environments. We applied a behavioral theory in terms of organizational and team level factors associated to beliefs about the software development practices. A set of interviews on origins, sources and impacts of beliefs on software practices was conducted with professionals from different project teams and companies. The results point out a strong influence of past experiences and repeated behavior on software development practices of project teams. Also, we list a set of practical recommendations for software companies that are dealing with the challenges of adopting new practices on software projects.	Software; Companies; Context; Interviews; Software engineering; Certification; Adoption Of Practices; Software Companies; Team Behavior; Software Development; Project Team; State Of Mind; Software Engineering; Team Level; Software Projects; Team Members; Organizational Culture; Behavioral Intention; Project Management; Organizational Context; Industrial Practice; Subjective Norms; Theory Of Planned Behavior; Industrial Context; Practice Team; Production Team; Adoption Of New Practices; Project Context; Agile Development; Industrial Case Study; Software Industry; Software Teams; Strength Of Belief; Promising Practices; Agilent Model; Development Centre; belief system; attitude; behavior; planned behavior; perceived behavioral control; software development practice	Carol Passos; Daniela S. Cruzes; Arthur Hayne; Manoel Mendonca	2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement	https://doi.org/10.1109/ESEM.2013.31	"1.Aguirre, J., Speer, N. ""Examining the relationship between beliefs and goals in teacher practice"". Journal of Mathematical Behavior, 3 (18): 327-356, 2000. CrossRef  Google Scholar; 2.Ajzen, I. ""From intentions to actions: A theory of planned behavior"". In J. Kuhl  Beckman (Eds.), Action control: From cognition to behavior (pp. 11-39). Berlin: Springer-Verlag, 1985. CrossRef  Google Scholar; 3.Ajzen, I. ""The Theory of Planned Behavior"". Organizational Behavior and Human Decision Processes, 50(2):179-211, 1991. CrossRef  Google Scholar; 4.Ajzen, I, Fishbein, M. ""Understanding attitudes and predicting social behavior"", 1st ed. USA: Prentice Hall (Englewood Cliffs, N.J.), 1980. Google Scholar; 5.Ajzen, I., Fishbein, M. ""The influence of attitudes on behavior"". In D. Albarracin, B. T. Johnson,  P. Zanna (Eds.), The handbook of attitudes. pp. 173-221). Mahwah, NJ: Erlbaum, 2005. CrossRef  Google Scholar; 6.Ajzen, I., Gilbert Cote, N. ""Attitudes and the prediction of behavior"". In W. D. Crano  Prislin (Eds.), Attitudes and attitude change (pp. 289-311). New York: Psychology Press, 2008. Google Scholar; 7.Becker, T., Randall, D., Riegel, C. ""The multidimensional view of commitment and the theory of reasoned action: a comparative evaluation"". JOM, 21(4): 617-638, 1995. CrossRef  Google Scholar; 8.Blank, M., Hennessy, M. ""A reasoned action approach to hiv prevention for persons with serious mental illness"". The ANNALS of the American Academy of Political and Social Science, 640, March, 2012. CrossRef  Google Scholar; 9.Cohen, S. ""Designing effective self-managing work teams"". Proc. of Theory Symposium on Self-Managed Work Teams, Denton, Texas, USA, June, 1993. Google Scholar; 10.Douglas, N. And Wykowski, T. ""From Belief to Knowledge Achieving and Sustaining an Adaptive Culture in Organizations"", USA: CRC Press, 2010. CrossRef  Google Scholar; 11.Fishbein, M., Ajzen, I ""Belief, attitude, intention, and behavior: an introduction to theory and research"". MA: Addison-Wesley, 1975. Google Scholar; 12.Fishbein, M., Ajzen, I. ""Predicting and changing behavior: A reasoned action approach"" USA: Psychology Press, 2010. Google Scholar; 13.Funda SAVASCI-ACIKALIN. ""Teacher beliefs and practice in science education"". Asia-Pacific Forum on Science Learning and Teaching 10(1), article 12, June, 2009. Google Scholar; 14.Hennessy, M. ""Advancing Reasoned Action Theory (The ANNALS of the American Academy of Political and Social Science Series)"", USA: Sage, 2012. Google Scholar; 15.Kirkman, B., Rosen, B. ""Beyond self-management: antecedents and consequences of team empowerment"". The Academy of Management Journal, 42(1): 58-74, 1999 CrossRef  Google Scholar; 16.Kraft, P., Rise J., Sutton, S., Rosamb, E. ""Perceived difficulty in the theory of planned behaviour: perceived behavioural control or affective attitude?"". British Journal of Social Psychology, 44(3: 479-496, 2005. CrossRef  Google Scholar; 17.Kym, H., Park, W. ""The effect of cultural fit/misfit on the productivity and turnover of IS personnel"". Proc. of SIGCPR 92, New York, USA, 1992. CrossRef  Google Scholar; 18.Leseure, M., Bauer, J., Birdi, K., Neely, A., Denyer, D. ""Adoption of promising practices: a systematic review of the evidence"". International Journal of Management Reviews, 5/6(3/4), 169-190, 2004. CrossRef  Google Scholar; 19.Livari, J., Huisman, M. ""The relationship between organizational culture and the deployment of systems development methodologies"". MIS Quarterly, 31(1): 35-58, 2007. Google Scholar; 20.Livari, J., Livari, N. ""The relationship between organizational culture and the deployment of agile methods"". IST-5(53):509-520, 2011. Google Scholar; 21.Lutters, W.G., Seaman, C.B. ""Revealing actual documentation usage in software maintenance through war stories"". IST 1(49):576-587, 2007. CrossRef  Google Scholar; 22.Middlestadt, S. ""Beliefs underlying eating better and moving more: lessons learned from comparative salient belief elicitations with adults and youths"". The ANNALS of the American Academy of Political and Social Science, 640: 81, 2012 CrossRef  Google Scholar; 23.Montano, D.,Taplin, S. ""A Test of an expanded theory in reasoned action to predict mammography participation"". Social Science and Medicine, 32(6): 733-741, 1991. CrossRef  Google Scholar; 24.Omar, M., Syed-Abdullah, S., Yasin, A. ""The impact of agile approach on software engineering teams"". American Journal of Economics and Business Administration., 3(1): 12-17. 2011. CrossRef  Google Scholar; 25.Passos, C., Braun, P., Cruzes, D., Mendonca, M. ""Analyzing the impact of beliefs in software project practices"". Proc. of ESEM11, Banff-Alberta, Canada, September, 2011. View Article  Google Scholar; 26.Passos, C., Cruzes, D., Dyba, T., Mendonca, M. ""Challenges of applying ethnography to study software practices"". Proc. of ESEM12, Lund, Sweden, September, 2012. View Article  Google Scholar; 27.Passos, C., Cruzes, D., Mendonca M. ""Applying Theory of Reasoned Action in the Context of Software Development Practices: Insights into Team Intention and Behavior"". Proc. of EASE13, Porto de Galinhas, Brazil, 2013. CrossRef  Google Scholar; 28.Passos, C., Cruzes, D., Mendonca M. ""Beliefs Underlying Teams Intention and Practice: An Application of the Theory of Planned Behavior "". Proc. of ESELAW13, Montevideo, Uruguay, 2013. Google Scholar; 29.Peslak, A., Ceccucci, W., Sendall, P. ""An empirical study of social networking behavior using theory of reasoned action"". Proc. of CONISAR11, North Carolina, USA, November, 2011. Google Scholar; 30.Pfleeger, S. ""Understanding and improving technology transfer in software engineering"". Journal of Systems and Software, 47, 111-124, 1999. CrossRef  Google Scholar"								2	IEEE		Recommendations to the Adoption of New Software Practices: A Case Study of Team Intention and Behavior in Three Software Companies	https://ieeexplore.ieee.org/document/6681374	IEEE	nan; Pages; Year; Bibtex
550	TrustSE	Using reputation stable analysis patterns as model based software reuse	Reputation is the opinion (more technically, a social evaluation) of the public towards a person, a group of people, or an organization. In other words, reputation is the general estimation that the public has for a person or an institution. It is an important factor in many fields, like business, online communities or social status. It is also a subject of study in social, management and technological sciences. Its influence may range from competitive settings like markets to cooperative ones like firms, organizations, institutions and communities. Furthermore, reputation also acts on different levels of agency, individual and supra-individual. At the supra-individual level, it concerns groups, communities, collectives and abstract social entities (such as firms, corporations, organizations, countries, cultures and even civilizations). It affects phenomena of different scale, from everyday life to relationships between nations. Reputation is a fundamental instrument of social order, based upon distributed, spontaneous social control. As can be seen, there is nothing different in the way reputation is handled in any of those areas of application. In fact, reputation is the same in all of them. Therefore, the reason for the analysis of this concept, with the sole purpose of extracting its core knowledge, it is a worthwhile reason, especially if you are planning to reuse it in numerous applications, while still maintaining a cost effective nature.	Organizations; Stability analysis; Software; Portable media players; Context; Adaptation models; Stable Pattern; Software Reuse; Online Communities; Core Knowledge; Classification Model; Application Of Model; Challenging Task; General Pattern; Variety Of Domains; Good Reputation; Knowledge Map; Online Business; Personal Reputation; Industrial Objects; Apple Inc; Class Diagram; Reputation; Stable Analysis Patterns; Software Stability Model; Enduring Business Theme; Knowledge Map; Adaptability; Reuse	Mohamed E. Fayad; Charles A. Flood	2016 Future Technologies Conference (FTC)	https://doi.org/10.1109/FTC.2016.7821685	"1.M. E. Fayad, ""Stable Analysis Patterns for Software and Systems"" in , Boca Raton, FL:Auerbach Publications, July 2015. Google Scholar; 2.M.E. Fayad and A. Altman, ""Introduction to Software Stability"", Communications of the ACM 44, no. 9, September 2001. Google Scholar; 3.M.E. Fayad, ""Accomplishing Software Stability"", Communications of the ACM 45, no. 1, January 2002. CrossRef  Google Scholar; 4.M.E. Fayad, ""How to Deal with Software Stability"", Communications of ACM 45, no. 4, April 2002. CrossRef  Google Scholar; 5.M.E. Fayad, ""Software Stability: Timeless Architectures Systems of Patterns and Model-Based for Reuse"", IEEE Int. Conf. of Inform. Reuse and Integration Las Vegas, 2003. Google Scholar; 6.A. Mahdy and M.E. Fayad, ""A Software Stability Model Pattern"", in Pattern Language of Programs Monticello (PLoP2002), 2002. Google Scholar; 7.Cline. Marshall and Girou. Mike, ""Enduring Business Theme"", Communications of the ACM 43, no. 5, pp. 101-106, May 2000. Google Scholar; 8.M. E. Fayad, H. A. Sanchez, S. G. K. Hegde, A. Basia and A. Vakil, ""Software Patterns Knowledge Maps and Domain Analysis"" in , Boca Raton, FL:Auerbach Publications, December 2014. Google Scholar; 9.M.E. Fayad and M. Cline, ""Aspects of Software Adaptability"", Communications of the ACM, vol. 39, no. 10, pp. 58-59, October 1996. CrossRef  Google Scholar; 10.A. Mahdy, M.E. Fayad, H. Hamza and P. Tugnawat, ""Stable and Reusable Model-Based Architectures"", ECOOP 2002 Workshop on Model-based Software Reuse, June 2002. Google Scholar"								2	IEEE		Using reputation stable analysis patterns as model based software reuse	https://ieeexplore.ieee.org/document/7821685	IEEE	nan; Pages; Year; Bibtex
551	TrustSE	Improving the model development process: what use is model reuse: is there a crook at the end of the rainbow?	The emergence of new technologies in simulation modeling such as the World Wide Web has fostered debate on the reuse of models. In this paper we present a case for model reuse and the pot of gold that it promises. We then discuss model reuse from the viewpoint of simulation modelers who use COTS simulation packages and suggest that model reuse may in fact cost more than developing new models as candidates for reuse as trust must be established through thorough testing. An alternative to this is put forward that suggests that a Grab-and-Glue, Run, Reject, Reply (G<sup>2</sup> R<sup>3</sup>) approach is a more appropriate use of model reuse as it emphasizes the intellectual process of problem understanding rather than model correctness as an means to itself.		Paul, Ray J.; Taylor, Simon J. E.	WSC '02: Proceedings of the 34th conference on Winter simulation: exploring new frontiers	https://doi.org/10.5555/1030453.1030544		648-652	"""@inproceedings{10.5555/1030453.1030544,
    author = ""Paul, Ray J. and Taylor, Simon J. E."",
    title = ""Improving the model development process: what use is model reuse: is there a crook at the end of the rainbow?"",
    year = ""2002"",
    isbn = ""0780376153"",
    publisher = ""Winter Simulation Conference"",
    abstract = ""The emergence of new technologies in simulation modeling such as the World Wide Web has fostered debate on the reuse of models. In this paper we present a case for model reuse and the pot of gold that it promises. We then discuss model reuse from the viewpoint of simulation modelers who use COTS simulation packages and suggest that model reuse may in fact cost more than developing new models as candidates for reuse as trust must be established through thorough testing. An alternative to this is put forward that suggests that a Grab-and-Glue, Run, Reject, Reply (G<sup>2</sup> R<sup>3</sup>) approach is a more appropriate use of model reuse as it emphasizes the intellectual process of problem understanding rather than model correctness as an means to itself."",
    booktitle = ""Proceedings of the 34th Conference on Winter Simulation: Exploring New Frontiers"",
    pages = ""648-652"",
    numpages = ""5"",
    location = ""San Diego, California"",
    series = ""WSC '02""
}
"""						2	ACM		What use is model reuse: is there a crook at the end of the rainbow?	https://doi.org/10.5555/1030453.1030544	Winter Simulation Conference	nan; Keywords; References; Link
552	TrustSE	Trustie_a software development platform for Crowdsourcing														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
553	TrustSE	Categorizing developer information needs in software ecosystems	We present the results of an investigation into the nature of the information needs of software developers who work in projects that are part of larger ecosystems. In an open-question survey we asked framework and library developers about their information needs with respect to both their upstream and downstream projects. We investigated what kind of information is required, why is it necessary, and how the developers obtain this information. The results show that the downstream needs are grouped into three categories roughly corresponding to the different stages in their relation with an upstream: selection, adoption, and co-evolution. The less numerous upstream needs are grouped into two categories: project statistics and code usage. The current practices part of the study shows that to satisfy many of these needs developers use non-specific tools and ad hoc methods. We believe that this is a largely unexplored area of research.	Software ecosystems;  frameworks and libraries;  grounded theory;  open source software;  program comprehension;  programmer needs; Software ecosystems, frameworks and libraries, grounded theory, open source software, program comprehension, programmer needs	Haenni, Nicole; Lungu, Mircea; Schwarz, Niko; Nierstrasz, Oscar	WEA 2013: Proceedings of the 2013 International Workshop on Ecosystem Architectures	https://doi.org/10.1145/2501585.2501586		1-5	"""@inproceedings{10.1145/2501585.2501586,
    author = ""Haenni, Nicole and Lungu, Mircea and Schwarz, Niko and Nierstrasz, Oscar"",
    title = ""Categorizing developer information needs in software ecosystems"",
    year = ""2013"",
    isbn = ""9781450323147"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2501585.2501586"",
    doi = ""10.1145/2501585.2501586"",
    abstract = ""We present the results of an investigation into the nature of the information needs of software developers who work in projects that are part of larger ecosystems. In an open-question survey we asked framework and library developers about their information needs with respect to both their upstream and downstream projects. We investigated what kind of information is required, why is it necessary, and how the developers obtain this information. The results show that the downstream needs are grouped into three categories roughly corresponding to the different stages in their relation with an upstream: selection, adoption, and co-evolution. The less numerous upstream needs are grouped into two categories: project statistics and code usage. The current practices part of the study shows that to satisfy many of these needs developers use non-specific tools and ad hoc methods. We believe that this is a largely unexplored area of research."",
    booktitle = ""Proceedings of the 2013 International Workshop on Ecosystem Architectures"",
    pages = ""1-5"",
    numpages = ""5"",
    keywords = ""Software ecosystems, frameworks and libraries, grounded theory, open source software, program comprehension, programmer needs"",
    location = ""Saint Petersburg, Russia"",
    series = ""WEA 2013""
}
"""						2	ACM		Categorizing developer information needs in software ecosystems	https://doi.org/10.1145/2501585.2501586	Association for Computing Machinery	nan; References; Link
554	TrustSE	The power of propagation: on the role of software operation knowledge within software ecosystems	Knowledge of in-the-field software operation is still unrecognized as an essential pulse in the veins of software ecosystems. Although software-producing organizations are aware of the ecosystems in which they operate and their relationships with other ecosystem participants, all too often, vendors are unsuccessful in recognizing the potential value and role of such knowledge in their software ecosystems. This paper presents a classification of successful operational software ecosystem practices that may help software-producing organizations to effectively utilize and propagate knowledge of the in-the-field operation of their software, and therewith address challenges that result from ecosystem participation. Analysis of these practices confirms that infrastructures for acquisition, utilization and propagation of such knowledge, allow ecosystem participants to use the 'power of many' in increasing the quality and robustness of their software, and provide them with competitive advantage in terms of software quality, end-user satisfaction, ecosystem stability and ecosystem attractiveness.	ecosystem orchestration;  knowledge propagation;  software ecosystems;  software operation knowledge; ecosystem orchestration, knowledge propagation, software ecosystems, software operation knowledge	van der Schuur, Henk; Jansen, Slinger; Brinkkemper, Sjaak	MEDES '11: Proceedings of the International Conference on Management of Emergent Digital EcoSystems	https://doi.org/10.1145/2077489.2077503		76-84	"""@inproceedings{10.1145/2077489.2077503,
    author = ""van der Schuur, Henk and Jansen, Slinger and Brinkkemper, Sjaak"",
    title = ""The power of propagation: on the role of software operation knowledge within software ecosystems"",
    year = ""2011"",
    isbn = ""9781450310475"",
    publisher = ""Association for Computing Machinery"",
    address = ""New York, NY, USA"",
    url = ""https://doi.org/10.1145/2077489.2077503"",
    doi = ""10.1145/2077489.2077503"",
    abstract = ""Knowledge of in-the-field software operation is still unrecognized as an essential pulse in the veins of software ecosystems. Although software-producing organizations are aware of the ecosystems in which they operate and their relationships with other ecosystem participants, all too often, vendors are unsuccessful in recognizing the potential value and role of such knowledge in their software ecosystems. This paper presents a classification of successful operational software ecosystem practices that may help software-producing organizations to effectively utilize and propagate knowledge of the in-the-field operation of their software, and therewith address challenges that result from ecosystem participation. Analysis of these practices confirms that infrastructures for acquisition, utilization and propagation of such knowledge, allow ecosystem participants to use the 'power of many' in increasing the quality and robustness of their software, and provide them with competitive advantage in terms of software quality, end-user satisfaction, ecosystem stability and ecosystem attractiveness."",
    booktitle = ""Proceedings of the International Conference on Management of Emergent Digital EcoSystems"",
    pages = ""76-84"",
    numpages = ""9"",
    keywords = ""ecosystem orchestration, knowledge propagation, software ecosystems, software operation knowledge"",
    location = ""San Francisco, California"",
    series = ""MEDES '11""
}
"""						2	ACM		The power of propagation: on the role of software operation knowledge within software ecosystems	https://doi.org/10.1145/2077489.2077503	Association for Computing Machinery	nan; References; Link
555	TrustSE	Software ecosystems--A systematic literature review														2						nan; Title; Venue; Authors; Abstract; Keywords; References; Pages; Year; Bibtex; DOI; Source; Link; Publisher
